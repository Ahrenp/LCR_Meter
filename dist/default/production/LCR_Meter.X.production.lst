

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Jan 23 23:54:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           ; Version 1.40
    78                           ; Generated 01/12/2016 GMT
    79                           ; 
    80                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F25K22 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     
   112                           	psect	idataBANK0
   113  003300                     __pidataBANK0:
   114                           	opt stack 0
   115                           
   116                           ;initializer for _auto_range
   117  003300  01                 	db	1
   118                           
   119                           ;initializer for _range
   120  003301  02                 	db	2
   121                           
   122                           ;initializer for _toggle
   123  003302  FF                 	db	255
   124                           
   125                           	psect	smallconst
   126  000600                     __psmallconst:
   127                           	opt stack 0
   128  000600  00                 	db	0
   129  000601                     _dpowers:
   130                           	opt stack 0
   131  000601  0001               	dw	1
   132  000603  0000               	dw	0
   133  000605  000A               	dw	10
   134  000607  0000               	dw	0
   135  000609  0064               	dw	100
   136  00060B  0000               	dw	0
   137  00060D  03E8               	dw	1000
   138  00060F  0000               	dw	0
   139  000611  2710               	dw	10000
   140  000613  0000               	dw	0
   141  000615  86A0               	dw	34464
   142  000617  0001               	dw	1
   143  000619  4240               	dw	16960
   144  00061B  000F               	dw	15
   145  00061D  9680               	dw	38528
   146  00061F  0098               	dw	152
   147  000621  E100               	dw	57600
   148  000623  05F5               	dw	1525
   149  000625  CA00               	dw	51712
   150  000627  3B9A               	dw	15258
   151  000629                     __end_of_dpowers:
   152                           	opt stack 0
   153  000629                     __npowers_:
   154                           	opt stack 0
   155  000629  00                 	db	0
   156  00062A  80                 	db	128
   157  00062B  3F                 	db	63
   158  00062C  CD                 	db	205
   159  00062D  CC                 	db	204
   160  00062E  3D                 	db	61
   161  00062F  D7                 	db	215
   162  000630  23                 	db	35
   163  000631  3C                 	db	60
   164  000632  12                 	db	18
   165  000633  83                 	db	131
   166  000634  3A                 	db	58
   167  000635  B7                 	db	183
   168  000636  D1                 	db	209
   169  000637  38                 	db	56
   170  000638  C6                 	db	198
   171  000639  27                 	db	39
   172  00063A  37                 	db	55
   173  00063B  38                 	db	56
   174  00063C  86                 	db	134
   175  00063D  35                 	db	53
   176  00063E  C0                 	db	192
   177  00063F  D6                 	db	214
   178  000640  33                 	db	51
   179  000641  CC                 	db	204
   180  000642  2B                 	db	43
   181  000643  32                 	db	50
   182  000644  70                 	db	112
   183  000645  89                 	db	137
   184  000646  30                 	db	48
   185  000647  E7                 	db	231
   186  000648  DB                 	db	219
   187  000649  2E                 	db	46
   188  00064A  E5                 	db	229
   189  00064B  3C                 	db	60
   190  00064C  1E                 	db	30
   191  00064D  42                 	db	66
   192  00064E  A2                 	db	162
   193  00064F  0D                 	db	13
   194  000650                     __end_of__npowers_:
   195                           	opt stack 0
   196  000650                     __powers_:
   197                           	opt stack 0
   198  000650  00                 	db	0
   199  000651  80                 	db	128
   200  000652  3F                 	db	63
   201  000653  00                 	db	0
   202  000654  20                 	db	32
   203  000655  41                 	db	65
   204  000656  00                 	db	0
   205  000657  C8                 	db	200
   206  000658  42                 	db	66
   207  000659  00                 	db	0
   208  00065A  7A                 	db	122
   209  00065B  44                 	db	68
   210  00065C  40                 	db	64
   211  00065D  1C                 	db	28
   212  00065E  46                 	db	70
   213  00065F  50                 	db	80
   214  000660  C3                 	db	195
   215  000661  47                 	db	71
   216  000662  24                 	db	36
   217  000663  74                 	db	116
   218  000664  49                 	db	73
   219  000665  97                 	db	151
   220  000666  18                 	db	24
   221  000667  4B                 	db	75
   222  000668  BC                 	db	188
   223  000669  BE                 	db	190
   224  00066A  4C                 	db	76
   225  00066B  6B                 	db	107
   226  00066C  6E                 	db	110
   227  00066D  4E                 	db	78
   228  00066E  03                 	db	3
   229  00066F  15                 	db	21
   230  000670  50                 	db	80
   231  000671  79                 	db	121
   232  000672  AD                 	db	173
   233  000673  60                 	db	96
   234  000674  F3                 	db	243
   235  000675  49                 	db	73
   236  000676  71                 	db	113
   237  000677                     __end_of__powers_:
   238                           	opt stack 0
   239  000677                     _cal_current:
   240                           	opt stack 0
   241  000677  00                 	db	0
   242  000678  00                 	db	0
   243  000679  3F                 	db	63
   244  00067A  9A                 	db	154
   245  00067B  F9                 	db	249
   246  00067C  40                 	db	64
   247  00067D  DC                 	db	220
   248  00067E  D8                 	db	216
   249  00067F  42                 	db	66
   250  000680  70                 	db	112
   251  000681  8A                 	db	138
   252  000682  45                 	db	69
   253  000683  C0                 	db	192
   254  000684  DA                 	db	218
   255  000685  47                 	db	71
   256  000686                     __end_of_cal_current:
   257                           	opt stack 0
   258  000686                     _R1_BIT:
   259                           	opt stack 0
   260  000686  00                 	db	0
   261  000687  01                 	db	1
   262  000688  02                 	db	2
   263  000689  03                 	db	3
   264  00068A  04                 	db	4
   265  00068B                     __end_of_R1_BIT:
   266                           	opt stack 0
   267  00068B                     _RSET_BIT:
   268                           	opt stack 0
   269  00068B  02                 	db	2
   270  00068C  03                 	db	3
   271  00068D  03                 	db	3
   272  00068E  04                 	db	4
   273  00068F  05                 	db	5
   274  000690                     __end_of_RSET_BIT:
   275                           	opt stack 0
   276  000690                     STR_6:
   277  000690  0D                 	db	13
   278  000691  0A                 	db	10
   279  000692  53                 	db	83	;'S'
   280  000693  65                 	db	101	;'e'
   281  000694  74                 	db	116	;'t'
   282  000695  74                 	db	116	;'t'
   283  000696  69                 	db	105	;'i'
   284  000697  6E                 	db	110	;'n'
   285  000698  67                 	db	103	;'g'
   286  000699  20                 	db	32
   287  00069A  72                 	db	114	;'r'
   288  00069B  61                 	db	97	;'a'
   289  00069C  6E                 	db	110	;'n'
   290  00069D  67                 	db	103	;'g'
   291  00069E  65                 	db	101	;'e'
   292  00069F  20                 	db	32
   293  0006A0  3D                 	db	61	;'='
   294  0006A1  20                 	db	32
   295  0006A2  25                 	db	37
   296  0006A3  64                 	db	100	;'d'
   297  0006A4  0D                 	db	13
   298  0006A5  0A                 	db	10
   299  0006A6  00                 	db	0
   300  0006A7                     STR_5:
   301  0006A7  52                 	db	82	;'R'
   302  0006A8  61                 	db	97	;'a'
   303  0006A9  6E                 	db	110	;'n'
   304  0006AA  67                 	db	103	;'g'
   305  0006AB  65                 	db	101	;'e'
   306  0006AC  20                 	db	32
   307  0006AD  25                 	db	37
   308  0006AE  64                 	db	100	;'d'
   309  0006AF  20                 	db	32
   310  0006B0  28                 	db	40
   311  0006B1  25                 	db	37
   312  0006B2  64                 	db	100	;'d'
   313  0006B3  29                 	db	41
   314  0006B4  25                 	db	37
   315  0006B5  64                 	db	100	;'d'
   316  0006B6  20                 	db	32
   317  0006B7  25                 	db	37
   318  0006B8  63                 	db	99	;'c'
   319  0006B9  00                 	db	0
   320  0006BA                     STR_3:
   321  0006BA  43                 	db	67	;'C'
   322  0006BB  3D                 	db	61	;'='
   323  0006BC  45                 	db	69	;'E'
   324  0006BD  52                 	db	82	;'R'
   325  0006BE  52                 	db	82	;'R'
   326  0006BF  20                 	db	32
   327  0006C0  2F                 	db	47
   328  0006C1  20                 	db	32
   329  0006C2  4F                 	db	79	;'O'
   330  0006C3  56                 	db	86	;'V'
   331  0006C4  45                 	db	69	;'E'
   332  0006C5  52                 	db	82	;'R'
   333  0006C6  4C                 	db	76	;'L'
   334  0006C7  4F                 	db	79	;'O'
   335  0006C8  41                 	db	65	;'A'
   336  0006C9  44                 	db	68	;'D'
   337  0006CA  00                 	db	0
   338  0006CB  25                 	db	37
   339  0006CC  6C                 	db	108	;'l'
   340  0006CD  75                 	db	117	;'u'
   341  0006CE  2E                 	db	46
   342  0006CF  25                 	db	37
   343  0006D0  36                 	db	54	;'6'
   344  0006D1  2E                 	db	46
   345  0006D2  36                 	db	54	;'6'
   346  0006D3  6C                 	db	108	;'l'
   347  0006D4  75                 	db	117	;'u'
   348  0006D5  00                 	db	0
   349  0006D6                     STR_2:
   350  0006D6  43                 	db	67	;'C'
   351  0006D7  3D                 	db	61	;'='
   352  0006D8  25                 	db	37
   353  0006D9  31                 	db	49	;'1'
   354  0006DA  32                 	db	50	;'2'
   355  0006DB  2E                 	db	46
   356  0006DC  33                 	db	51	;'3'
   357  0006DD  66                 	db	102	;'f'
   358  0006DE  6E                 	db	110	;'n'
   359  0006DF  46                 	db	70	;'F'
   360  0006E0  00                 	db	0
   361  0006E1                     STR_4:
   362  0006E1  43                 	db	67	;'C'
   363  0006E2  3D                 	db	61	;'='
   364  0006E3  25                 	db	37
   365  0006E4  31                 	db	49	;'1'
   366  0006E5  32                 	db	50	;'2'
   367  0006E6  2E                 	db	46
   368  0006E7  30                 	db	48	;'0'
   369  0006E8  66                 	db	102	;'f'
   370  0006E9  70                 	db	112	;'p'
   371  0006EA  46                 	db	70	;'F'
   372  0006EB  00                 	db	0
   373  0006EC                     STR_1:
   374  0006EC  43                 	db	67	;'C'
   375  0006ED  3D                 	db	61	;'='
   376  0006EE  25                 	db	37
   377  0006EF  31                 	db	49	;'1'
   378  0006F0  32                 	db	50	;'2'
   379  0006F1  2E                 	db	46
   380  0006F2  36                 	db	54	;'6'
   381  0006F3  66                 	db	102	;'f'
   382  0006F4  75                 	db	117	;'u'
   383  0006F5  46                 	db	70	;'F'
   384  0006F6  00                 	db	0
   385                           
   386                           ; #config settings
   387  0006F7  00                 	db	0	; dummy byte at the end
   388  0000                     
   389                           	psect	nvCOMRAM
   390  00005C                     __pnvCOMRAM:
   391                           	opt stack 0
   392  00005C                     _timer0ReloadVal:
   393                           	opt stack 0
   394  00005C                     	ds	2
   395                           
   396                           	psect	nvBANK1
   397  000104                     __pnvBANK1:
   398                           	opt stack 0
   399  000104                     _TMR0_InterruptHandler:
   400                           	opt stack 0
   401  000104                     	ds	2
   402  0000                     _ANSELA	set	3896
   403  0000                     _ANSELB	set	3897
   404  0000                     _ANSELC	set	3898
   405  0000                     _BAUDCON1	set	4024
   406  0000                     _INTCON2bits	set	4081
   407  0000                     _INTCON3bits	set	4080
   408  0000                     _INTCONbits	set	4082
   409  0000                     _LATA	set	3977
   410  0000                     _LATAbits	set	3977
   411  0000                     _LATB	set	3978
   412  0000                     _LATC	set	3979
   413  0000                     _LATCbits	set	3979
   414  0000                     _OSCCON	set	4051
   415  0000                     _OSCCON2	set	4050
   416  0000                     _OSCTUNE	set	3995
   417  0000                     _PIR1bits	set	3998
   418  0000                     _RCONbits	set	4048
   419  0000                     _RCREG1	set	4014
   420  0000                     _RCSTA1	set	4011
   421  0000                     _RCSTA1bits	set	4011
   422  0000                     _SPBRG1	set	4015
   423  0000                     _SPBRGH1	set	4016
   424  0000                     _T0CON	set	4053
   425  0000                     _T0CONbits	set	4053
   426  0000                     _TMR0H	set	4055
   427  0000                     _TMR0L	set	4054
   428  0000                     _TRISA	set	3986
   429  0000                     _TRISB	set	3987
   430  0000                     _TRISC	set	3988
   431  0000                     _TXREG1	set	4013
   432  0000                     _TXSTA1	set	4012
   433  0000                     _WPUB	set	3937
   434                           
   435                           	psect	cinit
   436  002FC4                     __pcinit:
   437                           	opt stack 0
   438  002FC4                     start_initialization:
   439                           	opt stack 0
   440  002FC4                     __initialization:
   441                           	opt stack 0
   442                           
   443                           ; Initialize objects allocated to BANK0 (3 bytes)
   444                           ; load TBLPTR registers with __pidataBANK0
   445  002FC4  0E00               	movlw	low __pidataBANK0
   446  002FC6  6EF6               	movwf	tblptrl,c
   447  002FC8  0E33               	movlw	high __pidataBANK0
   448  002FCA  6EF7               	movwf	tblptrh,c
   449  002FCC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   450  002FCE  6EF8               	movwf	tblptru,c
   451  002FD0  0009               	tblrd		*+	;fetch initializer
   452  002FD2  CFF5 F0CD          	movff	tablat,__pdataBANK0
   453  002FD6  0009               	tblrd		*+	;fetch initializer
   454  002FD8  CFF5 F0CE          	movff	tablat,__pdataBANK0+1
   455  002FDC  0009               	tblrd		*+	;fetch initializer
   456  002FDE  CFF5 F0CF          	movff	tablat,__pdataBANK0+2
   457                           
   458                           ; Clear objects allocated to BANK0 (24 bytes)
   459  002FE2  EE00  F0B5         	lfsr	0,__pbssBANK0
   460  002FE6  0E18               	movlw	24
   461  002FE8                     clear_0:
   462  002FE8  6AEE               	clrf	postinc0,c
   463  002FEA  06E8               	decf	wreg,f,c
   464  002FEC  E1FD               	bnz	clear_0
   465                           
   466                           ; Clear objects allocated to COMRAM (1 bytes)
   467  002FEE  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   468  002FF0                     end_of_initialization:
   469                           	opt stack 0
   470  002FF0                     __end_of__initialization:
   471                           	opt stack 0
   472  002FF0  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   473  002FF2  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   474  002FF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   475  002FF6  6EF8               	movwf	tblptru,c
   476  002FF8  0100               	movlb	0
   477  002FFA  EF0B  F019         	goto	_main	;jump to C main() function
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           
   485                           	psect	bssCOMRAM
   486  00005E                     __pbssCOMRAM:
   487                           	opt stack 0
   488  00005E                     _cal_mode:
   489                           	opt stack 0
   490  00005E                     	ds	1
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           
   498                           	psect	bssBANK0
   499  0000B5                     __pbssBANK0:
   500                           	opt stack 0
   501  0000B5                     _result:
   502                           	opt stack 0
   503  0000B5                     	ds	3
   504  0000B8                     _reading:
   505                           	opt stack 0
   506  0000B8                     	ds	2
   507  0000BA                     _av_count:
   508                           	opt stack 0
   509  0000BA                     	ds	1
   510  0000BB                     _stored_range:
   511                           	opt stack 0
   512  0000BB                     	ds	1
   513  0000BC                     ftoa@buf:
   514                           	opt stack 0
   515  0000BC                     	ds	17
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           
   523                           	psect	dataBANK0
   524  0000CD                     __pdataBANK0:
   525                           	opt stack 0
   526  0000CD                     _auto_range:
   527                           	opt stack 0
   528  0000CD                     	ds	1
   529  0000CE                     _range:
   530                           	opt stack 0
   531  0000CE                     	ds	1
   532  0000CF                     _toggle:
   533                           	opt stack 0
   534  0000CF                     	ds	1
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           
   542                           	psect	cstackBANK1
   543  000100                     __pcstackBANK1:
   544                           	opt stack 0
   545  000100                     __lcd_Port@a:
   546                           	opt stack 0
   547  000100                     TMR0_SetInterruptHandler@InterruptHandler:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x0
   551  000100                     	ds	1
   552  000101                     ??_lcd_sendCommand:
   553                           
   554                           ; 1 bytes @ 0x1
   555  000101                     	ds	1
   556  000102                     ??_TMR0_Initialize:
   557  000102                     lcd_sendCommand@a:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x2
   561  000102                     	ds	1
   562  000103                     ??_lcd_init:
   563  000103                     
   564                           ; 1 bytes @ 0x3
   565  000103                     	ds	1
   566  000104                     tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           
   573                           ; 1 bytes @ 0x4
   574                           
   575                           	psect	cstackBANK0
   576  000060                     __pcstackBANK0:
   577                           	opt stack 0
   578  000060                     __doprnt$1659:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x0
   582  000060                     	ds	3
   583  000063                     __doprnt@cp:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x3
   587  000063                     	ds	2
   588  000065                     __doprnt@len:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x5
   592  000065                     	ds	2
   593  000067                     __doprnt@flag:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x7
   597  000067                     	ds	2
   598  000069                     __doprnt@exp:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x9
   602  000069                     	ds	2
   603  00006B                     __doprnt@val:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0xB
   607  00006B                     	ds	4
   608  00006F                     __doprnt@width:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0xF
   612  00006F                     	ds	2
   613  000071                     __doprnt@tmpval:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x11
   617  000071                     	ds	4
   618  000075                     __doprnt@fval:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x15
   622  000075                     	ds	3
   623  000078                     __doprnt@prec:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x18
   627  000078                     	ds	2
   628  00007A                     __doprnt@c:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x1A
   632  00007A                     	ds	1
   633  00007B                     ?_sprintf:
   634                           	opt stack 0
   635  00007B                     ?_printf:
   636                           	opt stack 0
   637  00007B                     printf@f:
   638                           	opt stack 0
   639  00007B                     sprintf@wh:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1B
   643  00007B                     	ds	2
   644  00007D                     sprintf@f:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1D
   648  00007D                     	ds	10
   649  000087                     UpdateDisplay@range_string:
   650                           	opt stack 0
   651                           
   652                           ; 16 bytes @ 0x27
   653  000087                     	ds	16
   654  000097                     UpdateDisplay@cap_string:
   655                           	opt stack 0
   656                           
   657                           ; 16 bytes @ 0x37
   658  000097                     	ds	16
   659  0000A7                     ??_INTERRUPT_InterruptManager:
   660                           
   661                           ; 1 bytes @ 0x47
   662  0000A7                     	ds	14
   663                           tblptru	equ	0xFF8
   664                           tblptrh	equ	0xFF7
   665                           tblptrl	equ	0xFF6
   666                           tablat	equ	0xFF5
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           
   670                           	psect	cstackCOMRAM
   671  000001                     __pcstackCOMRAM:
   672                           	opt stack 0
   673  000001                     ??_isdigit:
   674  000001                     ??_SetRange:
   675  000001                     ?_TMR0_ReadTimer:
   676                           	opt stack 0
   677  000001                     ?___awmod:
   678                           	opt stack 0
   679  000001                     ?___ftpack:
   680                           	opt stack 0
   681  000001                     ?___ftneg:
   682                           	opt stack 0
   683  000001                     ?__tdiv_to_l_:
   684                           	opt stack 0
   685  000001                     ?__div_to_l_:
   686                           	opt stack 0
   687  000001                     ?___lldiv:
   688                           	opt stack 0
   689  000001                     EUSART1_Write@txData:
   690                           	opt stack 0
   691  000001                     i2__lcd_Port@a:
   692                           	opt stack 0
   693  000001                     ___awmod@dividend:
   694                           	opt stack 0
   695  000001                     __div_to_l_@f1:
   696                           	opt stack 0
   697  000001                     ___ftpack@arg:
   698                           	opt stack 0
   699  000001                     __tdiv_to_l_@f1:
   700                           	opt stack 0
   701  000001                     ___ftge@ff1:
   702                           	opt stack 0
   703  000001                     ___ftneg@f1:
   704                           	opt stack 0
   705  000001                     ___lldiv@dividend:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x0
   709  000001                     	ds	1
   710  000002                     ??i2_lcd_sendCommand:
   711  000002                     putch@txData:
   712                           	opt stack 0
   713  000002                     lcd_sendChar@temp:
   714                           	opt stack 0
   715  000002                     _isdigit$1203:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x1
   719  000002                     	ds	1
   720  000003                     ??_TMR0_ReadTimer:
   721  000003                     lcd_sendChar@y:
   722                           	opt stack 0
   723  000003                     isdigit@c:
   724                           	opt stack 0
   725  000003                     i2lcd_sendCommand@a:
   726                           	opt stack 0
   727  000003                     ___awmod@divisor:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x2
   731  000003                     	ds	1
   732  000004                     lcd_setPosition@y:
   733                           	opt stack 0
   734  000004                     lcd_sendChar@a:
   735                           	opt stack 0
   736  000004                     ___ftpack@exp:
   737                           	opt stack 0
   738  000004                     __div_to_l_@f2:
   739                           	opt stack 0
   740  000004                     __tdiv_to_l_@f2:
   741                           	opt stack 0
   742  000004                     ___ftge@ff2:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x3
   746  000004                     	ds	1
   747  000005                     lcd_setPosition@x:
   748                           	opt stack 0
   749  000005                     ___awmod@counter:
   750                           	opt stack 0
   751  000005                     ___ftpack@sign:
   752                           	opt stack 0
   753  000005                     lcd_sendString@a:
   754                           	opt stack 0
   755  000005                     ___lldiv@divisor:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x4
   759  000005                     	ds	1
   760  000006                     ??___ftpack:
   761  000006                     lcd_setPosition@i:
   762                           	opt stack 0
   763  000006                     ___awmod@sign:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x5
   767  000006                     	ds	1
   768  000007                     ??__tdiv_to_l_:
   769  000007                     ??___ftge:
   770  000007                     ?___awdiv:
   771                           	opt stack 0
   772  000007                     lcd_setPosition@j:
   773                           	opt stack 0
   774  000007                     TMR0_ReadTimer@readVal:
   775                           	opt stack 0
   776  000007                     lcd_sendString@i:
   777                           	opt stack 0
   778  000007                     ___awdiv@dividend:
   779                           	opt stack 0
   780  000007                     __div_to_l_@quot:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x6
   784  000007                     	ds	1
   785  000008                     lcd_setPosition@temp:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x7
   789  000008                     	ds	1
   790  000009                     ?___lltoft:
   791                           	opt stack 0
   792  000009                     ?___lwtoft:
   793                           	opt stack 0
   794  000009                     TMR0_ReadTimer@readValLow:
   795                           	opt stack 0
   796  000009                     lcd_sendStringToPos@y:
   797                           	opt stack 0
   798  000009                     ___awdiv@divisor:
   799                           	opt stack 0
   800  000009                     ___lwtoft@c:
   801                           	opt stack 0
   802  000009                     ___lldiv@quotient:
   803                           	opt stack 0
   804  000009                     ___lltoft@c:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x8
   808  000009                     	ds	1
   809  00000A                     TMR0_ReadTimer@readValHigh:
   810                           	opt stack 0
   811  00000A                     lcd_sendStringToPos@charString:
   812                           	opt stack 0
   813  00000A                     __tdiv_to_l_@quot:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x9
   817  00000A                     	ds	1
   818  00000B                     SetRange@new_range:
   819                           	opt stack 0
   820  00000B                     ___awdiv@counter:
   821                           	opt stack 0
   822  00000B                     __div_to_l_@cntr:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0xA
   826  00000B                     	ds	1
   827  00000C                     ??_TMR0_DefaultInterruptHandler:
   828  00000C                     lcd_sendStringToPos@x:
   829                           	opt stack 0
   830  00000C                     ___awdiv@sign:
   831                           	opt stack 0
   832  00000C                     __div_to_l_@exp1:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0xB
   836  00000C                     	ds	1
   837  00000D                     ??___lltoft:
   838  00000D                     ___lldiv@counter:
   839                           	opt stack 0
   840  00000D                     ___awdiv@quotient:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0xC
   844  00000D                     	ds	1
   845  00000E                     ?___llmod:
   846                           	opt stack 0
   847  00000E                     __tdiv_to_l_@cntr:
   848                           	opt stack 0
   849  00000E                     ___llmod@dividend:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0xD
   853  00000E                     	ds	1
   854  00000F                     ?___wmul:
   855                           	opt stack 0
   856  00000F                     __tdiv_to_l_@exp1:
   857                           	opt stack 0
   858  00000F                     ___wmul@multiplier:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0xE
   862  00000F                     	ds	2
   863  000011                     ___lltoft@exp:
   864                           	opt stack 0
   865  000011                     ___wmul@multiplicand:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x10
   869  000011                     	ds	1
   870  000012                     ___llmod@divisor:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x11
   874  000012                     	ds	1
   875  000013                     ___wmul@product:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x12
   879  000013                     	ds	2
   880  000015                     ?___ftadd:
   881                           	opt stack 0
   882  000015                     ___ftadd@f1:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x14
   886  000015                     	ds	1
   887  000016                     ___llmod@counter:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x15
   891  000016                     	ds	2
   892  000018                     ___ftadd@f2:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x17
   896  000018                     	ds	3
   897  00001B                     ??___ftadd:
   898                           
   899                           ; 1 bytes @ 0x1A
   900  00001B                     	ds	3
   901  00001E                     ___ftadd@sign:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x1D
   905  00001E                     	ds	1
   906  00001F                     ___ftadd@exp2:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x1E
   910  00001F                     	ds	1
   911  000020                     ___ftadd@exp1:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x1F
   915  000020                     	ds	1
   916  000021                     ?___ftmul:
   917                           	opt stack 0
   918  000021                     ?___ftsub:
   919                           	opt stack 0
   920  000021                     ___ftmul@f1:
   921                           	opt stack 0
   922  000021                     ___ftsub@f1:
   923                           	opt stack 0
   924                           
   925                           ; 3 bytes @ 0x20
   926  000021                     	ds	3
   927  000024                     ___ftmul@f2:
   928                           	opt stack 0
   929  000024                     ___ftsub@f2:
   930                           	opt stack 0
   931                           
   932                           ; 3 bytes @ 0x23
   933  000024                     	ds	3
   934  000027                     ??___ftmul:
   935  000027                     
   936                           ; 1 bytes @ 0x26
   937  000027                     	ds	3
   938  00002A                     ___ftmul@exp:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x29
   942  00002A                     	ds	1
   943  00002B                     ___ftmul@f3_as_product:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x2A
   947  00002B                     	ds	3
   948  00002E                     ___ftmul@cntr:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x2D
   952  00002E                     	ds	1
   953  00002F                     ___ftmul@sign:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x2E
   957  00002F                     	ds	1
   958  000030                     ?___ftdiv:
   959                           	opt stack 0
   960  000030                     ?_fround:
   961                           	opt stack 0
   962  000030                     ?_scale:
   963                           	opt stack 0
   964  000030                     ___ftdiv@f1:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x2F
   968  000030                     	ds	3
   969  000033                     ___ftdiv@f2:
   970                           	opt stack 0
   971  000033                     _fround$1657:
   972                           	opt stack 0
   973  000033                     _scale$1658:
   974                           	opt stack 0
   975                           
   976                           ; 3 bytes @ 0x32
   977  000033                     	ds	3
   978  000036                     ??___ftdiv:
   979  000036                     scale@scl:
   980                           	opt stack 0
   981  000036                     _fround$1656:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x35
   985  000036                     	ds	1
   986  000037                     ?___fttol:
   987                           	opt stack 0
   988  000037                     ___fttol@f1:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x36
   992  000037                     	ds	2
   993  000039                     fround@prec:
   994                           	opt stack 0
   995  000039                     ___ftdiv@cntr:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x38
   999  000039                     	ds	1
  1000  00003A                     ___ftdiv@f3:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x39
  1004  00003A                     	ds	1
  1005  00003B                     ??___fttol:
  1006                           
  1007                           ; 1 bytes @ 0x3A
  1008  00003B                     	ds	2
  1009  00003D                     ___ftdiv@exp:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x3C
  1013  00003D                     	ds	1
  1014  00003E                     ___ftdiv@sign:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x3D
  1018  00003E                     	ds	2
  1019  000040                     ___fttol@sign1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x3F
  1023  000040                     	ds	1
  1024  000041                     ___fttol@lval:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x40
  1028  000041                     	ds	4
  1029  000045                     ___fttol@exp1:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x44
  1033  000045                     	ds	1
  1034  000046                     ?__doprnt:
  1035                           	opt stack 0
  1036  000046                     __doprnt@pb:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x45
  1040  000046                     	ds	2
  1041  000048                     __doprnt@f:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x47
  1045  000048                     	ds	2
  1046  00004A                     __doprnt@ap:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x49
  1050  00004A                     	ds	2
  1051  00004C                     ??__doprnt:
  1052                           
  1053                           ; 1 bytes @ 0x4B
  1054  00004C                     	ds	6
  1055  000052                     printf@ap:
  1056                           	opt stack 0
  1057  000052                     sprintf@ap:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x51
  1061  000052                     	ds	2
  1062  000054                     printf@pb:
  1063                           	opt stack 0
  1064  000054                     sprintf@pb:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x53
  1068  000054                     	ds	4
  1069  000058                     ??_INT0_ISR:
  1070                           
  1071                           ; 1 bytes @ 0x57
  1072  000058                     	ds	1
  1073  000059                     _INT0_ISR$1655:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x58
  1077  000059                     	ds	3
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           
  1085 ;;
  1086 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1087 ;;
  1088 ;; *************** function _main *****************
  1089 ;; Defined at:
  1090 ;;		line 4 in file "main.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;		None
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  1    wreg      void 
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, status,0, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1104 ;;      Params:         0       0       0       0       0       0       0
  1105 ;;      Locals:         0       0       0       0       0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0
  1107 ;;      Totals:         0       0       0       0       0       0       0
  1108 ;;Total ram usage:        0 bytes
  1109 ;; Hardware stack levels required when called:   11
  1110 ;; This function calls:
  1111 ;;		_SYSTEM_Initialize
  1112 ;;		_lcd_clear
  1113 ;;		_lcd_init
  1114 ;; This function is called by:
  1115 ;;		Startup code after reset
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text0
  1120  003216                     __ptext0:
  1121                           	opt stack 0
  1122  003216                     _main:
  1123                           	opt stack 20
  1124                           
  1125                           ;main.c: 7: SYSTEM_Initialize();
  1126                           
  1127                           ;incstack = 0
  1128  003216  EC29  F019         	call	_SYSTEM_Initialize	;wreg free
  1129                           
  1130                           ;main.c: 26: (INTCONbits.GIE = 1);
  1131  00321A  8EF2               	bsf	intcon,7,c	;volatile
  1132                           
  1133                           ;main.c: 29: (INTCONbits.PEIE = 1);
  1134  00321C  8CF2               	bsf	intcon,6,c	;volatile
  1135                           
  1136                           ;main.c: 37: lcd_init();
  1137  00321E  EC3F  F016         	call	_lcd_init	;wreg free
  1138                           
  1139                           ;main.c: 38: lcd_clear();
  1140  003222  EC4E  F019         	call	_lcd_clear	;wreg free
  1141                           
  1142                           ;main.c: 42: LATC |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4);
  1143  003226  0E1F               	movlw	31
  1144  003228  128B               	iorwf	3979,f,c	;volatile
  1145                           
  1146                           ;main.c: 43: LATB |= (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5);
  1147  00322A  0E3C               	movlw	60
  1148  00322C  128A               	iorwf	3978,f,c	;volatile
  1149                           
  1150                           ;main.c: 46: LATC &= ~(1 << 1);
  1151  00322E  928B               	bcf	3979,1,c	;volatile
  1152                           
  1153                           ;main.c: 47: LATB &= ~(1 << 3);
  1154  003230  968A               	bcf	3978,3,c	;volatile
  1155  003232                     l284:
  1156                           
  1157                           ;main.c: 50: {
  1158  003232  D7FF               	goto	l284
  1159  003234                     __end_of_main:
  1160                           	opt stack 0
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           intcon	equ	0xFF2
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           
  1169 ;; *************** function _lcd_init *****************
  1170 ;; Defined at:
  1171 ;;		line 39 in file "lcd.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1185 ;;      Params:         0       0       0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0       0       0
  1187 ;;      Temps:          0       0       1       0       0       0       0
  1188 ;;      Totals:         0       0       1       0       0       0       0
  1189 ;;Total ram usage:        1 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:   10
  1192 ;; This function calls:
  1193 ;;		__lcd_Port
  1194 ;;		_lcd_sendCommand
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text1
  1201  002C7E                     __ptext1:
  1202                           	opt stack 0
  1203  002C7E                     _lcd_init:
  1204                           	opt stack 20
  1205                           
  1206                           ;lcd.c: 41: _lcd_Port(0x00);
  1207                           
  1208                           ;incstack = 0
  1209  002C7E  0E00               	movlw	0
  1210  002C80  EC1B  F018         	call	__lcd_Port
  1211                           
  1212                           ;lcd.c: 42: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1213  002C84  0E68               	movlw	104
  1214  002C86  0101               	movlb	1	; () banked
  1215  002C88  6F03               	movwf	??_lcd_init& (0+255),b
  1216  002C8A  0EE4               	movlw	228
  1217  002C8C                     u4637:
  1218  002C8C  2EE8               	decfsz	wreg,f,c
  1219  002C8E  D7FE               	bra	u4637
  1220  002C90  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1221  002C92  D7FC               	bra	u4637
  1222  002C94  F000               	nop	
  1223                           
  1224                           ;lcd.c: 43: lcd_sendCommand(0x03);
  1225  002C96  0E03               	movlw	3
  1226  002C98  ECB1  F018         	call	_lcd_sendCommand
  1227                           
  1228                           ;lcd.c: 44: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  1229  002C9C  0E1A               	movlw	26
  1230  002C9E  0101               	movlb	1	; () banked
  1231  002CA0  6F03               	movwf	??_lcd_init& (0+255),b
  1232  002CA2  0EF8               	movlw	248
  1233  002CA4                     u4647:
  1234  002CA4  2EE8               	decfsz	wreg,f,c
  1235  002CA6  D7FE               	bra	u4647
  1236  002CA8  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1237  002CAA  D7FC               	bra	u4647
  1238  002CAC  F000               	nop	
  1239                           
  1240                           ;lcd.c: 45: lcd_sendCommand(0x03);
  1241  002CAE  0E03               	movlw	3
  1242  002CB0  ECB1  F018         	call	_lcd_sendCommand
  1243                           
  1244                           ;lcd.c: 46: _delay((unsigned long)((11)*(16000000UL/4000.0)));
  1245  002CB4  0E3A               	movlw	58
  1246  002CB6  0101               	movlb	1	; () banked
  1247  002CB8  6F03               	movwf	??_lcd_init& (0+255),b
  1248  002CBA  0E23               	movlw	35
  1249  002CBC                     u4657:
  1250  002CBC  2EE8               	decfsz	wreg,f,c
  1251  002CBE  D7FE               	bra	u4657
  1252  002CC0  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1253  002CC2  D7FC               	bra	u4657
  1254                           
  1255                           ;lcd.c: 47: lcd_sendCommand(0x03);
  1256  002CC4  0E03               	movlw	3
  1257  002CC6  ECB1  F018         	call	_lcd_sendCommand
  1258                           
  1259                           ;lcd.c: 49: lcd_sendCommand(0x02);
  1260  002CCA  0E02               	movlw	2
  1261  002CCC  ECB1  F018         	call	_lcd_sendCommand
  1262                           
  1263                           ;lcd.c: 50: lcd_sendCommand(0x02);
  1264  002CD0  0E02               	movlw	2
  1265  002CD2  ECB1  F018         	call	_lcd_sendCommand
  1266                           
  1267                           ;lcd.c: 51: lcd_sendCommand(0x08);
  1268  002CD6  0E08               	movlw	8
  1269  002CD8  ECB1  F018         	call	_lcd_sendCommand
  1270                           
  1271                           ;lcd.c: 52: lcd_sendCommand(0x00);
  1272  002CDC  0E00               	movlw	0
  1273  002CDE  ECB1  F018         	call	_lcd_sendCommand
  1274                           
  1275                           ;lcd.c: 53: lcd_sendCommand(0x0C);
  1276  002CE2  0E0C               	movlw	12
  1277  002CE4  ECB1  F018         	call	_lcd_sendCommand
  1278                           
  1279                           ;lcd.c: 54: lcd_sendCommand(0x00);
  1280  002CE8  0E00               	movlw	0
  1281  002CEA  ECB1  F018         	call	_lcd_sendCommand
  1282                           
  1283                           ;lcd.c: 55: lcd_sendCommand(0x06);
  1284  002CEE  0E06               	movlw	6
  1285  002CF0  ECB1  F018         	call	_lcd_sendCommand
  1286  002CF4  0012               	return		;funcret
  1287  002CF6                     __end_of_lcd_init:
  1288                           	opt stack 0
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           intcon	equ	0xFF2
  1294                           postinc0	equ	0xFEE
  1295                           wreg	equ	0xFE8
  1296                           
  1297 ;; *************** function _lcd_clear *****************
  1298 ;; Defined at:
  1299 ;;		line 12 in file "lcd.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1313 ;;      Params:         0       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:   10
  1320 ;; This function calls:
  1321 ;;		_lcd_sendCommand
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text2
  1328  00329C                     __ptext2:
  1329                           	opt stack 0
  1330  00329C                     _lcd_clear:
  1331                           	opt stack 20
  1332                           
  1333                           ;lcd.c: 14: lcd_sendCommand(0);
  1334                           
  1335                           ;incstack = 0
  1336  00329C  0E00               	movlw	0
  1337  00329E  ECB1  F018         	call	_lcd_sendCommand
  1338                           
  1339                           ;lcd.c: 15: lcd_sendCommand(1);
  1340  0032A2  0E01               	movlw	1
  1341  0032A4  ECB1  F018         	call	_lcd_sendCommand
  1342  0032A8  0012               	return		;funcret
  1343  0032AA                     __end_of_lcd_clear:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           intcon	equ	0xFF2
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           
  1353 ;; *************** function _lcd_sendCommand *****************
  1354 ;; Defined at:
  1355 ;;		line 3 in file "lcd.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  a               1    wreg     unsigned char 
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  a               1    2[BANK1 ] unsigned char 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1369 ;;      Params:         0       0       0       0       0       0       0
  1370 ;;      Locals:         0       0       1       0       0       0       0
  1371 ;;      Temps:          0       0       1       0       0       0       0
  1372 ;;      Totals:         0       0       2       0       0       0       0
  1373 ;;Total ram usage:        2 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    9
  1376 ;; This function calls:
  1377 ;;		__lcd_Port
  1378 ;; This function is called by:
  1379 ;;		_lcd_clear
  1380 ;;		_lcd_init
  1381 ;;		_lcd_shiftRight
  1382 ;;		_lcd_shiftLeft
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text3
  1387  003162                     __ptext3:
  1388                           	opt stack 0
  1389  003162                     _lcd_sendCommand:
  1390                           	opt stack 20
  1391                           
  1392                           ;incstack = 0
  1393                           ;lcd_sendCommand@a stored from wreg
  1394  003162  0101               	movlb	1	; () banked
  1395  003164  6F02               	movwf	lcd_sendCommand@a& (0+255),b
  1396                           
  1397                           ;lcd.c: 5: LATAbits.LA5 = 0;
  1398  003166  9A89               	bcf	3977,5,c	;volatile
  1399                           
  1400                           ;lcd.c: 6: _lcd_Port(a);
  1401  003168  0101               	movlb	1	; () banked
  1402  00316A  5102               	movf	lcd_sendCommand@a& (0+255),w,b
  1403  00316C  EC1B  F018         	call	__lcd_Port
  1404                           
  1405                           ;lcd.c: 7: LATAbits.LA4 = 1;
  1406  003170  8889               	bsf	3977,4,c	;volatile
  1407                           
  1408                           ;lcd.c: 8: _delay((unsigned long)((4)*(16000000UL/4000.0)));
  1409  003172  0E15               	movlw	21
  1410  003174  0101               	movlb	1	; () banked
  1411  003176  6F01               	movwf	??_lcd_sendCommand& (0+255),b
  1412  003178  0EC6               	movlw	198
  1413  00317A                     u4667:
  1414  00317A  2EE8               	decfsz	wreg,f,c
  1415  00317C  D7FE               	bra	u4667
  1416  00317E  2F01               	decfsz	??_lcd_sendCommand& (0+255),f,b
  1417  003180  D7FC               	bra	u4667
  1418  003182  F000               	nop	
  1419                           
  1420                           ;lcd.c: 9: LATAbits.LA4 = 0;
  1421  003184  9889               	bcf	3977,4,c	;volatile
  1422  003186  0012               	return		;funcret
  1423  003188                     __end_of_lcd_sendCommand:
  1424                           	opt stack 0
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           intcon	equ	0xFF2
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           
  1433 ;; *************** function __lcd_Port *****************
  1434 ;; Defined at:
  1435 ;;		line 139 in file "lcd.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  a               1    wreg     unsigned char 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  a               1    0[BANK1 ] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      void 
  1442 ;; Registers used:
  1443 ;;		wreg
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1449 ;;      Params:         0       0       0       0       0       0       0
  1450 ;;      Locals:         0       0       1       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0
  1452 ;;      Totals:         0       0       1       0       0       0       0
  1453 ;;Total ram usage:        1 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    8
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_lcd_sendCommand
  1460 ;;		_lcd_init
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text4
  1465  003036                     __ptext4:
  1466                           	opt stack 0
  1467  003036                     __lcd_Port:
  1468                           	opt stack 20
  1469                           
  1470                           ;incstack = 0
  1471                           ;__lcd_Port@a stored from wreg
  1472  003036  0101               	movlb	1	; () banked
  1473  003038  6F00               	movwf	__lcd_Port@a& (0+255),b
  1474                           
  1475                           ;lcd.c: 141: if(a & 1)
  1476  00303A  0101               	movlb	1	; () banked
  1477  00303C  A100               	btfss	__lcd_Port@a& (0+255),0,b
  1478  00303E  D002               	goto	l353
  1479                           
  1480                           ; BSR set to: 1
  1481                           ;lcd.c: 142: LATAbits.LA3 = 1;
  1482  003040  8689               	bsf	3977,3,c	;volatile
  1483  003042  D001               	goto	l3669
  1484  003044                     l353:
  1485                           
  1486                           ; BSR set to: 1
  1487                           ;lcd.c: 143: else
  1488                           ;lcd.c: 144: LATAbits.LA3 = 0;
  1489  003044  9689               	bcf	3977,3,c	;volatile
  1490  003046                     l3669:
  1491                           
  1492                           ; BSR set to: 1
  1493                           ;lcd.c: 146: if(a & 2)
  1494  003046  0101               	movlb	1	; () banked
  1495  003048  A300               	btfss	__lcd_Port@a& (0+255),1,b
  1496  00304A  D002               	goto	l355
  1497                           
  1498                           ; BSR set to: 1
  1499                           ;lcd.c: 147: LATAbits.LA2 = 1;
  1500  00304C  8489               	bsf	3977,2,c	;volatile
  1501  00304E  D001               	goto	l3673
  1502  003050                     l355:
  1503                           
  1504                           ; BSR set to: 1
  1505                           ;lcd.c: 148: else
  1506                           ;lcd.c: 149: LATAbits.LA2 = 0;
  1507  003050  9489               	bcf	3977,2,c	;volatile
  1508  003052                     l3673:
  1509                           
  1510                           ; BSR set to: 1
  1511                           ;lcd.c: 151: if(a & 4)
  1512  003052  0101               	movlb	1	; () banked
  1513  003054  A500               	btfss	__lcd_Port@a& (0+255),2,b
  1514  003056  D002               	goto	l357
  1515                           
  1516                           ; BSR set to: 1
  1517                           ;lcd.c: 152: LATAbits.LA1 = 1;
  1518  003058  8289               	bsf	3977,1,c	;volatile
  1519  00305A  D001               	goto	l3677
  1520  00305C                     l357:
  1521                           
  1522                           ; BSR set to: 1
  1523                           ;lcd.c: 153: else
  1524                           ;lcd.c: 154: LATAbits.LA1 = 0;
  1525  00305C  9289               	bcf	3977,1,c	;volatile
  1526  00305E                     l3677:
  1527                           
  1528                           ; BSR set to: 1
  1529                           ;lcd.c: 156: if(a & 8)
  1530  00305E  0101               	movlb	1	; () banked
  1531  003060  A700               	btfss	__lcd_Port@a& (0+255),3,b
  1532  003062  D002               	goto	l359
  1533                           
  1534                           ; BSR set to: 1
  1535                           ;lcd.c: 157: LATAbits.LA0 = 1;
  1536  003064  8089               	bsf	3977,0,c	;volatile
  1537  003066  0012               	return	
  1538  003068                     l359:
  1539                           
  1540                           ; BSR set to: 1
  1541                           ;lcd.c: 158: else
  1542                           ;lcd.c: 159: LATAbits.LA0 = 0;
  1543  003068  9089               	bcf	3977,0,c	;volatile
  1544  00306A  0012               	return	
  1545  00306C                     __end_of__lcd_Port:
  1546                           	opt stack 0
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           intcon	equ	0xFF2
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           
  1555 ;; *************** function _SYSTEM_Initialize *****************
  1556 ;; Defined at:
  1557 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1571 ;;      Params:         0       0       0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:   10
  1578 ;; This function calls:
  1579 ;;		_EUSART1_Initialize
  1580 ;;		_EXT_INT_Initialize
  1581 ;;		_INTERRUPT_Initialize
  1582 ;;		_OSCILLATOR_Initialize
  1583 ;;		_PIN_MANAGER_Initialize
  1584 ;;		_TMR0_Initialize
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text5
  1591  003252                     __ptext5:
  1592                           	opt stack 0
  1593  003252                     _SYSTEM_Initialize:
  1594                           	opt stack 20
  1595                           
  1596                           ;mcc.c: 114: INTERRUPT_Initialize();
  1597                           
  1598                           ; BSR set to: 1
  1599                           ;incstack = 0
  1600  003252  EC7A  F019         	call	_INTERRUPT_Initialize	;wreg free
  1601                           
  1602                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1603  003256  EC6B  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  1604                           
  1605                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1606  00325A  EC55  F019         	call	_OSCILLATOR_Initialize	;wreg free
  1607                           
  1608                           ;mcc.c: 117: EXT_INT_Initialize();
  1609  00325E  EC5C  F019         	call	_EXT_INT_Initialize	;wreg free
  1610                           
  1611                           ;mcc.c: 118: TMR0_Initialize();
  1612  003262  EC3C  F017         	call	_TMR0_Initialize	;wreg free
  1613                           
  1614                           ;mcc.c: 119: EUSART1_Initialize();
  1615  003266  EC43  F019         	call	_EUSART1_Initialize	;wreg free
  1616  00326A  0012               	return		;funcret
  1617  00326C                     __end_of_SYSTEM_Initialize:
  1618                           	opt stack 0
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           intcon	equ	0xFF2
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           
  1627 ;; *************** function _TMR0_Initialize *****************
  1628 ;; Defined at:
  1629 ;;		line 22 in file "mcc_generated_files/tmr0.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;		None
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;		None
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      void 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0, cstack
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1643 ;;      Params:         0       0       0       0       0       0       0
  1644 ;;      Locals:         0       0       0       0       0       0       0
  1645 ;;      Temps:          0       0       2       0       0       0       0
  1646 ;;      Totals:         0       0       2       0       0       0       0
  1647 ;;Total ram usage:        2 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    9
  1650 ;; This function calls:
  1651 ;;		_TMR0_SetInterruptHandler
  1652 ;;		_TMR0_StartTimer
  1653 ;; This function is called by:
  1654 ;;		_SYSTEM_Initialize
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text6
  1659  002E78                     __ptext6:
  1660                           	opt stack 0
  1661  002E78                     _TMR0_Initialize:
  1662                           	opt stack 20
  1663                           
  1664                           ;tmr0.c: 27: T0CON = 0x11;
  1665                           
  1666                           ;incstack = 0
  1667  002E78  0E11               	movlw	17
  1668  002E7A  6ED5               	movwf	4053,c	;volatile
  1669                           
  1670                           ;tmr0.c: 30: TMR0H = 0x15;
  1671  002E7C  0E15               	movlw	21
  1672  002E7E  6ED7               	movwf	4055,c	;volatile
  1673                           
  1674                           ;tmr0.c: 33: TMR0L = 0x9F;
  1675  002E80  0E9F               	movlw	159
  1676  002E82  6ED6               	movwf	4054,c	;volatile
  1677                           
  1678                           ;tmr0.c: 36: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  1679  002E84  50D6               	movf	4054,w,c	;volatile
  1680  002E86  CFD7 F102          	movff	4055,??_TMR0_Initialize	;volatile
  1681  002E8A  0101               	movlb	1	; () banked
  1682  002E8C  6B03               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  1683  002E8E  C102  F103         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  1684  002E92  0101               	movlb	1	; () banked
  1685  002E94  6B02               	clrf	??_TMR0_Initialize& (0+255),b
  1686  002E96  0101               	movlb	1	; () banked
  1687  002E98  1102               	iorwf	??_TMR0_Initialize& (0+255),w,b
  1688  002E9A  6E5C               	movwf	_timer0ReloadVal,c	;volatile
  1689  002E9C  0101               	movlb	1	; () banked
  1690  002E9E  5103               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  1691  002EA0  6E5D               	movwf	_timer0ReloadVal+1,c	;volatile
  1692                           
  1693                           ; BSR set to: 1
  1694                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  1695  002EA2  94F2               	bcf	intcon,2,c	;volatile
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  1699  002EA4  8AF2               	bsf	intcon,5,c	;volatile
  1700                           
  1701                           ; BSR set to: 1
  1702                           ;tmr0.c: 45: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  1703  002EA6  0EBC               	movlw	low _TMR0_DefaultInterruptHandler
  1704  002EA8  0101               	movlb	1	; () banked
  1705  002EAA  6F00               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1706  002EAC  0E2E               	movlw	high _TMR0_DefaultInterruptHandler
  1707  002EAE  0101               	movlb	1	; () banked
  1708  002EB0  6F01               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1709  002EB2  EC69  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  1710                           
  1711                           ;tmr0.c: 48: TMR0_StartTimer();
  1712  002EB6  EC78  F019         	call	_TMR0_StartTimer	;wreg free
  1713  002EBA  0012               	return		;funcret
  1714  002EBC                     __end_of_TMR0_Initialize:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           
  1724 ;; *************** function _TMR0_StartTimer *****************
  1725 ;; Defined at:
  1726 ;;		line 51 in file "mcc_generated_files/tmr0.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		None
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1740 ;;      Params:         0       0       0       0       0       0       0
  1741 ;;      Locals:         0       0       0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0       0       0
  1743 ;;      Totals:         0       0       0       0       0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    8
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_TMR0_Initialize
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text7
  1755  0032F0                     __ptext7:
  1756                           	opt stack 0
  1757  0032F0                     _TMR0_StartTimer:
  1758                           	opt stack 20
  1759                           
  1760                           ;tmr0.c: 54: T0CONbits.TMR0ON = 1;
  1761                           
  1762                           ;incstack = 0
  1763  0032F0  8ED5               	bsf	4053,7,c	;volatile
  1764  0032F2  0012               	return		;funcret
  1765  0032F4                     __end_of_TMR0_StartTimer:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           intcon	equ	0xFF2
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           
  1775 ;; *************** function _TMR0_SetInterruptHandler *****************
  1776 ;; Defined at:
  1777 ;;		line 109 in file "mcc_generated_files/tmr0.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  1780 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1792 ;;      Params:         0       0       2       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0
  1795 ;;      Totals:         0       0       2       0       0       0       0
  1796 ;;Total ram usage:        2 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    8
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_TMR0_Initialize
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text8
  1807  0032D2                     __ptext8:
  1808                           	opt stack 0
  1809  0032D2                     _TMR0_SetInterruptHandler:
  1810                           	opt stack 20
  1811                           
  1812                           ;tmr0.c: 110: TMR0_InterruptHandler = InterruptHandler;
  1813                           
  1814                           ;incstack = 0
  1815  0032D2  C100  F104         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1816  0032D6  C101  F105         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1817  0032DA  0012               	return		;funcret
  1818  0032DC                     __end_of_TMR0_SetInterruptHandler:
  1819                           	opt stack 0
  1820                           tblptru	equ	0xFF8
  1821                           tblptrh	equ	0xFF7
  1822                           tblptrl	equ	0xFF6
  1823                           tablat	equ	0xFF5
  1824                           intcon	equ	0xFF2
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           
  1828 ;; *************** function _PIN_MANAGER_Initialize *****************
  1829 ;; Defined at:
  1830 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1844 ;;      Params:         0       0       0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0
  1847 ;;      Totals:         0       0       0       0       0       0       0
  1848 ;;Total ram usage:        0 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    8
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_SYSTEM_Initialize
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text9
  1859  0030D6                     __ptext9:
  1860                           	opt stack 0
  1861  0030D6                     _PIN_MANAGER_Initialize:
  1862                           	opt stack 21
  1863                           
  1864                           ;pin_manager.c: 56: LATA = 0x00;
  1865                           
  1866                           ;incstack = 0
  1867  0030D6  0E00               	movlw	0
  1868  0030D8  6E89               	movwf	3977,c	;volatile
  1869                           
  1870                           ;pin_manager.c: 57: LATB = 0x3C;
  1871  0030DA  0E3C               	movlw	60
  1872  0030DC  6E8A               	movwf	3978,c	;volatile
  1873                           
  1874                           ;pin_manager.c: 58: LATC = 0x1F;
  1875  0030DE  0E1F               	movlw	31
  1876  0030E0  6E8B               	movwf	3979,c	;volatile
  1877                           
  1878                           ;pin_manager.c: 63: TRISA = 0xC0;
  1879  0030E2  0EC0               	movlw	192
  1880  0030E4  6E92               	movwf	3986,c	;volatile
  1881                           
  1882                           ;pin_manager.c: 64: TRISB = 0xC3;
  1883  0030E6  0EC3               	movlw	195
  1884  0030E8  6E93               	movwf	3987,c	;volatile
  1885                           
  1886                           ;pin_manager.c: 65: TRISC = 0x20;
  1887  0030EA  0E20               	movlw	32
  1888  0030EC  6E94               	movwf	3988,c	;volatile
  1889                           
  1890                           ;pin_manager.c: 70: ANSELC = 0x20;
  1891  0030EE  0E20               	movlw	32
  1892  0030F0  010F               	movlb	15	; () banked
  1893  0030F2  6F3A               	movwf	58,b	;volatile
  1894                           
  1895                           ;pin_manager.c: 71: ANSELB = 0x00;
  1896  0030F4  0E00               	movlw	0
  1897  0030F6  010F               	movlb	15	; () banked
  1898  0030F8  6F39               	movwf	57,b	;volatile
  1899                           
  1900                           ;pin_manager.c: 72: ANSELA = 0x00;
  1901  0030FA  0E00               	movlw	0
  1902  0030FC  010F               	movlb	15	; () banked
  1903  0030FE  6F38               	movwf	56,b	;volatile
  1904                           
  1905                           ; BSR set to: 15
  1906                           ;pin_manager.c: 77: WPUB = 0xFF;
  1907  003100  6861               	setf	3937,c	;volatile
  1908                           
  1909                           ; BSR set to: 15
  1910                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  1911  003102  9EF1               	bcf	intcon2,7,c	;volatile
  1912                           
  1913                           ; BSR set to: 15
  1914  003104  0012               	return		;funcret
  1915  003106                     __end_of_PIN_MANAGER_Initialize:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           intcon	equ	0xFF2
  1922                           intcon2	equ	0xFF1
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           
  1926 ;; *************** function _OSCILLATOR_Initialize *****************
  1927 ;; Defined at:
  1928 ;;		line 122 in file "mcc_generated_files/mcc.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1942 ;;      Params:         0       0       0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0
  1945 ;;      Totals:         0       0       0       0       0       0       0
  1946 ;;Total ram usage:        0 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    8
  1949 ;; This function calls:
  1950 ;;		Nothing
  1951 ;; This function is called by:
  1952 ;;		_SYSTEM_Initialize
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           	psect	text10
  1957  0032AA                     __ptext10:
  1958                           	opt stack 0
  1959  0032AA                     _OSCILLATOR_Initialize:
  1960                           	opt stack 21
  1961                           
  1962                           ;mcc.c: 125: OSCCON = 0x70;
  1963                           
  1964                           ; BSR set to: 15
  1965                           ;incstack = 0
  1966  0032AA  0E70               	movlw	112
  1967  0032AC  6ED3               	movwf	4051,c	;volatile
  1968                           
  1969                           ;mcc.c: 127: OSCCON2 = 0x04;
  1970  0032AE  0E04               	movlw	4
  1971  0032B0  6ED2               	movwf	4050,c	;volatile
  1972                           
  1973                           ;mcc.c: 129: OSCTUNE = 0x00;
  1974  0032B2  0E00               	movlw	0
  1975  0032B4  6E9B               	movwf	3995,c	;volatile
  1976  0032B6  0012               	return		;funcret
  1977  0032B8                     __end_of_OSCILLATOR_Initialize:
  1978                           	opt stack 0
  1979                           tblptru	equ	0xFF8
  1980                           tblptrh	equ	0xFF7
  1981                           tblptrl	equ	0xFF6
  1982                           tablat	equ	0xFF5
  1983                           intcon	equ	0xFF2
  1984                           intcon2	equ	0xFF1
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           
  1988 ;; *************** function _INTERRUPT_Initialize *****************
  1989 ;; Defined at:
  1990 ;;		line 4 in file "mcc_generated_files/interrupt_manager.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;		None
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;		None
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  1    wreg      void 
  1997 ;; Registers used:
  1998 ;;		None
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2004 ;;      Params:         0       0       0       0       0       0       0
  2005 ;;      Locals:         0       0       0       0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0
  2007 ;;      Totals:         0       0       0       0       0       0       0
  2008 ;;Total ram usage:        0 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    8
  2011 ;; This function calls:
  2012 ;;		Nothing
  2013 ;; This function is called by:
  2014 ;;		_SYSTEM_Initialize
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text11
  2019  0032F4                     __ptext11:
  2020                           	opt stack 0
  2021  0032F4                     _INTERRUPT_Initialize:
  2022                           	opt stack 21
  2023                           
  2024                           ;interrupt_manager.c: 7: RCONbits.IPEN = 0;
  2025                           
  2026                           ;incstack = 0
  2027  0032F4  9ED0               	bcf	4048,7,c	;volatile
  2028  0032F6  0012               	return		;funcret
  2029  0032F8                     __end_of_INTERRUPT_Initialize:
  2030                           	opt stack 0
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           intcon	equ	0xFF2
  2036                           intcon2	equ	0xFF1
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           
  2040 ;; *************** function _EXT_INT_Initialize *****************
  2041 ;; Defined at:
  2042 ;;		line 213 in file "mcc_generated_files/ext_int.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		None
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2056 ;;      Params:         0       0       0       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0
  2059 ;;      Totals:         0       0       0       0       0       0       0
  2060 ;;Total ram usage:        0 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    8
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_SYSTEM_Initialize
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text12
  2071  0032B8                     __ptext12:
  2072                           	opt stack 0
  2073  0032B8                     _EXT_INT_Initialize:
  2074                           	opt stack 21
  2075                           
  2076                           ;ext_int.c: 221: (INTCON3bits.INT1IF = 0);
  2077                           
  2078                           ;incstack = 0
  2079  0032B8  90F0               	bcf	intcon3,0,c	;volatile
  2080                           
  2081                           ;ext_int.c: 222: (INTCON2bits.INTEDG1 = 0);
  2082  0032BA  9AF1               	bcf	intcon2,5,c	;volatile
  2083                           
  2084                           ;ext_int.c: 223: (INTCON3bits.INT1IE = 1);
  2085  0032BC  86F0               	bsf	intcon3,3,c	;volatile
  2086                           
  2087                           ;ext_int.c: 231: (INTCONbits.INT0IF = 0);
  2088  0032BE  92F2               	bcf	intcon,1,c	;volatile
  2089                           
  2090                           ;ext_int.c: 232: (INTCON2bits.INTEDG0 = 0);
  2091  0032C0  9CF1               	bcf	intcon2,6,c	;volatile
  2092                           
  2093                           ;ext_int.c: 233: (INTCONbits.INT0IE = 1);
  2094  0032C2  88F2               	bsf	intcon,4,c	;volatile
  2095  0032C4  0012               	return		;funcret
  2096  0032C6                     __end_of_EXT_INT_Initialize:
  2097                           	opt stack 0
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           intcon	equ	0xFF2
  2103                           intcon2	equ	0xFF1
  2104                           intcon3	equ	0xFF0
  2105                           postinc0	equ	0xFEE
  2106                           wreg	equ	0xFE8
  2107                           
  2108 ;; *************** function _EUSART1_Initialize *****************
  2109 ;; Defined at:
  2110 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;		None
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;		None
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  1    wreg      void 
  2117 ;; Registers used:
  2118 ;;		wreg, status,2
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2124 ;;      Params:         0       0       0       0       0       0       0
  2125 ;;      Locals:         0       0       0       0       0       0       0
  2126 ;;      Temps:          0       0       0       0       0       0       0
  2127 ;;      Totals:         0       0       0       0       0       0       0
  2128 ;;Total ram usage:        0 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    8
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_SYSTEM_Initialize
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text13
  2139  003286                     __ptext13:
  2140                           	opt stack 0
  2141  003286                     _EUSART1_Initialize:
  2142                           	opt stack 21
  2143                           
  2144                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  2145                           
  2146                           ;incstack = 0
  2147  003286  0E08               	movlw	8
  2148  003288  6EB8               	movwf	4024,c	;volatile
  2149                           
  2150                           ;eusart1.c: 63: RCSTA1 = 0x80;
  2151  00328A  0E80               	movlw	128
  2152  00328C  6EAB               	movwf	4011,c	;volatile
  2153                           
  2154                           ;eusart1.c: 66: TXSTA1 = 0x24;
  2155  00328E  0E24               	movlw	36
  2156  003290  6EAC               	movwf	4012,c	;volatile
  2157                           
  2158                           ;eusart1.c: 69: SPBRG1 = 0xA0;
  2159  003292  0EA0               	movlw	160
  2160  003294  6EAF               	movwf	4015,c	;volatile
  2161                           
  2162                           ;eusart1.c: 72: SPBRGH1 = 0x01;
  2163  003296  0E01               	movlw	1
  2164  003298  6EB0               	movwf	4016,c	;volatile
  2165  00329A  0012               	return		;funcret
  2166  00329C                     __end_of_EUSART1_Initialize:
  2167                           	opt stack 0
  2168                           tblptru	equ	0xFF8
  2169                           tblptrh	equ	0xFF7
  2170                           tblptrl	equ	0xFF6
  2171                           tablat	equ	0xFF5
  2172                           intcon	equ	0xFF2
  2173                           intcon2	equ	0xFF1
  2174                           intcon3	equ	0xFF0
  2175                           postinc0	equ	0xFEE
  2176                           wreg	equ	0xFE8
  2177                           
  2178 ;; *************** function _INTERRUPT_InterruptManager *****************
  2179 ;; Defined at:
  2180 ;;		line 10 in file "mcc_generated_files/interrupt_manager.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;		None
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  1    wreg      void 
  2187 ;; Registers used:
  2188 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2194 ;;      Params:         0       0       0       0       0       0       0
  2195 ;;      Locals:         0       0       0       0       0       0       0
  2196 ;;      Temps:          0      14       0       0       0       0       0
  2197 ;;      Totals:         0      14       0       0       0       0       0
  2198 ;;Total ram usage:       14 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    7
  2201 ;; This function calls:
  2202 ;;		_INT0_ISR
  2203 ;;		_INT1_ISR
  2204 ;;		_TMR0_ISR
  2205 ;; This function is called by:
  2206 ;;		Interrupt level 2
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	intcode
  2211  000008                     __pintcode:
  2212                           	opt stack 0
  2213  000008                     _INTERRUPT_InterruptManager:
  2214                           	opt stack 20
  2215                           
  2216                           ;incstack = 0
  2217  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2218  00000A  CFFA F0A7          	movff	pclath,??_INTERRUPT_InterruptManager
  2219  00000E  CFFB F0A8          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2220  000012  CFE9 F0A9          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2221  000016  CFEA F0AA          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2222  00001A  CFE1 F0AB          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2223  00001E  CFE2 F0AC          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2224  000022  CFD9 F0AD          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2225  000026  CFDA F0AE          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2226  00002A  CFF3 F0AF          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2227  00002E  CFF4 F0B0          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2228  000032  CFF6 F0B1          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2229  000036  CFF7 F0B2          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2230  00003A  CFF8 F0B3          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2231  00003E  CFF5 F0B4          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2232                           
  2233                           ;interrupt_manager.c: 13: if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  2234  000042  B6F0               	btfsc	intcon3,3,c	;volatile
  2235  000044  A0F0               	btfss	intcon3,0,c	;volatile
  2236  000046  D003               	goto	i2l129
  2237                           
  2238                           ;interrupt_manager.c: 14: {
  2239                           ;interrupt_manager.c: 15: INT1_ISR();
  2240  000048  EC02  F016         	call	_INT1_ISR	;wreg free
  2241                           
  2242                           ;interrupt_manager.c: 16: }
  2243  00004C  D00B               	goto	i2l135
  2244  00004E                     i2l129:
  2245                           
  2246                           ;interrupt_manager.c: 17: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  2247  00004E  B8F2               	btfsc	intcon,4,c	;volatile
  2248  000050  A2F2               	btfss	intcon,1,c	;volatile
  2249  000052  D003               	goto	i2l131
  2250                           
  2251                           ;interrupt_manager.c: 18: {
  2252                           ;interrupt_manager.c: 19: INT0_ISR();
  2253  000054  EC9A  F011         	call	_INT0_ISR	;wreg free
  2254                           
  2255                           ;interrupt_manager.c: 20: }
  2256  000058  D005               	goto	i2l135
  2257  00005A                     i2l131:
  2258                           
  2259                           ;interrupt_manager.c: 21: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2260  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  2261  00005C  A4F2               	btfss	intcon,2,c	;volatile
  2262  00005E  D002               	goto	i2l135
  2263                           
  2264                           ;interrupt_manager.c: 22: {
  2265                           ;interrupt_manager.c: 23: TMR0_ISR();
  2266  000060  EC83  F018         	call	_TMR0_ISR	;wreg free
  2267  000064                     i2l135:
  2268  000064  C0B4  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2269  000068  C0B3  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2270  00006C  C0B2  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2271  000070  C0B1  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2272  000074  C0B0  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2273  000078  C0AF  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2274  00007C  C0AE  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2275  000080  C0AD  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2276  000084  C0AC  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2277  000088  C0AB  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2278  00008C  C0AA  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2279  000090  C0A9  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2280  000094  C0A8  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2281  000098  C0A7  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2282  00009C  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2283  00009E  0011               	retfie		f
  2284  0000A0                     __end_of_INTERRUPT_InterruptManager:
  2285                           	opt stack 0
  2286                           pclatu	equ	0xFFB
  2287                           pclath	equ	0xFFA
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           prodh	equ	0xFF4
  2293                           prodl	equ	0xFF3
  2294                           intcon	equ	0xFF2
  2295                           intcon2	equ	0xFF1
  2296                           intcon3	equ	0xFF0
  2297                           postinc0	equ	0xFEE
  2298                           fsr0h	equ	0xFEA
  2299                           fsr0l	equ	0xFE9
  2300                           wreg	equ	0xFE8
  2301                           fsr1h	equ	0xFE2
  2302                           fsr1l	equ	0xFE1
  2303                           fsr2h	equ	0xFDA
  2304                           fsr2l	equ	0xFD9
  2305                           
  2306 ;; *************** function _TMR0_ISR *****************
  2307 ;; Defined at:
  2308 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;		None
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;		None
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2322 ;;      Params:         0       0       0       0       0       0       0
  2323 ;;      Locals:         0       0       0       0       0       0       0
  2324 ;;      Temps:          0       0       0       0       0       0       0
  2325 ;;      Totals:         0       0       0       0       0       0       0
  2326 ;;Total ram usage:        0 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    2
  2329 ;; This function calls:
  2330 ;;		Absolute function
  2331 ;;		_TMR0_DefaultInterruptHandler
  2332 ;; This function is called by:
  2333 ;;		_INTERRUPT_InterruptManager
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text15
  2338  003106                     __ptext15:
  2339                           	opt stack 0
  2340  003106                     _TMR0_ISR:
  2341                           	opt stack 24
  2342                           
  2343                           ;tmr0.c: 95: INTCONbits.TMR0IF = 0;
  2344                           
  2345                           ;incstack = 0
  2346  003106  94F2               	bcf	intcon,2,c	;volatile
  2347                           
  2348                           ;tmr0.c: 99: TMR0H = timer0ReloadVal >> 8;
  2349  003108  505D               	movf	_timer0ReloadVal+1,w,c	;volatile
  2350  00310A  6ED7               	movwf	4055,c	;volatile
  2351                           
  2352                           ;tmr0.c: 100: TMR0L = (uint8_t) timer0ReloadVal;
  2353  00310C  C05C  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  2354                           
  2355                           ;tmr0.c: 102: if(TMR0_InterruptHandler)
  2356  003110  0101               	movlb	1	; () banked
  2357  003112  5104               	movf	_TMR0_InterruptHandler& (0+255),w,b
  2358  003114  0101               	movlb	1	; () banked
  2359  003116  1105               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  2360  003118  B4D8               	btfsc	status,2,c
  2361  00311A  0012               	return	
  2362                           
  2363                           ; BSR set to: 1
  2364                           ;tmr0.c: 103: {
  2365                           ;tmr0.c: 104: TMR0_InterruptHandler();
  2366  00311C  D801               	call	i2u456_48
  2367  00311E  0012               	return	
  2368  003120                     i2u456_48:
  2369  003120  0005               	push	
  2370  003122  0101               	movlb	1	; () banked
  2371  003124  6EFA               	movwf	pclath,c
  2372  003126  5104               	movf	_TMR0_InterruptHandler& (0+255),w,b
  2373  003128  6EFD               	movwf	tosl,c
  2374  00312A  5105               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  2375  00312C  6EFE               	movwf	tosh,c
  2376  00312E  50F8               	movf	tblptru,w,c
  2377  003130  6EFF               	movwf	tosu,c
  2378  003132  50FA               	movf	pclath,w,c
  2379  003134  0012               	return		;indir
  2380  003136                     __end_of_TMR0_ISR:
  2381                           	opt stack 0
  2382                           tosu	equ	0xFFF
  2383                           tosh	equ	0xFFE
  2384                           tosl	equ	0xFFD
  2385                           pclatu	equ	0xFFB
  2386                           pclath	equ	0xFFA
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           intcon	equ	0xFF2
  2394                           intcon2	equ	0xFF1
  2395                           intcon3	equ	0xFF0
  2396                           postinc0	equ	0xFEE
  2397                           fsr0h	equ	0xFEA
  2398                           fsr0l	equ	0xFE9
  2399                           wreg	equ	0xFE8
  2400                           fsr1h	equ	0xFE2
  2401                           fsr1l	equ	0xFE1
  2402                           fsr2h	equ	0xFDA
  2403                           fsr2l	equ	0xFD9
  2404                           status	equ	0xFD8
  2405                           
  2406 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  2407 ;; Defined at:
  2408 ;;		line 113 in file "mcc_generated_files/tmr0.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2422 ;;      Params:         0       0       0       0       0       0       0
  2423 ;;      Locals:         0       0       0       0       0       0       0
  2424 ;;      Temps:          1       0       0       0       0       0       0
  2425 ;;      Totals:         1       0       0       0       0       0       0
  2426 ;;Total ram usage:        1 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    1
  2429 ;; This function calls:
  2430 ;;		_SetRange
  2431 ;; This function is called by:
  2432 ;;		_TMR0_Initialize
  2433 ;;		_TMR0_ISR
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text16
  2438  002EBC                     __ptext16:
  2439                           	opt stack 0
  2440  002EBC                     _TMR0_DefaultInterruptHandler:
  2441                           	opt stack 24
  2442                           
  2443                           ;tmr0.c: 116: if (cal_mode == 0)
  2444                           
  2445                           ;incstack = 0
  2446  002EBC  505E               	movf	_cal_mode,w,c
  2447  002EBE  A4D8               	btfss	status,2,c
  2448  002EC0  D00F               	goto	i2l197
  2449                           
  2450                           ;tmr0.c: 117: {
  2451                           ;tmr0.c: 119: do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2452  002EC2  AE8B               	btfss	3979,7,c	;volatile
  2453  002EC4  D002               	goto	i2u443_40
  2454  002EC6  0E01               	movlw	1
  2455  002EC8  D001               	goto	i2u443_46
  2456  002ECA                     i2u443_40:
  2457  002ECA  0E00               	movlw	0
  2458  002ECC                     i2u443_46:
  2459  002ECC  0AFF               	xorlw	255
  2460  002ECE  6E0C               	movwf	??_TMR0_DefaultInterruptHandler& (0+255),c
  2461  002ED0  320C               	rrcf	??_TMR0_DefaultInterruptHandler,f,c
  2462  002ED2  320C               	rrcf	??_TMR0_DefaultInterruptHandler,f,c
  2463  002ED4  508B               	movf	3979,w,c	;volatile
  2464  002ED6  180C               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  2465  002ED8  0B7F               	andlw	-129
  2466  002EDA  180C               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  2467  002EDC  6E8B               	movwf	3979,c	;volatile
  2468                           
  2469                           ;tmr0.c: 120: }
  2470  002EDE  D001               	goto	i2l3801
  2471  002EE0                     i2l197:
  2472  002EE0  9E8B               	bcf	3979,7,c	;volatile
  2473  002EE2                     i2l3801:
  2474                           
  2475                           ;tmr0.c: 125: }
  2476                           ;tmr0.c: 128: if (auto_range == 1)
  2477  002EE2  0100               	movlb	0	; () banked
  2478  002EE4  05CD               	decf	_auto_range& (0+255),w,b
  2479  002EE6  A4D8               	btfss	status,2,c
  2480  002EE8  0012               	return	
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;tmr0.c: 129: {
  2484                           ;tmr0.c: 130: if (range < 5)
  2485  002EEA  0E05               	movlw	5
  2486  002EEC  0100               	movlb	0	; () banked
  2487  002EEE  61CE               	cpfslt	_range& (0+255),b
  2488  002EF0  0012               	return	
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;tmr0.c: 131: {
  2492                           ;tmr0.c: 132: range += 1;
  2493  002EF2  0100               	movlb	0	; () banked
  2494  002EF4  2BCE               	incf	_range& (0+255),f,b
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;tmr0.c: 133: SetRange(range);
  2498  002EF6  0100               	movlb	0	; () banked
  2499  002EF8  51CE               	movf	_range& (0+255),w,b
  2500  002EFA  ECC8  F010         	call	_SetRange
  2501  002EFE  0012               	return	
  2502  002F00                     __end_of_TMR0_DefaultInterruptHandler:
  2503                           	opt stack 0
  2504                           tosu	equ	0xFFF
  2505                           tosh	equ	0xFFE
  2506                           tosl	equ	0xFFD
  2507                           pclatu	equ	0xFFB
  2508                           pclath	equ	0xFFA
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           intcon	equ	0xFF2
  2516                           intcon2	equ	0xFF1
  2517                           intcon3	equ	0xFF0
  2518                           postinc0	equ	0xFEE
  2519                           fsr0h	equ	0xFEA
  2520                           fsr0l	equ	0xFE9
  2521                           wreg	equ	0xFE8
  2522                           fsr1h	equ	0xFE2
  2523                           fsr1l	equ	0xFE1
  2524                           fsr2h	equ	0xFDA
  2525                           fsr2l	equ	0xFD9
  2526                           status	equ	0xFD8
  2527                           
  2528 ;; *************** function _INT1_ISR *****************
  2529 ;; Defined at:
  2530 ;;		line 103 in file "mcc_generated_files/ext_int.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;		None
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2544 ;;      Params:         0       0       0       0       0       0       0
  2545 ;;      Locals:         0       0       0       0       0       0       0
  2546 ;;      Temps:          0       0       0       0       0       0       0
  2547 ;;      Totals:         0       0       0       0       0       0       0
  2548 ;;Total ram usage:        0 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    6
  2551 ;; This function calls:
  2552 ;;		_SetRange
  2553 ;;		_UpdateDisplay
  2554 ;;		_printf
  2555 ;; This function is called by:
  2556 ;;		_INTERRUPT_InterruptManager
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text17
  2561  002C04                     __ptext17:
  2562                           	opt stack 0
  2563  002C04                     _INT1_ISR:
  2564                           	opt stack 20
  2565                           
  2566                           ;ext_int.c: 107: if (auto_range == 1)
  2567                           
  2568                           ;incstack = 0
  2569  002C04  0100               	movlb	0	; () banked
  2570  002C06  05CD               	decf	_auto_range& (0+255),w,b
  2571  002C08  A4D8               	btfss	status,2,c
  2572  002C0A  D005               	goto	i2l3831
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;ext_int.c: 108: {
  2576                           ;ext_int.c: 109: stored_range = range;
  2577  002C0C  C0CE  F0BB         	movff	_range,_stored_range
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;ext_int.c: 110: auto_range = 0;
  2581  002C10  0E00               	movlw	0
  2582  002C12  0100               	movlb	0	; () banked
  2583  002C14  6FCD               	movwf	_auto_range& (0+255),b
  2584  002C16                     i2l3831:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;ext_int.c: 111: }
  2588                           ;ext_int.c: 114: if (range < 5)
  2589  002C16  0E05               	movlw	5
  2590  002C18  0100               	movlb	0	; () banked
  2591  002C1A  61CE               	cpfslt	_range& (0+255),b
  2592  002C1C  D003               	goto	i2l3835
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;ext_int.c: 115: {
  2596                           ;ext_int.c: 116: range += 1;
  2597  002C1E  0100               	movlb	0	; () banked
  2598  002C20  2BCE               	incf	_range& (0+255),f,b
  2599                           
  2600                           ;ext_int.c: 117: }
  2601  002C22  D003               	goto	i2l3837
  2602  002C24                     i2l3835:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;ext_int.c: 118: else
  2606                           ;ext_int.c: 120: {
  2607                           ;ext_int.c: 121: range -= (5 - 2);
  2608  002C24  0E03               	movlw	3
  2609  002C26  0100               	movlb	0	; () banked
  2610  002C28  5FCE               	subwf	_range& (0+255),f,b
  2611  002C2A                     i2l3837:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;ext_int.c: 122: }
  2615                           ;ext_int.c: 125: result = -1;
  2616  002C2A  0E00               	movlw	0
  2617  002C2C  0100               	movlb	0	; () banked
  2618  002C2E  6FB5               	movwf	_result& (0+255),b
  2619  002C30  0E80               	movlw	128
  2620  002C32  0100               	movlb	0	; () banked
  2621  002C34  6FB6               	movwf	(_result+1)& (0+255),b
  2622  002C36  0EBF               	movlw	191
  2623  002C38  0100               	movlb	0	; () banked
  2624  002C3A  6FB7               	movwf	(_result+2)& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;ext_int.c: 126: UpdateDisplay();
  2628  002C3C  EC1B  F00F         	call	_UpdateDisplay	;wreg free
  2629                           
  2630                           ;ext_int.c: 130: if (auto_range == 0 && range == stored_range)
  2631  002C40  0100               	movlb	0	; () banked
  2632  002C42  51CD               	movf	_auto_range& (0+255),w,b
  2633  002C44  A4D8               	btfss	status,2,c
  2634  002C46  D009               	goto	i2l3847
  2635                           
  2636                           ; BSR set to: 0
  2637  002C48  0100               	movlb	0	; () banked
  2638  002C4A  51BB               	movf	_stored_range& (0+255),w,b
  2639  002C4C  0100               	movlb	0	; () banked
  2640  002C4E  19CE               	xorwf	_range& (0+255),w,b
  2641  002C50  A4D8               	btfss	status,2,c
  2642  002C52  D003               	goto	i2l3847
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;ext_int.c: 131: {
  2646                           ;ext_int.c: 132: auto_range = 1;
  2647  002C54  0E01               	movlw	1
  2648  002C56  0100               	movlb	0	; () banked
  2649  002C58  6FCD               	movwf	_auto_range& (0+255),b
  2650  002C5A                     i2l3847:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;ext_int.c: 133: }
  2654                           ;ext_int.c: 136: printf("\r\nSetting range = %d\r\n", range);
  2655  002C5A  0E90               	movlw	low STR_6
  2656  002C5C  0100               	movlb	0	; () banked
  2657  002C5E  6F7B               	movwf	printf@f& (0+255),b
  2658  002C60  0E06               	movlw	high STR_6
  2659  002C62  0100               	movlb	0	; () banked
  2660  002C64  6F7C               	movwf	(printf@f+1)& (0+255),b
  2661  002C66  C0CE  F07D         	movff	_range,?_printf+2
  2662  002C6A  0100               	movlb	0	; () banked
  2663  002C6C  6B7E               	clrf	(?_printf+3)& (0+255),b
  2664  002C6E  EC36  F018         	call	_printf	;wreg free
  2665                           
  2666                           ;ext_int.c: 138: SetRange(range);
  2667  002C72  0100               	movlb	0	; () banked
  2668  002C74  51CE               	movf	_range& (0+255),w,b
  2669  002C76  ECC8  F010         	call	_SetRange
  2670                           
  2671                           ;ext_int.c: 142: (INTCON3bits.INT1IF = 0);
  2672  002C7A  90F0               	bcf	intcon3,0,c	;volatile
  2673  002C7C  0012               	return		;funcret
  2674  002C7E                     __end_of_INT1_ISR:
  2675                           	opt stack 0
  2676                           tosu	equ	0xFFF
  2677                           tosh	equ	0xFFE
  2678                           tosl	equ	0xFFD
  2679                           pclatu	equ	0xFFB
  2680                           pclath	equ	0xFFA
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           intcon2	equ	0xFF1
  2689                           intcon3	equ	0xFF0
  2690                           postinc0	equ	0xFEE
  2691                           fsr0h	equ	0xFEA
  2692                           fsr0l	equ	0xFE9
  2693                           wreg	equ	0xFE8
  2694                           fsr1h	equ	0xFE2
  2695                           fsr1l	equ	0xFE1
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _printf *****************
  2701 ;; Defined at:
  2702 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  2705 ;;		 -> STR_6(23), 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  pb              4   83[COMRAM] struct __prbuf
  2708 ;;  ap              2   81[COMRAM] PTR void [1]
  2709 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  2   27[BANK0 ] int 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2719 ;;      Params:         0       4       0       0       0       0       0
  2720 ;;      Locals:         6       0       0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0
  2722 ;;      Totals:         6       4       0       0       0       0       0
  2723 ;;Total ram usage:       10 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    4
  2726 ;; This function calls:
  2727 ;;		__doprnt
  2728 ;; This function is called by:
  2729 ;;		_INT1_ISR
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text18
  2734  00306C                     __ptext18:
  2735                           	opt stack 0
  2736  00306C                     _printf:
  2737                           	opt stack 21
  2738                           
  2739                           ;incstack = 0
  2740  00306C  0E00               	movlw	0
  2741  00306E  6E54               	movwf	printf@pb,c
  2742  003070  0E00               	movlw	0
  2743  003072  6E55               	movwf	printf@pb+1,c
  2744  003074  0EDC               	movlw	low _putch
  2745  003076  6E56               	movwf	printf@pb+2,c
  2746  003078  0E32               	movlw	high _putch
  2747  00307A  6E57               	movwf	printf@pb+3,c
  2748  00307C  0E7D               	movlw	low (?_printf+2)
  2749  00307E  6E52               	movwf	printf@ap,c
  2750  003080  0E00               	movlw	high (?_printf+2)
  2751  003082  6E53               	movwf	printf@ap+1,c
  2752                           
  2753                           ;	Return value of _printf is never used
  2754  003084  0E54               	movlw	low printf@pb
  2755  003086  6E46               	movwf	__doprnt@pb,c
  2756  003088  0E00               	movlw	high printf@pb
  2757  00308A  6E47               	movwf	__doprnt@pb+1,c
  2758  00308C  C07B  F048         	movff	printf@f,__doprnt@f
  2759  003090  C07C  F049         	movff	printf@f+1,__doprnt@f+1
  2760  003094  0E52               	movlw	low printf@ap
  2761  003096  6E4A               	movwf	__doprnt@ap,c
  2762  003098  0E00               	movlw	high printf@ap
  2763  00309A  6E4B               	movwf	__doprnt@ap+1,c
  2764  00309C  EC7C  F003         	call	__doprnt	;wreg free
  2765  0030A0  0012               	return	
  2766  0030A2                     __end_of_printf:
  2767                           	opt stack 0
  2768                           tosu	equ	0xFFF
  2769                           tosh	equ	0xFFE
  2770                           tosl	equ	0xFFD
  2771                           pclatu	equ	0xFFB
  2772                           pclath	equ	0xFFA
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           intcon	equ	0xFF2
  2780                           intcon2	equ	0xFF1
  2781                           intcon3	equ	0xFF0
  2782                           postinc0	equ	0xFEE
  2783                           fsr0h	equ	0xFEA
  2784                           fsr0l	equ	0xFE9
  2785                           wreg	equ	0xFE8
  2786                           fsr1h	equ	0xFE2
  2787                           fsr1l	equ	0xFE1
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _INT0_ISR *****************
  2793 ;; Defined at:
  2794 ;;		line 148 in file "mcc_generated_files/ext_int.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2808 ;;      Params:         0       0       0       0       0       0       0
  2809 ;;      Locals:         3       0       0       0       0       0       0
  2810 ;;      Temps:          1       0       0       0       0       0       0
  2811 ;;      Totals:         4       0       0       0       0       0       0
  2812 ;;Total ram usage:        4 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    6
  2815 ;; This function calls:
  2816 ;;		_SetRange
  2817 ;;		_TMR0_ReadTimer
  2818 ;;		_TMR0_Reload
  2819 ;;		_TMR0_StopTimer
  2820 ;;		_UpdateDisplay
  2821 ;;		___ftadd
  2822 ;;		___ftdiv
  2823 ;;		___ftmul
  2824 ;;		___lwtoft
  2825 ;;		___wmul
  2826 ;;		i2_TMR0_StartTimer
  2827 ;; This function is called by:
  2828 ;;		_INTERRUPT_InterruptManager
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text19
  2833  002334                     __ptext19:
  2834                           	opt stack 0
  2835  002334                     _INT0_ISR:
  2836                           	opt stack 20
  2837                           
  2838                           ;ext_int.c: 151: if (cal_mode == 1)
  2839                           
  2840                           ;incstack = 0
  2841  002334  045E               	decf	_cal_mode,w,c
  2842  002336  A4D8               	btfss	status,2,c
  2843  002338  D002               	goto	i2l3855
  2844                           
  2845                           ;ext_int.c: 152: {
  2846                           ;ext_int.c: 153: do { LATCbits.LATC7 = 0; } while(0);
  2847  00233A  9E8B               	bcf	3979,7,c	;volatile
  2848                           
  2849                           ;ext_int.c: 154: return;
  2850  00233C  0012               	return	
  2851  00233E                     i2l3855:
  2852                           
  2853                           ;ext_int.c: 155: }
  2854                           ;ext_int.c: 158: TMR0_StopTimer();
  2855  00233E  EC7E  F019         	call	_TMR0_StopTimer	;wreg free
  2856                           
  2857                           ;ext_int.c: 159: reading = TMR0_ReadTimer();
  2858  002342  ECA1  F017         	call	_TMR0_ReadTimer	;wreg free
  2859  002346  C001  F0B8         	movff	?_TMR0_ReadTimer,_reading
  2860  00234A  C002  F0B9         	movff	?_TMR0_ReadTimer+1,_reading+1
  2861                           
  2862                           ;ext_int.c: 162: do { LATCbits.LATC7 = 1; } while(0);
  2863  00234E  8E8B               	bsf	3979,7,c	;volatile
  2864                           
  2865                           ;ext_int.c: 166: result += cal_current[range - 1] * ((float)reading - 27) / 3.01004;
  2866  002350  0EA4               	movlw	164
  2867  002352  6E33               	movwf	___ftdiv@f2,c
  2868  002354  0E40               	movlw	64
  2869  002356  6E34               	movwf	___ftdiv@f2+1,c
  2870  002358  0E40               	movlw	64
  2871  00235A  6E35               	movwf	___ftdiv@f2+2,c
  2872  00235C  0E00               	movlw	0
  2873  00235E  6E12               	movwf	___wmul@multiplicand+1,c
  2874  002360  0E03               	movlw	3
  2875  002362  6E11               	movwf	___wmul@multiplicand,c
  2876  002364  0EFF               	movlw	255
  2877  002366  0100               	movlb	0	; () banked
  2878  002368  25CE               	addwf	_range& (0+255),w,b
  2879  00236A  6E0F               	movwf	___wmul@multiplier,c
  2880  00236C  6A10               	clrf	___wmul@multiplier+1,c
  2881  00236E  0EFF               	movlw	255
  2882  002370  2210               	addwfc	___wmul@multiplier+1,f,c
  2883  002372  ECC4  F018         	call	___wmul	;wreg free
  2884  002376  0E77               	movlw	low _cal_current
  2885  002378  240F               	addwf	?___wmul,w,c
  2886  00237A  6EF6               	movwf	tblptrl,c
  2887  00237C  0E06               	movlw	high _cal_current
  2888  00237E  2010               	addwfc	?___wmul+1,w,c
  2889  002380  6EF7               	movwf	tblptrh,c
  2890  002382                     	if	0	;There are less than 3 active tblptr bytes
  2891  002382                     	endif
  2892  002382  0009               	tblrd		*+
  2893  002384  CFF5 F024          	movff	tablat,___ftmul@f2
  2894  002388  0009               	tblrd		*+
  2895  00238A  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2896  00238E  000A               	tblrd		*-
  2897  002390  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2898  002394  0E00               	movlw	0
  2899  002396  6E18               	movwf	___ftadd@f2,c
  2900  002398  0ED8               	movlw	216
  2901  00239A  6E19               	movwf	___ftadd@f2+1,c
  2902  00239C  0EC1               	movlw	193
  2903  00239E  6E1A               	movwf	___ftadd@f2+2,c
  2904  0023A0  C0B8  F009         	movff	_reading,___lwtoft@c
  2905  0023A4  C0B9  F00A         	movff	_reading+1,___lwtoft@c+1
  2906  0023A8  ECD7  F018         	call	___lwtoft	;wreg free
  2907  0023AC  C009  F015         	movff	?___lwtoft,___ftadd@f1
  2908  0023B0  C00A  F016         	movff	?___lwtoft+1,___ftadd@f1+1
  2909  0023B4  C00B  F017         	movff	?___lwtoft+2,___ftadd@f1+2
  2910  0023B8  ECF2  F00F         	call	___ftadd	;wreg free
  2911  0023BC  C015  F021         	movff	?___ftadd,___ftmul@f1
  2912  0023C0  C016  F022         	movff	?___ftadd+1,___ftmul@f1+1
  2913  0023C4  C017  F023         	movff	?___ftadd+2,___ftmul@f1+2
  2914  0023C8  EC79  F013         	call	___ftmul	;wreg free
  2915  0023CC  C021  F030         	movff	?___ftmul,___ftdiv@f1
  2916  0023D0  C022  F031         	movff	?___ftmul+1,___ftdiv@f1+1
  2917  0023D4  C023  F032         	movff	?___ftmul+2,___ftdiv@f1+2
  2918  0023D8  EC6D  F014         	call	___ftdiv	;wreg free
  2919  0023DC  C030  F059         	movff	?___ftdiv,_INT0_ISR$1655
  2920  0023E0  C031  F05A         	movff	?___ftdiv+1,_INT0_ISR$1655+1
  2921  0023E4  C032  F05B         	movff	?___ftdiv+2,_INT0_ISR$1655+2
  2922                           
  2923                           ;ext_int.c: 166: result += cal_current[range - 1] * ((float)reading - 27) / 3.01004;
  2924  0023E8  C0B5  F015         	movff	_result,___ftadd@f1
  2925  0023EC  C0B6  F016         	movff	_result+1,___ftadd@f1+1
  2926  0023F0  C0B7  F017         	movff	_result+2,___ftadd@f1+2
  2927  0023F4  C059  F018         	movff	_INT0_ISR$1655,___ftadd@f2
  2928  0023F8  C05A  F019         	movff	_INT0_ISR$1655+1,___ftadd@f2+1
  2929  0023FC  C05B  F01A         	movff	_INT0_ISR$1655+2,___ftadd@f2+2
  2930  002400  ECF2  F00F         	call	___ftadd	;wreg free
  2931  002404  C015  F0B5         	movff	?___ftadd,_result
  2932  002408  C016  F0B6         	movff	?___ftadd+1,_result+1
  2933  00240C  C017  F0B7         	movff	?___ftadd+2,_result+2
  2934                           
  2935                           ;ext_int.c: 167: av_count += 1;
  2936  002410  0100               	movlb	0	; () banked
  2937  002412  2BBA               	incf	_av_count& (0+255),f,b
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;ext_int.c: 169: if (av_count == 10)
  2941  002414  0E0A               	movlw	10
  2942  002416  0100               	movlb	0	; () banked
  2943  002418  19BA               	xorwf	_av_count& (0+255),w,b
  2944  00241A  A4D8               	btfss	status,2,c
  2945  00241C  D019               	goto	i2l3875
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;ext_int.c: 170: {
  2949                           ;ext_int.c: 171: result /= (10);
  2950  00241E  C0B5  F030         	movff	_result,___ftdiv@f1
  2951  002422  C0B6  F031         	movff	_result+1,___ftdiv@f1+1
  2952  002426  C0B7  F032         	movff	_result+2,___ftdiv@f1+2
  2953  00242A  0E00               	movlw	0
  2954  00242C  6E33               	movwf	___ftdiv@f2,c
  2955  00242E  0E20               	movlw	32
  2956  002430  6E34               	movwf	___ftdiv@f2+1,c
  2957  002432  0E41               	movlw	65
  2958  002434  6E35               	movwf	___ftdiv@f2+2,c
  2959  002436  EC6D  F014         	call	___ftdiv	;wreg free
  2960  00243A  C030  F0B5         	movff	?___ftdiv,_result
  2961  00243E  C031  F0B6         	movff	?___ftdiv+1,_result+1
  2962  002442  C032  F0B7         	movff	?___ftdiv+2,_result+2
  2963                           
  2964                           ;ext_int.c: 172: UpdateDisplay();
  2965  002446  EC1B  F00F         	call	_UpdateDisplay	;wreg free
  2966                           
  2967                           ;ext_int.c: 173: av_count = 0;
  2968  00244A  0E00               	movlw	0
  2969  00244C  0100               	movlb	0	; () banked
  2970  00244E  6FBA               	movwf	_av_count& (0+255),b
  2971  002450                     i2l3875:
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;ext_int.c: 174: }
  2975                           ;ext_int.c: 180: if (auto_range == 1)
  2976  002450  0100               	movlb	0	; () banked
  2977  002452  05CD               	decf	_auto_range& (0+255),w,b
  2978  002454  A4D8               	btfss	status,2,c
  2979  002456  D012               	goto	i2l3885
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;ext_int.c: 181: {
  2983                           ;ext_int.c: 182: if (reading < 1000 && range > 2)
  2984  002458  0EE8               	movlw	232
  2985  00245A  0100               	movlb	0	; () banked
  2986  00245C  5DB8               	subwf	_reading& (0+255),w,b
  2987  00245E  0E03               	movlw	3
  2988  002460  0100               	movlb	0	; () banked
  2989  002462  59B9               	subwfb	(_reading+1)& (0+255),w,b
  2990  002464  B0D8               	btfsc	status,0,c
  2991  002466  D00A               	goto	i2l3885
  2992                           
  2993                           ; BSR set to: 0
  2994  002468  0E02               	movlw	2
  2995  00246A  0100               	movlb	0	; () banked
  2996  00246C  65CE               	cpfsgt	_range& (0+255),b
  2997  00246E  D006               	goto	i2l3885
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;ext_int.c: 183: {
  3001                           ;ext_int.c: 184: range -= 1;
  3002  002470  0100               	movlb	0	; () banked
  3003  002472  07CE               	decf	_range& (0+255),f,b
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;ext_int.c: 185: SetRange(range);
  3007  002474  0100               	movlb	0	; () banked
  3008  002476  51CE               	movf	_range& (0+255),w,b
  3009  002478  ECC8  F010         	call	_SetRange
  3010  00247C                     i2l3885:
  3011                           
  3012                           ;ext_int.c: 186: }
  3013                           ;ext_int.c: 187: }
  3014                           ;ext_int.c: 190: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  3015  00247C  0E34               	movlw	52
  3016  00247E  6E58               	movwf	??_INT0_ISR& (0+255),c
  3017  002480  0EF2               	movlw	242
  3018  002482                     i2u467_47:
  3019  002482  2EE8               	decfsz	wreg,f,c
  3020  002484  D7FE               	bra	i2u467_47
  3021  002486  2E58               	decfsz	??_INT0_ISR& (0+255),f,c
  3022  002488  D7FC               	bra	i2u467_47
  3023                           
  3024                           ;ext_int.c: 193: TMR0_Reload();
  3025  00248A  EC73  F019         	call	_TMR0_Reload	;wreg free
  3026                           
  3027                           ;ext_int.c: 196: do { LATCbits.LATC7 = 0; } while(0);
  3028  00248E  9E8B               	bcf	3979,7,c	;volatile
  3029                           
  3030                           ;ext_int.c: 197: TMR0_StartTimer();
  3031  002490  EC7C  F019         	call	i2_TMR0_StartTimer	;wreg free
  3032                           
  3033                           ;ext_int.c: 200: (INTCONbits.INT0IF = 0);
  3034  002494  92F2               	bcf	intcon,1,c	;volatile
  3035  002496  0012               	return		;funcret
  3036  002498                     __end_of_INT0_ISR:
  3037                           	opt stack 0
  3038                           tosu	equ	0xFFF
  3039                           tosh	equ	0xFFE
  3040                           tosl	equ	0xFFD
  3041                           pclatu	equ	0xFFB
  3042                           pclath	equ	0xFFA
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           prodh	equ	0xFF4
  3048                           prodl	equ	0xFF3
  3049                           intcon	equ	0xFF2
  3050                           intcon2	equ	0xFF1
  3051                           intcon3	equ	0xFF0
  3052                           postinc0	equ	0xFEE
  3053                           fsr0h	equ	0xFEA
  3054                           fsr0l	equ	0xFE9
  3055                           wreg	equ	0xFE8
  3056                           fsr1h	equ	0xFE2
  3057                           fsr1l	equ	0xFE1
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function i2_TMR0_StartTimer *****************
  3063 ;; Defined at:
  3064 ;;		line 51 in file "mcc_generated_files/tmr0.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		None
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3078 ;;      Params:         0       0       0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0
  3081 ;;      Totals:         0       0       0       0       0       0       0
  3082 ;;Total ram usage:        0 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_INT0_ISR
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text20
  3092  0032F8                     __ptext20:
  3093                           	opt stack 0
  3094  0032F8                     i2_TMR0_StartTimer:
  3095                           	opt stack 25
  3096                           
  3097                           ;tmr0.c: 54: T0CONbits.TMR0ON = 1;
  3098                           
  3099                           ;incstack = 0
  3100  0032F8  8ED5               	bsf	4053,7,c	;volatile
  3101  0032FA  0012               	return		;funcret
  3102  0032FC                     __end_ofi2_TMR0_StartTimer:
  3103                           	opt stack 0
  3104                           tosu	equ	0xFFF
  3105                           tosh	equ	0xFFE
  3106                           tosl	equ	0xFFD
  3107                           pclatu	equ	0xFFB
  3108                           pclath	equ	0xFFA
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           intcon	equ	0xFF2
  3116                           intcon2	equ	0xFF1
  3117                           intcon3	equ	0xFF0
  3118                           postinc0	equ	0xFEE
  3119                           fsr0h	equ	0xFEA
  3120                           fsr0l	equ	0xFE9
  3121                           wreg	equ	0xFE8
  3122                           fsr1h	equ	0xFE2
  3123                           fsr1l	equ	0xFE1
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function ___lwtoft *****************
  3129 ;; Defined at:
  3130 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwtoft.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  c               2    8[COMRAM] unsigned int 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  3    8[COMRAM] float 
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, status,0, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3144 ;;      Params:         3       0       0       0       0       0       0
  3145 ;;      Locals:         0       0       0       0       0       0       0
  3146 ;;      Temps:          0       0       0       0       0       0       0
  3147 ;;      Totals:         3       0       0       0       0       0       0
  3148 ;;Total ram usage:        3 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    1
  3151 ;; This function calls:
  3152 ;;		___ftpack
  3153 ;; This function is called by:
  3154 ;;		_INT0_ISR
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text21
  3159  0031AE                     __ptext21:
  3160                           	opt stack 0
  3161  0031AE                     ___lwtoft:
  3162                           	opt stack 24
  3163                           
  3164                           ;incstack = 0
  3165  0031AE  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3166  0031B2  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3167  0031B6  6A03               	clrf	___ftpack@arg+2,c
  3168  0031B8  0E8E               	movlw	142
  3169  0031BA  6E04               	movwf	___ftpack@exp,c
  3170  0031BC  0E00               	movlw	0
  3171  0031BE  6E05               	movwf	___ftpack@sign,c
  3172  0031C0  ECE0  F014         	call	___ftpack	;wreg free
  3173  0031C4  C001  F009         	movff	?___ftpack,?___lwtoft
  3174  0031C8  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3175  0031CC  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3176  0031D0  0012               	return	
  3177  0031D2                     __end_of___lwtoft:
  3178                           	opt stack 0
  3179                           tosu	equ	0xFFF
  3180                           tosh	equ	0xFFE
  3181                           tosl	equ	0xFFD
  3182                           pclatu	equ	0xFFB
  3183                           pclath	equ	0xFFA
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           intcon3	equ	0xFF0
  3193                           postinc0	equ	0xFEE
  3194                           fsr0h	equ	0xFEA
  3195                           fsr0l	equ	0xFE9
  3196                           wreg	equ	0xFE8
  3197                           fsr1h	equ	0xFE2
  3198                           fsr1l	equ	0xFE1
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _UpdateDisplay *****************
  3204 ;; Defined at:
  3205 ;;		line 57 in file "mcc_generated_files/ext_int.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  cap_string     16   55[BANK0 ] unsigned char [16]
  3210 ;;  range_string   16   39[BANK0 ] unsigned char [16]
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3220 ;;      Params:         0       0       0       0       0       0       0
  3221 ;;      Locals:         0      32       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0
  3223 ;;      Totals:         0      32       0       0       0       0       0
  3224 ;;Total ram usage:       32 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    5
  3227 ;; This function calls:
  3228 ;;		___ftdiv
  3229 ;;		___ftge
  3230 ;;		_lcd_sendStringToPos
  3231 ;;		_sprintf
  3232 ;; This function is called by:
  3233 ;;		_INT1_ISR
  3234 ;;		_INT0_ISR
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text22
  3239  001E36                     __ptext22:
  3240                           	opt stack 0
  3241  001E36                     _UpdateDisplay:
  3242                           	opt stack 20
  3243                           
  3244                           ;ext_int.c: 60: char cap_string[16];
  3245                           ;ext_int.c: 61: char range_string[16];
  3246                           ;ext_int.c: 64: if (toggle == 0b11111111)
  3247                           
  3248                           ;incstack = 0
  3249  001E36  0100               	movlb	0	; () banked
  3250  001E38  29CF               	incf	_toggle& (0+255),w,b
  3251  001E3A  A4D8               	btfss	status,2,c
  3252  001E3C  D004               	goto	i2l56
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;ext_int.c: 65: {
  3256                           ;ext_int.c: 66: toggle = ' ';
  3257  001E3E  0E20               	movlw	32
  3258  001E40  0100               	movlb	0	; () banked
  3259  001E42  6FCF               	movwf	_toggle& (0+255),b
  3260                           
  3261                           ;ext_int.c: 68: }
  3262  001E44  D002               	goto	i2l3731
  3263  001E46                     i2l56:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;ext_int.c: 69: else
  3267                           ;ext_int.c: 70: {
  3268                           ;ext_int.c: 71: toggle = 0b11111111;
  3269  001E46  0100               	movlb	0	; () banked
  3270  001E48  69CF               	setf	_toggle& (0+255),b
  3271  001E4A                     i2l3731:
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;ext_int.c: 72: }
  3275                           ;ext_int.c: 75: if (result >= 1000000.0)
  3276  001E4A  C0B5  F001         	movff	_result,___ftge@ff1
  3277  001E4E  C0B6  F002         	movff	_result+1,___ftge@ff1+1
  3278  001E52  C0B7  F003         	movff	_result+2,___ftge@ff1+2
  3279  001E56  0E24               	movlw	36
  3280  001E58  6E04               	movwf	___ftge@ff2,c
  3281  001E5A  0E74               	movlw	116
  3282  001E5C  6E05               	movwf	___ftge@ff2+1,c
  3283  001E5E  0E49               	movlw	73
  3284  001E60  6E06               	movwf	___ftge@ff2+2,c
  3285  001E62  EC37  F015         	call	___ftge	;wreg free
  3286  001E66  A0D8               	btfss	status,0,c
  3287  001E68  D023               	goto	i2l3735
  3288                           
  3289                           ;ext_int.c: 76: {
  3290                           ;ext_int.c: 77: sprintf(cap_string, "C=%12.6fuF", result / 1000000.0);
  3291  001E6A  0E97               	movlw	low UpdateDisplay@cap_string
  3292  001E6C  0100               	movlb	0	; () banked
  3293  001E6E  6F7B               	movwf	sprintf@wh& (0+255),b
  3294  001E70  0E00               	movlw	high UpdateDisplay@cap_string
  3295  001E72  0100               	movlb	0	; () banked
  3296  001E74  6F7C               	movwf	(sprintf@wh+1)& (0+255),b
  3297  001E76  0EEC               	movlw	low STR_1
  3298  001E78  0100               	movlb	0	; () banked
  3299  001E7A  6F7D               	movwf	sprintf@f& (0+255),b
  3300  001E7C  0E06               	movlw	high STR_1
  3301  001E7E  0100               	movlb	0	; () banked
  3302  001E80  6F7E               	movwf	(sprintf@f+1)& (0+255),b
  3303  001E82  C0B5  F030         	movff	_result,___ftdiv@f1
  3304  001E86  C0B6  F031         	movff	_result+1,___ftdiv@f1+1
  3305  001E8A  C0B7  F032         	movff	_result+2,___ftdiv@f1+2
  3306  001E8E  0E24               	movlw	36
  3307  001E90  6E33               	movwf	___ftdiv@f2,c
  3308  001E92  0E74               	movlw	116
  3309  001E94  6E34               	movwf	___ftdiv@f2+1,c
  3310  001E96  0E49               	movlw	73
  3311  001E98  6E35               	movwf	___ftdiv@f2+2,c
  3312  001E9A  EC6D  F014         	call	___ftdiv	;wreg free
  3313  001E9E  C030  F07F         	movff	?___ftdiv,?_sprintf+4
  3314  001EA2  C031  F080         	movff	?___ftdiv+1,?_sprintf+5
  3315  001EA6  C032  F081         	movff	?___ftdiv+2,?_sprintf+6
  3316  001EAA  EC80  F017         	call	_sprintf	;wreg free
  3317                           
  3318                           ;ext_int.c: 78: }
  3319  001EAE  D069               	goto	i2l59
  3320  001EB0                     i2l3735:
  3321                           
  3322                           ;ext_int.c: 79: else if (result < 1000000 && result >= 1000.0)
  3323  001EB0  C0B5  F001         	movff	_result,___ftge@ff1
  3324  001EB4  C0B6  F002         	movff	_result+1,___ftge@ff1+1
  3325  001EB8  C0B7  F003         	movff	_result+2,___ftge@ff1+2
  3326  001EBC  0E24               	movlw	36
  3327  001EBE  6E04               	movwf	___ftge@ff2,c
  3328  001EC0  0E74               	movlw	116
  3329  001EC2  6E05               	movwf	___ftge@ff2+1,c
  3330  001EC4  0E49               	movlw	73
  3331  001EC6  6E06               	movwf	___ftge@ff2+2,c
  3332  001EC8  EC37  F015         	call	___ftge	;wreg free
  3333  001ECC  B0D8               	btfsc	status,0,c
  3334  001ECE  D033               	goto	i2l3741
  3335  001ED0  C0B5  F001         	movff	_result,___ftge@ff1
  3336  001ED4  C0B6  F002         	movff	_result+1,___ftge@ff1+1
  3337  001ED8  C0B7  F003         	movff	_result+2,___ftge@ff1+2
  3338  001EDC  0E00               	movlw	0
  3339  001EDE  6E04               	movwf	___ftge@ff2,c
  3340  001EE0  0E7A               	movlw	122
  3341  001EE2  6E05               	movwf	___ftge@ff2+1,c
  3342  001EE4  0E44               	movlw	68
  3343  001EE6  6E06               	movwf	___ftge@ff2+2,c
  3344  001EE8  EC37  F015         	call	___ftge	;wreg free
  3345  001EEC  A0D8               	btfss	status,0,c
  3346  001EEE  D023               	goto	i2l3741
  3347                           
  3348                           ;ext_int.c: 80: {
  3349                           ;ext_int.c: 81: sprintf(cap_string, "C=%12.3fnF", result / 1000.0);
  3350  001EF0  0E97               	movlw	low UpdateDisplay@cap_string
  3351  001EF2  0100               	movlb	0	; () banked
  3352  001EF4  6F7B               	movwf	sprintf@wh& (0+255),b
  3353  001EF6  0E00               	movlw	high UpdateDisplay@cap_string
  3354  001EF8  0100               	movlb	0	; () banked
  3355  001EFA  6F7C               	movwf	(sprintf@wh+1)& (0+255),b
  3356  001EFC  0ED6               	movlw	low STR_2
  3357  001EFE  0100               	movlb	0	; () banked
  3358  001F00  6F7D               	movwf	sprintf@f& (0+255),b
  3359  001F02  0E06               	movlw	high STR_2
  3360  001F04  0100               	movlb	0	; () banked
  3361  001F06  6F7E               	movwf	(sprintf@f+1)& (0+255),b
  3362  001F08  C0B5  F030         	movff	_result,___ftdiv@f1
  3363  001F0C  C0B6  F031         	movff	_result+1,___ftdiv@f1+1
  3364  001F10  C0B7  F032         	movff	_result+2,___ftdiv@f1+2
  3365  001F14  0E00               	movlw	0
  3366  001F16  6E33               	movwf	___ftdiv@f2,c
  3367  001F18  0E7A               	movlw	122
  3368  001F1A  6E34               	movwf	___ftdiv@f2+1,c
  3369  001F1C  0E44               	movlw	68
  3370  001F1E  6E35               	movwf	___ftdiv@f2+2,c
  3371  001F20  EC6D  F014         	call	___ftdiv	;wreg free
  3372  001F24  C030  F07F         	movff	?___ftdiv,?_sprintf+4
  3373  001F28  C031  F080         	movff	?___ftdiv+1,?_sprintf+5
  3374  001F2C  C032  F081         	movff	?___ftdiv+2,?_sprintf+6
  3375  001F30  EC80  F017         	call	_sprintf	;wreg free
  3376                           
  3377                           ;ext_int.c: 82: }
  3378  001F34  D026               	goto	i2l59
  3379  001F36                     i2l3741:
  3380                           
  3381                           ;ext_int.c: 83: else if (result < 0)
  3382  001F36  0100               	movlb	0	; () banked
  3383  001F38  AFB7               	btfss	(_result+2)& (0+255),7,b
  3384  001F3A  D00F               	goto	i2l3745
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;ext_int.c: 84: {
  3388                           ;ext_int.c: 85: sprintf(cap_string, "C=ERR / OVERLOAD");
  3389  001F3C  0E97               	movlw	low UpdateDisplay@cap_string
  3390  001F3E  0100               	movlb	0	; () banked
  3391  001F40  6F7B               	movwf	sprintf@wh& (0+255),b
  3392  001F42  0E00               	movlw	high UpdateDisplay@cap_string
  3393  001F44  0100               	movlb	0	; () banked
  3394  001F46  6F7C               	movwf	(sprintf@wh+1)& (0+255),b
  3395  001F48  0EBA               	movlw	low STR_3
  3396  001F4A  0100               	movlb	0	; () banked
  3397  001F4C  6F7D               	movwf	sprintf@f& (0+255),b
  3398  001F4E  0E06               	movlw	high STR_3
  3399  001F50  0100               	movlb	0	; () banked
  3400  001F52  6F7E               	movwf	(sprintf@f+1)& (0+255),b
  3401  001F54  EC80  F017         	call	_sprintf	;wreg free
  3402                           
  3403                           ;ext_int.c: 86: }
  3404  001F58  D014               	goto	i2l59
  3405  001F5A                     i2l3745:
  3406                           
  3407                           ;ext_int.c: 87: else
  3408                           ;ext_int.c: 88: {
  3409                           ;ext_int.c: 89: sprintf(cap_string, "C=%12.0fpF", result);
  3410  001F5A  0E97               	movlw	low UpdateDisplay@cap_string
  3411  001F5C  0100               	movlb	0	; () banked
  3412  001F5E  6F7B               	movwf	sprintf@wh& (0+255),b
  3413  001F60  0E00               	movlw	high UpdateDisplay@cap_string
  3414  001F62  0100               	movlb	0	; () banked
  3415  001F64  6F7C               	movwf	(sprintf@wh+1)& (0+255),b
  3416  001F66  0EE1               	movlw	low STR_4
  3417  001F68  0100               	movlb	0	; () banked
  3418  001F6A  6F7D               	movwf	sprintf@f& (0+255),b
  3419  001F6C  0E06               	movlw	high STR_4
  3420  001F6E  0100               	movlb	0	; () banked
  3421  001F70  6F7E               	movwf	(sprintf@f+1)& (0+255),b
  3422  001F72  C0B5  F07F         	movff	_result,?_sprintf+4
  3423  001F76  C0B6  F080         	movff	_result+1,?_sprintf+5
  3424  001F7A  C0B7  F081         	movff	_result+2,?_sprintf+6
  3425  001F7E  EC80  F017         	call	_sprintf	;wreg free
  3426  001F82                     i2l59:
  3427                           
  3428                           ;ext_int.c: 90: }
  3429                           ;ext_int.c: 92: sprintf(range_string, "Range %d (%d)%d %c", range, auto_range, av_count,
      +                           toggle);
  3430  001F82  0E87               	movlw	low UpdateDisplay@range_string
  3431  001F84  0100               	movlb	0	; () banked
  3432  001F86  6F7B               	movwf	sprintf@wh& (0+255),b
  3433  001F88  0E00               	movlw	high UpdateDisplay@range_string
  3434  001F8A  0100               	movlb	0	; () banked
  3435  001F8C  6F7C               	movwf	(sprintf@wh+1)& (0+255),b
  3436  001F8E  0EA7               	movlw	low STR_5
  3437  001F90  0100               	movlb	0	; () banked
  3438  001F92  6F7D               	movwf	sprintf@f& (0+255),b
  3439  001F94  0E06               	movlw	high STR_5
  3440  001F96  0100               	movlb	0	; () banked
  3441  001F98  6F7E               	movwf	(sprintf@f+1)& (0+255),b
  3442  001F9A  C0CE  F07F         	movff	_range,?_sprintf+4
  3443  001F9E  0100               	movlb	0	; () banked
  3444  001FA0  6B80               	clrf	(?_sprintf+5)& (0+255),b
  3445  001FA2  C0CD  F081         	movff	_auto_range,?_sprintf+6
  3446  001FA6  0100               	movlb	0	; () banked
  3447  001FA8  6B82               	clrf	(?_sprintf+7)& (0+255),b
  3448  001FAA  C0BA  F083         	movff	_av_count,?_sprintf+8
  3449  001FAE  0100               	movlb	0	; () banked
  3450  001FB0  6B84               	clrf	(?_sprintf+9)& (0+255),b
  3451  001FB2  C0CF  F085         	movff	_toggle,?_sprintf+10
  3452  001FB6  0100               	movlb	0	; () banked
  3453  001FB8  6B86               	clrf	(?_sprintf+11)& (0+255),b
  3454  001FBA  EC80  F017         	call	_sprintf	;wreg free
  3455                           
  3456                           ;ext_int.c: 94: lcd_sendStringToPos(1, 1, cap_string);
  3457  001FBE  0E01               	movlw	1
  3458  001FC0  6E09               	movwf	lcd_sendStringToPos@y,c
  3459  001FC2  0E97               	movlw	low UpdateDisplay@cap_string
  3460  001FC4  6E0A               	movwf	lcd_sendStringToPos@charString,c
  3461  001FC6  0E00               	movlw	high UpdateDisplay@cap_string
  3462  001FC8  6E0B               	movwf	lcd_sendStringToPos@charString+1,c
  3463  001FCA  0E01               	movlw	1
  3464  001FCC  EC36  F019         	call	_lcd_sendStringToPos
  3465                           
  3466                           ;ext_int.c: 95: lcd_sendStringToPos(1, 2, range_string);
  3467  001FD0  0E02               	movlw	2
  3468  001FD2  6E09               	movwf	lcd_sendStringToPos@y,c
  3469  001FD4  0E87               	movlw	low UpdateDisplay@range_string
  3470  001FD6  6E0A               	movwf	lcd_sendStringToPos@charString,c
  3471  001FD8  0E00               	movlw	high UpdateDisplay@range_string
  3472  001FDA  6E0B               	movwf	lcd_sendStringToPos@charString+1,c
  3473  001FDC  0E01               	movlw	1
  3474  001FDE  EC36  F019         	call	_lcd_sendStringToPos
  3475  001FE2  0012               	return		;funcret
  3476  001FE4                     __end_of_UpdateDisplay:
  3477                           	opt stack 0
  3478                           tosu	equ	0xFFF
  3479                           tosh	equ	0xFFE
  3480                           tosl	equ	0xFFD
  3481                           pclatu	equ	0xFFB
  3482                           pclath	equ	0xFFA
  3483                           tblptru	equ	0xFF8
  3484                           tblptrh	equ	0xFF7
  3485                           tblptrl	equ	0xFF6
  3486                           tablat	equ	0xFF5
  3487                           prodh	equ	0xFF4
  3488                           prodl	equ	0xFF3
  3489                           intcon	equ	0xFF2
  3490                           intcon2	equ	0xFF1
  3491                           intcon3	equ	0xFF0
  3492                           postinc0	equ	0xFEE
  3493                           fsr0h	equ	0xFEA
  3494                           fsr0l	equ	0xFE9
  3495                           wreg	equ	0xFE8
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _sprintf *****************
  3503 ;; Defined at:
  3504 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  wh              2   27[BANK0 ] PTR unsigned char 
  3507 ;;		 -> ftoa@buf(17), UpdateDisplay@range_string(16), UpdateDisplay@cap_string(16), 
  3508 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  3509 ;;		 -> STR_7(11), STR_5(19), STR_4(11), STR_3(17), 
  3510 ;;		 -> STR_2(11), STR_1(11), 
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  pb              4   83[COMRAM] struct __prbuf
  3513 ;;  ap              2   81[COMRAM] PTR void [1]
  3514 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  2   27[BANK0 ] int 
  3517 ;; Registers used:
  3518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3524 ;;      Params:         0      12       0       0       0       0       0
  3525 ;;      Locals:         6       0       0       0       0       0       0
  3526 ;;      Temps:          0       0       0       0       0       0       0
  3527 ;;      Totals:         6      12       0       0       0       0       0
  3528 ;;Total ram usage:       18 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    4
  3531 ;; This function calls:
  3532 ;;		__doprnt
  3533 ;; This function is called by:
  3534 ;;		_UpdateDisplay
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text23
  3539  002F00                     __ptext23:
  3540                           	opt stack 0
  3541  002F00                     _sprintf:
  3542                           	opt stack 20
  3543                           
  3544                           ;incstack = 0
  3545  002F00  C07B  F054         	movff	sprintf@wh,sprintf@pb
  3546  002F04  C07C  F055         	movff	sprintf@wh+1,sprintf@pb+1
  3547  002F08  0E00               	movlw	0
  3548  002F0A  6E56               	movwf	sprintf@pb+2,c
  3549  002F0C  0E00               	movlw	0
  3550  002F0E  6E57               	movwf	sprintf@pb+3,c
  3551  002F10  0E7F               	movlw	low (?_sprintf+4)
  3552  002F12  6E52               	movwf	sprintf@ap,c
  3553  002F14  0E00               	movlw	high (?_sprintf+4)
  3554  002F16  6E53               	movwf	sprintf@ap+1,c
  3555  002F18  0E54               	movlw	low sprintf@pb
  3556  002F1A  6E46               	movwf	__doprnt@pb,c
  3557  002F1C  0E00               	movlw	high sprintf@pb
  3558  002F1E  6E47               	movwf	__doprnt@pb+1,c
  3559  002F20  C07D  F048         	movff	sprintf@f,__doprnt@f
  3560  002F24  C07E  F049         	movff	sprintf@f+1,__doprnt@f+1
  3561  002F28  0E52               	movlw	low sprintf@ap
  3562  002F2A  6E4A               	movwf	__doprnt@ap,c
  3563  002F2C  0E00               	movlw	high sprintf@ap
  3564  002F2E  6E4B               	movwf	__doprnt@ap+1,c
  3565  002F30  EC7C  F003         	call	__doprnt	;wreg free
  3566  002F34  C054  FFD9         	movff	sprintf@pb,fsr2l
  3567  002F38  C055  FFDA         	movff	sprintf@pb+1,fsr2h
  3568  002F3C  0E00               	movlw	0
  3569  002F3E  6EDF               	movwf	indf2,c
  3570  002F40  0012               	return	
  3571  002F42                     __end_of_sprintf:
  3572                           	opt stack 0
  3573                           tosu	equ	0xFFF
  3574                           tosh	equ	0xFFE
  3575                           tosl	equ	0xFFD
  3576                           pclatu	equ	0xFFB
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           intcon	equ	0xFF2
  3585                           intcon2	equ	0xFF1
  3586                           intcon3	equ	0xFF0
  3587                           postinc0	equ	0xFEE
  3588                           fsr0h	equ	0xFEA
  3589                           fsr0l	equ	0xFE9
  3590                           wreg	equ	0xFE8
  3591                           fsr1h	equ	0xFE2
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function __doprnt *****************
  3599 ;; Defined at:
  3600 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  pb              2   69[COMRAM] PTR struct __prbuf
  3603 ;;		 -> sprintf@pb(4), printf@pb(4), 
  3604 ;;  f               2   71[COMRAM] PTR const unsigned char 
  3605 ;;		 -> STR_7(11), STR_6(23), STR_5(19), STR_4(11), 
  3606 ;;		 -> STR_3(17), STR_2(11), STR_1(11), 
  3607 ;;  ap              2   73[COMRAM] PTR PTR void 
  3608 ;;		 -> sprintf@ap(2), printf@ap(2), 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  tmpval          4   17[BANK0 ] struct .
  3611 ;;  val             4   11[BANK0 ] unsigned long 
  3612 ;;  fval            3   21[BANK0 ] unsigned long 
  3613 ;;  prec            2   24[BANK0 ] int 
  3614 ;;  width           2   15[BANK0 ] int 
  3615 ;;  exp             2    9[BANK0 ] int 
  3616 ;;  flag            2    7[BANK0 ] unsigned short 
  3617 ;;  len             2    5[BANK0 ] unsigned int 
  3618 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
  3619 ;;		 -> _doprnt@c(1), 
  3620 ;;  c               1   26[BANK0 ] char 
  3621 ;;  d               1    0        unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  2   69[COMRAM] int 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3631 ;;      Params:         6       0       0       0       0       0       0
  3632 ;;      Locals:         0      27       0       0       0       0       0
  3633 ;;      Temps:          6       0       0       0       0       0       0
  3634 ;;      Totals:        12      27       0       0       0       0       0
  3635 ;;Total ram usage:       39 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    3
  3638 ;; This function calls:
  3639 ;;		Absolute function
  3640 ;;		___awdiv
  3641 ;;		___ftadd
  3642 ;;		___ftge
  3643 ;;		___ftmul
  3644 ;;		___ftneg
  3645 ;;		___ftsub
  3646 ;;		___fttol
  3647 ;;		___lldiv
  3648 ;;		___llmod
  3649 ;;		___lltoft
  3650 ;;		___wmul
  3651 ;;		__div_to_l_
  3652 ;;		__tdiv_to_l_
  3653 ;;		_fround
  3654 ;;		_isdigit
  3655 ;;		_putch
  3656 ;;		_scale
  3657 ;; This function is called by:
  3658 ;;		_printf
  3659 ;;		_sprintf
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text24
  3664  0006F8                     __ptext24:
  3665                           	opt stack 0
  3666  0006F8                     __doprnt:
  3667                           	opt stack 21
  3668                           
  3669                           ;doprnt.c: 499: signed char c;
  3670                           ;doprnt.c: 501: int width;
  3671                           ;doprnt.c: 504: int prec;
  3672                           ;doprnt.c: 508: unsigned short flag;
  3673                           ;doprnt.c: 515: char d;
  3674                           ;doprnt.c: 516: double fval;
  3675                           ;doprnt.c: 517: int exp;
  3676                           ;doprnt.c: 523: union {
  3677                           ;doprnt.c: 524: unsigned long vd;
  3678                           ;doprnt.c: 525: double integ;
  3679                           ;doprnt.c: 526: } tmpval;
  3680                           ;doprnt.c: 528: unsigned long val;
  3681                           ;doprnt.c: 529: unsigned len;
  3682                           ;doprnt.c: 530: const char * cp;
  3683                           ;doprnt.c: 536: while(c = *f++) {
  3684                           
  3685                           ;incstack = 0
  3686  0006F8  EFED  F00B         	goto	i2l3641
  3687  0006FC                     i2l3265:
  3688                           
  3689                           ;doprnt.c: 538: if(c != '%')
  3690  0006FC  0E25               	movlw	37
  3691  0006FE  0100               	movlb	0	; () banked
  3692  000700  197A               	xorwf	__doprnt@c& (0+255),w,b
  3693  000702  B4D8               	btfsc	status,2,c
  3694  000704  D036               	goto	i2l3275
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;doprnt.c: 540: {
  3698                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3699  000706  EE20 F002          	lfsr	2,2
  3700  00070A  5046               	movf	__doprnt@pb,w,c
  3701  00070C  26D9               	addwf	fsr2l,f,c
  3702  00070E  5047               	movf	__doprnt@pb+1,w,c
  3703  000710  22DA               	addwfc	fsr2h,f,c
  3704  000712  50DE               	movf	postinc2,w,c
  3705  000714  10DE               	iorwf	postinc2,w,c
  3706  000716  B4D8               	btfsc	status,2,c
  3707  000718  D015               	goto	i2l3271
  3708                           
  3709                           ; BSR set to: 0
  3710  00071A  EE20 F002          	lfsr	2,2
  3711  00071E  5046               	movf	__doprnt@pb,w,c
  3712  000720  26D9               	addwf	fsr2l,f,c
  3713  000722  5047               	movf	__doprnt@pb+1,w,c
  3714  000724  22DA               	addwfc	fsr2h,f,c
  3715  000726  D802               	call	i2u335_48
  3716  000728  EFED  F00B         	goto	i2l3641
  3717  00072C                     i2u335_48:
  3718  00072C  0005               	push	
  3719  00072E  6EFA               	movwf	pclath,c
  3720  000730  50DE               	movf	postinc2,w,c
  3721  000732  6EFD               	movwf	tosl,c
  3722  000734  50DE               	movf	postinc2,w,c
  3723  000736  6EFE               	movwf	tosh,c
  3724  000738  50F8               	movf	tblptru,w,c
  3725  00073A  6EFF               	movwf	tosu,c
  3726  00073C  50FA               	movf	pclath,w,c
  3727  00073E  0100               	movlb	0	; () banked
  3728  000740  517A               	movf	__doprnt@c& (0+255),w,b
  3729  000742  0012               	return		;indir
  3730  000744                     i2l3271:
  3731  000744  C046  FFD9         	movff	__doprnt@pb,fsr2l
  3732  000748  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  3733  00074C  CFDE F04C          	movff	postinc2,??__doprnt
  3734  000750  CFDD F04D          	movff	postdec2,??__doprnt+1
  3735  000754  C04C  FFD9         	movff	??__doprnt,fsr2l
  3736  000758  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  3737  00075C  C07A  FFDF         	movff	__doprnt@c,indf2
  3738  000760  C046  FFD9         	movff	__doprnt@pb,fsr2l
  3739  000764  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  3740  000768  2ADE               	incf	postinc2,f,c
  3741  00076A  0E00               	movlw	0
  3742  00076C  22DD               	addwfc	postdec2,f,c
  3743                           
  3744                           ;doprnt.c: 542: continue;
  3745  00076E  EFED  F00B         	goto	i2l3641
  3746  000772                     i2l3275:
  3747                           
  3748                           ;doprnt.c: 543: }
  3749                           ;doprnt.c: 546: width = 0;
  3750  000772  0E00               	movlw	0
  3751  000774  0100               	movlb	0	; () banked
  3752  000776  6F70               	movwf	(__doprnt@width+1)& (0+255),b
  3753  000778  0E00               	movlw	0
  3754  00077A  6F6F               	movwf	__doprnt@width& (0+255),b
  3755                           
  3756                           ;doprnt.c: 548: flag = 0;
  3757  00077C  0E00               	movlw	0
  3758  00077E  0100               	movlb	0	; () banked
  3759  000780  6F68               	movwf	(__doprnt@flag+1)& (0+255),b
  3760  000782  0E00               	movlw	0
  3761  000784  6F67               	movwf	__doprnt@flag& (0+255),b
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3765  000786  C048  FFF6         	movff	__doprnt@f,tblptrl
  3766  00078A  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  3767  00078E                     	if	0	;tblptru may be non-zero
  3768  00078E                     	endif
  3769  00078E                     	if	0	;tblptru may be non-zero
  3770  00078E                     	endif
  3771  00078E  0008               	tblrd		*
  3772  000790  50F5               	movf	tablat,w,c
  3773  000792  EC1A  F019         	call	_isdigit
  3774  000796  A0D8               	btfss	status,0,c
  3775  000798  D035               	goto	i2l3289
  3776                           
  3777                           ;doprnt.c: 598: width = 0;
  3778  00079A  0E00               	movlw	0
  3779  00079C  0100               	movlb	0	; () banked
  3780  00079E  6F70               	movwf	(__doprnt@width+1)& (0+255),b
  3781  0007A0  0E00               	movlw	0
  3782  0007A2  6F6F               	movwf	__doprnt@width& (0+255),b
  3783  0007A4                     i2l3281:
  3784                           
  3785                           ;doprnt.c: 600: width *= 10;
  3786  0007A4  C06F  F00F         	movff	__doprnt@width,___wmul@multiplier
  3787  0007A8  C070  F010         	movff	__doprnt@width+1,___wmul@multiplier+1
  3788  0007AC  0E00               	movlw	0
  3789  0007AE  6E12               	movwf	___wmul@multiplicand+1,c
  3790  0007B0  0E0A               	movlw	10
  3791  0007B2  6E11               	movwf	___wmul@multiplicand,c
  3792  0007B4  ECC4  F018         	call	___wmul	;wreg free
  3793  0007B8  C00F  F06F         	movff	?___wmul,__doprnt@width
  3794  0007BC  C010  F070         	movff	?___wmul+1,__doprnt@width+1
  3795                           
  3796                           ;doprnt.c: 601: width += *f++ - '0';
  3797  0007C0  0ED0               	movlw	208
  3798  0007C2  6E4C               	movwf	??__doprnt& (0+255),c
  3799  0007C4  0EFF               	movlw	255
  3800  0007C6  6E4D               	movwf	(??__doprnt+1)& (0+255),c
  3801  0007C8  C048  FFF6         	movff	__doprnt@f,tblptrl
  3802  0007CC  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  3803  0007D0                     	if	0	;tblptru may be non-zero
  3804  0007D0                     	endif
  3805  0007D0                     	if	0	;tblptru may be non-zero
  3806  0007D0                     	endif
  3807  0007D0  0008               	tblrd		*
  3808  0007D2  50F5               	movf	tablat,w,c
  3809  0007D4  6E4E               	movwf	(??__doprnt+2)& (0+255),c
  3810  0007D6  6A4F               	clrf	(??__doprnt+3)& (0+255),c
  3811  0007D8  504C               	movf	??__doprnt,w,c
  3812  0007DA  264E               	addwf	??__doprnt+2,f,c
  3813  0007DC  504D               	movf	??__doprnt+1,w,c
  3814  0007DE  224F               	addwfc	??__doprnt+3,f,c
  3815  0007E0  504E               	movf	??__doprnt+2,w,c
  3816  0007E2  0100               	movlb	0	; () banked
  3817  0007E4  276F               	addwf	__doprnt@width& (0+255),f,b
  3818  0007E6  504F               	movf	??__doprnt+3,w,c
  3819  0007E8  0100               	movlb	0	; () banked
  3820  0007EA  2370               	addwfc	(__doprnt@width+1)& (0+255),f,b
  3821                           
  3822                           ; BSR set to: 0
  3823  0007EC  4A48               	infsnz	__doprnt@f,f,c
  3824  0007EE  2A49               	incf	__doprnt@f+1,f,c
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3828  0007F0  C048  FFF6         	movff	__doprnt@f,tblptrl
  3829  0007F4  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  3830  0007F8                     	if	0	;tblptru may be non-zero
  3831  0007F8                     	endif
  3832  0007F8                     	if	0	;tblptru may be non-zero
  3833  0007F8                     	endif
  3834  0007F8  0008               	tblrd		*
  3835  0007FA  50F5               	movf	tablat,w,c
  3836  0007FC  EC1A  F019         	call	_isdigit
  3837  000800  B0D8               	btfsc	status,0,c
  3838  000802  D7D0               	goto	i2l3281
  3839  000804                     i2l3289:
  3840                           
  3841                           ;doprnt.c: 608: }
  3842                           ;doprnt.c: 611: if(*f == '.') {
  3843  000804  C048  FFF6         	movff	__doprnt@f,tblptrl
  3844  000808  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  3845  00080C                     	if	0	;tblptru may be non-zero
  3846  00080C                     	endif
  3847  00080C                     	if	0	;tblptru may be non-zero
  3848  00080C                     	endif
  3849  00080C  0008               	tblrd		*
  3850  00080E  50F5               	movf	tablat,w,c
  3851  000810  0A2E               	xorlw	46
  3852  000812  A4D8               	btfss	status,2,c
  3853  000814  D032               	goto	i2l3301
  3854                           
  3855                           ;doprnt.c: 612: flag |= 0x4000;
  3856  000816  0100               	movlb	0	; () banked
  3857  000818  8D68               	bsf	(__doprnt@flag+1)& (0+255),6,b
  3858                           
  3859                           ;doprnt.c: 613: f++;
  3860  00081A  4A48               	infsnz	__doprnt@f,f,c
  3861  00081C  2A49               	incf	__doprnt@f+1,f,c
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;doprnt.c: 620: {
  3865                           ;doprnt.c: 621: prec = 0;
  3866  00081E  0E00               	movlw	0
  3867  000820  0100               	movlb	0	; () banked
  3868  000822  6F79               	movwf	(__doprnt@prec+1)& (0+255),b
  3869  000824  0E00               	movlw	0
  3870  000826  6F78               	movwf	__doprnt@prec& (0+255),b
  3871                           
  3872                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3873  000828  D01D               	goto	i2l3299
  3874  00082A                     i2l3295:
  3875                           
  3876                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3877  00082A  C078  F00F         	movff	__doprnt@prec,___wmul@multiplier
  3878  00082E  C079  F010         	movff	__doprnt@prec+1,___wmul@multiplier+1
  3879  000832  0E00               	movlw	0
  3880  000834  6E12               	movwf	___wmul@multiplicand+1,c
  3881  000836  0E0A               	movlw	10
  3882  000838  6E11               	movwf	___wmul@multiplicand,c
  3883  00083A  ECC4  F018         	call	___wmul	;wreg free
  3884  00083E  C048  FFF6         	movff	__doprnt@f,tblptrl
  3885  000842  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  3886  000846                     	if	0	;tblptru may be non-zero
  3887  000846                     	endif
  3888  000846                     	if	0	;tblptru may be non-zero
  3889  000846                     	endif
  3890  000846  0008               	tblrd		*
  3891  000848  50F5               	movf	tablat,w,c
  3892  00084A  260F               	addwf	?___wmul,f,c
  3893  00084C  0E00               	movlw	0
  3894  00084E  2210               	addwfc	?___wmul+1,f,c
  3895  000850  0ED0               	movlw	208
  3896  000852  240F               	addwf	?___wmul,w,c
  3897  000854  0100               	movlb	0	; () banked
  3898  000856  6F78               	movwf	__doprnt@prec& (0+255),b
  3899  000858  0EFF               	movlw	255
  3900  00085A  2010               	addwfc	?___wmul+1,w,c
  3901  00085C  0100               	movlb	0	; () banked
  3902  00085E  6F79               	movwf	(__doprnt@prec+1)& (0+255),b
  3903                           
  3904                           ; BSR set to: 0
  3905  000860  4A48               	infsnz	__doprnt@f,f,c
  3906  000862  2A49               	incf	__doprnt@f+1,f,c
  3907  000864                     i2l3299:
  3908                           
  3909                           ; BSR set to: 0
  3910  000864  C048  FFF6         	movff	__doprnt@f,tblptrl
  3911  000868  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  3912  00086C                     	if	0	;tblptru may be non-zero
  3913  00086C                     	endif
  3914  00086C                     	if	0	;tblptru may be non-zero
  3915  00086C                     	endif
  3916  00086C  0008               	tblrd		*
  3917  00086E  50F5               	movf	tablat,w,c
  3918  000870  EC1A  F019         	call	_isdigit
  3919  000874  A0D8               	btfss	status,0,c
  3920  000876  D0EA               	goto	i2l3355
  3921  000878  D7D8               	goto	i2l3295
  3922  00087A                     i2l3301:
  3923                           
  3924                           ;doprnt.c: 626: prec = 0;
  3925  00087A  0E00               	movlw	0
  3926  00087C  0100               	movlb	0	; () banked
  3927  00087E  6F79               	movwf	(__doprnt@prec+1)& (0+255),b
  3928  000880  0E00               	movlw	0
  3929  000882  6F78               	movwf	__doprnt@prec& (0+255),b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;doprnt.c: 628: flag |= 0x1000;
  3933  000884  0100               	movlb	0	; () banked
  3934  000886  8968               	bsf	(__doprnt@flag+1)& (0+255),4,b
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 635: switch(c = *f++) {
  3938                           
  3939                           ;doprnt.c: 630: }
  3940                           ;doprnt.c: 633: loop:
  3941                           
  3942                           ; BSR set to: 0
  3943  000888  D0E1               	goto	i2l3355
  3944  00088A                     i2l3305:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;doprnt.c: 643: flag |= 0x10;
  3948  00088A  0100               	movlb	0	; () banked
  3949  00088C  8967               	bsf	__doprnt@flag& (0+255),4,b
  3950                           
  3951                           ;doprnt.c: 644: goto loop;
  3952  00088E  D0DE               	goto	i2l3355
  3953  000890                     i2l3307:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;doprnt.c: 663: flag |= 0x400;
  3957  000890  0100               	movlb	0	; () banked
  3958  000892  8568               	bsf	(__doprnt@flag+1)& (0+255),2,b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;doprnt.c: 698: case 'i':
  3962                           ;doprnt.c: 699: break;
  3963                           
  3964                           ; BSR set to: 0
  3965                           
  3966                           ;doprnt.c: 697: case 'd':
  3967                           
  3968                           ;doprnt.c: 664: break;
  3969  000894  D0FD               	goto	i2l3357
  3970  000896                     i2l3309:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;doprnt.c: 753: if(prec && prec < len)
  3974  000896  0100               	movlb	0	; () banked
  3975  000898  5178               	movf	__doprnt@prec& (0+255),w,b
  3976  00089A  0100               	movlb	0	; () banked
  3977  00089C  1179               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  3978  00089E  B4D8               	btfsc	status,2,c
  3979  0008A0  D00E               	goto	i2l3315
  3980                           
  3981                           ; BSR set to: 0
  3982  0008A2  0100               	movlb	0	; () banked
  3983  0008A4  5165               	movf	__doprnt@len& (0+255),w,b
  3984  0008A6  0100               	movlb	0	; () banked
  3985  0008A8  5D78               	subwf	__doprnt@prec& (0+255),w,b
  3986  0008AA  0100               	movlb	0	; () banked
  3987  0008AC  5166               	movf	(__doprnt@len+1)& (0+255),w,b
  3988  0008AE  0100               	movlb	0	; () banked
  3989  0008B0  5979               	subwfb	(__doprnt@prec+1)& (0+255),w,b
  3990  0008B2  B0D8               	btfsc	status,0,c
  3991  0008B4  D004               	goto	i2l3315
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;doprnt.c: 754: len = prec;
  3995  0008B6  C078  F065         	movff	__doprnt@prec,__doprnt@len
  3996  0008BA  C079  F066         	movff	__doprnt@prec+1,__doprnt@len+1
  3997  0008BE                     i2l3315:
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;doprnt.c: 757: if(width > len)
  4001  0008BE  0100               	movlb	0	; () banked
  4002  0008C0  516F               	movf	__doprnt@width& (0+255),w,b
  4003  0008C2  0100               	movlb	0	; () banked
  4004  0008C4  5D65               	subwf	__doprnt@len& (0+255),w,b
  4005  0008C6  0100               	movlb	0	; () banked
  4006  0008C8  5170               	movf	(__doprnt@width+1)& (0+255),w,b
  4007  0008CA  0100               	movlb	0	; () banked
  4008  0008CC  5966               	subwfb	(__doprnt@len+1)& (0+255),w,b
  4009  0008CE  B0D8               	btfsc	status,0,c
  4010  0008D0  D009               	goto	i2l3319
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;doprnt.c: 758: width -= len;
  4014  0008D2  0100               	movlb	0	; () banked
  4015  0008D4  5165               	movf	__doprnt@len& (0+255),w,b
  4016  0008D6  0100               	movlb	0	; () banked
  4017  0008D8  5F6F               	subwf	__doprnt@width& (0+255),f,b
  4018  0008DA  0100               	movlb	0	; () banked
  4019  0008DC  5166               	movf	(__doprnt@len+1)& (0+255),w,b
  4020  0008DE  0100               	movlb	0	; () banked
  4021  0008E0  5B70               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4022  0008E2  D038               	goto	i2l3329
  4023  0008E4                     i2l3319:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 759: else
  4027                           ;doprnt.c: 760: width = 0;
  4028  0008E4  0E00               	movlw	0
  4029  0008E6  0100               	movlb	0	; () banked
  4030  0008E8  6F70               	movwf	(__doprnt@width+1)& (0+255),b
  4031  0008EA  0E00               	movlw	0
  4032  0008EC  6F6F               	movwf	__doprnt@width& (0+255),b
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 764: while(width--)
  4036  0008EE  D032               	goto	i2l3329
  4037  0008F0                     i2l3321:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4041  0008F0  EE20 F002          	lfsr	2,2
  4042  0008F4  5046               	movf	__doprnt@pb,w,c
  4043  0008F6  26D9               	addwf	fsr2l,f,c
  4044  0008F8  5047               	movf	__doprnt@pb+1,w,c
  4045  0008FA  22DA               	addwfc	fsr2h,f,c
  4046  0008FC  50DE               	movf	postinc2,w,c
  4047  0008FE  10DE               	iorwf	postinc2,w,c
  4048  000900  B4D8               	btfsc	status,2,c
  4049  000902  D013               	goto	i2l3325
  4050                           
  4051                           ; BSR set to: 0
  4052  000904  EE20 F002          	lfsr	2,2
  4053  000908  5046               	movf	__doprnt@pb,w,c
  4054  00090A  26D9               	addwf	fsr2l,f,c
  4055  00090C  5047               	movf	__doprnt@pb+1,w,c
  4056  00090E  22DA               	addwfc	fsr2h,f,c
  4057  000910  D801               	call	i2u344_48
  4058  000912  D020               	goto	i2l3329
  4059  000914                     i2u344_48:
  4060  000914  0005               	push	
  4061  000916  6EFA               	movwf	pclath,c
  4062  000918  50DE               	movf	postinc2,w,c
  4063  00091A  6EFD               	movwf	tosl,c
  4064  00091C  50DE               	movf	postinc2,w,c
  4065  00091E  6EFE               	movwf	tosh,c
  4066  000920  50F8               	movf	tblptru,w,c
  4067  000922  6EFF               	movwf	tosu,c
  4068  000924  50FA               	movf	pclath,w,c
  4069  000926  0E20               	movlw	32
  4070  000928  0012               	return		;indir
  4071  00092A                     i2l3325:
  4072  00092A  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4073  00092E  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4074  000932  CFDE F04C          	movff	postinc2,??__doprnt
  4075  000936  CFDD F04D          	movff	postdec2,??__doprnt+1
  4076  00093A  C04C  FFD9         	movff	??__doprnt,fsr2l
  4077  00093E  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  4078  000942  0E20               	movlw	32
  4079  000944  6EDF               	movwf	indf2,c
  4080  000946  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4081  00094A  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4082  00094E  2ADE               	incf	postinc2,f,c
  4083  000950  0E00               	movlw	0
  4084  000952  22DD               	addwfc	postdec2,f,c
  4085  000954                     i2l3329:
  4086  000954  0100               	movlb	0	; () banked
  4087  000956  076F               	decf	__doprnt@width& (0+255),f,b
  4088  000958  A0D8               	btfss	status,0,c
  4089  00095A  0770               	decf	(__doprnt@width+1)& (0+255),f,b
  4090  00095C  0100               	movlb	0	; () banked
  4091  00095E  296F               	incf	__doprnt@width& (0+255),w,b
  4092  000960  E1C7               	bnz	i2l3321
  4093  000962  0100               	movlb	0	; () banked
  4094  000964  2970               	incf	(__doprnt@width+1)& (0+255),w,b
  4095  000966  B4D8               	btfsc	status,2,c
  4096  000968  D042               	goto	i2l3343
  4097  00096A  D7C2               	goto	i2l3321
  4098  00096C                     i2l3331:
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4102  00096C  EE20 F002          	lfsr	2,2
  4103  000970  5046               	movf	__doprnt@pb,w,c
  4104  000972  26D9               	addwf	fsr2l,f,c
  4105  000974  5047               	movf	__doprnt@pb+1,w,c
  4106  000976  22DA               	addwfc	fsr2h,f,c
  4107  000978  50DE               	movf	postinc2,w,c
  4108  00097A  10DE               	iorwf	postinc2,w,c
  4109  00097C  B4D8               	btfsc	status,2,c
  4110  00097E  D01B               	goto	i2l3337
  4111                           
  4112                           ; BSR set to: 0
  4113  000980  EE20 F002          	lfsr	2,2
  4114  000984  5046               	movf	__doprnt@pb,w,c
  4115  000986  26D9               	addwf	fsr2l,f,c
  4116  000988  5047               	movf	__doprnt@pb+1,w,c
  4117  00098A  22DA               	addwfc	fsr2h,f,c
  4118  00098C  D801               	call	i2u347_48
  4119  00098E  D00F               	goto	i2l3335
  4120  000990                     i2u347_48:
  4121  000990  0005               	push	
  4122  000992  6EFA               	movwf	pclath,c
  4123  000994  50DE               	movf	postinc2,w,c
  4124  000996  6EFD               	movwf	tosl,c
  4125  000998  50DE               	movf	postinc2,w,c
  4126  00099A  6EFE               	movwf	tosh,c
  4127  00099C  50F8               	movf	tblptru,w,c
  4128  00099E  6EFF               	movwf	tosu,c
  4129  0009A0  50FA               	movf	pclath,w,c
  4130  0009A2  C063  FFD9         	movff	__doprnt@cp,fsr2l
  4131  0009A6  C064  FFDA         	movff	__doprnt@cp+1,fsr2h
  4132  0009AA  50DF               	movf	indf2,w,c
  4133  0009AC  0012               	return		;indir
  4134  0009AE                     i2l3335:
  4135  0009AE  0100               	movlb	0	; () banked
  4136  0009B0  4B63               	infsnz	__doprnt@cp& (0+255),f,b
  4137  0009B2  2B64               	incf	(__doprnt@cp+1)& (0+255),f,b
  4138  0009B4  D01C               	goto	i2l3343
  4139  0009B6                     i2l3337:
  4140                           
  4141                           ; BSR set to: 0
  4142  0009B6  C063  FFD9         	movff	__doprnt@cp,fsr2l
  4143  0009BA  C064  FFDA         	movff	__doprnt@cp+1,fsr2h
  4144  0009BE  C046  FFE1         	movff	__doprnt@pb,fsr1l
  4145  0009C2  C047  FFE2         	movff	__doprnt@pb+1,fsr1h
  4146  0009C6  CFE6 F04C          	movff	postinc1,??__doprnt
  4147  0009CA  CFE5 F04D          	movff	postdec1,??__doprnt+1
  4148  0009CE  C04C  FFE1         	movff	??__doprnt,fsr1l
  4149  0009D2  C04D  FFE2         	movff	??__doprnt+1,fsr1h
  4150  0009D6  CFDF FFE7          	movff	indf2,indf1
  4151                           
  4152                           ; BSR set to: 0
  4153  0009DA  0100               	movlb	0	; () banked
  4154  0009DC  4B63               	infsnz	__doprnt@cp& (0+255),f,b
  4155  0009DE  2B64               	incf	(__doprnt@cp+1)& (0+255),f,b
  4156                           
  4157                           ; BSR set to: 0
  4158  0009E0  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4159  0009E4  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4160  0009E8  2ADE               	incf	postinc2,f,c
  4161  0009EA  0E00               	movlw	0
  4162  0009EC  22DD               	addwfc	postdec2,f,c
  4163  0009EE                     i2l3343:
  4164                           
  4165                           ; BSR set to: 0
  4166  0009EE  0100               	movlb	0	; () banked
  4167  0009F0  0765               	decf	__doprnt@len& (0+255),f,b
  4168  0009F2  A0D8               	btfss	status,0,c
  4169  0009F4  0766               	decf	(__doprnt@len+1)& (0+255),f,b
  4170  0009F6  0100               	movlb	0	; () banked
  4171  0009F8  2965               	incf	__doprnt@len& (0+255),w,b
  4172  0009FA  E1B8               	bnz	i2l3331
  4173  0009FC  0100               	movlb	0	; () banked
  4174  0009FE  2966               	incf	(__doprnt@len+1)& (0+255),w,b
  4175  000A00  B4D8               	btfsc	status,2,c
  4176  000A02  EFED  F00B         	goto	i2l3641
  4177  000A06  D7B2               	goto	i2l3331
  4178  000A08                     i2l3345:
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4182  000A08  C04A  FFD9         	movff	__doprnt@ap,fsr2l
  4183  000A0C  C04B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4184  000A10  CFDF F04C          	movff	indf2,??__doprnt
  4185  000A14  0E02               	movlw	2
  4186  000A16  26DE               	addwf	postinc2,f,c
  4187  000A18  CFDF F04D          	movff	indf2,??__doprnt+1
  4188  000A1C  0E00               	movlw	0
  4189  000A1E  22DD               	addwfc	postdec2,f,c
  4190  000A20  C04C  FFD9         	movff	??__doprnt,fsr2l
  4191  000A24  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  4192  000A28  50DF               	movf	indf2,w,c
  4193  000A2A  0100               	movlb	0	; () banked
  4194  000A2C  6F7A               	movwf	__doprnt@c& (0+255),b
  4195  000A2E                     i2l3347:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;doprnt.c: 805: cp = (char *)&c;
  4199  000A2E  0E7A               	movlw	low __doprnt@c
  4200  000A30  0100               	movlb	0	; () banked
  4201  000A32  6F63               	movwf	__doprnt@cp& (0+255),b
  4202  000A34  0E00               	movlw	high __doprnt@c
  4203  000A36  0100               	movlb	0	; () banked
  4204  000A38  6F64               	movwf	(__doprnt@cp+1)& (0+255),b
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;doprnt.c: 806: len = 1;
  4208  000A3A  0E00               	movlw	0
  4209  000A3C  0100               	movlb	0	; () banked
  4210  000A3E  6F66               	movwf	(__doprnt@len+1)& (0+255),b
  4211  000A40  0E01               	movlw	1
  4212  000A42  6F65               	movwf	__doprnt@len& (0+255),b
  4213                           
  4214                           ;doprnt.c: 807: goto dostring;
  4215  000A44  D728               	goto	i2l3309
  4216  000A46                     i2l3351:
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;doprnt.c: 818: flag |= 0x40;
  4220  000A46  0100               	movlb	0	; () banked
  4221  000A48  8D67               	bsf	__doprnt@flag& (0+255),6,b
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;doprnt.c: 822: }
  4225                           
  4226                           ;doprnt.c: 819: break;
  4227  000A4A  D022               	goto	i2l3357
  4228  000A4C                     i2l3355:
  4229  000A4C  C048  FFF6         	movff	__doprnt@f,tblptrl
  4230  000A50  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  4231  000A54  4A48               	infsnz	__doprnt@f,f,c
  4232  000A56  2A49               	incf	__doprnt@f+1,f,c
  4233  000A58                     	if	0	;tblptru may be non-zero
  4234  000A58                     	endif
  4235  000A58                     	if	0	;tblptru may be non-zero
  4236  000A58                     	endif
  4237  000A58  0008               	tblrd		*
  4238  000A5A  CFF5 F07A          	movff	tablat,__doprnt@c
  4239  000A5E  0100               	movlb	0	; () banked
  4240  000A60  517A               	movf	__doprnt@c& (0+255),w,b
  4241                           
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 7, Range of values is 0 to 117
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte           22    12 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  000A62  0A00               	xorlw	0	; case 0
  4249  000A64  B4D8               	btfsc	status,2,c
  4250  000A66  EFFB  F00B         	goto	i2l3643
  4251  000A6A  0A63               	xorlw	99	; case 99
  4252  000A6C  B4D8               	btfsc	status,2,c
  4253  000A6E  D7CC               	goto	i2l3345
  4254  000A70  0A07               	xorlw	7	; case 100
  4255  000A72  B4D8               	btfsc	status,2,c
  4256  000A74  D00D               	goto	i2l3357
  4257  000A76  0A02               	xorlw	2	; case 102
  4258  000A78  B4D8               	btfsc	status,2,c
  4259  000A7A  D70A               	goto	i2l3307
  4260  000A7C  0A0F               	xorlw	15	; case 105
  4261  000A7E  B4D8               	btfsc	status,2,c
  4262  000A80  D007               	goto	i2l3357
  4263  000A82  0A05               	xorlw	5	; case 108
  4264  000A84  B4D8               	btfsc	status,2,c
  4265  000A86  D701               	goto	i2l3305
  4266  000A88  0A19               	xorlw	25	; case 117
  4267  000A8A  B4D8               	btfsc	status,2,c
  4268  000A8C  D7DC               	goto	i2l3351
  4269  000A8E  D7CF               	goto	i2l3347
  4270  000A90                     i2l3357:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;doprnt.c: 825: if(flag & (0x700)) {
  4274  000A90  0E07               	movlw	7
  4275  000A92  0100               	movlb	0	; () banked
  4276  000A94  1568               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4277  000A96  B4D8               	btfsc	status,2,c
  4278  000A98  EFC4  F009         	goto	i2l433
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;doprnt.c: 827: if(flag & 0x1000)
  4282  000A9C  0100               	movlb	0	; () banked
  4283  000A9E  A968               	btfss	(__doprnt@flag+1)& (0+255),4,b
  4284  000AA0  D005               	goto	i2l3363
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;doprnt.c: 829: prec = 6;
  4288  000AA2  0E00               	movlw	0
  4289  000AA4  0100               	movlb	0	; () banked
  4290  000AA6  6F79               	movwf	(__doprnt@prec+1)& (0+255),b
  4291  000AA8  0E06               	movlw	6
  4292  000AAA  6F78               	movwf	__doprnt@prec& (0+255),b
  4293  000AAC                     i2l3363:
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4297  000AAC  C04A  FFD9         	movff	__doprnt@ap,fsr2l
  4298  000AB0  C04B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4299  000AB4  CFDF F04C          	movff	indf2,??__doprnt
  4300  000AB8  0E03               	movlw	3
  4301  000ABA  26DE               	addwf	postinc2,f,c
  4302  000ABC  CFDF F04D          	movff	indf2,??__doprnt+1
  4303  000AC0  0E00               	movlw	0
  4304  000AC2  22DD               	addwfc	postdec2,f,c
  4305  000AC4  C04C  FFD9         	movff	??__doprnt,fsr2l
  4306  000AC8  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  4307  000ACC  CFDE F075          	movff	postinc2,__doprnt@fval
  4308  000AD0  CFDE F076          	movff	postinc2,__doprnt@fval+1
  4309  000AD4  CFDD F077          	movff	postdec2,__doprnt@fval+2
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;doprnt.c: 831: if(fval < 0.0) {
  4313  000AD8  0100               	movlb	0	; () banked
  4314  000ADA  AF77               	btfss	(__doprnt@fval+2)& (0+255),7,b
  4315  000ADC  D011               	goto	i2l3371
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;doprnt.c: 832: fval = -fval;
  4319  000ADE  C075  F001         	movff	__doprnt@fval,___ftneg@f1
  4320  000AE2  C076  F002         	movff	__doprnt@fval+1,___ftneg@f1+1
  4321  000AE6  C077  F003         	movff	__doprnt@fval+2,___ftneg@f1+2
  4322  000AEA  ECE9  F018         	call	___ftneg
  4323  000AEE  C001  F075         	movff	?___ftneg,__doprnt@fval
  4324  000AF2  C002  F076         	movff	?___ftneg+1,__doprnt@fval+1
  4325  000AF6  C003  F077         	movff	?___ftneg+2,__doprnt@fval+2
  4326                           
  4327                           ;doprnt.c: 833: flag |= 0x03;
  4328  000AFA  0E03               	movlw	3
  4329  000AFC  0100               	movlb	0	; () banked
  4330  000AFE  1367               	iorwf	__doprnt@flag& (0+255),f,b
  4331  000B00                     i2l3371:
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;doprnt.c: 834: }
  4335                           ;doprnt.c: 835: exp = 0;
  4336  000B00  0E00               	movlw	0
  4337  000B02  0100               	movlb	0	; () banked
  4338  000B04  6F6A               	movwf	(__doprnt@exp+1)& (0+255),b
  4339  000B06  0E00               	movlw	0
  4340  000B08  6F69               	movwf	__doprnt@exp& (0+255),b
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;doprnt.c: 836: if( fval!=0) {
  4344  000B0A  0100               	movlb	0	; () banked
  4345  000B0C  5175               	movf	__doprnt@fval& (0+255),w,b
  4346  000B0E  0100               	movlb	0	; () banked
  4347  000B10  1176               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  4348  000B12  0100               	movlb	0	; () banked
  4349  000B14  1177               	iorwf	(__doprnt@fval+2)& (0+255),w,b
  4350  000B16  B4D8               	btfsc	status,2,c
  4351  000B18  D08B               	goto	i2l3399
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4355  000B1A  0E82               	movlw	130
  4356  000B1C  6E4C               	movwf	??__doprnt& (0+255),c
  4357  000B1E  0EFF               	movlw	255
  4358  000B20  6E4D               	movwf	(??__doprnt+1)& (0+255),c
  4359  000B22  C075  F04E         	movff	__doprnt@fval,??__doprnt+2
  4360  000B26  C076  F04F         	movff	__doprnt@fval+1,??__doprnt+3
  4361  000B2A  C077  F050         	movff	__doprnt@fval+2,??__doprnt+4
  4362  000B2E  C078  F051         	movff	__doprnt@fval+3,??__doprnt+5
  4363  000B32  0E10               	movlw	16
  4364  000B34  D005               	goto	i2u353_40
  4365  000B36                     i2u353_45:
  4366  000B36  90D8               	bcf	status,0,c
  4367  000B38  3251               	rrcf	??__doprnt+5,f,c
  4368  000B3A  3250               	rrcf	??__doprnt+4,f,c
  4369  000B3C  324F               	rrcf	??__doprnt+3,f,c
  4370  000B3E  324E               	rrcf	??__doprnt+2,f,c
  4371  000B40                     i2u353_40:
  4372  000B40  2EE8               	decfsz	wreg,f,c
  4373  000B42  D7F9               	goto	i2u353_45
  4374  000B44  504E               	movf	??__doprnt+2,w,c
  4375  000B46  244C               	addwf	??__doprnt,w,c
  4376  000B48  0100               	movlb	0	; () banked
  4377  000B4A  6F69               	movwf	__doprnt@exp& (0+255),b
  4378  000B4C  0E00               	movlw	0
  4379  000B4E  204D               	addwfc	??__doprnt+1,w,c
  4380  000B50  0100               	movlb	0	; () banked
  4381  000B52  6F6A               	movwf	(__doprnt@exp+1)& (0+255),b
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;doprnt.c: 838: exp--;
  4385  000B54  0100               	movlb	0	; () banked
  4386  000B56  0769               	decf	__doprnt@exp& (0+255),f,b
  4387  000B58  A0D8               	btfss	status,0,c
  4388  000B5A  076A               	decf	(__doprnt@exp+1)& (0+255),f,b
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;doprnt.c: 839: exp *= 3;
  4392  000B5C  C069  F00F         	movff	__doprnt@exp,___wmul@multiplier
  4393  000B60  C06A  F010         	movff	__doprnt@exp+1,___wmul@multiplier+1
  4394  000B64  0E00               	movlw	0
  4395  000B66  6E12               	movwf	___wmul@multiplicand+1,c
  4396  000B68  0E03               	movlw	3
  4397  000B6A  6E11               	movwf	___wmul@multiplicand,c
  4398  000B6C  ECC4  F018         	call	___wmul	;wreg free
  4399  000B70  C00F  F069         	movff	?___wmul,__doprnt@exp
  4400  000B74  C010  F06A         	movff	?___wmul+1,__doprnt@exp+1
  4401                           
  4402                           ;doprnt.c: 840: exp /= 10;
  4403  000B78  C069  F007         	movff	__doprnt@exp,___awdiv@dividend
  4404  000B7C  C06A  F008         	movff	__doprnt@exp+1,___awdiv@dividend+1
  4405  000B80  0E00               	movlw	0
  4406  000B82  6E0A               	movwf	___awdiv@divisor+1,c
  4407  000B84  0E0A               	movlw	10
  4408  000B86  6E09               	movwf	___awdiv@divisor,c
  4409  000B88  EC7F  F015         	call	___awdiv	;wreg free
  4410  000B8C  C007  F069         	movff	?___awdiv,__doprnt@exp
  4411  000B90  C008  F06A         	movff	?___awdiv+1,__doprnt@exp+1
  4412                           
  4413                           ;doprnt.c: 841: if(exp < 0)
  4414  000B94  0100               	movlb	0	; () banked
  4415  000B96  AF6A               	btfss	(__doprnt@exp+1)& (0+255),7,b
  4416  000B98  D004               	goto	i2l3387
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 842: exp--;
  4420  000B9A  0100               	movlb	0	; () banked
  4421  000B9C  0769               	decf	__doprnt@exp& (0+255),f,b
  4422  000B9E  A0D8               	btfss	status,0,c
  4423  000BA0  076A               	decf	(__doprnt@exp+1)& (0+255),f,b
  4424  000BA2                     i2l3387:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4428  000BA2  0100               	movlb	0	; () banked
  4429  000BA4  5169               	movf	__doprnt@exp& (0+255),w,b
  4430  000BA6  0800               	sublw	0
  4431  000BA8  EC00  F00C         	call	_scale
  4432  000BAC  C030  F071         	movff	?_scale,__doprnt@tmpval
  4433  000BB0  C031  F072         	movff	?_scale+1,__doprnt@tmpval+1
  4434  000BB4  C032  F073         	movff	?_scale+2,__doprnt@tmpval+2
  4435                           
  4436                           ;doprnt.c: 847: tmpval.integ *= fval;
  4437  000BB8  C071  F021         	movff	__doprnt@tmpval,___ftmul@f1
  4438  000BBC  C072  F022         	movff	__doprnt@tmpval+1,___ftmul@f1+1
  4439  000BC0  C073  F023         	movff	__doprnt@tmpval+2,___ftmul@f1+2
  4440  000BC4  C075  F024         	movff	__doprnt@fval,___ftmul@f2
  4441  000BC8  C076  F025         	movff	__doprnt@fval+1,___ftmul@f2+1
  4442  000BCC  C077  F026         	movff	__doprnt@fval+2,___ftmul@f2+2
  4443  000BD0  EC79  F013         	call	___ftmul	;wreg free
  4444  000BD4  C021  F071         	movff	?___ftmul,__doprnt@tmpval
  4445  000BD8  C022  F072         	movff	?___ftmul+1,__doprnt@tmpval+1
  4446  000BDC  C023  F073         	movff	?___ftmul+2,__doprnt@tmpval+2
  4447                           
  4448                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4449  000BE0  C071  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4450  000BE4  C072  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4451  000BE8  C073  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4452  000BEC  0E00               	movlw	0
  4453  000BEE  6E04               	movwf	___ftge@ff2,c
  4454  000BF0  0E80               	movlw	128
  4455  000BF2  6E05               	movwf	___ftge@ff2+1,c
  4456  000BF4  0E3F               	movlw	63
  4457  000BF6  6E06               	movwf	___ftge@ff2+2,c
  4458  000BF8  EC37  F015         	call	___ftge	;wreg free
  4459  000BFC  B0D8               	btfsc	status,0,c
  4460  000BFE  D005               	goto	i2l3395
  4461                           
  4462                           ;doprnt.c: 849: exp--;
  4463  000C00  0100               	movlb	0	; () banked
  4464  000C02  0769               	decf	__doprnt@exp& (0+255),f,b
  4465  000C04  A0D8               	btfss	status,0,c
  4466  000C06  076A               	decf	(__doprnt@exp+1)& (0+255),f,b
  4467  000C08  D013               	goto	i2l3399
  4468  000C0A                     i2l3395:
  4469                           
  4470                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4471  000C0A  C071  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4472  000C0E  C072  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4473  000C12  C073  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4474  000C16  0E00               	movlw	0
  4475  000C18  6E04               	movwf	___ftge@ff2,c
  4476  000C1A  0E20               	movlw	32
  4477  000C1C  6E05               	movwf	___ftge@ff2+1,c
  4478  000C1E  0E41               	movlw	65
  4479  000C20  6E06               	movwf	___ftge@ff2+2,c
  4480  000C22  EC37  F015         	call	___ftge	;wreg free
  4481  000C26  A0D8               	btfss	status,0,c
  4482  000C28  D003               	goto	i2l3399
  4483                           
  4484                           ;doprnt.c: 851: exp++;
  4485  000C2A  0100               	movlb	0	; () banked
  4486  000C2C  4B69               	infsnz	__doprnt@exp& (0+255),f,b
  4487  000C2E  2B6A               	incf	(__doprnt@exp+1)& (0+255),f,b
  4488  000C30                     i2l3399:
  4489                           
  4490                           ;doprnt.c: 852: }
  4491                           ;doprnt.c: 1112: if(prec <= 12)
  4492  000C30  0100               	movlb	0	; () banked
  4493  000C32  BF79               	btfsc	(__doprnt@prec+1)& (0+255),7,b
  4494  000C34  D008               	goto	i2l3401
  4495  000C36  0100               	movlb	0	; () banked
  4496  000C38  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  4497  000C3A  E11D               	bnz	i2l3403
  4498  000C3C  0E0D               	movlw	13
  4499  000C3E  0100               	movlb	0	; () banked
  4500  000C40  5D78               	subwf	__doprnt@prec& (0+255),w,b
  4501  000C42  B0D8               	btfsc	status,0,c
  4502  000C44  D018               	goto	i2l3403
  4503  000C46                     i2l3401:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;doprnt.c: 1113: fval += fround(prec);
  4507  000C46  C075  F015         	movff	__doprnt@fval,___ftadd@f1
  4508  000C4A  C076  F016         	movff	__doprnt@fval+1,___ftadd@f1+1
  4509  000C4E  C077  F017         	movff	__doprnt@fval+2,___ftadd@f1+2
  4510  000C52  0100               	movlb	0	; () banked
  4511  000C54  5178               	movf	__doprnt@prec& (0+255),w,b
  4512  000C56  ECF8  F00D         	call	_fround
  4513  000C5A  C030  F018         	movff	?_fround,___ftadd@f2
  4514  000C5E  C031  F019         	movff	?_fround+1,___ftadd@f2+1
  4515  000C62  C032  F01A         	movff	?_fround+2,___ftadd@f2+2
  4516  000C66  ECF2  F00F         	call	___ftadd	;wreg free
  4517  000C6A  C015  F075         	movff	?___ftadd,__doprnt@fval
  4518  000C6E  C016  F076         	movff	?___ftadd+1,__doprnt@fval+1
  4519  000C72  C017  F077         	movff	?___ftadd+2,__doprnt@fval+2
  4520  000C76                     i2l3403:
  4521                           
  4522                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4523  000C76  0100               	movlb	0	; () banked
  4524  000C78  BF6A               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4525  000C7A  D008               	goto	i2l3405
  4526  000C7C  0100               	movlb	0	; () banked
  4527  000C7E  516A               	movf	(__doprnt@exp+1)& (0+255),w,b
  4528  000C80  E126               	bnz	i2l3411
  4529  000C82  0E0A               	movlw	10
  4530  000C84  0100               	movlb	0	; () banked
  4531  000C86  5D69               	subwf	__doprnt@exp& (0+255),w,b
  4532  000C88  B0D8               	btfsc	status,0,c
  4533  000C8A  D021               	goto	i2l3411
  4534  000C8C                     i2l3405:
  4535                           
  4536                           ; BSR set to: 0
  4537  000C8C  0100               	movlb	0	; () banked
  4538  000C8E  5175               	movf	__doprnt@fval& (0+255),w,b
  4539  000C90  0100               	movlb	0	; () banked
  4540  000C92  1176               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  4541  000C94  0100               	movlb	0	; () banked
  4542  000C96  1177               	iorwf	(__doprnt@fval+2)& (0+255),w,b
  4543  000C98  B4D8               	btfsc	status,2,c
  4544  000C9A  D05B               	goto	i2l3425
  4545                           
  4546                           ; BSR set to: 0
  4547  000C9C  C075  F037         	movff	__doprnt@fval,___fttol@f1
  4548  000CA0  C076  F038         	movff	__doprnt@fval+1,___fttol@f1+1
  4549  000CA4  C077  F039         	movff	__doprnt@fval+2,___fttol@f1+2
  4550  000CA8  ECF3  F013         	call	___fttol	;wreg free
  4551  000CAC  5037               	movf	?___fttol,w,c
  4552  000CAE  1038               	iorwf	?___fttol+1,w,c
  4553  000CB0  1039               	iorwf	?___fttol+2,w,c
  4554  000CB2  103A               	iorwf	?___fttol+3,w,c
  4555  000CB4  A4D8               	btfss	status,2,c
  4556  000CB6  D04D               	goto	i2l3425
  4557  000CB8  0100               	movlb	0	; () banked
  4558  000CBA  BF6A               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4559  000CBC  D04A               	goto	i2l3425
  4560  000CBE  0100               	movlb	0	; () banked
  4561  000CC0  516A               	movf	(__doprnt@exp+1)& (0+255),w,b
  4562  000CC2  E105               	bnz	i2l3411
  4563  000CC4  0E02               	movlw	2
  4564  000CC6  0100               	movlb	0	; () banked
  4565  000CC8  5D69               	subwf	__doprnt@exp& (0+255),w,b
  4566  000CCA  A0D8               	btfss	status,0,c
  4567  000CCC  D042               	goto	i2l3425
  4568  000CCE                     i2l3411:
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4572  000CCE  C071  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4573  000CD2  C072  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4574  000CD6  C073  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4575  000CDA  0E70               	movlw	112
  4576  000CDC  6E04               	movwf	___ftge@ff2,c
  4577  000CDE  0E89               	movlw	137
  4578  000CE0  6E05               	movwf	___ftge@ff2+1,c
  4579  000CE2  0E40               	movlw	64
  4580  000CE4  6E06               	movwf	___ftge@ff2+2,c
  4581  000CE6  EC37  F015         	call	___ftge	;wreg free
  4582  000CEA  B0D8               	btfsc	status,0,c
  4583  000CEC  D003               	goto	i2l3415
  4584                           
  4585                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4586  000CEE  0100               	movlb	0	; () banked
  4587  000CF0  0EF7               	movlw	247
  4588  000CF2  D002               	goto	L1
  4589  000CF4                     i2l3415:
  4590                           
  4591                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4592  000CF4  0100               	movlb	0	; () banked
  4593  000CF6  0EF8               	movlw	248
  4594  000CF8                     L1:
  4595  000CF8  2769               	addwf	__doprnt@exp& (0+255),f,b
  4596  000CFA  0EFF               	movlw	255
  4597  000CFC  236A               	addwfc	(__doprnt@exp+1)& (0+255),f,b
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;doprnt.c: 1124: }
  4601                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4602                           
  4603                           ; BSR set to: 0
  4604  000CFE  0100               	movlb	0	; () banked
  4605  000D00  5169               	movf	__doprnt@exp& (0+255),w,b
  4606  000D02  EC00  F00C         	call	_scale
  4607  000D06  C030  F071         	movff	?_scale,__doprnt@tmpval
  4608  000D0A  C031  F072         	movff	?_scale+1,__doprnt@tmpval+1
  4609  000D0E  C032  F073         	movff	?_scale+2,__doprnt@tmpval+2
  4610                           
  4611                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4612  000D12  C075  F001         	movff	__doprnt@fval,__tdiv_to_l_@f1
  4613  000D16  C076  F002         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
  4614  000D1A  C077  F003         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
  4615  000D1E  C071  F004         	movff	__doprnt@tmpval,__tdiv_to_l_@f2
  4616  000D22  C072  F005         	movff	__doprnt@tmpval+1,__tdiv_to_l_@f2+1
  4617  000D26  C073  F006         	movff	__doprnt@tmpval+2,__tdiv_to_l_@f2+2
  4618  000D2A  EC4C  F012         	call	__tdiv_to_l_	;wreg free
  4619  000D2E  C001  F06B         	movff	?__tdiv_to_l_,__doprnt@val
  4620  000D32  C002  F06C         	movff	?__tdiv_to_l_+1,__doprnt@val+1
  4621  000D36  C003  F06D         	movff	?__tdiv_to_l_+2,__doprnt@val+2
  4622  000D3A  C004  F06E         	movff	?__tdiv_to_l_+3,__doprnt@val+3
  4623                           
  4624                           ;doprnt.c: 1129: fval = 0.0;
  4625  000D3E  0E00               	movlw	0
  4626  000D40  0100               	movlb	0	; () banked
  4627  000D42  6F75               	movwf	__doprnt@fval& (0+255),b
  4628  000D44  0E00               	movlw	0
  4629  000D46  0100               	movlb	0	; () banked
  4630  000D48  6F76               	movwf	(__doprnt@fval+1)& (0+255),b
  4631  000D4A  0E00               	movlw	0
  4632  000D4C  0100               	movlb	0	; () banked
  4633  000D4E  6F77               	movwf	(__doprnt@fval+2)& (0+255),b
  4634                           
  4635                           ;doprnt.c: 1130: } else {
  4636  000D50  D033               	goto	i2l3429
  4637  000D52                     i2l3425:
  4638                           
  4639                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4640  000D52  C075  F037         	movff	__doprnt@fval,___fttol@f1
  4641  000D56  C076  F038         	movff	__doprnt@fval+1,___fttol@f1+1
  4642  000D5A  C077  F039         	movff	__doprnt@fval+2,___fttol@f1+2
  4643  000D5E  ECF3  F013         	call	___fttol	;wreg free
  4644  000D62  C037  F06B         	movff	?___fttol,__doprnt@val
  4645  000D66  C038  F06C         	movff	?___fttol+1,__doprnt@val+1
  4646  000D6A  C039  F06D         	movff	?___fttol+2,__doprnt@val+2
  4647  000D6E  C03A  F06E         	movff	?___fttol+3,__doprnt@val+3
  4648                           
  4649                           ;doprnt.c: 1132: fval -= (double)val;
  4650  000D72  C075  F021         	movff	__doprnt@fval,___ftsub@f1
  4651  000D76  C076  F022         	movff	__doprnt@fval+1,___ftsub@f1+1
  4652  000D7A  C077  F023         	movff	__doprnt@fval+2,___ftsub@f1+2
  4653  000D7E  C06B  F009         	movff	__doprnt@val,___lltoft@c
  4654  000D82  C06C  F00A         	movff	__doprnt@val+1,___lltoft@c+1
  4655  000D86  C06D  F00B         	movff	__doprnt@val+2,___lltoft@c+2
  4656  000D8A  C06E  F00C         	movff	__doprnt@val+3,___lltoft@c+3
  4657  000D8E  ECE6  F016         	call	___lltoft	;wreg free
  4658  000D92  C009  F024         	movff	?___lltoft,___ftsub@f2
  4659  000D96  C00A  F025         	movff	?___lltoft+1,___ftsub@f2+1
  4660  000D9A  C00B  F026         	movff	?___lltoft+2,___ftsub@f2+2
  4661  000D9E  ECC2  F017         	call	___ftsub	;wreg free
  4662  000DA2  C021  F075         	movff	?___ftsub,__doprnt@fval
  4663  000DA6  C022  F076         	movff	?___ftsub+1,__doprnt@fval+1
  4664  000DAA  C023  F077         	movff	?___ftsub+2,__doprnt@fval+2
  4665                           
  4666                           ;doprnt.c: 1133: exp = 0;
  4667  000DAE  0E00               	movlw	0
  4668  000DB0  0100               	movlb	0	; () banked
  4669  000DB2  6F6A               	movwf	(__doprnt@exp+1)& (0+255),b
  4670  000DB4  0E00               	movlw	0
  4671  000DB6  6F69               	movwf	__doprnt@exp& (0+255),b
  4672  000DB8                     i2l3429:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 1134: }
  4676                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4677  000DB8  0E01               	movlw	1
  4678  000DBA  0100               	movlb	0	; () banked
  4679  000DBC  6F7A               	movwf	__doprnt@c& (0+255),b
  4680  000DBE                     i2l3431:
  4681                           
  4682                           ; BSR set to: 0
  4683  000DBE  0E0A               	movlw	10
  4684  000DC0  0100               	movlb	0	; () banked
  4685  000DC2  197A               	xorwf	__doprnt@c& (0+255),w,b
  4686  000DC4  B4D8               	btfsc	status,2,c
  4687  000DC6  D01E               	goto	i2l3443
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;doprnt.c: 1137: if(val < dpowers[c])
  4691                           
  4692                           ; BSR set to: 0
  4693                           
  4694                           ; BSR set to: 0
  4695  000DC8  0100               	movlb	0	; () banked
  4696  000DCA  517A               	movf	__doprnt@c& (0+255),w,b
  4697  000DCC  0D04               	mullw	4
  4698  000DCE  0E01               	movlw	low _dpowers
  4699  000DD0  24F3               	addwf	prodl,w,c
  4700  000DD2  6EF6               	movwf	tblptrl,c
  4701  000DD4  0E06               	movlw	high _dpowers
  4702  000DD6  20F4               	addwfc	prodh,w,c
  4703  000DD8  6EF7               	movwf	tblptrh,c
  4704  000DDA                     	if	0	;There are less than 3 active tblptr bytes
  4705  000DDA                     	endif
  4706  000DDA  0009               	tblrd		*+
  4707  000DDC  50F5               	movf	tablat,w,c
  4708  000DDE  0100               	movlb	0	; () banked
  4709  000DE0  5D6B               	subwf	__doprnt@val& (0+255),w,b
  4710  000DE2  0009               	tblrd		*+
  4711  000DE4  50F5               	movf	tablat,w,c
  4712  000DE6  0100               	movlb	0	; () banked
  4713  000DE8  596C               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4714  000DEA  0009               	tblrd		*+
  4715  000DEC  50F5               	movf	tablat,w,c
  4716  000DEE  0100               	movlb	0	; () banked
  4717  000DF0  596D               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4718  000DF2  0009               	tblrd		*+
  4719  000DF4  50F5               	movf	tablat,w,c
  4720  000DF6  0100               	movlb	0	; () banked
  4721  000DF8  596E               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4722  000DFA  A0D8               	btfss	status,0,c
  4723  000DFC  D003               	goto	i2l3443
  4724                           
  4725                           ; BSR set to: 0
  4726                           
  4727                           ; BSR set to: 0
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;doprnt.c: 1138: break;
  4731  000DFE  0100               	movlb	0	; () banked
  4732  000E00  2B7A               	incf	__doprnt@c& (0+255),f,b
  4733  000E02  D7DD               	goto	i2l3431
  4734  000E04                     i2l3443:
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;doprnt.c: 1142: width -= prec + c + exp;
  4738  000E04  C07A  F04C         	movff	__doprnt@c,??__doprnt
  4739  000E08  6A4D               	clrf	(??__doprnt+1)& (0+255),c
  4740  000E0A  BE4C               	btfsc	??__doprnt& (0+255),7,c
  4741  000E0C  064D               	decf	(??__doprnt+1)& (0+255),f,c
  4742  000E0E  0100               	movlb	0	; () banked
  4743  000E10  5178               	movf	__doprnt@prec& (0+255),w,b
  4744  000E12  264C               	addwf	??__doprnt,f,c
  4745  000E14  0100               	movlb	0	; () banked
  4746  000E16  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  4747  000E18  224D               	addwfc	??__doprnt+1,f,c
  4748  000E1A  0100               	movlb	0	; () banked
  4749  000E1C  5169               	movf	__doprnt@exp& (0+255),w,b
  4750  000E1E  264C               	addwf	??__doprnt,f,c
  4751  000E20  0100               	movlb	0	; () banked
  4752  000E22  516A               	movf	(__doprnt@exp+1)& (0+255),w,b
  4753  000E24  224D               	addwfc	??__doprnt+1,f,c
  4754  000E26  504C               	movf	??__doprnt,w,c
  4755  000E28  0100               	movlb	0	; () banked
  4756  000E2A  5F6F               	subwf	__doprnt@width& (0+255),f,b
  4757  000E2C  504D               	movf	??__doprnt+1,w,c
  4758  000E2E  0100               	movlb	0	; () banked
  4759  000E30  5B70               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4760                           
  4761                           ;doprnt.c: 1143: if(
  4762                           ;doprnt.c: 1147: prec)
  4763  000E32  0100               	movlb	0	; () banked
  4764  000E34  5178               	movf	__doprnt@prec& (0+255),w,b
  4765  000E36  0100               	movlb	0	; () banked
  4766  000E38  1179               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  4767  000E3A  B4D8               	btfsc	status,2,c
  4768  000E3C  D004               	goto	i2l3447
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;doprnt.c: 1148: width--;
  4772  000E3E  0100               	movlb	0	; () banked
  4773  000E40  076F               	decf	__doprnt@width& (0+255),f,b
  4774  000E42  A0D8               	btfss	status,0,c
  4775  000E44  0770               	decf	(__doprnt@width+1)& (0+255),f,b
  4776  000E46                     i2l3447:
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 1149: if(flag & 0x03)
  4780  000E46  0E03               	movlw	3
  4781  000E48  0100               	movlb	0	; () banked
  4782  000E4A  1567               	andwf	__doprnt@flag& (0+255),w,b
  4783  000E4C  6E4C               	movwf	??__doprnt& (0+255),c
  4784  000E4E  0E00               	movlw	0
  4785  000E50  0100               	movlb	0	; () banked
  4786  000E52  1568               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4787  000E54  6E4D               	movwf	(??__doprnt+1)& (0+255),c
  4788  000E56  504C               	movf	??__doprnt,w,c
  4789  000E58  104D               	iorwf	??__doprnt+1,w,c
  4790  000E5A  B4D8               	btfsc	status,2,c
  4791  000E5C  D037               	goto	i2l3461
  4792  000E5E  D032               	goto	i2l3459
  4793  000E60                     i2l3451:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;doprnt.c: 1181: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4797  000E60  EE20 F002          	lfsr	2,2
  4798  000E64  5046               	movf	__doprnt@pb,w,c
  4799  000E66  26D9               	addwf	fsr2l,f,c
  4800  000E68  5047               	movf	__doprnt@pb+1,w,c
  4801  000E6A  22DA               	addwfc	fsr2h,f,c
  4802  000E6C  50DE               	movf	postinc2,w,c
  4803  000E6E  10DE               	iorwf	postinc2,w,c
  4804  000E70  B4D8               	btfsc	status,2,c
  4805  000E72  D013               	goto	i2l3455
  4806                           
  4807                           ; BSR set to: 0
  4808  000E74  EE20 F002          	lfsr	2,2
  4809  000E78  5046               	movf	__doprnt@pb,w,c
  4810  000E7A  26D9               	addwf	fsr2l,f,c
  4811  000E7C  5047               	movf	__doprnt@pb+1,w,c
  4812  000E7E  22DA               	addwfc	fsr2h,f,c
  4813  000E80  D801               	call	i2u369_48
  4814  000E82  D020               	goto	i2l3459
  4815  000E84                     i2u369_48:
  4816  000E84  0005               	push	
  4817  000E86  6EFA               	movwf	pclath,c
  4818  000E88  50DE               	movf	postinc2,w,c
  4819  000E8A  6EFD               	movwf	tosl,c
  4820  000E8C  50DE               	movf	postinc2,w,c
  4821  000E8E  6EFE               	movwf	tosh,c
  4822  000E90  50F8               	movf	tblptru,w,c
  4823  000E92  6EFF               	movwf	tosu,c
  4824  000E94  50FA               	movf	pclath,w,c
  4825  000E96  0E20               	movlw	32
  4826  000E98  0012               	return		;indir
  4827  000E9A                     i2l3455:
  4828  000E9A  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4829  000E9E  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4830  000EA2  CFDE F04C          	movff	postinc2,??__doprnt
  4831  000EA6  CFDD F04D          	movff	postdec2,??__doprnt+1
  4832  000EAA  C04C  FFD9         	movff	??__doprnt,fsr2l
  4833  000EAE  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  4834  000EB2  0E20               	movlw	32
  4835  000EB4  6EDF               	movwf	indf2,c
  4836  000EB6  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4837  000EBA  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4838  000EBE  2ADE               	incf	postinc2,f,c
  4839  000EC0  0E00               	movlw	0
  4840  000EC2  22DD               	addwfc	postdec2,f,c
  4841  000EC4                     i2l3459:
  4842                           
  4843                           ;doprnt.c: 1182: width--;
  4844  000EC4  0100               	movlb	0	; () banked
  4845  000EC6  076F               	decf	__doprnt@width& (0+255),f,b
  4846  000EC8  A0D8               	btfss	status,0,c
  4847  000ECA  0770               	decf	(__doprnt@width+1)& (0+255),f,b
  4848  000ECC                     i2l3461:
  4849                           
  4850                           ; BSR set to: 0
  4851  000ECC  0100               	movlb	0	; () banked
  4852  000ECE  BF70               	btfsc	(__doprnt@width+1)& (0+255),7,b
  4853  000ED0  D007               	goto	i2l3463
  4854  000ED2  0100               	movlb	0	; () banked
  4855  000ED4  5170               	movf	(__doprnt@width+1)& (0+255),w,b
  4856  000ED6  E1C4               	bnz	i2l3451
  4857  000ED8  0100               	movlb	0	; () banked
  4858  000EDA  056F               	decf	__doprnt@width& (0+255),w,b
  4859  000EDC  B0D8               	btfsc	status,0,c
  4860  000EDE  D7C0               	goto	i2l3451
  4861  000EE0                     i2l3463:
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;doprnt.c: 1183: }
  4865                           ;doprnt.c: 1188: if(flag & 0x03)
  4866  000EE0  0E03               	movlw	3
  4867  000EE2  0100               	movlb	0	; () banked
  4868  000EE4  1567               	andwf	__doprnt@flag& (0+255),w,b
  4869  000EE6  6E4C               	movwf	??__doprnt& (0+255),c
  4870  000EE8  0E00               	movlw	0
  4871  000EEA  0100               	movlb	0	; () banked
  4872  000EEC  1568               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4873  000EEE  6E4D               	movwf	(??__doprnt+1)& (0+255),c
  4874  000EF0  504C               	movf	??__doprnt,w,c
  4875  000EF2  104D               	iorwf	??__doprnt+1,w,c
  4876  000EF4  B4D8               	btfsc	status,2,c
  4877  000EF6  D0A4               	goto	i2l3483
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 1190: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4881  000EF8  EE20 F002          	lfsr	2,2
  4882  000EFC  5046               	movf	__doprnt@pb,w,c
  4883  000EFE  26D9               	addwf	fsr2l,f,c
  4884  000F00  5047               	movf	__doprnt@pb+1,w,c
  4885  000F02  22DA               	addwfc	fsr2h,f,c
  4886  000F04  50DE               	movf	postinc2,w,c
  4887  000F06  10DE               	iorwf	postinc2,w,c
  4888  000F08  B4D8               	btfsc	status,2,c
  4889  000F0A  D013               	goto	i2l3469
  4890                           
  4891                           ; BSR set to: 0
  4892  000F0C  EE20 F002          	lfsr	2,2
  4893  000F10  5046               	movf	__doprnt@pb,w,c
  4894  000F12  26D9               	addwf	fsr2l,f,c
  4895  000F14  5047               	movf	__doprnt@pb+1,w,c
  4896  000F16  22DA               	addwfc	fsr2h,f,c
  4897  000F18  D801               	call	i2u373_48
  4898  000F1A  D092               	goto	i2l3483
  4899  000F1C                     i2u373_48:
  4900  000F1C  0005               	push	
  4901  000F1E  6EFA               	movwf	pclath,c
  4902  000F20  50DE               	movf	postinc2,w,c
  4903  000F22  6EFD               	movwf	tosl,c
  4904  000F24  50DE               	movf	postinc2,w,c
  4905  000F26  6EFE               	movwf	tosh,c
  4906  000F28  50F8               	movf	tblptru,w,c
  4907  000F2A  6EFF               	movwf	tosu,c
  4908  000F2C  50FA               	movf	pclath,w,c
  4909  000F2E  0E2D               	movlw	45
  4910  000F30  0012               	return		;indir
  4911  000F32                     i2l3469:
  4912  000F32  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4913  000F36  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4914  000F3A  CFDE F04C          	movff	postinc2,??__doprnt
  4915  000F3E  CFDD F04D          	movff	postdec2,??__doprnt+1
  4916  000F42  C04C  FFD9         	movff	??__doprnt,fsr2l
  4917  000F46  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  4918  000F4A  0E2D               	movlw	45
  4919  000F4C  D077               	goto	L2
  4920  000F4E                     i2l3471:
  4921  000F4E  C046  FFD9         	movff	__doprnt@pb,fsr2l
  4922  000F52  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  4923  000F56  2ADE               	incf	postinc2,f,c
  4924  000F58  0E00               	movlw	0
  4925  000F5A  22DD               	addwfc	postdec2,f,c
  4926                           
  4927                           ;doprnt.c: 1195: }
  4928                           ;doprnt.c: 1196: while(c--) {
  4929  000F5C  D071               	goto	i2l3483
  4930  000F5E                     i2l3473:
  4931                           
  4932                           ;doprnt.c: 1200: {
  4933                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4934  000F5E  C06B  F001         	movff	__doprnt@val,___lldiv@dividend
  4935  000F62  C06C  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  4936  000F66  C06D  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  4937  000F6A  C06E  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  4938  000F6E  0100               	movlb	0	; () banked
  4939  000F70  517A               	movf	__doprnt@c& (0+255),w,b
  4940  000F72  0D04               	mullw	4
  4941  000F74  0E01               	movlw	low _dpowers
  4942  000F76  24F3               	addwf	prodl,w,c
  4943  000F78  6EF6               	movwf	tblptrl,c
  4944  000F7A  0E06               	movlw	high _dpowers
  4945  000F7C  20F4               	addwfc	prodh,w,c
  4946  000F7E  6EF7               	movwf	tblptrh,c
  4947  000F80                     	if	0	;There are less than 3 active tblptr bytes
  4948  000F80                     	endif
  4949  000F80  0009               	tblrd		*+
  4950  000F82  CFF5 F005          	movff	tablat,___lldiv@divisor
  4951  000F86  0009               	tblrd		*+
  4952  000F88  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4953  000F8C  0009               	tblrd		*+
  4954  000F8E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4955  000F92  000A               	tblrd		*-
  4956  000F94  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4957  000F98  ECC1  F015         	call	___lldiv
  4958  000F9C  C001  F071         	movff	?___lldiv,__doprnt@tmpval
  4959  000FA0  C002  F072         	movff	?___lldiv+1,__doprnt@tmpval+1
  4960  000FA4  C003  F073         	movff	?___lldiv+2,__doprnt@tmpval+2
  4961  000FA8  C004  F074         	movff	?___lldiv+3,__doprnt@tmpval+3
  4962                           
  4963                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4964  000FAC  C071  F00E         	movff	__doprnt@tmpval,___llmod@dividend
  4965  000FB0  C072  F00F         	movff	__doprnt@tmpval+1,___llmod@dividend+1
  4966  000FB4  C073  F010         	movff	__doprnt@tmpval+2,___llmod@dividend+2
  4967  000FB8  C074  F011         	movff	__doprnt@tmpval+3,___llmod@dividend+3
  4968  000FBC  0E0A               	movlw	10
  4969  000FBE  6E12               	movwf	___llmod@divisor,c
  4970  000FC0  0E00               	movlw	0
  4971  000FC2  6E13               	movwf	___llmod@divisor+1,c
  4972  000FC4  0E00               	movlw	0
  4973  000FC6  6E14               	movwf	___llmod@divisor+2,c
  4974  000FC8  0E00               	movlw	0
  4975  000FCA  6E15               	movwf	___llmod@divisor+3,c
  4976  000FCC  ECB3  F016         	call	___llmod	;wreg free
  4977  000FD0  C00E  F071         	movff	?___llmod,__doprnt@tmpval
  4978  000FD4  C00F  F072         	movff	?___llmod+1,__doprnt@tmpval+1
  4979  000FD8  C010  F073         	movff	?___llmod+2,__doprnt@tmpval+2
  4980  000FDC  C011  F074         	movff	?___llmod+3,__doprnt@tmpval+3
  4981                           
  4982                           ;doprnt.c: 1203: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmp
      +                          val.vd));
  4983  000FE0  EE20 F002          	lfsr	2,2
  4984  000FE4  5046               	movf	__doprnt@pb,w,c
  4985  000FE6  26D9               	addwf	fsr2l,f,c
  4986  000FE8  5047               	movf	__doprnt@pb+1,w,c
  4987  000FEA  22DA               	addwfc	fsr2h,f,c
  4988  000FEC  50DE               	movf	postinc2,w,c
  4989  000FEE  10DE               	iorwf	postinc2,w,c
  4990  000FF0  B4D8               	btfsc	status,2,c
  4991  000FF2  D015               	goto	i2l3481
  4992  000FF4  EE20 F002          	lfsr	2,2
  4993  000FF8  5046               	movf	__doprnt@pb,w,c
  4994  000FFA  26D9               	addwf	fsr2l,f,c
  4995  000FFC  5047               	movf	__doprnt@pb+1,w,c
  4996  000FFE  22DA               	addwfc	fsr2h,f,c
  4997  001000  D801               	call	i2u375_48
  4998  001002  D01E               	goto	i2l3483
  4999  001004                     i2u375_48:
  5000  001004  0005               	push	
  5001  001006  6EFA               	movwf	pclath,c
  5002  001008  50DE               	movf	postinc2,w,c
  5003  00100A  6EFD               	movwf	tosl,c
  5004  00100C  50DE               	movf	postinc2,w,c
  5005  00100E  6EFE               	movwf	tosh,c
  5006  001010  50F8               	movf	tblptru,w,c
  5007  001012  6EFF               	movwf	tosu,c
  5008  001014  50FA               	movf	pclath,w,c
  5009  001016  0100               	movlb	0	; () banked
  5010  001018  5171               	movf	__doprnt@tmpval& (0+255),w,b
  5011  00101A  0F30               	addlw	48
  5012  00101C  0012               	return		;indir
  5013  00101E                     i2l3481:
  5014  00101E  0100               	movlb	0	; () banked
  5015  001020  5171               	movf	__doprnt@tmpval& (0+255),w,b
  5016  001022  0F30               	addlw	48
  5017  001024  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5018  001028  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5019  00102C  CFDE F04C          	movff	postinc2,??__doprnt
  5020  001030  CFDD F04D          	movff	postdec2,??__doprnt+1
  5021  001034  C04C  FFD9         	movff	??__doprnt,fsr2l
  5022  001038  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5023  00103C                     L2:
  5024  00103C  6EDF               	movwf	indf2,c
  5025  00103E  D787               	goto	i2l3471
  5026  001040                     i2l3483:
  5027  001040  0100               	movlb	0	; () banked
  5028  001042  077A               	decf	__doprnt@c& (0+255),f,b
  5029  001044  0100               	movlb	0	; () banked
  5030  001046  297A               	incf	__doprnt@c& (0+255),w,b
  5031  001048  B4D8               	btfsc	status,2,c
  5032  00104A  D037               	goto	i2l3495
  5033  00104C  D788               	goto	i2l3473
  5034  00104E                     i2l3485:
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;doprnt.c: 1208: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5038  00104E  EE20 F002          	lfsr	2,2
  5039  001052  5046               	movf	__doprnt@pb,w,c
  5040  001054  26D9               	addwf	fsr2l,f,c
  5041  001056  5047               	movf	__doprnt@pb+1,w,c
  5042  001058  22DA               	addwfc	fsr2h,f,c
  5043  00105A  50DE               	movf	postinc2,w,c
  5044  00105C  10DE               	iorwf	postinc2,w,c
  5045  00105E  B4D8               	btfsc	status,2,c
  5046  001060  D013               	goto	i2l3489
  5047                           
  5048                           ; BSR set to: 0
  5049  001062  EE20 F002          	lfsr	2,2
  5050  001066  5046               	movf	__doprnt@pb,w,c
  5051  001068  26D9               	addwf	fsr2l,f,c
  5052  00106A  5047               	movf	__doprnt@pb+1,w,c
  5053  00106C  22DA               	addwfc	fsr2h,f,c
  5054  00106E  D801               	call	i2u378_48
  5055  001070  D020               	goto	i2l3493
  5056  001072                     i2u378_48:
  5057  001072  0005               	push	
  5058  001074  6EFA               	movwf	pclath,c
  5059  001076  50DE               	movf	postinc2,w,c
  5060  001078  6EFD               	movwf	tosl,c
  5061  00107A  50DE               	movf	postinc2,w,c
  5062  00107C  6EFE               	movwf	tosh,c
  5063  00107E  50F8               	movf	tblptru,w,c
  5064  001080  6EFF               	movwf	tosu,c
  5065  001082  50FA               	movf	pclath,w,c
  5066  001084  0E30               	movlw	48
  5067  001086  0012               	return		;indir
  5068  001088                     i2l3489:
  5069  001088  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5070  00108C  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5071  001090  CFDE F04C          	movff	postinc2,??__doprnt
  5072  001094  CFDD F04D          	movff	postdec2,??__doprnt+1
  5073  001098  C04C  FFD9         	movff	??__doprnt,fsr2l
  5074  00109C  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5075  0010A0  0E30               	movlw	48
  5076  0010A2  6EDF               	movwf	indf2,c
  5077  0010A4  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5078  0010A8  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5079  0010AC  2ADE               	incf	postinc2,f,c
  5080  0010AE  0E00               	movlw	0
  5081  0010B0  22DD               	addwfc	postdec2,f,c
  5082  0010B2                     i2l3493:
  5083                           
  5084                           ;doprnt.c: 1209: exp--;
  5085  0010B2  0100               	movlb	0	; () banked
  5086  0010B4  0769               	decf	__doprnt@exp& (0+255),f,b
  5087  0010B6  A0D8               	btfss	status,0,c
  5088  0010B8  076A               	decf	(__doprnt@exp+1)& (0+255),f,b
  5089  0010BA                     i2l3495:
  5090                           
  5091                           ; BSR set to: 0
  5092  0010BA  0100               	movlb	0	; () banked
  5093  0010BC  BF6A               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  5094  0010BE  D007               	goto	i2l3497
  5095  0010C0  0100               	movlb	0	; () banked
  5096  0010C2  516A               	movf	(__doprnt@exp+1)& (0+255),w,b
  5097  0010C4  E1C4               	bnz	i2l3485
  5098  0010C6  0100               	movlb	0	; () banked
  5099  0010C8  0569               	decf	__doprnt@exp& (0+255),w,b
  5100  0010CA  B0D8               	btfsc	status,0,c
  5101  0010CC  D7C0               	goto	i2l3485
  5102  0010CE                     i2l3497:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;doprnt.c: 1210: }
  5106                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5107  0010CE  0100               	movlb	0	; () banked
  5108  0010D0  BF79               	btfsc	(__doprnt@prec+1)& (0+255),7,b
  5109  0010D2  D00C               	goto	i2l475
  5110  0010D4  0100               	movlb	0	; () banked
  5111  0010D6  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  5112  0010D8  E105               	bnz	i2u380_40
  5113  0010DA  0E09               	movlw	9
  5114  0010DC  0100               	movlb	0	; () banked
  5115  0010DE  5D78               	subwf	__doprnt@prec& (0+255),w,b
  5116  0010E0  A0D8               	btfss	status,0,c
  5117  0010E2  D004               	goto	i2l475
  5118  0010E4                     i2u380_40:
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5122  0010E4  0E08               	movlw	8
  5123  0010E6  0100               	movlb	0	; () banked
  5124  0010E8  6F7A               	movwf	__doprnt@c& (0+255),b
  5125  0010EA  D002               	goto	i2l3501
  5126  0010EC                     i2l475:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;doprnt.c: 1213: else
  5130                           ;doprnt.c: 1214: c = prec;
  5131  0010EC  C078  F07A         	movff	__doprnt@prec,__doprnt@c
  5132  0010F0                     i2l3501:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;doprnt.c: 1215: prec -= c;
  5136  0010F0  0100               	movlb	0	; () banked
  5137  0010F2  517A               	movf	__doprnt@c& (0+255),w,b
  5138  0010F4  0100               	movlb	0	; () banked
  5139  0010F6  5F78               	subwf	__doprnt@prec& (0+255),f,b
  5140  0010F8  0E00               	movlw	0
  5141  0010FA  0100               	movlb	0	; () banked
  5142  0010FC  BF7A               	btfsc	__doprnt@c& (0+255),7,b
  5143  0010FE  0EFF               	movlw	255
  5144  001100  0100               	movlb	0	; () banked
  5145  001102  5B79               	subwfb	(__doprnt@prec+1)& (0+255),f,b
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;doprnt.c: 1219: if(c)
  5149  001104  0100               	movlb	0	; () banked
  5150  001106  517A               	movf	__doprnt@c& (0+255),w,b
  5151  001108  0100               	movlb	0	; () banked
  5152  00110A  B4D8               	btfsc	status,2,c
  5153  00110C  D032               	goto	i2l3513
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;doprnt.c: 1221: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
  5157  00110E  EE20 F002          	lfsr	2,2
  5158  001112  5046               	movf	__doprnt@pb,w,c
  5159  001114  26D9               	addwf	fsr2l,f,c
  5160  001116  5047               	movf	__doprnt@pb+1,w,c
  5161  001118  22DA               	addwfc	fsr2h,f,c
  5162  00111A  50DE               	movf	postinc2,w,c
  5163  00111C  10DE               	iorwf	postinc2,w,c
  5164  00111E  B4D8               	btfsc	status,2,c
  5165  001120  D013               	goto	i2l3509
  5166                           
  5167                           ; BSR set to: 0
  5168  001122  EE20 F002          	lfsr	2,2
  5169  001126  5046               	movf	__doprnt@pb,w,c
  5170  001128  26D9               	addwf	fsr2l,f,c
  5171  00112A  5047               	movf	__doprnt@pb+1,w,c
  5172  00112C  22DA               	addwfc	fsr2h,f,c
  5173  00112E  D801               	call	i2u383_48
  5174  001130  D020               	goto	i2l3513
  5175  001132                     i2u383_48:
  5176  001132  0005               	push	
  5177  001134  6EFA               	movwf	pclath,c
  5178  001136  50DE               	movf	postinc2,w,c
  5179  001138  6EFD               	movwf	tosl,c
  5180  00113A  50DE               	movf	postinc2,w,c
  5181  00113C  6EFE               	movwf	tosh,c
  5182  00113E  50F8               	movf	tblptru,w,c
  5183  001140  6EFF               	movwf	tosu,c
  5184  001142  50FA               	movf	pclath,w,c
  5185  001144  0E2E               	movlw	46
  5186  001146  0012               	return		;indir
  5187  001148                     i2l3509:
  5188  001148  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5189  00114C  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5190  001150  CFDE F04C          	movff	postinc2,??__doprnt
  5191  001154  CFDD F04D          	movff	postdec2,??__doprnt+1
  5192  001158  C04C  FFD9         	movff	??__doprnt,fsr2l
  5193  00115C  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5194  001160  0E2E               	movlw	46
  5195  001162  6EDF               	movwf	indf2,c
  5196  001164  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5197  001168  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5198  00116C  2ADE               	incf	postinc2,f,c
  5199  00116E  0E00               	movlw	0
  5200  001170  22DD               	addwfc	postdec2,f,c
  5201  001172                     i2l3513:
  5202                           
  5203                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5204  001172  0100               	movlb	0	; () banked
  5205  001174  517A               	movf	__doprnt@c& (0+255),w,b
  5206  001176  EC00  F00C         	call	_scale
  5207  00117A  C030  F060         	movff	?_scale,__doprnt$1659
  5208  00117E  C031  F061         	movff	?_scale+1,__doprnt$1659+1
  5209  001182  C032  F062         	movff	?_scale+2,__doprnt$1659+2
  5210                           
  5211                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5212  001186  C075  F024         	movff	__doprnt@fval,___ftmul@f2
  5213  00118A  C076  F025         	movff	__doprnt@fval+1,___ftmul@f2+1
  5214  00118E  C077  F026         	movff	__doprnt@fval+2,___ftmul@f2+2
  5215  001192  C060  F021         	movff	__doprnt$1659,___ftmul@f1
  5216  001196  C061  F022         	movff	__doprnt$1659+1,___ftmul@f1+1
  5217  00119A  C062  F023         	movff	__doprnt$1659+2,___ftmul@f1+2
  5218  00119E  EC79  F013         	call	___ftmul	;wreg free
  5219  0011A2  C021  F037         	movff	?___ftmul,___fttol@f1
  5220  0011A6  C022  F038         	movff	?___ftmul+1,___fttol@f1+1
  5221  0011AA  C023  F039         	movff	?___ftmul+2,___fttol@f1+2
  5222  0011AE  ECF3  F013         	call	___fttol	;wreg free
  5223  0011B2  C037  F06B         	movff	?___fttol,__doprnt@val
  5224  0011B6  C038  F06C         	movff	?___fttol+1,__doprnt@val+1
  5225  0011BA  C039  F06D         	movff	?___fttol+2,__doprnt@val+2
  5226  0011BE  C03A  F06E         	movff	?___fttol+3,__doprnt@val+3
  5227                           
  5228                           ;doprnt.c: 1228: while(c--) {
  5229  0011C2  D09E               	goto	i2l3529
  5230  0011C4                     i2l3517:
  5231                           
  5232                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5233  0011C4  C06B  F001         	movff	__doprnt@val,___lldiv@dividend
  5234  0011C8  C06C  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  5235  0011CC  C06D  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  5236  0011D0  C06E  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  5237  0011D4  0100               	movlb	0	; () banked
  5238  0011D6  517A               	movf	__doprnt@c& (0+255),w,b
  5239  0011D8  0D04               	mullw	4
  5240  0011DA  0E01               	movlw	low _dpowers
  5241  0011DC  24F3               	addwf	prodl,w,c
  5242  0011DE  6EF6               	movwf	tblptrl,c
  5243  0011E0  0E06               	movlw	high _dpowers
  5244  0011E2  20F4               	addwfc	prodh,w,c
  5245  0011E4  6EF7               	movwf	tblptrh,c
  5246  0011E6                     	if	0	;There are less than 3 active tblptr bytes
  5247  0011E6                     	endif
  5248  0011E6  0009               	tblrd		*+
  5249  0011E8  CFF5 F005          	movff	tablat,___lldiv@divisor
  5250  0011EC  0009               	tblrd		*+
  5251  0011EE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5252  0011F2  0009               	tblrd		*+
  5253  0011F4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5254  0011F8  000A               	tblrd		*-
  5255  0011FA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5256  0011FE  ECC1  F015         	call	___lldiv	;wreg free
  5257  001202  C001  F071         	movff	?___lldiv,__doprnt@tmpval
  5258  001206  C002  F072         	movff	?___lldiv+1,__doprnt@tmpval+1
  5259  00120A  C003  F073         	movff	?___lldiv+2,__doprnt@tmpval+2
  5260  00120E  C004  F074         	movff	?___lldiv+3,__doprnt@tmpval+3
  5261                           
  5262                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5263  001212  C071  F00E         	movff	__doprnt@tmpval,___llmod@dividend
  5264  001216  C072  F00F         	movff	__doprnt@tmpval+1,___llmod@dividend+1
  5265  00121A  C073  F010         	movff	__doprnt@tmpval+2,___llmod@dividend+2
  5266  00121E  C074  F011         	movff	__doprnt@tmpval+3,___llmod@dividend+3
  5267  001222  0E0A               	movlw	10
  5268  001224  6E12               	movwf	___llmod@divisor,c
  5269  001226  0E00               	movlw	0
  5270  001228  6E13               	movwf	___llmod@divisor+1,c
  5271  00122A  0E00               	movlw	0
  5272  00122C  6E14               	movwf	___llmod@divisor+2,c
  5273  00122E  0E00               	movlw	0
  5274  001230  6E15               	movwf	___llmod@divisor+3,c
  5275  001232  ECB3  F016         	call	___llmod	;wreg free
  5276  001236  C00E  F071         	movff	?___llmod,__doprnt@tmpval
  5277  00123A  C00F  F072         	movff	?___llmod+1,__doprnt@tmpval+1
  5278  00123E  C010  F073         	movff	?___llmod+2,__doprnt@tmpval+2
  5279  001242  C011  F074         	movff	?___llmod+3,__doprnt@tmpval+3
  5280                           
  5281                           ;doprnt.c: 1231: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmp
      +                          val.vd));
  5282  001246  EE20 F002          	lfsr	2,2
  5283  00124A  5046               	movf	__doprnt@pb,w,c
  5284  00124C  26D9               	addwf	fsr2l,f,c
  5285  00124E  5047               	movf	__doprnt@pb+1,w,c
  5286  001250  22DA               	addwfc	fsr2h,f,c
  5287  001252  50DE               	movf	postinc2,w,c
  5288  001254  10DE               	iorwf	postinc2,w,c
  5289  001256  B4D8               	btfsc	status,2,c
  5290  001258  D015               	goto	i2l3525
  5291  00125A  EE20 F002          	lfsr	2,2
  5292  00125E  5046               	movf	__doprnt@pb,w,c
  5293  001260  26D9               	addwf	fsr2l,f,c
  5294  001262  5047               	movf	__doprnt@pb+1,w,c
  5295  001264  22DA               	addwfc	fsr2h,f,c
  5296  001266  D801               	call	i2u385_48
  5297  001268  D024               	goto	i2l3527
  5298  00126A                     i2u385_48:
  5299  00126A  0005               	push	
  5300  00126C  6EFA               	movwf	pclath,c
  5301  00126E  50DE               	movf	postinc2,w,c
  5302  001270  6EFD               	movwf	tosl,c
  5303  001272  50DE               	movf	postinc2,w,c
  5304  001274  6EFE               	movwf	tosh,c
  5305  001276  50F8               	movf	tblptru,w,c
  5306  001278  6EFF               	movwf	tosu,c
  5307  00127A  50FA               	movf	pclath,w,c
  5308  00127C  0100               	movlb	0	; () banked
  5309  00127E  5171               	movf	__doprnt@tmpval& (0+255),w,b
  5310  001280  0F30               	addlw	48
  5311  001282  0012               	return		;indir
  5312  001284                     i2l3525:
  5313  001284  0100               	movlb	0	; () banked
  5314  001286  5171               	movf	__doprnt@tmpval& (0+255),w,b
  5315  001288  0F30               	addlw	48
  5316  00128A  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5317  00128E  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5318  001292  CFDE F04C          	movff	postinc2,??__doprnt
  5319  001296  CFDD F04D          	movff	postdec2,??__doprnt+1
  5320  00129A  C04C  FFD9         	movff	??__doprnt,fsr2l
  5321  00129E  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5322  0012A2  6EDF               	movwf	indf2,c
  5323  0012A4  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5324  0012A8  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5325  0012AC  2ADE               	incf	postinc2,f,c
  5326  0012AE  0E00               	movlw	0
  5327  0012B0  22DD               	addwfc	postdec2,f,c
  5328  0012B2                     i2l3527:
  5329                           
  5330                           ;doprnt.c: 1232: val %= dpowers[c];
  5331  0012B2  C06B  F00E         	movff	__doprnt@val,___llmod@dividend
  5332  0012B6  C06C  F00F         	movff	__doprnt@val+1,___llmod@dividend+1
  5333  0012BA  C06D  F010         	movff	__doprnt@val+2,___llmod@dividend+2
  5334  0012BE  C06E  F011         	movff	__doprnt@val+3,___llmod@dividend+3
  5335  0012C2  0100               	movlb	0	; () banked
  5336  0012C4  517A               	movf	__doprnt@c& (0+255),w,b
  5337  0012C6  0D04               	mullw	4
  5338  0012C8  0E01               	movlw	low _dpowers
  5339  0012CA  24F3               	addwf	prodl,w,c
  5340  0012CC  6EF6               	movwf	tblptrl,c
  5341  0012CE  0E06               	movlw	high _dpowers
  5342  0012D0  20F4               	addwfc	prodh,w,c
  5343  0012D2  6EF7               	movwf	tblptrh,c
  5344  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  5345  0012D4                     	endif
  5346  0012D4  0009               	tblrd		*+
  5347  0012D6  CFF5 F012          	movff	tablat,___llmod@divisor
  5348  0012DA  0009               	tblrd		*+
  5349  0012DC  CFF5 F013          	movff	tablat,___llmod@divisor+1
  5350  0012E0  0009               	tblrd		*+
  5351  0012E2  CFF5 F014          	movff	tablat,___llmod@divisor+2
  5352  0012E6  000A               	tblrd		*-
  5353  0012E8  CFF5 F015          	movff	tablat,___llmod@divisor+3
  5354  0012EC  ECB3  F016         	call	___llmod
  5355  0012F0  C00E  F06B         	movff	?___llmod,__doprnt@val
  5356  0012F4  C00F  F06C         	movff	?___llmod+1,__doprnt@val+1
  5357  0012F8  C010  F06D         	movff	?___llmod+2,__doprnt@val+2
  5358  0012FC  C011  F06E         	movff	?___llmod+3,__doprnt@val+3
  5359  001300                     i2l3529:
  5360  001300  0100               	movlb	0	; () banked
  5361  001302  077A               	decf	__doprnt@c& (0+255),f,b
  5362  001304  0100               	movlb	0	; () banked
  5363  001306  297A               	incf	__doprnt@c& (0+255),w,b
  5364  001308  B4D8               	btfsc	status,2,c
  5365  00130A  D037               	goto	i2l3541
  5366  00130C  D75B               	goto	i2l3517
  5367  00130E                     i2l3531:
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;doprnt.c: 1236: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5371  00130E  EE20 F002          	lfsr	2,2
  5372  001312  5046               	movf	__doprnt@pb,w,c
  5373  001314  26D9               	addwf	fsr2l,f,c
  5374  001316  5047               	movf	__doprnt@pb+1,w,c
  5375  001318  22DA               	addwfc	fsr2h,f,c
  5376  00131A  50DE               	movf	postinc2,w,c
  5377  00131C  10DE               	iorwf	postinc2,w,c
  5378  00131E  B4D8               	btfsc	status,2,c
  5379  001320  D013               	goto	i2l3535
  5380                           
  5381                           ; BSR set to: 0
  5382  001322  EE20 F002          	lfsr	2,2
  5383  001326  5046               	movf	__doprnt@pb,w,c
  5384  001328  26D9               	addwf	fsr2l,f,c
  5385  00132A  5047               	movf	__doprnt@pb+1,w,c
  5386  00132C  22DA               	addwfc	fsr2h,f,c
  5387  00132E  D801               	call	i2u388_48
  5388  001330  D020               	goto	i2l3539
  5389  001332                     i2u388_48:
  5390  001332  0005               	push	
  5391  001334  6EFA               	movwf	pclath,c
  5392  001336  50DE               	movf	postinc2,w,c
  5393  001338  6EFD               	movwf	tosl,c
  5394  00133A  50DE               	movf	postinc2,w,c
  5395  00133C  6EFE               	movwf	tosh,c
  5396  00133E  50F8               	movf	tblptru,w,c
  5397  001340  6EFF               	movwf	tosu,c
  5398  001342  50FA               	movf	pclath,w,c
  5399  001344  0E30               	movlw	48
  5400  001346  0012               	return		;indir
  5401  001348                     i2l3535:
  5402  001348  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5403  00134C  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5404  001350  CFDE F04C          	movff	postinc2,??__doprnt
  5405  001354  CFDD F04D          	movff	postdec2,??__doprnt+1
  5406  001358  C04C  FFD9         	movff	??__doprnt,fsr2l
  5407  00135C  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5408  001360  0E30               	movlw	48
  5409  001362  6EDF               	movwf	indf2,c
  5410  001364  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5411  001368  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5412  00136C  2ADE               	incf	postinc2,f,c
  5413  00136E  0E00               	movlw	0
  5414  001370  22DD               	addwfc	postdec2,f,c
  5415  001372                     i2l3539:
  5416                           
  5417                           ;doprnt.c: 1237: prec--;
  5418  001372  0100               	movlb	0	; () banked
  5419  001374  0778               	decf	__doprnt@prec& (0+255),f,b
  5420  001376  A0D8               	btfss	status,0,c
  5421  001378  0779               	decf	(__doprnt@prec+1)& (0+255),f,b
  5422  00137A                     i2l3541:
  5423                           
  5424                           ; BSR set to: 0
  5425  00137A  0100               	movlb	0	; () banked
  5426  00137C  5178               	movf	__doprnt@prec& (0+255),w,b
  5427  00137E  0100               	movlb	0	; () banked
  5428  001380  1179               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5429  001382  B4D8               	btfsc	status,2,c
  5430  001384  D22A               	goto	i2l3641
  5431  001386  D7C3               	goto	i2l3531
  5432  001388                     i2l433:
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 1246: }
  5436                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5437  001388  0100               	movlb	0	; () banked
  5438  00138A  BD67               	btfsc	__doprnt@flag& (0+255),6,b
  5439  00138C  D046               	goto	i2l490
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1253: {
  5443                           ;doprnt.c: 1255: if(flag & 0x10)
  5444  00138E  0100               	movlb	0	; () banked
  5445  001390  A967               	btfss	__doprnt@flag& (0+255),4,b
  5446  001392  D019               	goto	i2l3547
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5450  001394  C04A  FFD9         	movff	__doprnt@ap,fsr2l
  5451  001398  C04B  FFDA         	movff	__doprnt@ap+1,fsr2h
  5452  00139C  CFDF F04C          	movff	indf2,??__doprnt
  5453  0013A0  0E04               	movlw	4
  5454  0013A2  26DE               	addwf	postinc2,f,c
  5455  0013A4  CFDF F04D          	movff	indf2,??__doprnt+1
  5456  0013A8  0E00               	movlw	0
  5457  0013AA  22DD               	addwfc	postdec2,f,c
  5458  0013AC  C04C  FFD9         	movff	??__doprnt,fsr2l
  5459  0013B0  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5460  0013B4  CFDE F06B          	movff	postinc2,__doprnt@val
  5461  0013B8  CFDE F06C          	movff	postinc2,__doprnt@val+1
  5462  0013BC  CFDE F06D          	movff	postinc2,__doprnt@val+2
  5463  0013C0  CFDE F06E          	movff	postinc2,__doprnt@val+3
  5464  0013C4  D01A               	goto	i2l3549
  5465  0013C6                     i2l3547:
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;doprnt.c: 1257: else
  5469                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5470  0013C6  C04A  FFD9         	movff	__doprnt@ap,fsr2l
  5471  0013CA  C04B  FFDA         	movff	__doprnt@ap+1,fsr2h
  5472  0013CE  CFDF F04C          	movff	indf2,??__doprnt
  5473  0013D2  0E02               	movlw	2
  5474  0013D4  26DE               	addwf	postinc2,f,c
  5475  0013D6  CFDF F04D          	movff	indf2,??__doprnt+1
  5476  0013DA  0E00               	movlw	0
  5477  0013DC  22DD               	addwfc	postdec2,f,c
  5478  0013DE  C04C  FFD9         	movff	??__doprnt,fsr2l
  5479  0013E2  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5480  0013E6  CFDE F06B          	movff	postinc2,__doprnt@val
  5481  0013EA  CFDD F06C          	movff	postdec2,__doprnt@val+1
  5482  0013EE  0100               	movlb	0	; () banked
  5483  0013F0  0E00               	movlw	0
  5484  0013F2  BF6C               	btfsc	(__doprnt@val+1)& (0+255),7,b
  5485  0013F4  0EFF               	movlw	-1
  5486  0013F6  6F6D               	movwf	(__doprnt@val+2)& (0+255),b
  5487  0013F8  6F6E               	movwf	(__doprnt@val+3)& (0+255),b
  5488  0013FA                     i2l3549:
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;doprnt.c: 1261: if((long)val < 0) {
  5492  0013FA  0100               	movlb	0	; () banked
  5493  0013FC  AF6E               	btfss	(__doprnt@val+3)& (0+255),7,b
  5494  0013FE  D044               	goto	i2l3559
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;doprnt.c: 1262: flag |= 0x03;
  5498  001400  0E03               	movlw	3
  5499  001402  0100               	movlb	0	; () banked
  5500  001404  1367               	iorwf	__doprnt@flag& (0+255),f,b
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;doprnt.c: 1263: val = -val;
  5504  001406  0100               	movlb	0	; () banked
  5505  001408  1F6E               	comf	(__doprnt@val+3)& (0+255),f,b
  5506  00140A  1F6D               	comf	(__doprnt@val+2)& (0+255),f,b
  5507  00140C  1F6C               	comf	(__doprnt@val+1)& (0+255),f,b
  5508  00140E  6D6B               	negf	__doprnt@val& (0+255),b
  5509  001410  0E00               	movlw	0
  5510  001412  236C               	addwfc	(__doprnt@val+1)& (0+255),f,b
  5511  001414  236D               	addwfc	(__doprnt@val+2)& (0+255),f,b
  5512  001416  236E               	addwfc	(__doprnt@val+3)& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 1264: }
  5516                           ;doprnt.c: 1266: }
  5517  001418  D037               	goto	i2l3559
  5518  00141A                     i2l490:
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;doprnt.c: 1268: else
  5522                           ;doprnt.c: 1273: {
  5523                           ;doprnt.c: 1281: if(flag & 0x10)
  5524  00141A  0100               	movlb	0	; () banked
  5525  00141C  A967               	btfss	__doprnt@flag& (0+255),4,b
  5526  00141E  D019               	goto	i2l3557
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5530  001420  C04A  FFD9         	movff	__doprnt@ap,fsr2l
  5531  001424  C04B  FFDA         	movff	__doprnt@ap+1,fsr2h
  5532  001428  CFDF F04C          	movff	indf2,??__doprnt
  5533  00142C  0E04               	movlw	4
  5534  00142E  26DE               	addwf	postinc2,f,c
  5535  001430  CFDF F04D          	movff	indf2,??__doprnt+1
  5536  001434  0E00               	movlw	0
  5537  001436  22DD               	addwfc	postdec2,f,c
  5538  001438  C04C  FFD9         	movff	??__doprnt,fsr2l
  5539  00143C  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5540  001440  CFDE F06B          	movff	postinc2,__doprnt@val
  5541  001444  CFDE F06C          	movff	postinc2,__doprnt@val+1
  5542  001448  CFDE F06D          	movff	postinc2,__doprnt@val+2
  5543  00144C  CFDE F06E          	movff	postinc2,__doprnt@val+3
  5544  001450  D01B               	goto	i2l3559
  5545  001452                     i2l3557:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;doprnt.c: 1283: else
  5549                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5550  001452  C04A  FFD9         	movff	__doprnt@ap,fsr2l
  5551  001456  C04B  FFDA         	movff	__doprnt@ap+1,fsr2h
  5552  00145A  CFDF F04C          	movff	indf2,??__doprnt
  5553  00145E  0E02               	movlw	2
  5554  001460  26DE               	addwf	postinc2,f,c
  5555  001462  CFDF F04D          	movff	indf2,??__doprnt+1
  5556  001466  0E00               	movlw	0
  5557  001468  22DD               	addwfc	postdec2,f,c
  5558  00146A  C04C  FFD9         	movff	??__doprnt,fsr2l
  5559  00146E  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5560  001472  CFDE F04E          	movff	postinc2,??__doprnt+2
  5561  001476  CFDD F04F          	movff	postdec2,??__doprnt+3
  5562  00147A  C04E  F06B         	movff	??__doprnt+2,__doprnt@val
  5563  00147E  C04F  F06C         	movff	??__doprnt+3,__doprnt@val+1
  5564  001482  0100               	movlb	0	; () banked
  5565  001484  6B6D               	clrf	(__doprnt@val+2)& (0+255),b
  5566  001486  6B6E               	clrf	(__doprnt@val+3)& (0+255),b
  5567  001488                     i2l3559:
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;doprnt.c: 1287: }
  5571                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5572  001488  0100               	movlb	0	; () banked
  5573  00148A  5178               	movf	__doprnt@prec& (0+255),w,b
  5574  00148C  0100               	movlb	0	; () banked
  5575  00148E  1179               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5576  001490  A4D8               	btfss	status,2,c
  5577  001492  D00D               	goto	i2l3565
  5578                           
  5579                           ; BSR set to: 0
  5580  001494  0100               	movlb	0	; () banked
  5581  001496  516B               	movf	__doprnt@val& (0+255),w,b
  5582  001498  0100               	movlb	0	; () banked
  5583  00149A  116C               	iorwf	(__doprnt@val+1)& (0+255),w,b
  5584  00149C  0100               	movlb	0	; () banked
  5585  00149E  116D               	iorwf	(__doprnt@val+2)& (0+255),w,b
  5586  0014A0  0100               	movlb	0	; () banked
  5587  0014A2  116E               	iorwf	(__doprnt@val+3)& (0+255),w,b
  5588  0014A4  A4D8               	btfss	status,2,c
  5589  0014A6  D003               	goto	i2l3565
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;doprnt.c: 1291: prec++;
  5593  0014A8  0100               	movlb	0	; () banked
  5594  0014AA  4B78               	infsnz	__doprnt@prec& (0+255),f,b
  5595  0014AC  2B79               	incf	(__doprnt@prec+1)& (0+255),f,b
  5596  0014AE                     i2l3565:
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5600  0014AE  0E01               	movlw	1
  5601  0014B0  0100               	movlb	0	; () banked
  5602  0014B2  6F7A               	movwf	__doprnt@c& (0+255),b
  5603  0014B4                     i2l3567:
  5604                           
  5605                           ; BSR set to: 0
  5606  0014B4  0E0A               	movlw	10
  5607  0014B6  0100               	movlb	0	; () banked
  5608  0014B8  197A               	xorwf	__doprnt@c& (0+255),w,b
  5609  0014BA  B4D8               	btfsc	status,2,c
  5610  0014BC  D01E               	goto	i2l3579
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;doprnt.c: 1306: if(val < dpowers[c])
  5614                           
  5615                           ; BSR set to: 0
  5616                           
  5617                           ; BSR set to: 0
  5618  0014BE  0100               	movlb	0	; () banked
  5619  0014C0  517A               	movf	__doprnt@c& (0+255),w,b
  5620  0014C2  0D04               	mullw	4
  5621  0014C4  0E01               	movlw	low _dpowers
  5622  0014C6  24F3               	addwf	prodl,w,c
  5623  0014C8  6EF6               	movwf	tblptrl,c
  5624  0014CA  0E06               	movlw	high _dpowers
  5625  0014CC  20F4               	addwfc	prodh,w,c
  5626  0014CE  6EF7               	movwf	tblptrh,c
  5627  0014D0                     	if	0	;There are less than 3 active tblptr bytes
  5628  0014D0                     	endif
  5629  0014D0  0009               	tblrd		*+
  5630  0014D2  50F5               	movf	tablat,w,c
  5631  0014D4  0100               	movlb	0	; () banked
  5632  0014D6  5D6B               	subwf	__doprnt@val& (0+255),w,b
  5633  0014D8  0009               	tblrd		*+
  5634  0014DA  50F5               	movf	tablat,w,c
  5635  0014DC  0100               	movlb	0	; () banked
  5636  0014DE  596C               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5637  0014E0  0009               	tblrd		*+
  5638  0014E2  50F5               	movf	tablat,w,c
  5639  0014E4  0100               	movlb	0	; () banked
  5640  0014E6  596D               	subwfb	(__doprnt@val+2)& (0+255),w,b
  5641  0014E8  0009               	tblrd		*+
  5642  0014EA  50F5               	movf	tablat,w,c
  5643  0014EC  0100               	movlb	0	; () banked
  5644  0014EE  596E               	subwfb	(__doprnt@val+3)& (0+255),w,b
  5645  0014F0  A0D8               	btfss	status,0,c
  5646  0014F2  D003               	goto	i2l3579
  5647                           
  5648                           ; BSR set to: 0
  5649                           
  5650                           ; BSR set to: 0
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;doprnt.c: 1307: break;
  5654  0014F4  0100               	movlb	0	; () banked
  5655  0014F6  2B7A               	incf	__doprnt@c& (0+255),f,b
  5656  0014F8  D7DD               	goto	i2l3567
  5657  0014FA                     i2l3579:
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;doprnt.c: 1339: if(c < prec)
  5661  0014FA  0E80               	movlw	128
  5662  0014FC  0100               	movlb	0	; () banked
  5663  0014FE  BF7A               	btfsc	__doprnt@c& (0+255),7,b
  5664  001500  0E7F               	movlw	127
  5665  001502  6E4C               	movwf	??__doprnt& (0+255),c
  5666  001504  0100               	movlb	0	; () banked
  5667  001506  5178               	movf	__doprnt@prec& (0+255),w,b
  5668  001508  0100               	movlb	0	; () banked
  5669  00150A  5D7A               	subwf	__doprnt@c& (0+255),w,b
  5670  00150C  0100               	movlb	0	; () banked
  5671  00150E  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  5672  001510  0A80               	xorlw	128
  5673  001512  584C               	subwfb	??__doprnt& (0+255),w,c
  5674  001514  B0D8               	btfsc	status,0,c
  5675  001516  D003               	goto	i2l3583
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;doprnt.c: 1340: c = prec;
  5679  001518  C078  F07A         	movff	__doprnt@prec,__doprnt@c
  5680  00151C  D016               	goto	i2l3587
  5681  00151E                     i2l3583:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;doprnt.c: 1341: else if(prec < c)
  5685  00151E  0100               	movlb	0	; () banked
  5686  001520  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  5687  001522  0A80               	xorlw	128
  5688  001524  6E4C               	movwf	??__doprnt& (0+255),c
  5689  001526  0100               	movlb	0	; () banked
  5690  001528  517A               	movf	__doprnt@c& (0+255),w,b
  5691  00152A  0100               	movlb	0	; () banked
  5692  00152C  5D78               	subwf	__doprnt@prec& (0+255),w,b
  5693  00152E  0E80               	movlw	128
  5694  001530  0100               	movlb	0	; () banked
  5695  001532  BF7A               	btfsc	__doprnt@c& (0+255),7,b
  5696  001534  0E7F               	movlw	127
  5697  001536  584C               	subwfb	??__doprnt& (0+255),w,c
  5698  001538  B0D8               	btfsc	status,0,c
  5699  00153A  D007               	goto	i2l3587
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;doprnt.c: 1342: prec = c;
  5703  00153C  0100               	movlb	0	; () banked
  5704  00153E  517A               	movf	__doprnt@c& (0+255),w,b
  5705  001540  0100               	movlb	0	; () banked
  5706  001542  6F78               	movwf	__doprnt@prec& (0+255),b
  5707  001544  6B79               	clrf	(__doprnt@prec+1)& (0+255),b
  5708  001546  BF78               	btfsc	__doprnt@prec& (0+255),7,b
  5709  001548  0779               	decf	(__doprnt@prec+1)& (0+255),f,b
  5710  00154A                     i2l3587:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5714  00154A  0100               	movlb	0	; () banked
  5715  00154C  516F               	movf	__doprnt@width& (0+255),w,b
  5716  00154E  0100               	movlb	0	; () banked
  5717  001550  1170               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5718  001552  B4D8               	btfsc	status,2,c
  5719  001554  D010               	goto	i2l3593
  5720                           
  5721                           ; BSR set to: 0
  5722  001556  0E03               	movlw	3
  5723  001558  0100               	movlb	0	; () banked
  5724  00155A  1567               	andwf	__doprnt@flag& (0+255),w,b
  5725  00155C  6E4C               	movwf	??__doprnt& (0+255),c
  5726  00155E  0E00               	movlw	0
  5727  001560  0100               	movlb	0	; () banked
  5728  001562  1568               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5729  001564  6E4D               	movwf	(??__doprnt+1)& (0+255),c
  5730  001566  504C               	movf	??__doprnt,w,c
  5731  001568  104D               	iorwf	??__doprnt+1,w,c
  5732  00156A  B4D8               	btfsc	status,2,c
  5733  00156C  D004               	goto	i2l3593
  5734                           
  5735                           ; BSR set to: 0
  5736                           ;doprnt.c: 1346: width--;
  5737  00156E  0100               	movlb	0	; () banked
  5738  001570  076F               	decf	__doprnt@width& (0+255),f,b
  5739  001572  A0D8               	btfss	status,0,c
  5740  001574  0770               	decf	(__doprnt@width+1)& (0+255),f,b
  5741  001576                     i2l3593:
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5745  001576  0100               	movlb	0	; () banked
  5746  001578  AD68               	btfss	(__doprnt@flag+1)& (0+255),6,b
  5747  00157A  D01C               	goto	i2l3601
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;doprnt.c: 1349: if(width > prec)
  5751  00157C  0100               	movlb	0	; () banked
  5752  00157E  516F               	movf	__doprnt@width& (0+255),w,b
  5753  001580  0100               	movlb	0	; () banked
  5754  001582  5D78               	subwf	__doprnt@prec& (0+255),w,b
  5755  001584  0100               	movlb	0	; () banked
  5756  001586  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  5757  001588  0A80               	xorlw	128
  5758  00158A  6E4C               	movwf	??__doprnt& (0+255),c
  5759  00158C  0100               	movlb	0	; () banked
  5760  00158E  5170               	movf	(__doprnt@width+1)& (0+255),w,b
  5761  001590  0A80               	xorlw	128
  5762  001592  584C               	subwfb	??__doprnt& (0+255),w,c
  5763  001594  B0D8               	btfsc	status,0,c
  5764  001596  D009               	goto	i2l3599
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;doprnt.c: 1350: width -= prec;
  5768  001598  0100               	movlb	0	; () banked
  5769  00159A  5178               	movf	__doprnt@prec& (0+255),w,b
  5770  00159C  0100               	movlb	0	; () banked
  5771  00159E  5F6F               	subwf	__doprnt@width& (0+255),f,b
  5772  0015A0  0100               	movlb	0	; () banked
  5773  0015A2  5179               	movf	(__doprnt@prec+1)& (0+255),w,b
  5774  0015A4  0100               	movlb	0	; () banked
  5775  0015A6  5B70               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5776  0015A8  D005               	goto	i2l3601
  5777  0015AA                     i2l3599:
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;doprnt.c: 1351: else
  5781                           ;doprnt.c: 1352: width = 0;
  5782  0015AA  0E00               	movlw	0
  5783  0015AC  0100               	movlb	0	; () banked
  5784  0015AE  6F70               	movwf	(__doprnt@width+1)& (0+255),b
  5785  0015B0  0E00               	movlw	0
  5786  0015B2  6F6F               	movwf	__doprnt@width& (0+255),b
  5787  0015B4                     i2l3601:
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;doprnt.c: 1353: }
  5791                           ;doprnt.c: 1381: if(width > c)
  5792  0015B4  0E80               	movlw	128
  5793  0015B6  0100               	movlb	0	; () banked
  5794  0015B8  BF7A               	btfsc	__doprnt@c& (0+255),7,b
  5795  0015BA  0E7F               	movlw	127
  5796  0015BC  6E4C               	movwf	??__doprnt& (0+255),c
  5797  0015BE  0100               	movlb	0	; () banked
  5798  0015C0  516F               	movf	__doprnt@width& (0+255),w,b
  5799  0015C2  0100               	movlb	0	; () banked
  5800  0015C4  5D7A               	subwf	__doprnt@c& (0+255),w,b
  5801  0015C6  0100               	movlb	0	; () banked
  5802  0015C8  5170               	movf	(__doprnt@width+1)& (0+255),w,b
  5803  0015CA  0A80               	xorlw	128
  5804  0015CC  584C               	subwfb	??__doprnt& (0+255),w,c
  5805  0015CE  B0D8               	btfsc	status,0,c
  5806  0015D0  D00B               	goto	i2l3605
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;doprnt.c: 1382: width -= c;
  5810  0015D2  0100               	movlb	0	; () banked
  5811  0015D4  517A               	movf	__doprnt@c& (0+255),w,b
  5812  0015D6  0100               	movlb	0	; () banked
  5813  0015D8  5F6F               	subwf	__doprnt@width& (0+255),f,b
  5814  0015DA  0E00               	movlw	0
  5815  0015DC  0100               	movlb	0	; () banked
  5816  0015DE  BF7A               	btfsc	__doprnt@c& (0+255),7,b
  5817  0015E0  0EFF               	movlw	255
  5818  0015E2  0100               	movlb	0	; () banked
  5819  0015E4  5B70               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5820  0015E6  D005               	goto	i2l3607
  5821  0015E8                     i2l3605:
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;doprnt.c: 1383: else
  5825                           ;doprnt.c: 1384: width = 0;
  5826  0015E8  0E00               	movlw	0
  5827  0015EA  0100               	movlb	0	; () banked
  5828  0015EC  6F70               	movwf	(__doprnt@width+1)& (0+255),b
  5829  0015EE  0E00               	movlw	0
  5830  0015F0  6F6F               	movwf	__doprnt@width& (0+255),b
  5831  0015F2                     i2l3607:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;doprnt.c: 1422: {
  5835                           ;doprnt.c: 1424: if(width
  5836                           ;doprnt.c: 1428: )
  5837  0015F2  0100               	movlb	0	; () banked
  5838  0015F4  516F               	movf	__doprnt@width& (0+255),w,b
  5839  0015F6  0100               	movlb	0	; () banked
  5840  0015F8  1170               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5841  0015FA  B4D8               	btfsc	status,2,c
  5842  0015FC  D03C               	goto	i2l3619
  5843  0015FE                     i2l3609:
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5847  0015FE  EE20 F002          	lfsr	2,2
  5848  001602  5046               	movf	__doprnt@pb,w,c
  5849  001604  26D9               	addwf	fsr2l,f,c
  5850  001606  5047               	movf	__doprnt@pb+1,w,c
  5851  001608  22DA               	addwfc	fsr2h,f,c
  5852  00160A  50DE               	movf	postinc2,w,c
  5853  00160C  10DE               	iorwf	postinc2,w,c
  5854  00160E  B4D8               	btfsc	status,2,c
  5855  001610  D013               	goto	i2l3613
  5856                           
  5857                           ; BSR set to: 0
  5858  001612  EE20 F002          	lfsr	2,2
  5859  001616  5046               	movf	__doprnt@pb,w,c
  5860  001618  26D9               	addwf	fsr2l,f,c
  5861  00161A  5047               	movf	__doprnt@pb+1,w,c
  5862  00161C  22DA               	addwfc	fsr2h,f,c
  5863  00161E  D801               	call	i2u408_48
  5864  001620  D020               	goto	i2l3617
  5865  001622                     i2u408_48:
  5866  001622  0005               	push	
  5867  001624  6EFA               	movwf	pclath,c
  5868  001626  50DE               	movf	postinc2,w,c
  5869  001628  6EFD               	movwf	tosl,c
  5870  00162A  50DE               	movf	postinc2,w,c
  5871  00162C  6EFE               	movwf	tosh,c
  5872  00162E  50F8               	movf	tblptru,w,c
  5873  001630  6EFF               	movwf	tosu,c
  5874  001632  50FA               	movf	pclath,w,c
  5875  001634  0E20               	movlw	32
  5876  001636  0012               	return		;indir
  5877  001638                     i2l3613:
  5878  001638  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5879  00163C  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5880  001640  CFDE F04C          	movff	postinc2,??__doprnt
  5881  001644  CFDD F04D          	movff	postdec2,??__doprnt+1
  5882  001648  C04C  FFD9         	movff	??__doprnt,fsr2l
  5883  00164C  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5884  001650  0E20               	movlw	32
  5885  001652  6EDF               	movwf	indf2,c
  5886  001654  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5887  001658  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5888  00165C  2ADE               	incf	postinc2,f,c
  5889  00165E  0E00               	movlw	0
  5890  001660  22DD               	addwfc	postdec2,f,c
  5891  001662                     i2l3617:
  5892                           
  5893                           ;doprnt.c: 1431: while(--width);
  5894  001662  0100               	movlb	0	; () banked
  5895  001664  076F               	decf	__doprnt@width& (0+255),f,b
  5896  001666  A0D8               	btfss	status,0,c
  5897  001668  0770               	decf	(__doprnt@width+1)& (0+255),f,b
  5898  00166A  0100               	movlb	0	; () banked
  5899  00166C  516F               	movf	__doprnt@width& (0+255),w,b
  5900  00166E  0100               	movlb	0	; () banked
  5901  001670  1170               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5902  001672  A4D8               	btfss	status,2,c
  5903  001674  D7C4               	goto	i2l3609
  5904  001676                     i2l3619:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;doprnt.c: 1438: if(flag & 0x03)
  5908  001676  0E03               	movlw	3
  5909  001678  0100               	movlb	0	; () banked
  5910  00167A  1567               	andwf	__doprnt@flag& (0+255),w,b
  5911  00167C  6E4C               	movwf	??__doprnt& (0+255),c
  5912  00167E  0E00               	movlw	0
  5913  001680  0100               	movlb	0	; () banked
  5914  001682  1568               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5915  001684  6E4D               	movwf	(??__doprnt+1)& (0+255),c
  5916  001686  504C               	movf	??__doprnt,w,c
  5917  001688  104D               	iorwf	??__doprnt+1,w,c
  5918  00168A  B4D8               	btfsc	status,2,c
  5919  00168C  D09B               	goto	i2l3639
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5923  00168E  EE20 F002          	lfsr	2,2
  5924  001692  5046               	movf	__doprnt@pb,w,c
  5925  001694  26D9               	addwf	fsr2l,f,c
  5926  001696  5047               	movf	__doprnt@pb+1,w,c
  5927  001698  22DA               	addwfc	fsr2h,f,c
  5928  00169A  50DE               	movf	postinc2,w,c
  5929  00169C  10DE               	iorwf	postinc2,w,c
  5930  00169E  B4D8               	btfsc	status,2,c
  5931  0016A0  D013               	goto	i2l3625
  5932                           
  5933                           ; BSR set to: 0
  5934  0016A2  EE20 F002          	lfsr	2,2
  5935  0016A6  5046               	movf	__doprnt@pb,w,c
  5936  0016A8  26D9               	addwf	fsr2l,f,c
  5937  0016AA  5047               	movf	__doprnt@pb+1,w,c
  5938  0016AC  22DA               	addwfc	fsr2h,f,c
  5939  0016AE  D801               	call	i2u412_48
  5940  0016B0  D089               	goto	i2l3639
  5941  0016B2                     i2u412_48:
  5942  0016B2  0005               	push	
  5943  0016B4  6EFA               	movwf	pclath,c
  5944  0016B6  50DE               	movf	postinc2,w,c
  5945  0016B8  6EFD               	movwf	tosl,c
  5946  0016BA  50DE               	movf	postinc2,w,c
  5947  0016BC  6EFE               	movwf	tosh,c
  5948  0016BE  50F8               	movf	tblptru,w,c
  5949  0016C0  6EFF               	movwf	tosu,c
  5950  0016C2  50FA               	movf	pclath,w,c
  5951  0016C4  0E2D               	movlw	45
  5952  0016C6  0012               	return		;indir
  5953  0016C8                     i2l3625:
  5954  0016C8  C046  FFD9         	movff	__doprnt@pb,fsr2l
  5955  0016CC  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  5956  0016D0  CFDE F04C          	movff	postinc2,??__doprnt
  5957  0016D4  CFDD F04D          	movff	postdec2,??__doprnt+1
  5958  0016D8  C04C  FFD9         	movff	??__doprnt,fsr2l
  5959  0016DC  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  5960  0016E0  0E2D               	movlw	45
  5961  0016E2  6EDF               	movwf	indf2,c
  5962  0016E4  D068               	goto	i2l3637
  5963  0016E6                     i2l3629:
  5964                           
  5965                           ;doprnt.c: 1478: {
  5966                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5967  0016E6  C078  F04C         	movff	__doprnt@prec,??__doprnt
  5968  0016EA  C079  F04D         	movff	__doprnt@prec+1,??__doprnt+1
  5969  0016EE  90D8               	bcf	status,0,c
  5970  0016F0  364C               	rlcf	??__doprnt,f,c
  5971  0016F2  364D               	rlcf	??__doprnt+1,f,c
  5972  0016F4  90D8               	bcf	status,0,c
  5973  0016F6  364C               	rlcf	??__doprnt,f,c
  5974  0016F8  364D               	rlcf	??__doprnt+1,f,c
  5975  0016FA  0E01               	movlw	low _dpowers
  5976  0016FC  244C               	addwf	??__doprnt,w,c
  5977  0016FE  6EF6               	movwf	tblptrl,c
  5978  001700  0E06               	movlw	high _dpowers
  5979  001702  204D               	addwfc	??__doprnt+1,w,c
  5980  001704  6EF7               	movwf	tblptrh,c
  5981  001706                     	if	0	;There are less than 3 active tblptr bytes
  5982  001706                     	endif
  5983  001706  0009               	tblrd		*+
  5984  001708  CFF5 F005          	movff	tablat,___lldiv@divisor
  5985  00170C  0009               	tblrd		*+
  5986  00170E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5987  001712  0009               	tblrd		*+
  5988  001714  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5989  001718  000A               	tblrd		*-
  5990  00171A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5991  00171E  C06B  F001         	movff	__doprnt@val,___lldiv@dividend
  5992  001722  C06C  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  5993  001726  C06D  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  5994  00172A  C06E  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  5995  00172E  ECC1  F015         	call	___lldiv
  5996  001732  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5997  001736  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5998  00173A  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5999  00173E  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  6000  001742  0E0A               	movlw	10
  6001  001744  6E12               	movwf	___llmod@divisor,c
  6002  001746  0E00               	movlw	0
  6003  001748  6E13               	movwf	___llmod@divisor+1,c
  6004  00174A  0E00               	movlw	0
  6005  00174C  6E14               	movwf	___llmod@divisor+2,c
  6006  00174E  0E00               	movlw	0
  6007  001750  6E15               	movwf	___llmod@divisor+3,c
  6008  001752  ECB3  F016         	call	___llmod	;wreg free
  6009  001756  500E               	movf	?___llmod,w,c
  6010  001758  0F30               	addlw	48
  6011  00175A  0100               	movlb	0	; () banked
  6012  00175C  6F7A               	movwf	__doprnt@c& (0+255),b
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;doprnt.c: 1523: }
  6016                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6017  00175E  EE20 F002          	lfsr	2,2
  6018  001762  5046               	movf	__doprnt@pb,w,c
  6019  001764  26D9               	addwf	fsr2l,f,c
  6020  001766  5047               	movf	__doprnt@pb+1,w,c
  6021  001768  22DA               	addwfc	fsr2h,f,c
  6022  00176A  50DE               	movf	postinc2,w,c
  6023  00176C  10DE               	iorwf	postinc2,w,c
  6024  00176E  B4D8               	btfsc	status,2,c
  6025  001770  D014               	goto	i2l3635
  6026                           
  6027                           ; BSR set to: 0
  6028  001772  EE20 F002          	lfsr	2,2
  6029  001776  5046               	movf	__doprnt@pb,w,c
  6030  001778  26D9               	addwf	fsr2l,f,c
  6031  00177A  5047               	movf	__doprnt@pb+1,w,c
  6032  00177C  22DA               	addwfc	fsr2h,f,c
  6033  00177E  D801               	call	i2u414_48
  6034  001780  D021               	goto	i2l3639
  6035  001782                     i2u414_48:
  6036  001782  0005               	push	
  6037  001784  6EFA               	movwf	pclath,c
  6038  001786  50DE               	movf	postinc2,w,c
  6039  001788  6EFD               	movwf	tosl,c
  6040  00178A  50DE               	movf	postinc2,w,c
  6041  00178C  6EFE               	movwf	tosh,c
  6042  00178E  50F8               	movf	tblptru,w,c
  6043  001790  6EFF               	movwf	tosu,c
  6044  001792  50FA               	movf	pclath,w,c
  6045  001794  0100               	movlb	0	; () banked
  6046  001796  517A               	movf	__doprnt@c& (0+255),w,b
  6047  001798  0012               	return		;indir
  6048  00179A                     i2l3635:
  6049  00179A  C046  FFD9         	movff	__doprnt@pb,fsr2l
  6050  00179E  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  6051  0017A2  CFDE F04C          	movff	postinc2,??__doprnt
  6052  0017A6  CFDD F04D          	movff	postdec2,??__doprnt+1
  6053  0017AA  C04C  FFD9         	movff	??__doprnt,fsr2l
  6054  0017AE  C04D  FFDA         	movff	??__doprnt+1,fsr2h
  6055  0017B2  C07A  FFDF         	movff	__doprnt@c,indf2
  6056  0017B6                     i2l3637:
  6057  0017B6  C046  FFD9         	movff	__doprnt@pb,fsr2l
  6058  0017BA  C047  FFDA         	movff	__doprnt@pb+1,fsr2h
  6059  0017BE  2ADE               	incf	postinc2,f,c
  6060  0017C0  0E00               	movlw	0
  6061  0017C2  22DD               	addwfc	postdec2,f,c
  6062  0017C4                     i2l3639:
  6063  0017C4  0100               	movlb	0	; () banked
  6064  0017C6  0778               	decf	__doprnt@prec& (0+255),f,b
  6065  0017C8  A0D8               	btfss	status,0,c
  6066  0017CA  0779               	decf	(__doprnt@prec+1)& (0+255),f,b
  6067  0017CC  0100               	movlb	0	; () banked
  6068  0017CE  2978               	incf	__doprnt@prec& (0+255),w,b
  6069  0017D0  E18A               	bnz	i2l3629
  6070  0017D2  0100               	movlb	0	; () banked
  6071  0017D4  2979               	incf	(__doprnt@prec+1)& (0+255),w,b
  6072  0017D6  A4D8               	btfss	status,2,c
  6073  0017D8  D786               	goto	i2l3629
  6074  0017DA                     i2l3641:
  6075  0017DA  C048  FFF6         	movff	__doprnt@f,tblptrl
  6076  0017DE  C049  FFF7         	movff	__doprnt@f+1,tblptrh
  6077  0017E2  4A48               	infsnz	__doprnt@f,f,c
  6078  0017E4  2A49               	incf	__doprnt@f+1,f,c
  6079  0017E6                     	if	0	;tblptru may be non-zero
  6080  0017E6                     	endif
  6081  0017E6                     	if	0	;tblptru may be non-zero
  6082  0017E6                     	endif
  6083  0017E6  0008               	tblrd		*
  6084  0017E8  CFF5 F07A          	movff	tablat,__doprnt@c
  6085  0017EC  0100               	movlb	0	; () banked
  6086  0017EE  517A               	movf	__doprnt@c& (0+255),w,b
  6087  0017F0  A4D8               	btfss	status,2,c
  6088  0017F2  EF7E  F003         	goto	i2l3265
  6089  0017F6                     i2l3643:
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;doprnt.c: 1540: return 0;
  6093  0017F6  0E00               	movlw	0
  6094  0017F8  6E47               	movwf	?__doprnt+1,c
  6095  0017FA  0E00               	movlw	0
  6096  0017FC  6E46               	movwf	?__doprnt,c
  6097  0017FE  0012               	return	
  6098  001800                     __end_of__doprnt:
  6099                           	opt stack 0
  6100                           tosu	equ	0xFFF
  6101                           tosh	equ	0xFFE
  6102                           tosl	equ	0xFFD
  6103                           pclatu	equ	0xFFB
  6104                           pclath	equ	0xFFA
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           intcon2	equ	0xFF1
  6113                           intcon3	equ	0xFF0
  6114                           postinc0	equ	0xFEE
  6115                           fsr0h	equ	0xFEA
  6116                           fsr0l	equ	0xFE9
  6117                           wreg	equ	0xFE8
  6118                           indf1	equ	0xFE7
  6119                           postinc1	equ	0xFE6
  6120                           postdec1	equ	0xFE5
  6121                           fsr1h	equ	0xFE2
  6122                           fsr1l	equ	0xFE1
  6123                           indf2	equ	0xFDF
  6124                           postinc2	equ	0xFDE
  6125                           postdec2	equ	0xFDD
  6126                           fsr2h	equ	0xFDA
  6127                           fsr2l	equ	0xFD9
  6128                           status	equ	0xFD8
  6129                           
  6130 ;; *************** function _scale *****************
  6131 ;; Defined at:
  6132 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  scl             1    wreg     char 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  scl             1   53[COMRAM] char 
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  3   47[COMRAM] char 
  6139 ;; Registers used:
  6140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6146 ;;      Params:         3       0       0       0       0       0       0
  6147 ;;      Locals:         4       0       0       0       0       0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0
  6149 ;;      Totals:         7       0       0       0       0       0       0
  6150 ;;Total ram usage:        7 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    2
  6153 ;; This function calls:
  6154 ;;		___awdiv
  6155 ;;		___awmod
  6156 ;;		___ftmul
  6157 ;;		___wmul
  6158 ;; This function is called by:
  6159 ;;		__doprnt
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text25
  6164  001800                     __ptext25:
  6165                           	opt stack 0
  6166  001800                     _scale:
  6167                           	opt stack 21
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;incstack = 0
  6171                           ;scale@scl stored from wreg
  6172  001800  6E36               	movwf	scale@scl,c
  6173                           
  6174                           ;doprnt.c: 428: if(scl < 0) {
  6175  001802  AE36               	btfss	scale@scl,7,c
  6176  001804  D0FB               	goto	i2l2959
  6177                           
  6178                           ;doprnt.c: 429: scl = -scl;
  6179  001806  6C36               	negf	scale@scl,c
  6180                           
  6181                           ;doprnt.c: 430: if(scl>=110)
  6182  001808  5036               	movf	scale@scl,w,c
  6183  00180A  0A80               	xorlw	128
  6184  00180C  0F12               	addlw	-238
  6185  00180E  A0D8               	btfss	status,0,c
  6186  001810  D091               	goto	i2l2949
  6187                           
  6188                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6189  001812  0E00               	movlw	0
  6190  001814  6E12               	movwf	___wmul@multiplicand+1,c
  6191  001816  0E03               	movlw	3
  6192  001818  6E11               	movwf	___wmul@multiplicand,c
  6193  00181A  0E00               	movlw	0
  6194  00181C  6E0A               	movwf	___awdiv@divisor+1,c
  6195  00181E  0E0A               	movlw	10
  6196  001820  6E09               	movwf	___awdiv@divisor,c
  6197  001822  0E00               	movlw	0
  6198  001824  6E04               	movwf	___awmod@divisor+1,c
  6199  001826  0E64               	movlw	100
  6200  001828  6E03               	movwf	___awmod@divisor,c
  6201  00182A  5036               	movf	scale@scl,w,c
  6202  00182C  6E01               	movwf	___awmod@dividend,c
  6203  00182E  6A02               	clrf	___awmod@dividend+1,c
  6204  001830  BE01               	btfsc	___awmod@dividend,7,c
  6205  001832  0602               	decf	___awmod@dividend+1,f,c
  6206  001834  EC7B  F016         	call	___awmod
  6207  001838  C001  F007         	movff	?___awmod,___awdiv@dividend
  6208  00183C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6209  001840  EC7F  F015         	call	___awdiv	;wreg free
  6210  001844  0E09               	movlw	9
  6211  001846  2407               	addwf	?___awdiv,w,c
  6212  001848  6E0F               	movwf	___wmul@multiplier,c
  6213  00184A  0E00               	movlw	0
  6214  00184C  2008               	addwfc	?___awdiv+1,w,c
  6215  00184E  6E10               	movwf	___wmul@multiplier+1,c
  6216  001850  ECC4  F018         	call	___wmul	;wreg free
  6217  001854  0E29               	movlw	low __npowers_
  6218  001856  240F               	addwf	?___wmul,w,c
  6219  001858  6EF6               	movwf	tblptrl,c
  6220  00185A  0E06               	movlw	high __npowers_
  6221  00185C  2010               	addwfc	?___wmul+1,w,c
  6222  00185E  6EF7               	movwf	tblptrh,c
  6223  001860                     	if	0	;There are less than 3 active tblptr bytes
  6224  001860                     	endif
  6225  001860  0009               	tblrd		*+
  6226  001862  CFF5 F024          	movff	tablat,___ftmul@f2
  6227  001866  0009               	tblrd		*+
  6228  001868  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6229  00186C  000A               	tblrd		*-
  6230  00186E  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6231  001872  0E00               	movlw	0
  6232  001874  6E0A               	movwf	___awdiv@divisor+1,c
  6233  001876  0E64               	movlw	100
  6234  001878  6E09               	movwf	___awdiv@divisor,c
  6235  00187A  5036               	movf	scale@scl,w,c
  6236  00187C  6E07               	movwf	___awdiv@dividend,c
  6237  00187E  6A08               	clrf	___awdiv@dividend+1,c
  6238  001880  BE07               	btfsc	___awdiv@dividend,7,c
  6239  001882  0608               	decf	___awdiv@dividend+1,f,c
  6240  001884  EC7F  F015         	call	___awdiv	;wreg free
  6241  001888  0E12               	movlw	18
  6242  00188A  2407               	addwf	?___awdiv,w,c
  6243  00188C  6E0F               	movwf	___wmul@multiplier,c
  6244  00188E  0E00               	movlw	0
  6245  001890  2008               	addwfc	?___awdiv+1,w,c
  6246  001892  6E10               	movwf	___wmul@multiplier+1,c
  6247  001894  0E00               	movlw	0
  6248  001896  6E12               	movwf	___wmul@multiplicand+1,c
  6249  001898  0E03               	movlw	3
  6250  00189A  6E11               	movwf	___wmul@multiplicand,c
  6251  00189C  ECC4  F018         	call	___wmul	;wreg free
  6252  0018A0  0E29               	movlw	low __npowers_
  6253  0018A2  240F               	addwf	?___wmul,w,c
  6254  0018A4  6EF6               	movwf	tblptrl,c
  6255  0018A6  0E06               	movlw	high __npowers_
  6256  0018A8  2010               	addwfc	?___wmul+1,w,c
  6257  0018AA  6EF7               	movwf	tblptrh,c
  6258  0018AC                     	if	0	;There are less than 3 active tblptr bytes
  6259  0018AC                     	endif
  6260  0018AC  0009               	tblrd		*+
  6261  0018AE  CFF5 F021          	movff	tablat,___ftmul@f1
  6262  0018B2  0009               	tblrd		*+
  6263  0018B4  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6264  0018B8  000A               	tblrd		*-
  6265  0018BA  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6266  0018BE  EC79  F013         	call	___ftmul	;wreg free
  6267  0018C2  C021  F033         	movff	?___ftmul,_scale$1658
  6268  0018C6  C022  F034         	movff	?___ftmul+1,_scale$1658+1
  6269  0018CA  C023  F035         	movff	?___ftmul+2,_scale$1658+2
  6270                           
  6271                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6272  0018CE  C033  F021         	movff	_scale$1658,___ftmul@f1
  6273  0018D2  C034  F022         	movff	_scale$1658+1,___ftmul@f1+1
  6274  0018D6  C035  F023         	movff	_scale$1658+2,___ftmul@f1+2
  6275  0018DA  0E00               	movlw	0
  6276  0018DC  6E12               	movwf	___wmul@multiplicand+1,c
  6277  0018DE  0E03               	movlw	3
  6278  0018E0  6E11               	movwf	___wmul@multiplicand,c
  6279  0018E2  0E00               	movlw	0
  6280  0018E4  6E04               	movwf	___awmod@divisor+1,c
  6281  0018E6  0E0A               	movlw	10
  6282  0018E8  6E03               	movwf	___awmod@divisor,c
  6283  0018EA  5036               	movf	scale@scl,w,c
  6284  0018EC  6E01               	movwf	___awmod@dividend,c
  6285  0018EE  6A02               	clrf	___awmod@dividend+1,c
  6286  0018F0  BE01               	btfsc	___awmod@dividend,7,c
  6287  0018F2  0602               	decf	___awmod@dividend+1,f,c
  6288  0018F4  EC7B  F016         	call	___awmod	;wreg free
  6289  0018F8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6290  0018FC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6291  001900  ECC4  F018         	call	___wmul	;wreg free
  6292  001904  0E29               	movlw	low __npowers_
  6293  001906  240F               	addwf	?___wmul,w,c
  6294  001908  6EF6               	movwf	tblptrl,c
  6295  00190A  0E06               	movlw	high __npowers_
  6296  00190C  2010               	addwfc	?___wmul+1,w,c
  6297  00190E  6EF7               	movwf	tblptrh,c
  6298  001910                     	if	0	;There are less than 3 active tblptr bytes
  6299  001910                     	endif
  6300  001910  0009               	tblrd		*+
  6301  001912  CFF5 F024          	movff	tablat,___ftmul@f2
  6302  001916  0009               	tblrd		*+
  6303  001918  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6304  00191C  000A               	tblrd		*-
  6305  00191E  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6306  001922  EC79  F013         	call	___ftmul	;wreg free
  6307  001926  C021  F030         	movff	?___ftmul,?_scale
  6308  00192A  C022  F031         	movff	?___ftmul+1,?_scale+1
  6309  00192E  C023  F032         	movff	?___ftmul+2,?_scale+2
  6310  001932  0012               	return	
  6311  001934                     i2l2949:
  6312                           
  6313                           ;doprnt.c: 432: else if(scl > 10)
  6314  001934  5036               	movf	scale@scl,w,c
  6315  001936  0A80               	xorlw	128
  6316  001938  0F75               	addlw	-139
  6317  00193A  A0D8               	btfss	status,0,c
  6318  00193C  D04D               	goto	i2l2955
  6319                           
  6320                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6321  00193E  0E00               	movlw	0
  6322  001940  6E0A               	movwf	___awdiv@divisor+1,c
  6323  001942  0E0A               	movlw	10
  6324  001944  6E09               	movwf	___awdiv@divisor,c
  6325  001946  5036               	movf	scale@scl,w,c
  6326  001948  6E07               	movwf	___awdiv@dividend,c
  6327  00194A  6A08               	clrf	___awdiv@dividend+1,c
  6328  00194C  BE07               	btfsc	___awdiv@dividend,7,c
  6329  00194E  0608               	decf	___awdiv@dividend+1,f,c
  6330  001950  EC7F  F015         	call	___awdiv	;wreg free
  6331  001954  0E09               	movlw	9
  6332  001956  2407               	addwf	?___awdiv,w,c
  6333  001958  6E0F               	movwf	___wmul@multiplier,c
  6334  00195A  0E00               	movlw	0
  6335  00195C  2008               	addwfc	?___awdiv+1,w,c
  6336  00195E  6E10               	movwf	___wmul@multiplier+1,c
  6337  001960  0E00               	movlw	0
  6338  001962  6E12               	movwf	___wmul@multiplicand+1,c
  6339  001964  0E03               	movlw	3
  6340  001966  6E11               	movwf	___wmul@multiplicand,c
  6341  001968  ECC4  F018         	call	___wmul	;wreg free
  6342  00196C  0E29               	movlw	low __npowers_
  6343  00196E  240F               	addwf	?___wmul,w,c
  6344  001970  6EF6               	movwf	tblptrl,c
  6345  001972  0E06               	movlw	high __npowers_
  6346  001974  2010               	addwfc	?___wmul+1,w,c
  6347  001976  6EF7               	movwf	tblptrh,c
  6348  001978                     	if	0	;There are less than 3 active tblptr bytes
  6349  001978                     	endif
  6350  001978  0009               	tblrd		*+
  6351  00197A  CFF5 F021          	movff	tablat,___ftmul@f1
  6352  00197E  0009               	tblrd		*+
  6353  001980  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6354  001984  000A               	tblrd		*-
  6355  001986  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6356  00198A  0E00               	movlw	0
  6357  00198C  6E12               	movwf	___wmul@multiplicand+1,c
  6358  00198E  0E03               	movlw	3
  6359  001990  6E11               	movwf	___wmul@multiplicand,c
  6360  001992  0E00               	movlw	0
  6361  001994  6E04               	movwf	___awmod@divisor+1,c
  6362  001996  0E0A               	movlw	10
  6363  001998  6E03               	movwf	___awmod@divisor,c
  6364  00199A  5036               	movf	scale@scl,w,c
  6365  00199C  6E01               	movwf	___awmod@dividend,c
  6366  00199E  6A02               	clrf	___awmod@dividend+1,c
  6367  0019A0  BE01               	btfsc	___awmod@dividend,7,c
  6368  0019A2  0602               	decf	___awmod@dividend+1,f,c
  6369  0019A4  EC7B  F016         	call	___awmod	;wreg free
  6370  0019A8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6371  0019AC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6372  0019B0  ECC4  F018         	call	___wmul	;wreg free
  6373  0019B4  0E29               	movlw	low __npowers_
  6374  0019B6  240F               	addwf	?___wmul,w,c
  6375  0019B8  6EF6               	movwf	tblptrl,c
  6376  0019BA  0E06               	movlw	high __npowers_
  6377  0019BC  2010               	addwfc	?___wmul+1,w,c
  6378  0019BE  6EF7               	movwf	tblptrh,c
  6379  0019C0                     	if	0	;There are less than 3 active tblptr bytes
  6380  0019C0                     	endif
  6381  0019C0  0009               	tblrd		*+
  6382  0019C2  CFF5 F024          	movff	tablat,___ftmul@f2
  6383  0019C6  0009               	tblrd		*+
  6384  0019C8  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6385  0019CC  000A               	tblrd		*-
  6386  0019CE  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6387  0019D2  EC79  F013         	call	___ftmul	;wreg free
  6388  0019D6  D7A7               	goto	L3
  6389  0019D8                     i2l2955:
  6390                           
  6391                           ;doprnt.c: 434: return _npowers_[scl];
  6392  0019D8  5036               	movf	scale@scl,w,c
  6393  0019DA  0D03               	mullw	3
  6394  0019DC  0E29               	movlw	low __npowers_
  6395  0019DE  24F3               	addwf	prodl,w,c
  6396  0019E0  6EF6               	movwf	tblptrl,c
  6397  0019E2  0E06               	movlw	high __npowers_
  6398  0019E4  20F4               	addwfc	prodh,w,c
  6399  0019E6  6EF7               	movwf	tblptrh,c
  6400  0019E8                     	if	0	;There are less than 3 active tblptr bytes
  6401  0019E8                     	endif
  6402  0019E8  0009               	tblrd		*+
  6403  0019EA  CFF5 F030          	movff	tablat,?_scale
  6404  0019EE  0009               	tblrd		*+
  6405  0019F0  CFF5 F031          	movff	tablat,?_scale+1
  6406  0019F4  000A               	tblrd		*-
  6407  0019F6  CFF5 F032          	movff	tablat,?_scale+2
  6408  0019FA  0012               	return	
  6409  0019FC                     i2l2959:
  6410                           
  6411                           ;doprnt.c: 435: }
  6412                           ;doprnt.c: 436: if(scl>=110)
  6413  0019FC  5036               	movf	scale@scl,w,c
  6414  0019FE  0A80               	xorlw	128
  6415  001A00  0F12               	addlw	-238
  6416  001A02  A0D8               	btfss	status,0,c
  6417  001A04  D091               	goto	i2l2967
  6418                           
  6419                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6420  001A06  0E00               	movlw	0
  6421  001A08  6E12               	movwf	___wmul@multiplicand+1,c
  6422  001A0A  0E03               	movlw	3
  6423  001A0C  6E11               	movwf	___wmul@multiplicand,c
  6424  001A0E  0E00               	movlw	0
  6425  001A10  6E0A               	movwf	___awdiv@divisor+1,c
  6426  001A12  0E0A               	movlw	10
  6427  001A14  6E09               	movwf	___awdiv@divisor,c
  6428  001A16  0E00               	movlw	0
  6429  001A18  6E04               	movwf	___awmod@divisor+1,c
  6430  001A1A  0E64               	movlw	100
  6431  001A1C  6E03               	movwf	___awmod@divisor,c
  6432  001A1E  5036               	movf	scale@scl,w,c
  6433  001A20  6E01               	movwf	___awmod@dividend,c
  6434  001A22  6A02               	clrf	___awmod@dividend+1,c
  6435  001A24  BE01               	btfsc	___awmod@dividend,7,c
  6436  001A26  0602               	decf	___awmod@dividend+1,f,c
  6437  001A28  EC7B  F016         	call	___awmod	;wreg free
  6438  001A2C  C001  F007         	movff	?___awmod,___awdiv@dividend
  6439  001A30  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6440  001A34  EC7F  F015         	call	___awdiv	;wreg free
  6441  001A38  0E09               	movlw	9
  6442  001A3A  2407               	addwf	?___awdiv,w,c
  6443  001A3C  6E0F               	movwf	___wmul@multiplier,c
  6444  001A3E  0E00               	movlw	0
  6445  001A40  2008               	addwfc	?___awdiv+1,w,c
  6446  001A42  6E10               	movwf	___wmul@multiplier+1,c
  6447  001A44  ECC4  F018         	call	___wmul	;wreg free
  6448  001A48  0E50               	movlw	low __powers_
  6449  001A4A  240F               	addwf	?___wmul,w,c
  6450  001A4C  6EF6               	movwf	tblptrl,c
  6451  001A4E  0E06               	movlw	high __powers_
  6452  001A50  2010               	addwfc	?___wmul+1,w,c
  6453  001A52  6EF7               	movwf	tblptrh,c
  6454  001A54                     	if	0	;There are less than 3 active tblptr bytes
  6455  001A54                     	endif
  6456  001A54  0009               	tblrd		*+
  6457  001A56  CFF5 F024          	movff	tablat,___ftmul@f2
  6458  001A5A  0009               	tblrd		*+
  6459  001A5C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6460  001A60  000A               	tblrd		*-
  6461  001A62  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6462  001A66  0E00               	movlw	0
  6463  001A68  6E0A               	movwf	___awdiv@divisor+1,c
  6464  001A6A  0E64               	movlw	100
  6465  001A6C  6E09               	movwf	___awdiv@divisor,c
  6466  001A6E  5036               	movf	scale@scl,w,c
  6467  001A70  6E07               	movwf	___awdiv@dividend,c
  6468  001A72  6A08               	clrf	___awdiv@dividend+1,c
  6469  001A74  BE07               	btfsc	___awdiv@dividend,7,c
  6470  001A76  0608               	decf	___awdiv@dividend+1,f,c
  6471  001A78  EC7F  F015         	call	___awdiv	;wreg free
  6472  001A7C  0E12               	movlw	18
  6473  001A7E  2407               	addwf	?___awdiv,w,c
  6474  001A80  6E0F               	movwf	___wmul@multiplier,c
  6475  001A82  0E00               	movlw	0
  6476  001A84  2008               	addwfc	?___awdiv+1,w,c
  6477  001A86  6E10               	movwf	___wmul@multiplier+1,c
  6478  001A88  0E00               	movlw	0
  6479  001A8A  6E12               	movwf	___wmul@multiplicand+1,c
  6480  001A8C  0E03               	movlw	3
  6481  001A8E  6E11               	movwf	___wmul@multiplicand,c
  6482  001A90  ECC4  F018         	call	___wmul	;wreg free
  6483  001A94  0E50               	movlw	low __powers_
  6484  001A96  240F               	addwf	?___wmul,w,c
  6485  001A98  6EF6               	movwf	tblptrl,c
  6486  001A9A  0E06               	movlw	high __powers_
  6487  001A9C  2010               	addwfc	?___wmul+1,w,c
  6488  001A9E  6EF7               	movwf	tblptrh,c
  6489  001AA0                     	if	0	;There are less than 3 active tblptr bytes
  6490  001AA0                     	endif
  6491  001AA0  0009               	tblrd		*+
  6492  001AA2  CFF5 F021          	movff	tablat,___ftmul@f1
  6493  001AA6  0009               	tblrd		*+
  6494  001AA8  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6495  001AAC  000A               	tblrd		*-
  6496  001AAE  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6497  001AB2  EC79  F013         	call	___ftmul	;wreg free
  6498  001AB6  C021  F033         	movff	?___ftmul,_scale$1658
  6499  001ABA  C022  F034         	movff	?___ftmul+1,_scale$1658+1
  6500  001ABE  C023  F035         	movff	?___ftmul+2,_scale$1658+2
  6501                           
  6502                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6503  001AC2  C033  F021         	movff	_scale$1658,___ftmul@f1
  6504  001AC6  C034  F022         	movff	_scale$1658+1,___ftmul@f1+1
  6505  001ACA  C035  F023         	movff	_scale$1658+2,___ftmul@f1+2
  6506  001ACE  0E00               	movlw	0
  6507  001AD0  6E12               	movwf	___wmul@multiplicand+1,c
  6508  001AD2  0E03               	movlw	3
  6509  001AD4  6E11               	movwf	___wmul@multiplicand,c
  6510  001AD6  0E00               	movlw	0
  6511  001AD8  6E04               	movwf	___awmod@divisor+1,c
  6512  001ADA  0E0A               	movlw	10
  6513  001ADC  6E03               	movwf	___awmod@divisor,c
  6514  001ADE  5036               	movf	scale@scl,w,c
  6515  001AE0  6E01               	movwf	___awmod@dividend,c
  6516  001AE2  6A02               	clrf	___awmod@dividend+1,c
  6517  001AE4  BE01               	btfsc	___awmod@dividend,7,c
  6518  001AE6  0602               	decf	___awmod@dividend+1,f,c
  6519  001AE8  EC7B  F016         	call	___awmod	;wreg free
  6520  001AEC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6521  001AF0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6522  001AF4  ECC4  F018         	call	___wmul	;wreg free
  6523  001AF8  0E50               	movlw	low __powers_
  6524  001AFA  240F               	addwf	?___wmul,w,c
  6525  001AFC  6EF6               	movwf	tblptrl,c
  6526  001AFE  0E06               	movlw	high __powers_
  6527  001B00  2010               	addwfc	?___wmul+1,w,c
  6528  001B02  6EF7               	movwf	tblptrh,c
  6529  001B04                     	if	0	;There are less than 3 active tblptr bytes
  6530  001B04                     	endif
  6531  001B04  0009               	tblrd		*+
  6532  001B06  CFF5 F024          	movff	tablat,___ftmul@f2
  6533  001B0A  0009               	tblrd		*+
  6534  001B0C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6535  001B10  000A               	tblrd		*-
  6536  001B12  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6537  001B16  EC79  F013         	call	___ftmul	;wreg free
  6538  001B1A  C021  F030         	movff	?___ftmul,?_scale
  6539  001B1E  C022  F031         	movff	?___ftmul+1,?_scale+1
  6540  001B22  C023  F032         	movff	?___ftmul+2,?_scale+2
  6541  001B26  0012               	return	
  6542  001B28                     i2l2967:
  6543                           
  6544                           ;doprnt.c: 438: else if(scl > 10)
  6545  001B28  5036               	movf	scale@scl,w,c
  6546  001B2A  0A80               	xorlw	128
  6547  001B2C  0F75               	addlw	-139
  6548  001B2E  A0D8               	btfss	status,0,c
  6549  001B30  D04D               	goto	i2l2973
  6550                           
  6551                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6552  001B32  0E00               	movlw	0
  6553  001B34  6E0A               	movwf	___awdiv@divisor+1,c
  6554  001B36  0E0A               	movlw	10
  6555  001B38  6E09               	movwf	___awdiv@divisor,c
  6556  001B3A  5036               	movf	scale@scl,w,c
  6557  001B3C  6E07               	movwf	___awdiv@dividend,c
  6558  001B3E  6A08               	clrf	___awdiv@dividend+1,c
  6559  001B40  BE07               	btfsc	___awdiv@dividend,7,c
  6560  001B42  0608               	decf	___awdiv@dividend+1,f,c
  6561  001B44  EC7F  F015         	call	___awdiv	;wreg free
  6562  001B48  0E09               	movlw	9
  6563  001B4A  2407               	addwf	?___awdiv,w,c
  6564  001B4C  6E0F               	movwf	___wmul@multiplier,c
  6565  001B4E  0E00               	movlw	0
  6566  001B50  2008               	addwfc	?___awdiv+1,w,c
  6567  001B52  6E10               	movwf	___wmul@multiplier+1,c
  6568  001B54  0E00               	movlw	0
  6569  001B56  6E12               	movwf	___wmul@multiplicand+1,c
  6570  001B58  0E03               	movlw	3
  6571  001B5A  6E11               	movwf	___wmul@multiplicand,c
  6572  001B5C  ECC4  F018         	call	___wmul	;wreg free
  6573  001B60  0E50               	movlw	low __powers_
  6574  001B62  240F               	addwf	?___wmul,w,c
  6575  001B64  6EF6               	movwf	tblptrl,c
  6576  001B66  0E06               	movlw	high __powers_
  6577  001B68  2010               	addwfc	?___wmul+1,w,c
  6578  001B6A  6EF7               	movwf	tblptrh,c
  6579  001B6C                     	if	0	;There are less than 3 active tblptr bytes
  6580  001B6C                     	endif
  6581  001B6C  0009               	tblrd		*+
  6582  001B6E  CFF5 F021          	movff	tablat,___ftmul@f1
  6583  001B72  0009               	tblrd		*+
  6584  001B74  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6585  001B78  000A               	tblrd		*-
  6586  001B7A  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6587  001B7E  0E00               	movlw	0
  6588  001B80  6E12               	movwf	___wmul@multiplicand+1,c
  6589  001B82  0E03               	movlw	3
  6590  001B84  6E11               	movwf	___wmul@multiplicand,c
  6591  001B86  0E00               	movlw	0
  6592  001B88  6E04               	movwf	___awmod@divisor+1,c
  6593  001B8A  0E0A               	movlw	10
  6594  001B8C  6E03               	movwf	___awmod@divisor,c
  6595  001B8E  5036               	movf	scale@scl,w,c
  6596  001B90  6E01               	movwf	___awmod@dividend,c
  6597  001B92  6A02               	clrf	___awmod@dividend+1,c
  6598  001B94  BE01               	btfsc	___awmod@dividend,7,c
  6599  001B96  0602               	decf	___awmod@dividend+1,f,c
  6600  001B98  EC7B  F016         	call	___awmod	;wreg free
  6601  001B9C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6602  001BA0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6603  001BA4  ECC4  F018         	call	___wmul	;wreg free
  6604  001BA8  0E50               	movlw	low __powers_
  6605  001BAA  240F               	addwf	?___wmul,w,c
  6606  001BAC  6EF6               	movwf	tblptrl,c
  6607  001BAE  0E06               	movlw	high __powers_
  6608  001BB0  2010               	addwfc	?___wmul+1,w,c
  6609  001BB2  6EF7               	movwf	tblptrh,c
  6610  001BB4                     	if	0	;There are less than 3 active tblptr bytes
  6611  001BB4                     	endif
  6612  001BB4  0009               	tblrd		*+
  6613  001BB6  CFF5 F024          	movff	tablat,___ftmul@f2
  6614  001BBA  0009               	tblrd		*+
  6615  001BBC  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6616  001BC0  000A               	tblrd		*-
  6617  001BC2  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6618  001BC6  EC79  F013         	call	___ftmul	;wreg free
  6619  001BCA  D7A7               	goto	L4
  6620  001BCC                     i2l2973:
  6621                           
  6622                           ;doprnt.c: 440: return _powers_[scl];
  6623  001BCC  5036               	movf	scale@scl,w,c
  6624  001BCE  0D03               	mullw	3
  6625  001BD0  0E50               	movlw	low __powers_
  6626  001BD2  24F3               	addwf	prodl,w,c
  6627  001BD4  6EF6               	movwf	tblptrl,c
  6628  001BD6  0E06               	movlw	high __powers_
  6629  001BD8  20F4               	addwfc	prodh,w,c
  6630  001BDA  6EF7               	movwf	tblptrh,c
  6631  001BDC                     	if	0	;There are less than 3 active tblptr bytes
  6632  001BDC                     	endif
  6633  001BDC  0009               	tblrd		*+
  6634  001BDE  CFF5 F030          	movff	tablat,?_scale
  6635  001BE2  0009               	tblrd		*+
  6636  001BE4  CFF5 F031          	movff	tablat,?_scale+1
  6637  001BE8  000A               	tblrd		*-
  6638  001BEA  CFF5 F032          	movff	tablat,?_scale+2
  6639  001BEE  0012               	return	
  6640  001BF0                     __end_of_scale:
  6641                           	opt stack 0
  6642                           tosu	equ	0xFFF
  6643                           tosh	equ	0xFFE
  6644                           tosl	equ	0xFFD
  6645                           pclatu	equ	0xFFB
  6646                           pclath	equ	0xFFA
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           intcon	equ	0xFF2
  6654                           intcon2	equ	0xFF1
  6655                           intcon3	equ	0xFF0
  6656                           postinc0	equ	0xFEE
  6657                           fsr0h	equ	0xFEA
  6658                           fsr0l	equ	0xFE9
  6659                           wreg	equ	0xFE8
  6660                           indf1	equ	0xFE7
  6661                           postinc1	equ	0xFE6
  6662                           postdec1	equ	0xFE5
  6663                           fsr1h	equ	0xFE2
  6664                           fsr1l	equ	0xFE1
  6665                           indf2	equ	0xFDF
  6666                           postinc2	equ	0xFDE
  6667                           postdec2	equ	0xFDD
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function _putch *****************
  6673 ;; Defined at:
  6674 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  txData          1    wreg     unsigned char 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  txData          1    1[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6688 ;;      Params:         0       0       0       0       0       0       0
  6689 ;;      Locals:         1       0       0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0
  6691 ;;      Totals:         1       0       0       0       0       0       0
  6692 ;;Total ram usage:        1 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    1
  6695 ;; This function calls:
  6696 ;;		_EUSART1_Write
  6697 ;; This function is called by:
  6698 ;;		_printf
  6699 ;;		__doprnt
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text26
  6704  0032DC                     __ptext26:
  6705                           	opt stack 0
  6706  0032DC                     _putch:
  6707                           	opt stack 22
  6708                           
  6709                           ;incstack = 0
  6710                           ;putch@txData stored from wreg
  6711  0032DC  6E02               	movwf	putch@txData,c
  6712                           
  6713                           ;eusart1.c: 113: EUSART1_Write(txData);
  6714  0032DE  5002               	movf	putch@txData,w,c
  6715  0032E0  EC63  F019         	call	_EUSART1_Write
  6716  0032E4  0012               	return		;funcret
  6717  0032E6                     __end_of_putch:
  6718                           	opt stack 0
  6719                           tosu	equ	0xFFF
  6720                           tosh	equ	0xFFE
  6721                           tosl	equ	0xFFD
  6722                           pclatu	equ	0xFFB
  6723                           pclath	equ	0xFFA
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           intcon2	equ	0xFF1
  6732                           intcon3	equ	0xFF0
  6733                           postinc0	equ	0xFEE
  6734                           fsr0h	equ	0xFEA
  6735                           fsr0l	equ	0xFE9
  6736                           wreg	equ	0xFE8
  6737                           indf1	equ	0xFE7
  6738                           postinc1	equ	0xFE6
  6739                           postdec1	equ	0xFE5
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _EUSART1_Write *****************
  6750 ;; Defined at:
  6751 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  txData          1    wreg     unsigned char 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  txData          1    0[COMRAM] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6765 ;;      Params:         0       0       0       0       0       0       0
  6766 ;;      Locals:         1       0       0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0
  6768 ;;      Totals:         1       0       0       0       0       0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_putch
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text27
  6779  0032C6                     __ptext27:
  6780                           	opt stack 0
  6781  0032C6                     _EUSART1_Write:
  6782                           	opt stack 22
  6783                           
  6784                           ;incstack = 0
  6785                           ;EUSART1_Write@txData stored from wreg
  6786  0032C6  6E01               	movwf	EUSART1_Write@txData,c
  6787  0032C8                     i2l260:
  6788  0032C8  A89E               	btfss	3998,4,c	;volatile
  6789  0032CA  D7FE               	goto	i2l260
  6790                           
  6791                           ;eusart1.c: 101: }
  6792                           ;eusart1.c: 103: TXREG1 = txData;
  6793  0032CC  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6794  0032D0  0012               	return		;funcret
  6795  0032D2                     __end_of_EUSART1_Write:
  6796                           	opt stack 0
  6797                           tosu	equ	0xFFF
  6798                           tosh	equ	0xFFE
  6799                           tosl	equ	0xFFD
  6800                           pclatu	equ	0xFFB
  6801                           pclath	equ	0xFFA
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           intcon2	equ	0xFF1
  6810                           intcon3	equ	0xFF0
  6811                           postinc0	equ	0xFEE
  6812                           fsr0h	equ	0xFEA
  6813                           fsr0l	equ	0xFE9
  6814                           wreg	equ	0xFE8
  6815                           indf1	equ	0xFE7
  6816                           postinc1	equ	0xFE6
  6817                           postdec1	equ	0xFE5
  6818                           fsr1h	equ	0xFE2
  6819                           fsr1l	equ	0xFE1
  6820                           indf2	equ	0xFDF
  6821                           postinc2	equ	0xFDE
  6822                           postdec2	equ	0xFDD
  6823                           fsr2h	equ	0xFDA
  6824                           fsr2l	equ	0xFD9
  6825                           status	equ	0xFD8
  6826                           
  6827 ;; *************** function _isdigit *****************
  6828 ;; Defined at:
  6829 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;  c               1    wreg     unsigned char 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  c               1    2[COMRAM] unsigned char 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;		None               void
  6836 ;; Registers used:
  6837 ;;		wreg, status,2, status,0
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6843 ;;      Params:         0       0       0       0       0       0       0
  6844 ;;      Locals:         2       0       0       0       0       0       0
  6845 ;;      Temps:          1       0       0       0       0       0       0
  6846 ;;      Totals:         3       0       0       0       0       0       0
  6847 ;;Total ram usage:        3 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		__doprnt
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text28
  6857  003234                     __ptext28:
  6858                           	opt stack 0
  6859  003234                     _isdigit:
  6860                           	opt stack 23
  6861                           
  6862                           ;incstack = 0
  6863                           ;isdigit@c stored from wreg
  6864  003234  6E03               	movwf	isdigit@c,c
  6865  003236  0E00               	movlw	0
  6866  003238  6E02               	movwf	_isdigit$1203,c
  6867  00323A  0E3A               	movlw	58
  6868  00323C  6003               	cpfslt	isdigit@c,c
  6869  00323E  D005               	goto	i2l2985
  6870  003240  0E2F               	movlw	47
  6871  003242  6403               	cpfsgt	isdigit@c,c
  6872  003244  D002               	goto	i2l2985
  6873  003246  0E01               	movlw	1
  6874  003248  6E02               	movwf	_isdigit$1203,c
  6875  00324A                     i2l2985:
  6876  00324A  C002  F001         	movff	_isdigit$1203,??_isdigit
  6877  00324E  3001               	rrcf	??_isdigit,w,c
  6878  003250  0012               	return	
  6879  003252                     __end_of_isdigit:
  6880                           	opt stack 0
  6881                           tosu	equ	0xFFF
  6882                           tosh	equ	0xFFE
  6883                           tosl	equ	0xFFD
  6884                           pclatu	equ	0xFFB
  6885                           pclath	equ	0xFFA
  6886                           tblptru	equ	0xFF8
  6887                           tblptrh	equ	0xFF7
  6888                           tblptrl	equ	0xFF6
  6889                           tablat	equ	0xFF5
  6890                           prodh	equ	0xFF4
  6891                           prodl	equ	0xFF3
  6892                           intcon	equ	0xFF2
  6893                           intcon2	equ	0xFF1
  6894                           intcon3	equ	0xFF0
  6895                           postinc0	equ	0xFEE
  6896                           fsr0h	equ	0xFEA
  6897                           fsr0l	equ	0xFE9
  6898                           wreg	equ	0xFE8
  6899                           indf1	equ	0xFE7
  6900                           postinc1	equ	0xFE6
  6901                           postdec1	equ	0xFE5
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _fround *****************
  6912 ;; Defined at:
  6913 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  prec            1    wreg     unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  prec            1   56[COMRAM] unsigned char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  3   47[COMRAM] unsigned char 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6927 ;;      Params:         3       0       0       0       0       0       0
  6928 ;;      Locals:         7       0       0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0
  6930 ;;      Totals:        10       0       0       0       0       0       0
  6931 ;;Total ram usage:       10 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    2
  6934 ;; This function calls:
  6935 ;;		___awdiv
  6936 ;;		___awmod
  6937 ;;		___ftmul
  6938 ;;		___wmul
  6939 ;; This function is called by:
  6940 ;;		__doprnt
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text29
  6945  001BF0                     __ptext29:
  6946                           	opt stack 0
  6947  001BF0                     _fround:
  6948                           	opt stack 21
  6949                           
  6950                           ;incstack = 0
  6951                           ;fround@prec stored from wreg
  6952  001BF0  6E39               	movwf	fround@prec,c
  6953                           
  6954                           ;doprnt.c: 413: if(prec>=110)
  6955  001BF2  0E6D               	movlw	109
  6956  001BF4  6439               	cpfsgt	fround@prec,c
  6957  001BF6  D09F               	goto	i2l2927
  6958                           
  6959                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6960  001BF8  0E00               	movlw	0
  6961  001BFA  6E12               	movwf	___wmul@multiplicand+1,c
  6962  001BFC  0E03               	movlw	3
  6963  001BFE  6E11               	movwf	___wmul@multiplicand,c
  6964  001C00  0E00               	movlw	0
  6965  001C02  6E0A               	movwf	___awdiv@divisor+1,c
  6966  001C04  0E0A               	movlw	10
  6967  001C06  6E09               	movwf	___awdiv@divisor,c
  6968  001C08  0E00               	movlw	0
  6969  001C0A  6E04               	movwf	___awmod@divisor+1,c
  6970  001C0C  0E64               	movlw	100
  6971  001C0E  6E03               	movwf	___awmod@divisor,c
  6972  001C10  C039  F001         	movff	fround@prec,___awmod@dividend
  6973  001C14  6A02               	clrf	___awmod@dividend+1,c
  6974  001C16  EC7B  F016         	call	___awmod	;wreg free
  6975  001C1A  C001  F007         	movff	?___awmod,___awdiv@dividend
  6976  001C1E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6977  001C22  EC7F  F015         	call	___awdiv	;wreg free
  6978  001C26  0E09               	movlw	9
  6979  001C28  2407               	addwf	?___awdiv,w,c
  6980  001C2A  6E0F               	movwf	___wmul@multiplier,c
  6981  001C2C  0E00               	movlw	0
  6982  001C2E  2008               	addwfc	?___awdiv+1,w,c
  6983  001C30  6E10               	movwf	___wmul@multiplier+1,c
  6984  001C32  ECC4  F018         	call	___wmul	;wreg free
  6985  001C36  0E29               	movlw	low __npowers_
  6986  001C38  240F               	addwf	?___wmul,w,c
  6987  001C3A  6EF6               	movwf	tblptrl,c
  6988  001C3C  0E06               	movlw	high __npowers_
  6989  001C3E  2010               	addwfc	?___wmul+1,w,c
  6990  001C40  6EF7               	movwf	tblptrh,c
  6991  001C42                     	if	0	;There are less than 3 active tblptr bytes
  6992  001C42                     	endif
  6993  001C42  0009               	tblrd		*+
  6994  001C44  CFF5 F024          	movff	tablat,___ftmul@f2
  6995  001C48  0009               	tblrd		*+
  6996  001C4A  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6997  001C4E  000A               	tblrd		*-
  6998  001C50  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6999  001C54  0E00               	movlw	0
  7000  001C56  6E0A               	movwf	___awdiv@divisor+1,c
  7001  001C58  0E64               	movlw	100
  7002  001C5A  6E09               	movwf	___awdiv@divisor,c
  7003  001C5C  C039  F007         	movff	fround@prec,___awdiv@dividend
  7004  001C60  6A08               	clrf	___awdiv@dividend+1,c
  7005  001C62  EC7F  F015         	call	___awdiv	;wreg free
  7006  001C66  0E12               	movlw	18
  7007  001C68  2407               	addwf	?___awdiv,w,c
  7008  001C6A  6E0F               	movwf	___wmul@multiplier,c
  7009  001C6C  0E00               	movlw	0
  7010  001C6E  2008               	addwfc	?___awdiv+1,w,c
  7011  001C70  6E10               	movwf	___wmul@multiplier+1,c
  7012  001C72  0E00               	movlw	0
  7013  001C74  6E12               	movwf	___wmul@multiplicand+1,c
  7014  001C76  0E03               	movlw	3
  7015  001C78  6E11               	movwf	___wmul@multiplicand,c
  7016  001C7A  ECC4  F018         	call	___wmul	;wreg free
  7017  001C7E  0E29               	movlw	low __npowers_
  7018  001C80  240F               	addwf	?___wmul,w,c
  7019  001C82  6EF6               	movwf	tblptrl,c
  7020  001C84  0E06               	movlw	high __npowers_
  7021  001C86  2010               	addwfc	?___wmul+1,w,c
  7022  001C88  6EF7               	movwf	tblptrh,c
  7023  001C8A                     	if	0	;There are less than 3 active tblptr bytes
  7024  001C8A                     	endif
  7025  001C8A  0009               	tblrd		*+
  7026  001C8C  CFF5 F021          	movff	tablat,___ftmul@f1
  7027  001C90  0009               	tblrd		*+
  7028  001C92  CFF5 F022          	movff	tablat,___ftmul@f1+1
  7029  001C96  000A               	tblrd		*-
  7030  001C98  CFF5 F023          	movff	tablat,___ftmul@f1+2
  7031  001C9C  EC79  F013         	call	___ftmul	;wreg free
  7032  001CA0  C021  F036         	movff	?___ftmul,_fround$1656
  7033  001CA4  C022  F037         	movff	?___ftmul+1,_fround$1656+1
  7034  001CA8  C023  F038         	movff	?___ftmul+2,_fround$1656+2
  7035                           
  7036                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7037  001CAC  0E00               	movlw	0
  7038  001CAE  6E12               	movwf	___wmul@multiplicand+1,c
  7039  001CB0  0E03               	movlw	3
  7040  001CB2  6E11               	movwf	___wmul@multiplicand,c
  7041  001CB4  0E00               	movlw	0
  7042  001CB6  6E04               	movwf	___awmod@divisor+1,c
  7043  001CB8  0E0A               	movlw	10
  7044  001CBA  6E03               	movwf	___awmod@divisor,c
  7045  001CBC  C039  F001         	movff	fround@prec,___awmod@dividend
  7046  001CC0  6A02               	clrf	___awmod@dividend+1,c
  7047  001CC2  EC7B  F016         	call	___awmod	;wreg free
  7048  001CC6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7049  001CCA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7050  001CCE  ECC4  F018         	call	___wmul	;wreg free
  7051  001CD2  0E29               	movlw	low __npowers_
  7052  001CD4  240F               	addwf	?___wmul,w,c
  7053  001CD6  6EF6               	movwf	tblptrl,c
  7054  001CD8  0E06               	movlw	high __npowers_
  7055  001CDA  2010               	addwfc	?___wmul+1,w,c
  7056  001CDC  6EF7               	movwf	tblptrh,c
  7057  001CDE                     	if	0	;There are less than 3 active tblptr bytes
  7058  001CDE                     	endif
  7059  001CDE  0009               	tblrd		*+
  7060  001CE0  CFF5 F024          	movff	tablat,___ftmul@f2
  7061  001CE4  0009               	tblrd		*+
  7062  001CE6  CFF5 F025          	movff	tablat,___ftmul@f2+1
  7063  001CEA  000A               	tblrd		*-
  7064  001CEC  CFF5 F026          	movff	tablat,___ftmul@f2+2
  7065  001CF0  C036  F021         	movff	_fround$1656,___ftmul@f1
  7066  001CF4  C037  F022         	movff	_fround$1656+1,___ftmul@f1+1
  7067  001CF8  C038  F023         	movff	_fround$1656+2,___ftmul@f1+2
  7068  001CFC  EC79  F013         	call	___ftmul	;wreg free
  7069  001D00  C021  F033         	movff	?___ftmul,_fround$1657
  7070  001D04  C022  F034         	movff	?___ftmul+1,_fround$1657+1
  7071  001D08  C023  F035         	movff	?___ftmul+2,_fround$1657+2
  7072                           
  7073                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7074  001D0C  C033  F021         	movff	_fround$1657,___ftmul@f1
  7075  001D10  C034  F022         	movff	_fround$1657+1,___ftmul@f1+1
  7076  001D14  C035  F023         	movff	_fround$1657+2,___ftmul@f1+2
  7077  001D18  0E00               	movlw	0
  7078  001D1A  6E24               	movwf	___ftmul@f2,c
  7079  001D1C  0E00               	movlw	0
  7080  001D1E  6E25               	movwf	___ftmul@f2+1,c
  7081  001D20  0E3F               	movlw	63
  7082  001D22  6E26               	movwf	___ftmul@f2+2,c
  7083  001D24  EC79  F013         	call	___ftmul	;wreg free
  7084  001D28  C021  F030         	movff	?___ftmul,?_fround
  7085  001D2C  C022  F031         	movff	?___ftmul+1,?_fround+1
  7086  001D30  C023  F032         	movff	?___ftmul+2,?_fround+2
  7087  001D34  0012               	return	
  7088  001D36                     i2l2927:
  7089                           
  7090                           ;doprnt.c: 415: else if(prec > 10)
  7091  001D36  0E0A               	movlw	10
  7092  001D38  6439               	cpfsgt	fround@prec,c
  7093  001D3A  D05D               	goto	i2l2935
  7094                           
  7095                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7096  001D3C  0E00               	movlw	0
  7097  001D3E  6E12               	movwf	___wmul@multiplicand+1,c
  7098  001D40  0E03               	movlw	3
  7099  001D42  6E11               	movwf	___wmul@multiplicand,c
  7100  001D44  0E00               	movlw	0
  7101  001D46  6E04               	movwf	___awmod@divisor+1,c
  7102  001D48  0E0A               	movlw	10
  7103  001D4A  6E03               	movwf	___awmod@divisor,c
  7104  001D4C  C039  F001         	movff	fround@prec,___awmod@dividend
  7105  001D50  6A02               	clrf	___awmod@dividend+1,c
  7106  001D52  EC7B  F016         	call	___awmod	;wreg free
  7107  001D56  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7108  001D5A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7109  001D5E  ECC4  F018         	call	___wmul	;wreg free
  7110  001D62  0E29               	movlw	low __npowers_
  7111  001D64  240F               	addwf	?___wmul,w,c
  7112  001D66  6EF6               	movwf	tblptrl,c
  7113  001D68  0E06               	movlw	high __npowers_
  7114  001D6A  2010               	addwfc	?___wmul+1,w,c
  7115  001D6C  6EF7               	movwf	tblptrh,c
  7116  001D6E                     	if	0	;There are less than 3 active tblptr bytes
  7117  001D6E                     	endif
  7118  001D6E  0009               	tblrd		*+
  7119  001D70  CFF5 F024          	movff	tablat,___ftmul@f2
  7120  001D74  0009               	tblrd		*+
  7121  001D76  CFF5 F025          	movff	tablat,___ftmul@f2+1
  7122  001D7A  000A               	tblrd		*-
  7123  001D7C  CFF5 F026          	movff	tablat,___ftmul@f2+2
  7124  001D80  0E00               	movlw	0
  7125  001D82  6E0A               	movwf	___awdiv@divisor+1,c
  7126  001D84  0E0A               	movlw	10
  7127  001D86  6E09               	movwf	___awdiv@divisor,c
  7128  001D88  C039  F007         	movff	fround@prec,___awdiv@dividend
  7129  001D8C  6A08               	clrf	___awdiv@dividend+1,c
  7130  001D8E  EC7F  F015         	call	___awdiv	;wreg free
  7131  001D92  0E09               	movlw	9
  7132  001D94  2407               	addwf	?___awdiv,w,c
  7133  001D96  6E0F               	movwf	___wmul@multiplier,c
  7134  001D98  0E00               	movlw	0
  7135  001D9A  2008               	addwfc	?___awdiv+1,w,c
  7136  001D9C  6E10               	movwf	___wmul@multiplier+1,c
  7137  001D9E  0E00               	movlw	0
  7138  001DA0  6E12               	movwf	___wmul@multiplicand+1,c
  7139  001DA2  0E03               	movlw	3
  7140  001DA4  6E11               	movwf	___wmul@multiplicand,c
  7141  001DA6  ECC4  F018         	call	___wmul	;wreg free
  7142  001DAA  0E29               	movlw	low __npowers_
  7143  001DAC  240F               	addwf	?___wmul,w,c
  7144  001DAE  6EF6               	movwf	tblptrl,c
  7145  001DB0  0E06               	movlw	high __npowers_
  7146  001DB2  2010               	addwfc	?___wmul+1,w,c
  7147  001DB4  6EF7               	movwf	tblptrh,c
  7148  001DB6                     	if	0	;There are less than 3 active tblptr bytes
  7149  001DB6                     	endif
  7150  001DB6  0009               	tblrd		*+
  7151  001DB8  CFF5 F021          	movff	tablat,___ftmul@f1
  7152  001DBC  0009               	tblrd		*+
  7153  001DBE  CFF5 F022          	movff	tablat,___ftmul@f1+1
  7154  001DC2  000A               	tblrd		*-
  7155  001DC4  CFF5 F023          	movff	tablat,___ftmul@f1+2
  7156  001DC8  EC79  F013         	call	___ftmul	;wreg free
  7157  001DCC  C021  F036         	movff	?___ftmul,_fround$1656
  7158  001DD0  C022  F037         	movff	?___ftmul+1,_fround$1656+1
  7159  001DD4  C023  F038         	movff	?___ftmul+2,_fround$1656+2
  7160                           
  7161                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7162  001DD8  C036  F021         	movff	_fround$1656,___ftmul@f1
  7163  001DDC  C037  F022         	movff	_fround$1656+1,___ftmul@f1+1
  7164  001DE0  C038  F023         	movff	_fround$1656+2,___ftmul@f1+2
  7165  001DE4  0E00               	movlw	0
  7166  001DE6  6E24               	movwf	___ftmul@f2,c
  7167  001DE8  0E00               	movlw	0
  7168  001DEA  6E25               	movwf	___ftmul@f2+1,c
  7169  001DEC  0E3F               	movlw	63
  7170  001DEE  6E26               	movwf	___ftmul@f2+2,c
  7171  001DF0  EC79  F013         	call	___ftmul	;wreg free
  7172  001DF4  D799               	goto	L5
  7173  001DF6                     i2l2935:
  7174                           
  7175                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7176  001DF6  5039               	movf	fround@prec,w,c
  7177  001DF8  0D03               	mullw	3
  7178  001DFA  0E29               	movlw	low __npowers_
  7179  001DFC  24F3               	addwf	prodl,w,c
  7180  001DFE  6EF6               	movwf	tblptrl,c
  7181  001E00  0E06               	movlw	high __npowers_
  7182  001E02  20F4               	addwfc	prodh,w,c
  7183  001E04  6EF7               	movwf	tblptrh,c
  7184  001E06                     	if	0	;There are less than 3 active tblptr bytes
  7185  001E06                     	endif
  7186  001E06  0009               	tblrd		*+
  7187  001E08  CFF5 F021          	movff	tablat,___ftmul@f1
  7188  001E0C  0009               	tblrd		*+
  7189  001E0E  CFF5 F022          	movff	tablat,___ftmul@f1+1
  7190  001E12  000A               	tblrd		*-
  7191  001E14  CFF5 F023          	movff	tablat,___ftmul@f1+2
  7192  001E18  0E00               	movlw	0
  7193  001E1A  6E24               	movwf	___ftmul@f2,c
  7194  001E1C  0E00               	movlw	0
  7195  001E1E  6E25               	movwf	___ftmul@f2+1,c
  7196  001E20  0E3F               	movlw	63
  7197  001E22  6E26               	movwf	___ftmul@f2+2,c
  7198  001E24  EC79  F013         	call	___ftmul	;wreg free
  7199  001E28  C021  F030         	movff	?___ftmul,?_fround
  7200  001E2C  C022  F031         	movff	?___ftmul+1,?_fround+1
  7201  001E30  C023  F032         	movff	?___ftmul+2,?_fround+2
  7202  001E34  0012               	return	
  7203  001E36                     __end_of_fround:
  7204                           	opt stack 0
  7205                           tosu	equ	0xFFF
  7206                           tosh	equ	0xFFE
  7207                           tosl	equ	0xFFD
  7208                           pclatu	equ	0xFFB
  7209                           pclath	equ	0xFFA
  7210                           tblptru	equ	0xFF8
  7211                           tblptrh	equ	0xFF7
  7212                           tblptrl	equ	0xFF6
  7213                           tablat	equ	0xFF5
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           intcon	equ	0xFF2
  7217                           intcon2	equ	0xFF1
  7218                           intcon3	equ	0xFF0
  7219                           postinc0	equ	0xFEE
  7220                           fsr0h	equ	0xFEA
  7221                           fsr0l	equ	0xFE9
  7222                           wreg	equ	0xFE8
  7223                           indf1	equ	0xFE7
  7224                           postinc1	equ	0xFE6
  7225                           postdec1	equ	0xFE5
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function ___wmul *****************
  7236 ;; Defined at:
  7237 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  multiplier      2   14[COMRAM] unsigned int 
  7240 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  product         2   18[COMRAM] unsigned int 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  2   14[COMRAM] unsigned int 
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0, prodl, prodh
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7252 ;;      Params:         4       0       0       0       0       0       0
  7253 ;;      Locals:         2       0       0       0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0
  7255 ;;      Totals:         6       0       0       0       0       0       0
  7256 ;;Total ram usage:        6 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; This function calls:
  7259 ;;		Nothing
  7260 ;; This function is called by:
  7261 ;;		_INT0_ISR
  7262 ;;		_fround
  7263 ;;		_scale
  7264 ;;		__doprnt
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text30
  7269  003188                     __ptext30:
  7270                           	opt stack 0
  7271  003188                     ___wmul:
  7272                           	opt stack 22
  7273                           
  7274                           ;incstack = 0
  7275  003188  500F               	movf	___wmul@multiplier,w,c
  7276  00318A  0211               	mulwf	___wmul@multiplicand,c
  7277  00318C  CFF3 F013          	movff	prodl,___wmul@product
  7278  003190  CFF4 F014          	movff	prodh,___wmul@product+1
  7279  003194  500F               	movf	___wmul@multiplier,w,c
  7280  003196  0212               	mulwf	___wmul@multiplicand+1,c
  7281  003198  50F3               	movf	prodl,w,c
  7282  00319A  2614               	addwf	___wmul@product+1,f,c
  7283  00319C  5010               	movf	___wmul@multiplier+1,w,c
  7284  00319E  0211               	mulwf	___wmul@multiplicand,c
  7285  0031A0  50F3               	movf	prodl,w,c
  7286  0031A2  2614               	addwf	___wmul@product+1,f,c
  7287  0031A4  C013  F00F         	movff	___wmul@product,?___wmul
  7288  0031A8  C014  F010         	movff	___wmul@product+1,?___wmul+1
  7289  0031AC  0012               	return	
  7290  0031AE                     __end_of___wmul:
  7291                           	opt stack 0
  7292                           tosu	equ	0xFFF
  7293                           tosh	equ	0xFFE
  7294                           tosl	equ	0xFFD
  7295                           pclatu	equ	0xFFB
  7296                           pclath	equ	0xFFA
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           intcon	equ	0xFF2
  7304                           intcon2	equ	0xFF1
  7305                           intcon3	equ	0xFF0
  7306                           postinc0	equ	0xFEE
  7307                           fsr0h	equ	0xFEA
  7308                           fsr0l	equ	0xFE9
  7309                           wreg	equ	0xFE8
  7310                           indf1	equ	0xFE7
  7311                           postinc1	equ	0xFE6
  7312                           postdec1	equ	0xFE5
  7313                           fsr1h	equ	0xFE2
  7314                           fsr1l	equ	0xFE1
  7315                           indf2	equ	0xFDF
  7316                           postinc2	equ	0xFDE
  7317                           postdec2	equ	0xFDD
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function ___ftmul *****************
  7323 ;; Defined at:
  7324 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  f1              3   32[COMRAM] float 
  7327 ;;  f2              3   35[COMRAM] float 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  7330 ;;  sign            1   46[COMRAM] unsigned char 
  7331 ;;  cntr            1   45[COMRAM] unsigned char 
  7332 ;;  exp             1   41[COMRAM] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  3   32[COMRAM] float 
  7335 ;; Registers used:
  7336 ;;		wreg, status,2, status,0, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7342 ;;      Params:         6       0       0       0       0       0       0
  7343 ;;      Locals:         6       0       0       0       0       0       0
  7344 ;;      Temps:          3       0       0       0       0       0       0
  7345 ;;      Totals:        15       0       0       0       0       0       0
  7346 ;;Total ram usage:       15 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    1
  7349 ;; This function calls:
  7350 ;;		___ftpack
  7351 ;; This function is called by:
  7352 ;;		_INT0_ISR
  7353 ;;		_fround
  7354 ;;		_scale
  7355 ;;		__doprnt
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text31
  7360  0026F2                     __ptext31:
  7361                           	opt stack 0
  7362  0026F2                     ___ftmul:
  7363                           	opt stack 21
  7364                           
  7365                           ;incstack = 0
  7366  0026F2  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  7367  0026F6  6A28               	clrf	(??___ftmul+1)& (0+255),c
  7368  0026F8  6A29               	clrf	(??___ftmul+2)& (0+255),c
  7369  0026FA  3422               	rlcf	___ftmul@f1+1,w,c
  7370  0026FC  3627               	rlcf	??___ftmul& (0+255),f,c
  7371  0026FE  E301               	bnc	u263_41
  7372  002700  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  7373  002702                     u263_41:
  7374  002702  5027               	movf	??___ftmul,w,c
  7375  002704  6E2A               	movwf	___ftmul@exp,c
  7376  002706  502A               	movf	___ftmul@exp,w,c
  7377  002708  A4D8               	btfss	status,2,c
  7378  00270A  D007               	goto	i2l2757
  7379  00270C  0E00               	movlw	0
  7380  00270E  6E21               	movwf	?___ftmul,c
  7381  002710  0E00               	movlw	0
  7382  002712  6E22               	movwf	?___ftmul+1,c
  7383  002714  0E00               	movlw	0
  7384  002716  6E23               	movwf	?___ftmul+2,c
  7385  002718  0012               	return	
  7386  00271A                     i2l2757:
  7387  00271A  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  7388  00271E  6A28               	clrf	(??___ftmul+1)& (0+255),c
  7389  002720  6A29               	clrf	(??___ftmul+2)& (0+255),c
  7390  002722  3425               	rlcf	___ftmul@f2+1,w,c
  7391  002724  3627               	rlcf	??___ftmul& (0+255),f,c
  7392  002726  E301               	bnc	u265_41
  7393  002728  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  7394  00272A                     u265_41:
  7395  00272A  5027               	movf	??___ftmul,w,c
  7396  00272C  6E2F               	movwf	___ftmul@sign,c
  7397  00272E  502F               	movf	___ftmul@sign,w,c
  7398  002730  A4D8               	btfss	status,2,c
  7399  002732  D007               	goto	i2l2763
  7400  002734  0E00               	movlw	0
  7401  002736  6E21               	movwf	?___ftmul,c
  7402  002738  0E00               	movlw	0
  7403  00273A  6E22               	movwf	?___ftmul+1,c
  7404  00273C  0E00               	movlw	0
  7405  00273E  6E23               	movwf	?___ftmul+2,c
  7406  002740  0012               	return	
  7407  002742                     i2l2763:
  7408  002742  502F               	movf	___ftmul@sign,w,c
  7409  002744  0F7B               	addlw	123
  7410  002746  262A               	addwf	___ftmul@exp,f,c
  7411  002748  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  7412  00274C  5026               	movf	___ftmul@f2+2,w,c
  7413  00274E  1A2F               	xorwf	___ftmul@sign,f,c
  7414  002750  0E80               	movlw	128
  7415  002752  162F               	andwf	___ftmul@sign,f,c
  7416  002754  8E22               	bsf	___ftmul@f1+1,7,c
  7417  002756  8E25               	bsf	___ftmul@f2+1,7,c
  7418  002758  0EFF               	movlw	255
  7419  00275A  1624               	andwf	___ftmul@f2,f,c
  7420  00275C  0EFF               	movlw	255
  7421  00275E  1625               	andwf	___ftmul@f2+1,f,c
  7422  002760  0E00               	movlw	0
  7423  002762  1626               	andwf	___ftmul@f2+2,f,c
  7424  002764  0E00               	movlw	0
  7425  002766  6E2B               	movwf	___ftmul@f3_as_product,c
  7426  002768  0E00               	movlw	0
  7427  00276A  6E2C               	movwf	___ftmul@f3_as_product+1,c
  7428  00276C  0E00               	movlw	0
  7429  00276E  6E2D               	movwf	___ftmul@f3_as_product+2,c
  7430  002770  0E07               	movlw	7
  7431  002772  6E2E               	movwf	___ftmul@cntr,c
  7432  002774                     i2l2777:
  7433  002774  A021               	btfss	___ftmul@f1,0,c
  7434  002776  D006               	goto	i2l2781
  7435  002778  5024               	movf	___ftmul@f2,w,c
  7436  00277A  262B               	addwf	___ftmul@f3_as_product,f,c
  7437  00277C  5025               	movf	___ftmul@f2+1,w,c
  7438  00277E  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  7439  002780  5026               	movf	___ftmul@f2+2,w,c
  7440  002782  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  7441  002784                     i2l2781:
  7442  002784  90D8               	bcf	status,0,c
  7443  002786  3223               	rrcf	___ftmul@f1+2,f,c
  7444  002788  3222               	rrcf	___ftmul@f1+1,f,c
  7445  00278A  3221               	rrcf	___ftmul@f1,f,c
  7446  00278C  90D8               	bcf	status,0,c
  7447  00278E  3624               	rlcf	___ftmul@f2,f,c
  7448  002790  3625               	rlcf	___ftmul@f2+1,f,c
  7449  002792  3626               	rlcf	___ftmul@f2+2,f,c
  7450  002794  2E2E               	decfsz	___ftmul@cntr,f,c
  7451  002796  D7EE               	goto	i2l2777
  7452  002798  0E09               	movlw	9
  7453  00279A  6E2E               	movwf	___ftmul@cntr,c
  7454  00279C                     i2l2787:
  7455  00279C  A021               	btfss	___ftmul@f1,0,c
  7456  00279E  D006               	goto	i2l2791
  7457  0027A0  5024               	movf	___ftmul@f2,w,c
  7458  0027A2  262B               	addwf	___ftmul@f3_as_product,f,c
  7459  0027A4  5025               	movf	___ftmul@f2+1,w,c
  7460  0027A6  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  7461  0027A8  5026               	movf	___ftmul@f2+2,w,c
  7462  0027AA  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  7463  0027AC                     i2l2791:
  7464  0027AC  90D8               	bcf	status,0,c
  7465  0027AE  3223               	rrcf	___ftmul@f1+2,f,c
  7466  0027B0  3222               	rrcf	___ftmul@f1+1,f,c
  7467  0027B2  3221               	rrcf	___ftmul@f1,f,c
  7468  0027B4  90D8               	bcf	status,0,c
  7469  0027B6  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  7470  0027B8  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  7471  0027BA  322B               	rrcf	___ftmul@f3_as_product,f,c
  7472  0027BC  2E2E               	decfsz	___ftmul@cntr,f,c
  7473  0027BE  D7EE               	goto	i2l2787
  7474  0027C0  C02B  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7475  0027C4  C02C  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7476  0027C8  C02D  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7477  0027CC  C02A  F004         	movff	___ftmul@exp,___ftpack@exp
  7478  0027D0  C02F  F005         	movff	___ftmul@sign,___ftpack@sign
  7479  0027D4  ECE0  F014         	call	___ftpack	;wreg free
  7480  0027D8  C001  F021         	movff	?___ftpack,?___ftmul
  7481  0027DC  C002  F022         	movff	?___ftpack+1,?___ftmul+1
  7482  0027E0  C003  F023         	movff	?___ftpack+2,?___ftmul+2
  7483  0027E4  0012               	return	
  7484  0027E6                     __end_of___ftmul:
  7485                           	opt stack 0
  7486                           tosu	equ	0xFFF
  7487                           tosh	equ	0xFFE
  7488                           tosl	equ	0xFFD
  7489                           pclatu	equ	0xFFB
  7490                           pclath	equ	0xFFA
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           intcon	equ	0xFF2
  7498                           intcon2	equ	0xFF1
  7499                           intcon3	equ	0xFF0
  7500                           postinc0	equ	0xFEE
  7501                           fsr0h	equ	0xFEA
  7502                           fsr0l	equ	0xFE9
  7503                           wreg	equ	0xFE8
  7504                           indf1	equ	0xFE7
  7505                           postinc1	equ	0xFE6
  7506                           postdec1	equ	0xFE5
  7507                           fsr1h	equ	0xFE2
  7508                           fsr1l	equ	0xFE1
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function ___awmod *****************
  7517 ;; Defined at:
  7518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  dividend        2    0[COMRAM] int 
  7521 ;;  divisor         2    2[COMRAM] int 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  sign            1    5[COMRAM] unsigned char 
  7524 ;;  counter         1    4[COMRAM] unsigned char 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  2    0[COMRAM] int 
  7527 ;; Registers used:
  7528 ;;		wreg, status,2, status,0
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7534 ;;      Params:         4       0       0       0       0       0       0
  7535 ;;      Locals:         2       0       0       0       0       0       0
  7536 ;;      Temps:          0       0       0       0       0       0       0
  7537 ;;      Totals:         6       0       0       0       0       0       0
  7538 ;;Total ram usage:        6 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_fround
  7544 ;;		_scale
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text32
  7549  002CF6                     __ptext32:
  7550                           	opt stack 0
  7551  002CF6                     ___awmod:
  7552                           	opt stack 22
  7553                           
  7554                           ;incstack = 0
  7555  002CF6  0E00               	movlw	0
  7556  002CF8  6E06               	movwf	___awmod@sign,c
  7557  002CFA  AE02               	btfss	___awmod@dividend+1,7,c
  7558  002CFC  D006               	goto	i2l2851
  7559  002CFE  6C01               	negf	___awmod@dividend,c
  7560  002D00  1E02               	comf	___awmod@dividend+1,f,c
  7561  002D02  B0D8               	btfsc	status,0,c
  7562  002D04  2A02               	incf	___awmod@dividend+1,f,c
  7563  002D06  0E01               	movlw	1
  7564  002D08  6E06               	movwf	___awmod@sign,c
  7565  002D0A                     i2l2851:
  7566  002D0A  AE04               	btfss	___awmod@divisor+1,7,c
  7567  002D0C  D004               	goto	i2l2855
  7568  002D0E  6C03               	negf	___awmod@divisor,c
  7569  002D10  1E04               	comf	___awmod@divisor+1,f,c
  7570  002D12  B0D8               	btfsc	status,0,c
  7571  002D14  2A04               	incf	___awmod@divisor+1,f,c
  7572  002D16                     i2l2855:
  7573  002D16  5003               	movf	___awmod@divisor,w,c
  7574  002D18  1004               	iorwf	___awmod@divisor+1,w,c
  7575  002D1A  B4D8               	btfsc	status,2,c
  7576  002D1C  D018               	goto	i2l2871
  7577  002D1E  0E01               	movlw	1
  7578  002D20  6E05               	movwf	___awmod@counter,c
  7579  002D22  D004               	goto	i2l2861
  7580  002D24                     i2l2859:
  7581  002D24  90D8               	bcf	status,0,c
  7582  002D26  3603               	rlcf	___awmod@divisor,f,c
  7583  002D28  3604               	rlcf	___awmod@divisor+1,f,c
  7584  002D2A  2A05               	incf	___awmod@counter,f,c
  7585  002D2C                     i2l2861:
  7586  002D2C  AE04               	btfss	___awmod@divisor+1,7,c
  7587  002D2E  D7FA               	goto	i2l2859
  7588  002D30                     i2l2863:
  7589  002D30  5003               	movf	___awmod@divisor,w,c
  7590  002D32  5C01               	subwf	___awmod@dividend,w,c
  7591  002D34  5004               	movf	___awmod@divisor+1,w,c
  7592  002D36  5802               	subwfb	___awmod@dividend+1,w,c
  7593  002D38  A0D8               	btfss	status,0,c
  7594  002D3A  D004               	goto	i2l2867
  7595  002D3C  5003               	movf	___awmod@divisor,w,c
  7596  002D3E  5E01               	subwf	___awmod@dividend,f,c
  7597  002D40  5004               	movf	___awmod@divisor+1,w,c
  7598  002D42  5A02               	subwfb	___awmod@dividend+1,f,c
  7599  002D44                     i2l2867:
  7600  002D44  90D8               	bcf	status,0,c
  7601  002D46  3204               	rrcf	___awmod@divisor+1,f,c
  7602  002D48  3203               	rrcf	___awmod@divisor,f,c
  7603  002D4A  2E05               	decfsz	___awmod@counter,f,c
  7604  002D4C  D7F1               	goto	i2l2863
  7605  002D4E                     i2l2871:
  7606  002D4E  5006               	movf	___awmod@sign,w,c
  7607  002D50  B4D8               	btfsc	status,2,c
  7608  002D52  D004               	goto	i2l2875
  7609  002D54  6C01               	negf	___awmod@dividend,c
  7610  002D56  1E02               	comf	___awmod@dividend+1,f,c
  7611  002D58  B0D8               	btfsc	status,0,c
  7612  002D5A  2A02               	incf	___awmod@dividend+1,f,c
  7613  002D5C                     i2l2875:
  7614  002D5C  C001  F001         	movff	___awmod@dividend,?___awmod
  7615  002D60  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7616  002D64  0012               	return	
  7617  002D66                     __end_of___awmod:
  7618                           	opt stack 0
  7619                           tosu	equ	0xFFF
  7620                           tosh	equ	0xFFE
  7621                           tosl	equ	0xFFD
  7622                           pclatu	equ	0xFFB
  7623                           pclath	equ	0xFFA
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           intcon2	equ	0xFF1
  7632                           intcon3	equ	0xFF0
  7633                           postinc0	equ	0xFEE
  7634                           fsr0h	equ	0xFEA
  7635                           fsr0l	equ	0xFE9
  7636                           wreg	equ	0xFE8
  7637                           indf1	equ	0xFE7
  7638                           postinc1	equ	0xFE6
  7639                           postdec1	equ	0xFE5
  7640                           fsr1h	equ	0xFE2
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function ___awdiv *****************
  7650 ;; Defined at:
  7651 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  dividend        2    6[COMRAM] int 
  7654 ;;  divisor         2    8[COMRAM] int 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  quotient        2   12[COMRAM] int 
  7657 ;;  sign            1   11[COMRAM] unsigned char 
  7658 ;;  counter         1   10[COMRAM] unsigned char 
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  2    6[COMRAM] int 
  7661 ;; Registers used:
  7662 ;;		wreg, status,2, status,0
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7668 ;;      Params:         4       0       0       0       0       0       0
  7669 ;;      Locals:         4       0       0       0       0       0       0
  7670 ;;      Temps:          0       0       0       0       0       0       0
  7671 ;;      Totals:         8       0       0       0       0       0       0
  7672 ;;Total ram usage:        8 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; This function calls:
  7675 ;;		Nothing
  7676 ;; This function is called by:
  7677 ;;		_fround
  7678 ;;		_scale
  7679 ;;		__doprnt
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           	psect	text33
  7684  002AFE                     __ptext33:
  7685                           	opt stack 0
  7686  002AFE                     ___awdiv:
  7687                           	opt stack 22
  7688                           
  7689                           ;incstack = 0
  7690  002AFE  0E00               	movlw	0
  7691  002B00  6E0C               	movwf	___awdiv@sign,c
  7692  002B02  AE0A               	btfss	___awdiv@divisor+1,7,c
  7693  002B04  D006               	goto	i2l2807
  7694  002B06  6C09               	negf	___awdiv@divisor,c
  7695  002B08  1E0A               	comf	___awdiv@divisor+1,f,c
  7696  002B0A  B0D8               	btfsc	status,0,c
  7697  002B0C  2A0A               	incf	___awdiv@divisor+1,f,c
  7698  002B0E  0E01               	movlw	1
  7699  002B10  6E0C               	movwf	___awdiv@sign,c
  7700  002B12                     i2l2807:
  7701  002B12  AE08               	btfss	___awdiv@dividend+1,7,c
  7702  002B14  D006               	goto	i2l2813
  7703  002B16  6C07               	negf	___awdiv@dividend,c
  7704  002B18  1E08               	comf	___awdiv@dividend+1,f,c
  7705  002B1A  B0D8               	btfsc	status,0,c
  7706  002B1C  2A08               	incf	___awdiv@dividend+1,f,c
  7707  002B1E  0E01               	movlw	1
  7708  002B20  1A0C               	xorwf	___awdiv@sign,f,c
  7709  002B22                     i2l2813:
  7710  002B22  0E00               	movlw	0
  7711  002B24  6E0E               	movwf	___awdiv@quotient+1,c
  7712  002B26  0E00               	movlw	0
  7713  002B28  6E0D               	movwf	___awdiv@quotient,c
  7714  002B2A  5009               	movf	___awdiv@divisor,w,c
  7715  002B2C  100A               	iorwf	___awdiv@divisor+1,w,c
  7716  002B2E  B4D8               	btfsc	status,2,c
  7717  002B30  D01C               	goto	i2l2835
  7718  002B32  0E01               	movlw	1
  7719  002B34  6E0B               	movwf	___awdiv@counter,c
  7720  002B36  D004               	goto	i2l2821
  7721  002B38                     i2l2819:
  7722  002B38  90D8               	bcf	status,0,c
  7723  002B3A  3609               	rlcf	___awdiv@divisor,f,c
  7724  002B3C  360A               	rlcf	___awdiv@divisor+1,f,c
  7725  002B3E  2A0B               	incf	___awdiv@counter,f,c
  7726  002B40                     i2l2821:
  7727  002B40  AE0A               	btfss	___awdiv@divisor+1,7,c
  7728  002B42  D7FA               	goto	i2l2819
  7729  002B44                     i2l2823:
  7730  002B44  90D8               	bcf	status,0,c
  7731  002B46  360D               	rlcf	___awdiv@quotient,f,c
  7732  002B48  360E               	rlcf	___awdiv@quotient+1,f,c
  7733  002B4A  5009               	movf	___awdiv@divisor,w,c
  7734  002B4C  5C07               	subwf	___awdiv@dividend,w,c
  7735  002B4E  500A               	movf	___awdiv@divisor+1,w,c
  7736  002B50  5808               	subwfb	___awdiv@dividend+1,w,c
  7737  002B52  A0D8               	btfss	status,0,c
  7738  002B54  D005               	goto	i2l2831
  7739  002B56  5009               	movf	___awdiv@divisor,w,c
  7740  002B58  5E07               	subwf	___awdiv@dividend,f,c
  7741  002B5A  500A               	movf	___awdiv@divisor+1,w,c
  7742  002B5C  5A08               	subwfb	___awdiv@dividend+1,f,c
  7743  002B5E  800D               	bsf	___awdiv@quotient,0,c
  7744  002B60                     i2l2831:
  7745  002B60  90D8               	bcf	status,0,c
  7746  002B62  320A               	rrcf	___awdiv@divisor+1,f,c
  7747  002B64  3209               	rrcf	___awdiv@divisor,f,c
  7748  002B66  2E0B               	decfsz	___awdiv@counter,f,c
  7749  002B68  D7ED               	goto	i2l2823
  7750  002B6A                     i2l2835:
  7751  002B6A  500C               	movf	___awdiv@sign,w,c
  7752  002B6C  B4D8               	btfsc	status,2,c
  7753  002B6E  D004               	goto	i2l2839
  7754  002B70  6C0D               	negf	___awdiv@quotient,c
  7755  002B72  1E0E               	comf	___awdiv@quotient+1,f,c
  7756  002B74  B0D8               	btfsc	status,0,c
  7757  002B76  2A0E               	incf	___awdiv@quotient+1,f,c
  7758  002B78                     i2l2839:
  7759  002B78  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  7760  002B7C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  7761  002B80  0012               	return	
  7762  002B82                     __end_of___awdiv:
  7763                           	opt stack 0
  7764                           tosu	equ	0xFFF
  7765                           tosh	equ	0xFFE
  7766                           tosl	equ	0xFFD
  7767                           pclatu	equ	0xFFB
  7768                           pclath	equ	0xFFA
  7769                           tblptru	equ	0xFF8
  7770                           tblptrh	equ	0xFF7
  7771                           tblptrl	equ	0xFF6
  7772                           tablat	equ	0xFF5
  7773                           prodh	equ	0xFF4
  7774                           prodl	equ	0xFF3
  7775                           intcon	equ	0xFF2
  7776                           intcon2	equ	0xFF1
  7777                           intcon3	equ	0xFF0
  7778                           postinc0	equ	0xFEE
  7779                           fsr0h	equ	0xFEA
  7780                           fsr0l	equ	0xFE9
  7781                           wreg	equ	0xFE8
  7782                           indf1	equ	0xFE7
  7783                           postinc1	equ	0xFE6
  7784                           postdec1	equ	0xFE5
  7785                           fsr1h	equ	0xFE2
  7786                           fsr1l	equ	0xFE1
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function __tdiv_to_l_ *****************
  7795 ;; Defined at:
  7796 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  f1              3    0[COMRAM] float 
  7799 ;;  f2              3    3[COMRAM] float 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  quot            4    9[COMRAM] unsigned long 
  7802 ;;  exp1            1   14[COMRAM] unsigned char 
  7803 ;;  cntr            1   13[COMRAM] unsigned char 
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  4    0[COMRAM] unsigned long 
  7806 ;; Registers used:
  7807 ;;		wreg, status,2, status,0
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7813 ;;      Params:         6       0       0       0       0       0       0
  7814 ;;      Locals:         6       0       0       0       0       0       0
  7815 ;;      Temps:          3       0       0       0       0       0       0
  7816 ;;      Totals:        15       0       0       0       0       0       0
  7817 ;;Total ram usage:       15 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		__doprnt
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text34
  7827  002498                     __ptext34:
  7828                           	opt stack 0
  7829  002498                     __tdiv_to_l_:
  7830                           	opt stack 23
  7831                           
  7832                           ;incstack = 0
  7833  002498  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7834  00249C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7835  00249E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7836  0024A0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  7837  0024A2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7838  0024A4  E301               	bnc	u294_41
  7839  0024A6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7840  0024A8                     u294_41:
  7841  0024A8  5007               	movf	??__tdiv_to_l_,w,c
  7842  0024AA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  7843  0024AC  500F               	movf	__tdiv_to_l_@exp1,w,c
  7844  0024AE  A4D8               	btfss	status,2,c
  7845  0024B0  D009               	goto	i2l2995
  7846  0024B2  0E00               	movlw	0
  7847  0024B4  6E01               	movwf	?__tdiv_to_l_,c
  7848  0024B6  0E00               	movlw	0
  7849  0024B8  6E02               	movwf	?__tdiv_to_l_+1,c
  7850  0024BA  0E00               	movlw	0
  7851  0024BC  6E03               	movwf	?__tdiv_to_l_+2,c
  7852  0024BE  0E00               	movlw	0
  7853  0024C0  6E04               	movwf	?__tdiv_to_l_+3,c
  7854  0024C2  0012               	return	
  7855  0024C4                     i2l2995:
  7856  0024C4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7857  0024C8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7858  0024CA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7859  0024CC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  7860  0024CE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7861  0024D0  E301               	bnc	u296_41
  7862  0024D2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7863  0024D4                     u296_41:
  7864  0024D4  5007               	movf	??__tdiv_to_l_,w,c
  7865  0024D6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7866  0024D8  500E               	movf	__tdiv_to_l_@cntr,w,c
  7867  0024DA  A4D8               	btfss	status,2,c
  7868  0024DC  D009               	goto	i2l3001
  7869  0024DE  0E00               	movlw	0
  7870  0024E0  6E01               	movwf	?__tdiv_to_l_,c
  7871  0024E2  0E00               	movlw	0
  7872  0024E4  6E02               	movwf	?__tdiv_to_l_+1,c
  7873  0024E6  0E00               	movlw	0
  7874  0024E8  6E03               	movwf	?__tdiv_to_l_+2,c
  7875  0024EA  0E00               	movlw	0
  7876  0024EC  6E04               	movwf	?__tdiv_to_l_+3,c
  7877  0024EE  0012               	return	
  7878  0024F0                     i2l3001:
  7879  0024F0  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  7880  0024F2  0EFF               	movlw	255
  7881  0024F4  1601               	andwf	__tdiv_to_l_@f1,f,c
  7882  0024F6  0EFF               	movlw	255
  7883  0024F8  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  7884  0024FA  0E00               	movlw	0
  7885  0024FC  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  7886  0024FE  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  7887  002500  0EFF               	movlw	255
  7888  002502  1604               	andwf	__tdiv_to_l_@f2,f,c
  7889  002504  0EFF               	movlw	255
  7890  002506  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  7891  002508  0E00               	movlw	0
  7892  00250A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  7893  00250C  0E00               	movlw	0
  7894  00250E  6E0A               	movwf	__tdiv_to_l_@quot,c
  7895  002510  0E00               	movlw	0
  7896  002512  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  7897  002514  0E00               	movlw	0
  7898  002516  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  7899  002518  0E00               	movlw	0
  7900  00251A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  7901  00251C  0E7F               	movlw	127
  7902  00251E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7903  002520  500E               	movf	__tdiv_to_l_@cntr,w,c
  7904  002522  0F98               	addlw	152
  7905  002524  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7906  002526  0E18               	movlw	24
  7907  002528  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7908  00252A                     i2l831:
  7909  00252A  90D8               	bcf	status,0,c
  7910  00252C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7911  00252E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7912  002530  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7913  002532  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7914  002534  5004               	movf	__tdiv_to_l_@f2,w,c
  7915  002536  5C01               	subwf	__tdiv_to_l_@f1,w,c
  7916  002538  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7917  00253A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  7918  00253C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7919  00253E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  7920  002540  A0D8               	btfss	status,0,c
  7921  002542  D007               	goto	i2l832
  7922  002544  5004               	movf	__tdiv_to_l_@f2,w,c
  7923  002546  5E01               	subwf	__tdiv_to_l_@f1,f,c
  7924  002548  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7925  00254A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  7926  00254C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7927  00254E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  7928  002550  800A               	bsf	__tdiv_to_l_@quot,0,c
  7929  002552                     i2l832:
  7930  002552  90D8               	bcf	status,0,c
  7931  002554  3601               	rlcf	__tdiv_to_l_@f1,f,c
  7932  002556  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  7933  002558  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  7934  00255A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  7935  00255C  D7E6               	goto	i2l831
  7936  00255E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  7937  002560  D016               	goto	i2l3035
  7938  002562  500F               	movf	__tdiv_to_l_@exp1,w,c
  7939  002564  0A80               	xorlw	128
  7940  002566  0F97               	addlw	151
  7941  002568  B0D8               	btfsc	status,0,c
  7942  00256A  D009               	goto	i2l3031
  7943  00256C  0E00               	movlw	0
  7944  00256E  6E01               	movwf	?__tdiv_to_l_,c
  7945  002570  0E00               	movlw	0
  7946  002572  6E02               	movwf	?__tdiv_to_l_+1,c
  7947  002574  0E00               	movlw	0
  7948  002576  6E03               	movwf	?__tdiv_to_l_+2,c
  7949  002578  0E00               	movlw	0
  7950  00257A  6E04               	movwf	?__tdiv_to_l_+3,c
  7951  00257C  0012               	return	
  7952  00257E                     i2l3031:
  7953  00257E  90D8               	bcf	status,0,c
  7954  002580  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7955  002582  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7956  002584  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7957  002586  320A               	rrcf	__tdiv_to_l_@quot,f,c
  7958  002588  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  7959  00258A  D7F9               	goto	i2l3031
  7960  00258C  D015               	goto	i2l838
  7961  00258E                     i2l3035:
  7962  00258E  0E17               	movlw	23
  7963  002590  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  7964  002592  D00F               	goto	i2l3043
  7965  002594  0E00               	movlw	0
  7966  002596  6E01               	movwf	?__tdiv_to_l_,c
  7967  002598  0E00               	movlw	0
  7968  00259A  6E02               	movwf	?__tdiv_to_l_+1,c
  7969  00259C  0E00               	movlw	0
  7970  00259E  6E03               	movwf	?__tdiv_to_l_+2,c
  7971  0025A0  0E00               	movlw	0
  7972  0025A2  6E04               	movwf	?__tdiv_to_l_+3,c
  7973  0025A4  0012               	return	
  7974  0025A6                     i2l3041:
  7975  0025A6  90D8               	bcf	status,0,c
  7976  0025A8  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7977  0025AA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7978  0025AC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7979  0025AE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7980  0025B0  060F               	decf	__tdiv_to_l_@exp1,f,c
  7981  0025B2                     i2l3043:
  7982  0025B2  500F               	movf	__tdiv_to_l_@exp1,w,c
  7983  0025B4  A4D8               	btfss	status,2,c
  7984  0025B6  D7F7               	goto	i2l3041
  7985  0025B8                     i2l838:
  7986  0025B8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7987  0025BC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7988  0025C0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7989  0025C4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7990  0025C8  0012               	return		;funcret
  7991  0025CA                     __end_of__tdiv_to_l_:
  7992                           	opt stack 0
  7993                           tosu	equ	0xFFF
  7994                           tosh	equ	0xFFE
  7995                           tosl	equ	0xFFD
  7996                           pclatu	equ	0xFFB
  7997                           pclath	equ	0xFFA
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           intcon2	equ	0xFF1
  8006                           intcon3	equ	0xFF0
  8007                           postinc0	equ	0xFEE
  8008                           fsr0h	equ	0xFEA
  8009                           fsr0l	equ	0xFE9
  8010                           wreg	equ	0xFE8
  8011                           indf1	equ	0xFE7
  8012                           postinc1	equ	0xFE6
  8013                           postdec1	equ	0xFE5
  8014                           fsr1h	equ	0xFE2
  8015                           fsr1l	equ	0xFE1
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function __div_to_l_ *****************
  8024 ;; Defined at:
  8025 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  f1              3    0[COMRAM] unsigned long 
  8028 ;;  f2              3    3[COMRAM] unsigned long 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  quot            4    6[COMRAM] unsigned long 
  8031 ;;  exp1            1   11[COMRAM] unsigned char 
  8032 ;;  cntr            1   10[COMRAM] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  4    0[COMRAM] unsigned long 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8042 ;;      Params:         6       0       0       0       0       0       0
  8043 ;;      Locals:         6       0       0       0       0       0       0
  8044 ;;      Temps:          0       0       0       0       0       0       0
  8045 ;;      Totals:        12       0       0       0       0       0       0
  8046 ;;Total ram usage:       12 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		__doprnt
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text35
  8056  0025CA                     __ptext35:
  8057                           	opt stack 0
  8058  0025CA                     __div_to_l_:
  8059                           	opt stack 23
  8060                           
  8061                           ;incstack = 0
  8062  0025CA  3403               	rlcf	__div_to_l_@f1+2,w,c
  8063  0025CC  3404               	rlcf	__div_to_l_@f1+3,w,c
  8064  0025CE  6E0C               	movwf	__div_to_l_@exp1,c
  8065  0025D0  500C               	movf	__div_to_l_@exp1,w,c
  8066  0025D2  A4D8               	btfss	status,2,c
  8067  0025D4  D009               	goto	i2l3051
  8068  0025D6  0E00               	movlw	0
  8069  0025D8  6E01               	movwf	?__div_to_l_,c
  8070  0025DA  0E00               	movlw	0
  8071  0025DC  6E02               	movwf	?__div_to_l_+1,c
  8072  0025DE  0E00               	movlw	0
  8073  0025E0  6E03               	movwf	?__div_to_l_+2,c
  8074  0025E2  0E00               	movlw	0
  8075  0025E4  6E04               	movwf	?__div_to_l_+3,c
  8076  0025E6  0012               	return	
  8077  0025E8                     i2l3051:
  8078  0025E8  3406               	rlcf	__div_to_l_@f2+2,w,c
  8079  0025EA  3407               	rlcf	__div_to_l_@f2+3,w,c
  8080  0025EC  6E0B               	movwf	__div_to_l_@cntr,c
  8081  0025EE  500B               	movf	__div_to_l_@cntr,w,c
  8082  0025F0  A4D8               	btfss	status,2,c
  8083  0025F2  D009               	goto	i2l3057
  8084  0025F4  0E00               	movlw	0
  8085  0025F6  6E01               	movwf	?__div_to_l_,c
  8086  0025F8  0E00               	movlw	0
  8087  0025FA  6E02               	movwf	?__div_to_l_+1,c
  8088  0025FC  0E00               	movlw	0
  8089  0025FE  6E03               	movwf	?__div_to_l_+2,c
  8090  002600  0E00               	movlw	0
  8091  002602  6E04               	movwf	?__div_to_l_+3,c
  8092  002604  0012               	return	
  8093  002606                     i2l3057:
  8094  002606  8E03               	bsf	__div_to_l_@f1+2,7,c
  8095  002608  0EFF               	movlw	255
  8096  00260A  1601               	andwf	__div_to_l_@f1,f,c
  8097  00260C  0EFF               	movlw	255
  8098  00260E  1602               	andwf	__div_to_l_@f1+1,f,c
  8099  002610  0EFF               	movlw	255
  8100  002612  1603               	andwf	__div_to_l_@f1+2,f,c
  8101  002614  0E00               	movlw	0
  8102  002616  1604               	andwf	__div_to_l_@f1+3,f,c
  8103  002618  8E06               	bsf	__div_to_l_@f2+2,7,c
  8104  00261A  0EFF               	movlw	255
  8105  00261C  1604               	andwf	__div_to_l_@f2,f,c
  8106  00261E  0EFF               	movlw	255
  8107  002620  1605               	andwf	__div_to_l_@f2+1,f,c
  8108  002622  0EFF               	movlw	255
  8109  002624  1606               	andwf	__div_to_l_@f2+2,f,c
  8110  002626  0E00               	movlw	0
  8111  002628  1607               	andwf	__div_to_l_@f2+3,f,c
  8112  00262A  0E00               	movlw	0
  8113  00262C  6E07               	movwf	__div_to_l_@quot,c
  8114  00262E  0E00               	movlw	0
  8115  002630  6E08               	movwf	__div_to_l_@quot+1,c
  8116  002632  0E00               	movlw	0
  8117  002634  6E09               	movwf	__div_to_l_@quot+2,c
  8118  002636  0E00               	movlw	0
  8119  002638  6E0A               	movwf	__div_to_l_@quot+3,c
  8120  00263A  0E7F               	movlw	127
  8121  00263C  5E0C               	subwf	__div_to_l_@exp1,f,c
  8122  00263E  500B               	movf	__div_to_l_@cntr,w,c
  8123  002640  0FA0               	addlw	160
  8124  002642  5E0C               	subwf	__div_to_l_@exp1,f,c
  8125  002644  0E20               	movlw	32
  8126  002646  6E0B               	movwf	__div_to_l_@cntr,c
  8127  002648                     i2l3071:
  8128  002648  90D8               	bcf	status,0,c
  8129  00264A  3607               	rlcf	__div_to_l_@quot,f,c
  8130  00264C  3608               	rlcf	__div_to_l_@quot+1,f,c
  8131  00264E  3609               	rlcf	__div_to_l_@quot+2,f,c
  8132  002650  360A               	rlcf	__div_to_l_@quot+3,f,c
  8133  002652  5004               	movf	__div_to_l_@f2,w,c
  8134  002654  5C01               	subwf	__div_to_l_@f1,w,c
  8135  002656  5005               	movf	__div_to_l_@f2+1,w,c
  8136  002658  5802               	subwfb	__div_to_l_@f1+1,w,c
  8137  00265A  5006               	movf	__div_to_l_@f2+2,w,c
  8138  00265C  5803               	subwfb	__div_to_l_@f1+2,w,c
  8139  00265E  5007               	movf	__div_to_l_@f2+3,w,c
  8140  002660  5804               	subwfb	__div_to_l_@f1+3,w,c
  8141  002662  A0D8               	btfss	status,0,c
  8142  002664  D009               	goto	i2l3079
  8143  002666  5004               	movf	__div_to_l_@f2,w,c
  8144  002668  5E01               	subwf	__div_to_l_@f1,f,c
  8145  00266A  5005               	movf	__div_to_l_@f2+1,w,c
  8146  00266C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  8147  00266E  5006               	movf	__div_to_l_@f2+2,w,c
  8148  002670  5A03               	subwfb	__div_to_l_@f1+2,f,c
  8149  002672  5007               	movf	__div_to_l_@f2+3,w,c
  8150  002674  5A04               	subwfb	__div_to_l_@f1+3,f,c
  8151  002676  8007               	bsf	__div_to_l_@quot,0,c
  8152  002678                     i2l3079:
  8153  002678  90D8               	bcf	status,0,c
  8154  00267A  3601               	rlcf	__div_to_l_@f1,f,c
  8155  00267C  3602               	rlcf	__div_to_l_@f1+1,f,c
  8156  00267E  3603               	rlcf	__div_to_l_@f1+2,f,c
  8157  002680  3604               	rlcf	__div_to_l_@f1+3,f,c
  8158  002682  2E0B               	decfsz	__div_to_l_@cntr,f,c
  8159  002684  D7E1               	goto	i2l3071
  8160  002686  AE0C               	btfss	__div_to_l_@exp1,7,c
  8161  002688  D016               	goto	i2l3095
  8162  00268A  500C               	movf	__div_to_l_@exp1,w,c
  8163  00268C  0A80               	xorlw	128
  8164  00268E  0F9F               	addlw	159
  8165  002690  B0D8               	btfsc	status,0,c
  8166  002692  D009               	goto	i2l3091
  8167  002694  0E00               	movlw	0
  8168  002696  6E01               	movwf	?__div_to_l_,c
  8169  002698  0E00               	movlw	0
  8170  00269A  6E02               	movwf	?__div_to_l_+1,c
  8171  00269C  0E00               	movlw	0
  8172  00269E  6E03               	movwf	?__div_to_l_+2,c
  8173  0026A0  0E00               	movlw	0
  8174  0026A2  6E04               	movwf	?__div_to_l_+3,c
  8175  0026A4  0012               	return	
  8176  0026A6                     i2l3091:
  8177  0026A6  90D8               	bcf	status,0,c
  8178  0026A8  320A               	rrcf	__div_to_l_@quot+3,f,c
  8179  0026AA  3209               	rrcf	__div_to_l_@quot+2,f,c
  8180  0026AC  3208               	rrcf	__div_to_l_@quot+1,f,c
  8181  0026AE  3207               	rrcf	__div_to_l_@quot,f,c
  8182  0026B0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  8183  0026B2  D7F9               	goto	i2l3091
  8184  0026B4  D015               	goto	i2l734
  8185  0026B6                     i2l3095:
  8186  0026B6  0E1F               	movlw	31
  8187  0026B8  640C               	cpfsgt	__div_to_l_@exp1,c
  8188  0026BA  D00F               	goto	i2l3103
  8189  0026BC  0E00               	movlw	0
  8190  0026BE  6E01               	movwf	?__div_to_l_,c
  8191  0026C0  0E00               	movlw	0
  8192  0026C2  6E02               	movwf	?__div_to_l_+1,c
  8193  0026C4  0E00               	movlw	0
  8194  0026C6  6E03               	movwf	?__div_to_l_+2,c
  8195  0026C8  0E00               	movlw	0
  8196  0026CA  6E04               	movwf	?__div_to_l_+3,c
  8197  0026CC  0012               	return	
  8198  0026CE                     i2l3101:
  8199  0026CE  90D8               	bcf	status,0,c
  8200  0026D0  3607               	rlcf	__div_to_l_@quot,f,c
  8201  0026D2  3608               	rlcf	__div_to_l_@quot+1,f,c
  8202  0026D4  3609               	rlcf	__div_to_l_@quot+2,f,c
  8203  0026D6  360A               	rlcf	__div_to_l_@quot+3,f,c
  8204  0026D8  060C               	decf	__div_to_l_@exp1,f,c
  8205  0026DA                     i2l3103:
  8206  0026DA  500C               	movf	__div_to_l_@exp1,w,c
  8207  0026DC  A4D8               	btfss	status,2,c
  8208  0026DE  D7F7               	goto	i2l3101
  8209  0026E0                     i2l734:
  8210  0026E0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  8211  0026E4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8212  0026E8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8213  0026EC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8214  0026F0  0012               	return		;funcret
  8215  0026F2                     __end_of__div_to_l_:
  8216                           	opt stack 0
  8217                           tosu	equ	0xFFF
  8218                           tosh	equ	0xFFE
  8219                           tosl	equ	0xFFD
  8220                           pclatu	equ	0xFFB
  8221                           pclath	equ	0xFFA
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           intcon2	equ	0xFF1
  8230                           intcon3	equ	0xFF0
  8231                           postinc0	equ	0xFEE
  8232                           fsr0h	equ	0xFEA
  8233                           fsr0l	equ	0xFE9
  8234                           wreg	equ	0xFE8
  8235                           indf1	equ	0xFE7
  8236                           postinc1	equ	0xFE6
  8237                           postdec1	equ	0xFE5
  8238                           fsr1h	equ	0xFE2
  8239                           fsr1l	equ	0xFE1
  8240                           indf2	equ	0xFDF
  8241                           postinc2	equ	0xFDE
  8242                           postdec2	equ	0xFDD
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function ___lltoft *****************
  8248 ;; Defined at:
  8249 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  c               4    8[COMRAM] unsigned long 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  exp             1   16[COMRAM] unsigned char 
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  3    8[COMRAM] float 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8263 ;;      Params:         4       0       0       0       0       0       0
  8264 ;;      Locals:         1       0       0       0       0       0       0
  8265 ;;      Temps:          4       0       0       0       0       0       0
  8266 ;;      Totals:         9       0       0       0       0       0       0
  8267 ;;Total ram usage:        9 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    1
  8270 ;; This function calls:
  8271 ;;		___ftpack
  8272 ;; This function is called by:
  8273 ;;		__doprnt
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text36
  8278  002DCC                     __ptext36:
  8279                           	opt stack 0
  8280  002DCC                     ___lltoft:
  8281                           	opt stack 22
  8282                           
  8283                           ;incstack = 0
  8284  002DCC  0E8E               	movlw	142
  8285  002DCE  6E11               	movwf	___lltoft@exp,c
  8286  002DD0  D006               	goto	i2l3223
  8287  002DD2                     i2l3221:
  8288  002DD2  90D8               	bcf	status,0,c
  8289  002DD4  320C               	rrcf	___lltoft@c+3,f,c
  8290  002DD6  320B               	rrcf	___lltoft@c+2,f,c
  8291  002DD8  320A               	rrcf	___lltoft@c+1,f,c
  8292  002DDA  3209               	rrcf	___lltoft@c,f,c
  8293  002DDC  2A11               	incf	___lltoft@exp,f,c
  8294  002DDE                     i2l3223:
  8295  002DDE  0E00               	movlw	0
  8296  002DE0  1409               	andwf	___lltoft@c,w,c
  8297  002DE2  6E0D               	movwf	??___lltoft& (0+255),c
  8298  002DE4  0E00               	movlw	0
  8299  002DE6  140A               	andwf	___lltoft@c+1,w,c
  8300  002DE8  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  8301  002DEA  0E00               	movlw	0
  8302  002DEC  140B               	andwf	___lltoft@c+2,w,c
  8303  002DEE  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  8304  002DF0  0EFF               	movlw	255
  8305  002DF2  140C               	andwf	___lltoft@c+3,w,c
  8306  002DF4  6E10               	movwf	(??___lltoft+3)& (0+255),c
  8307  002DF6  500D               	movf	??___lltoft,w,c
  8308  002DF8  100E               	iorwf	??___lltoft+1,w,c
  8309  002DFA  100F               	iorwf	??___lltoft+2,w,c
  8310  002DFC  1010               	iorwf	??___lltoft+3,w,c
  8311  002DFE  A4D8               	btfss	status,2,c
  8312  002E00  D7E8               	goto	i2l3221
  8313  002E02  C009  F001         	movff	___lltoft@c,___ftpack@arg
  8314  002E06  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  8315  002E0A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  8316  002E0E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  8317  002E12  0E00               	movlw	0
  8318  002E14  6E05               	movwf	___ftpack@sign,c
  8319  002E16  ECE0  F014         	call	___ftpack	;wreg free
  8320  002E1A  C001  F009         	movff	?___ftpack,?___lltoft
  8321  002E1E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  8322  002E22  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  8323  002E26  0012               	return	
  8324  002E28                     __end_of___lltoft:
  8325                           	opt stack 0
  8326                           tosu	equ	0xFFF
  8327                           tosh	equ	0xFFE
  8328                           tosl	equ	0xFFD
  8329                           pclatu	equ	0xFFB
  8330                           pclath	equ	0xFFA
  8331                           tblptru	equ	0xFF8
  8332                           tblptrh	equ	0xFF7
  8333                           tblptrl	equ	0xFF6
  8334                           tablat	equ	0xFF5
  8335                           prodh	equ	0xFF4
  8336                           prodl	equ	0xFF3
  8337                           intcon	equ	0xFF2
  8338                           intcon2	equ	0xFF1
  8339                           intcon3	equ	0xFF0
  8340                           postinc0	equ	0xFEE
  8341                           fsr0h	equ	0xFEA
  8342                           fsr0l	equ	0xFE9
  8343                           wreg	equ	0xFE8
  8344                           indf1	equ	0xFE7
  8345                           postinc1	equ	0xFE6
  8346                           postdec1	equ	0xFE5
  8347                           fsr1h	equ	0xFE2
  8348                           fsr1l	equ	0xFE1
  8349                           indf2	equ	0xFDF
  8350                           postinc2	equ	0xFDE
  8351                           postdec2	equ	0xFDD
  8352                           fsr2h	equ	0xFDA
  8353                           fsr2l	equ	0xFD9
  8354                           status	equ	0xFD8
  8355                           
  8356 ;; *************** function ___llmod *****************
  8357 ;; Defined at:
  8358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  dividend        4   13[COMRAM] unsigned long 
  8361 ;;  divisor         4   17[COMRAM] unsigned long 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  counter         1   21[COMRAM] unsigned char 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  4   13[COMRAM] unsigned long 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2, status,0
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8373 ;;      Params:         8       0       0       0       0       0       0
  8374 ;;      Locals:         1       0       0       0       0       0       0
  8375 ;;      Temps:          0       0       0       0       0       0       0
  8376 ;;      Totals:         9       0       0       0       0       0       0
  8377 ;;Total ram usage:        9 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		__doprnt
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           	psect	text37
  8387  002D66                     __ptext37:
  8388                           	opt stack 0
  8389  002D66                     ___llmod:
  8390                           	opt stack 23
  8391                           
  8392                           ;incstack = 0
  8393  002D66  5012               	movf	___llmod@divisor,w,c
  8394  002D68  1013               	iorwf	___llmod@divisor+1,w,c
  8395  002D6A  1014               	iorwf	___llmod@divisor+2,w,c
  8396  002D6C  1015               	iorwf	___llmod@divisor+3,w,c
  8397  002D6E  B4D8               	btfsc	status,2,c
  8398  002D70  D024               	goto	i2l945
  8399  002D72  0E01               	movlw	1
  8400  002D74  6E16               	movwf	___llmod@counter,c
  8401  002D76  D006               	goto	i2l3209
  8402  002D78                     i2l3207:
  8403  002D78  90D8               	bcf	status,0,c
  8404  002D7A  3612               	rlcf	___llmod@divisor,f,c
  8405  002D7C  3613               	rlcf	___llmod@divisor+1,f,c
  8406  002D7E  3614               	rlcf	___llmod@divisor+2,f,c
  8407  002D80  3615               	rlcf	___llmod@divisor+3,f,c
  8408  002D82  2A16               	incf	___llmod@counter,f,c
  8409  002D84                     i2l3209:
  8410  002D84  AE15               	btfss	___llmod@divisor+3,7,c
  8411  002D86  D7F8               	goto	i2l3207
  8412  002D88                     i2l3211:
  8413  002D88  5012               	movf	___llmod@divisor,w,c
  8414  002D8A  5C0E               	subwf	___llmod@dividend,w,c
  8415  002D8C  5013               	movf	___llmod@divisor+1,w,c
  8416  002D8E  580F               	subwfb	___llmod@dividend+1,w,c
  8417  002D90  5014               	movf	___llmod@divisor+2,w,c
  8418  002D92  5810               	subwfb	___llmod@dividend+2,w,c
  8419  002D94  5015               	movf	___llmod@divisor+3,w,c
  8420  002D96  5811               	subwfb	___llmod@dividend+3,w,c
  8421  002D98  A0D8               	btfss	status,0,c
  8422  002D9A  D008               	goto	i2l3215
  8423  002D9C  5012               	movf	___llmod@divisor,w,c
  8424  002D9E  5E0E               	subwf	___llmod@dividend,f,c
  8425  002DA0  5013               	movf	___llmod@divisor+1,w,c
  8426  002DA2  5A0F               	subwfb	___llmod@dividend+1,f,c
  8427  002DA4  5014               	movf	___llmod@divisor+2,w,c
  8428  002DA6  5A10               	subwfb	___llmod@dividend+2,f,c
  8429  002DA8  5015               	movf	___llmod@divisor+3,w,c
  8430  002DAA  5A11               	subwfb	___llmod@dividend+3,f,c
  8431  002DAC                     i2l3215:
  8432  002DAC  90D8               	bcf	status,0,c
  8433  002DAE  3215               	rrcf	___llmod@divisor+3,f,c
  8434  002DB0  3214               	rrcf	___llmod@divisor+2,f,c
  8435  002DB2  3213               	rrcf	___llmod@divisor+1,f,c
  8436  002DB4  3212               	rrcf	___llmod@divisor,f,c
  8437  002DB6  2E16               	decfsz	___llmod@counter,f,c
  8438  002DB8  D7E7               	goto	i2l3211
  8439  002DBA                     i2l945:
  8440  002DBA  C00E  F00E         	movff	___llmod@dividend,?___llmod
  8441  002DBE  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  8442  002DC2  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  8443  002DC6  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  8444  002DCA  0012               	return		;funcret
  8445  002DCC                     __end_of___llmod:
  8446                           	opt stack 0
  8447                           tosu	equ	0xFFF
  8448                           tosh	equ	0xFFE
  8449                           tosl	equ	0xFFD
  8450                           pclatu	equ	0xFFB
  8451                           pclath	equ	0xFFA
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodh	equ	0xFF4
  8457                           prodl	equ	0xFF3
  8458                           intcon	equ	0xFF2
  8459                           intcon2	equ	0xFF1
  8460                           intcon3	equ	0xFF0
  8461                           postinc0	equ	0xFEE
  8462                           fsr0h	equ	0xFEA
  8463                           fsr0l	equ	0xFE9
  8464                           wreg	equ	0xFE8
  8465                           indf1	equ	0xFE7
  8466                           postinc1	equ	0xFE6
  8467                           postdec1	equ	0xFE5
  8468                           fsr1h	equ	0xFE2
  8469                           fsr1l	equ	0xFE1
  8470                           indf2	equ	0xFDF
  8471                           postinc2	equ	0xFDE
  8472                           postdec2	equ	0xFDD
  8473                           fsr2h	equ	0xFDA
  8474                           fsr2l	equ	0xFD9
  8475                           status	equ	0xFD8
  8476                           
  8477 ;; *************** function ___lldiv *****************
  8478 ;; Defined at:
  8479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;  dividend        4    0[COMRAM] unsigned long 
  8482 ;;  divisor         4    4[COMRAM] unsigned long 
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  quotient        4    8[COMRAM] unsigned long 
  8485 ;;  counter         1   12[COMRAM] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  4    0[COMRAM] unsigned long 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8495 ;;      Params:         8       0       0       0       0       0       0
  8496 ;;      Locals:         5       0       0       0       0       0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0
  8498 ;;      Totals:        13       0       0       0       0       0       0
  8499 ;;Total ram usage:       13 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; This function calls:
  8502 ;;		Nothing
  8503 ;; This function is called by:
  8504 ;;		__doprnt
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           	psect	text38
  8509  002B82                     __ptext38:
  8510                           	opt stack 0
  8511  002B82                     ___lldiv:
  8512                           	opt stack 23
  8513                           
  8514                           ;incstack = 0
  8515  002B82  0E00               	movlw	0
  8516  002B84  6E09               	movwf	___lldiv@quotient,c
  8517  002B86  0E00               	movlw	0
  8518  002B88  6E0A               	movwf	___lldiv@quotient+1,c
  8519  002B8A  0E00               	movlw	0
  8520  002B8C  6E0B               	movwf	___lldiv@quotient+2,c
  8521  002B8E  0E00               	movlw	0
  8522  002B90  6E0C               	movwf	___lldiv@quotient+3,c
  8523  002B92  5005               	movf	___lldiv@divisor,w,c
  8524  002B94  1006               	iorwf	___lldiv@divisor+1,w,c
  8525  002B96  1007               	iorwf	___lldiv@divisor+2,w,c
  8526  002B98  1008               	iorwf	___lldiv@divisor+3,w,c
  8527  002B9A  B4D8               	btfsc	status,2,c
  8528  002B9C  D02A               	goto	i2l935
  8529  002B9E  0E01               	movlw	1
  8530  002BA0  6E0D               	movwf	___lldiv@counter,c
  8531  002BA2  D006               	goto	i2l3189
  8532  002BA4                     i2l3187:
  8533  002BA4  90D8               	bcf	status,0,c
  8534  002BA6  3605               	rlcf	___lldiv@divisor,f,c
  8535  002BA8  3606               	rlcf	___lldiv@divisor+1,f,c
  8536  002BAA  3607               	rlcf	___lldiv@divisor+2,f,c
  8537  002BAC  3608               	rlcf	___lldiv@divisor+3,f,c
  8538  002BAE  2A0D               	incf	___lldiv@counter,f,c
  8539  002BB0                     i2l3189:
  8540  002BB0  AE08               	btfss	___lldiv@divisor+3,7,c
  8541  002BB2  D7F8               	goto	i2l3187
  8542  002BB4                     i2l3191:
  8543  002BB4  90D8               	bcf	status,0,c
  8544  002BB6  3609               	rlcf	___lldiv@quotient,f,c
  8545  002BB8  360A               	rlcf	___lldiv@quotient+1,f,c
  8546  002BBA  360B               	rlcf	___lldiv@quotient+2,f,c
  8547  002BBC  360C               	rlcf	___lldiv@quotient+3,f,c
  8548  002BBE  5005               	movf	___lldiv@divisor,w,c
  8549  002BC0  5C01               	subwf	___lldiv@dividend,w,c
  8550  002BC2  5006               	movf	___lldiv@divisor+1,w,c
  8551  002BC4  5802               	subwfb	___lldiv@dividend+1,w,c
  8552  002BC6  5007               	movf	___lldiv@divisor+2,w,c
  8553  002BC8  5803               	subwfb	___lldiv@dividend+2,w,c
  8554  002BCA  5008               	movf	___lldiv@divisor+3,w,c
  8555  002BCC  5804               	subwfb	___lldiv@dividend+3,w,c
  8556  002BCE  A0D8               	btfss	status,0,c
  8557  002BD0  D009               	goto	i2l3199
  8558  002BD2  5005               	movf	___lldiv@divisor,w,c
  8559  002BD4  5E01               	subwf	___lldiv@dividend,f,c
  8560  002BD6  5006               	movf	___lldiv@divisor+1,w,c
  8561  002BD8  5A02               	subwfb	___lldiv@dividend+1,f,c
  8562  002BDA  5007               	movf	___lldiv@divisor+2,w,c
  8563  002BDC  5A03               	subwfb	___lldiv@dividend+2,f,c
  8564  002BDE  5008               	movf	___lldiv@divisor+3,w,c
  8565  002BE0  5A04               	subwfb	___lldiv@dividend+3,f,c
  8566  002BE2  8009               	bsf	___lldiv@quotient,0,c
  8567  002BE4                     i2l3199:
  8568  002BE4  90D8               	bcf	status,0,c
  8569  002BE6  3208               	rrcf	___lldiv@divisor+3,f,c
  8570  002BE8  3207               	rrcf	___lldiv@divisor+2,f,c
  8571  002BEA  3206               	rrcf	___lldiv@divisor+1,f,c
  8572  002BEC  3205               	rrcf	___lldiv@divisor,f,c
  8573  002BEE  2E0D               	decfsz	___lldiv@counter,f,c
  8574  002BF0  D7E1               	goto	i2l3191
  8575  002BF2                     i2l935:
  8576  002BF2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  8577  002BF6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  8578  002BFA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  8579  002BFE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  8580  002C02  0012               	return		;funcret
  8581  002C04                     __end_of___lldiv:
  8582                           	opt stack 0
  8583                           tosu	equ	0xFFF
  8584                           tosh	equ	0xFFE
  8585                           tosl	equ	0xFFD
  8586                           pclatu	equ	0xFFB
  8587                           pclath	equ	0xFFA
  8588                           tblptru	equ	0xFF8
  8589                           tblptrh	equ	0xFF7
  8590                           tblptrl	equ	0xFF6
  8591                           tablat	equ	0xFF5
  8592                           prodh	equ	0xFF4
  8593                           prodl	equ	0xFF3
  8594                           intcon	equ	0xFF2
  8595                           intcon2	equ	0xFF1
  8596                           intcon3	equ	0xFF0
  8597                           postinc0	equ	0xFEE
  8598                           fsr0h	equ	0xFEA
  8599                           fsr0l	equ	0xFE9
  8600                           wreg	equ	0xFE8
  8601                           indf1	equ	0xFE7
  8602                           postinc1	equ	0xFE6
  8603                           postdec1	equ	0xFE5
  8604                           fsr1h	equ	0xFE2
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function ___fttol *****************
  8614 ;; Defined at:
  8615 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  f1              3   54[COMRAM] float 
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  lval            4   64[COMRAM] unsigned long 
  8620 ;;  exp1            1   68[COMRAM] unsigned char 
  8621 ;;  sign1           1   63[COMRAM] unsigned char 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  4   54[COMRAM] long 
  8624 ;; Registers used:
  8625 ;;		wreg, status,2, status,0
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8631 ;;      Params:         4       0       0       0       0       0       0
  8632 ;;      Locals:         6       0       0       0       0       0       0
  8633 ;;      Temps:          5       0       0       0       0       0       0
  8634 ;;      Totals:        15       0       0       0       0       0       0
  8635 ;;Total ram usage:       15 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; This function calls:
  8638 ;;		Nothing
  8639 ;; This function is called by:
  8640 ;;		__doprnt
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           	psect	text39
  8645  0027E6                     __ptext39:
  8646                           	opt stack 0
  8647  0027E6                     ___fttol:
  8648                           	opt stack 23
  8649                           
  8650                           ;incstack = 0
  8651  0027E6  C039  F03B         	movff	___fttol@f1+2,??___fttol
  8652  0027EA  6A3C               	clrf	(??___fttol+1)& (0+255),c
  8653  0027EC  6A3D               	clrf	(??___fttol+2)& (0+255),c
  8654  0027EE  3438               	rlcf	___fttol@f1+1,w,c
  8655  0027F0  363B               	rlcf	??___fttol& (0+255),f,c
  8656  0027F2  E301               	bnc	u315_41
  8657  0027F4  803C               	bsf	(??___fttol+1)& (0+255),0,c
  8658  0027F6                     u315_41:
  8659  0027F6  503B               	movf	??___fttol,w,c
  8660  0027F8  6E45               	movwf	___fttol@exp1,c
  8661  0027FA  5045               	movf	___fttol@exp1,w,c
  8662  0027FC  A4D8               	btfss	status,2,c
  8663  0027FE  D009               	goto	i2l3141
  8664  002800  0E00               	movlw	0
  8665  002802  6E37               	movwf	?___fttol,c
  8666  002804  0E00               	movlw	0
  8667  002806  6E38               	movwf	?___fttol+1,c
  8668  002808  0E00               	movlw	0
  8669  00280A  6E39               	movwf	?___fttol+2,c
  8670  00280C  0E00               	movlw	0
  8671  00280E  6E3A               	movwf	?___fttol+3,c
  8672  002810  0012               	return	
  8673  002812                     i2l3141:
  8674  002812  0E17               	movlw	23
  8675  002814  6E3B               	movwf	??___fttol& (0+255),c
  8676  002816  C037  F03C         	movff	___fttol@f1,??___fttol+1
  8677  00281A  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  8678  00281E  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  8679  002822  283B               	incf	??___fttol,w,c
  8680  002824  6E3F               	movwf	(??___fttol+4)& (0+255),c
  8681  002826  D004               	goto	i2u317_40
  8682  002828                     i2u317_45:
  8683  002828  90D8               	bcf	status,0,c
  8684  00282A  323E               	rrcf	??___fttol+3,f,c
  8685  00282C  323D               	rrcf	??___fttol+2,f,c
  8686  00282E  323C               	rrcf	??___fttol+1,f,c
  8687  002830                     i2u317_40:
  8688  002830  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  8689  002832  D7FA               	goto	i2u317_45
  8690  002834  503C               	movf	??___fttol+1,w,c
  8691  002836  6E40               	movwf	___fttol@sign1,c
  8692  002838  8E38               	bsf	___fttol@f1+1,7,c
  8693  00283A  0EFF               	movlw	255
  8694  00283C  1637               	andwf	___fttol@f1,f,c
  8695  00283E  0EFF               	movlw	255
  8696  002840  1638               	andwf	___fttol@f1+1,f,c
  8697  002842  0E00               	movlw	0
  8698  002844  1639               	andwf	___fttol@f1+2,f,c
  8699  002846  5037               	movf	___fttol@f1,w,c
  8700  002848  6E41               	movwf	___fttol@lval,c
  8701  00284A  5038               	movf	___fttol@f1+1,w,c
  8702  00284C  6E42               	movwf	___fttol@lval+1,c
  8703  00284E  5039               	movf	___fttol@f1+2,w,c
  8704  002850  6E43               	movwf	___fttol@lval+2,c
  8705  002852  6A44               	clrf	___fttol@lval+3,c
  8706  002854  0E8E               	movlw	142
  8707  002856  5E45               	subwf	___fttol@exp1,f,c
  8708  002858  AE45               	btfss	___fttol@exp1,7,c
  8709  00285A  D016               	goto	i2l3163
  8710  00285C  5045               	movf	___fttol@exp1,w,c
  8711  00285E  0A80               	xorlw	128
  8712  002860  0F8F               	addlw	143
  8713  002862  B0D8               	btfsc	status,0,c
  8714  002864  D009               	goto	i2l3159
  8715  002866  0E00               	movlw	0
  8716  002868  6E37               	movwf	?___fttol,c
  8717  00286A  0E00               	movlw	0
  8718  00286C  6E38               	movwf	?___fttol+1,c
  8719  00286E  0E00               	movlw	0
  8720  002870  6E39               	movwf	?___fttol+2,c
  8721  002872  0E00               	movlw	0
  8722  002874  6E3A               	movwf	?___fttol+3,c
  8723  002876  0012               	return	
  8724  002878                     i2l3159:
  8725  002878  90D8               	bcf	status,0,c
  8726  00287A  3244               	rrcf	___fttol@lval+3,f,c
  8727  00287C  3243               	rrcf	___fttol@lval+2,f,c
  8728  00287E  3242               	rrcf	___fttol@lval+1,f,c
  8729  002880  3241               	rrcf	___fttol@lval,f,c
  8730  002882  3E45               	incfsz	___fttol@exp1,f,c
  8731  002884  D7F9               	goto	i2l3159
  8732  002886  D015               	goto	i2l3173
  8733  002888                     i2l3163:
  8734  002888  0E17               	movlw	23
  8735  00288A  6445               	cpfsgt	___fttol@exp1,c
  8736  00288C  D00F               	goto	i2l3171
  8737  00288E  0E00               	movlw	0
  8738  002890  6E37               	movwf	?___fttol,c
  8739  002892  0E00               	movlw	0
  8740  002894  6E38               	movwf	?___fttol+1,c
  8741  002896  0E00               	movlw	0
  8742  002898  6E39               	movwf	?___fttol+2,c
  8743  00289A  0E00               	movlw	0
  8744  00289C  6E3A               	movwf	?___fttol+3,c
  8745  00289E  0012               	return	
  8746  0028A0                     i2l3169:
  8747  0028A0  90D8               	bcf	status,0,c
  8748  0028A2  3641               	rlcf	___fttol@lval,f,c
  8749  0028A4  3642               	rlcf	___fttol@lval+1,f,c
  8750  0028A6  3643               	rlcf	___fttol@lval+2,f,c
  8751  0028A8  3644               	rlcf	___fttol@lval+3,f,c
  8752  0028AA  0645               	decf	___fttol@exp1,f,c
  8753  0028AC                     i2l3171:
  8754  0028AC  5045               	movf	___fttol@exp1,w,c
  8755  0028AE  A4D8               	btfss	status,2,c
  8756  0028B0  D7F7               	goto	i2l3169
  8757  0028B2                     i2l3173:
  8758  0028B2  5040               	movf	___fttol@sign1,w,c
  8759  0028B4  B4D8               	btfsc	status,2,c
  8760  0028B6  D008               	goto	i2l3177
  8761  0028B8  1E44               	comf	___fttol@lval+3,f,c
  8762  0028BA  1E43               	comf	___fttol@lval+2,f,c
  8763  0028BC  1E42               	comf	___fttol@lval+1,f,c
  8764  0028BE  6C41               	negf	___fttol@lval,c
  8765  0028C0  0E00               	movlw	0
  8766  0028C2  2242               	addwfc	___fttol@lval+1,f,c
  8767  0028C4  2243               	addwfc	___fttol@lval+2,f,c
  8768  0028C6  2244               	addwfc	___fttol@lval+3,f,c
  8769  0028C8                     i2l3177:
  8770  0028C8  C041  F037         	movff	___fttol@lval,?___fttol
  8771  0028CC  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  8772  0028D0  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  8773  0028D4  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  8774  0028D8  0012               	return	
  8775  0028DA                     __end_of___fttol:
  8776                           	opt stack 0
  8777                           tosu	equ	0xFFF
  8778                           tosh	equ	0xFFE
  8779                           tosl	equ	0xFFD
  8780                           pclatu	equ	0xFFB
  8781                           pclath	equ	0xFFA
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon	equ	0xFF2
  8789                           intcon2	equ	0xFF1
  8790                           intcon3	equ	0xFF0
  8791                           postinc0	equ	0xFEE
  8792                           fsr0h	equ	0xFEA
  8793                           fsr0l	equ	0xFE9
  8794                           wreg	equ	0xFE8
  8795                           indf1	equ	0xFE7
  8796                           postinc1	equ	0xFE6
  8797                           postdec1	equ	0xFE5
  8798                           fsr1h	equ	0xFE2
  8799                           fsr1l	equ	0xFE1
  8800                           indf2	equ	0xFDF
  8801                           postinc2	equ	0xFDE
  8802                           postdec2	equ	0xFDD
  8803                           fsr2h	equ	0xFDA
  8804                           fsr2l	equ	0xFD9
  8805                           status	equ	0xFD8
  8806                           
  8807 ;; *************** function ___ftsub *****************
  8808 ;; Defined at:
  8809 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  8810 ;; Parameters:    Size  Location     Type
  8811 ;;  f1              3   32[COMRAM] float 
  8812 ;;  f2              3   35[COMRAM] float 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;		None
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  3   32[COMRAM] float 
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8824 ;;      Params:         6       0       0       0       0       0       0
  8825 ;;      Locals:         0       0       0       0       0       0       0
  8826 ;;      Temps:          0       0       0       0       0       0       0
  8827 ;;      Totals:         6       0       0       0       0       0       0
  8828 ;;Total ram usage:        6 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    2
  8831 ;; This function calls:
  8832 ;;		___ftadd
  8833 ;; This function is called by:
  8834 ;;		__doprnt
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           	psect	text40
  8839  002F84                     __ptext40:
  8840                           	opt stack 0
  8841  002F84                     ___ftsub:
  8842                           	opt stack 21
  8843                           
  8844                           ;incstack = 0
  8845  002F84  5024               	movf	___ftsub@f2,w,c
  8846  002F86  1025               	iorwf	___ftsub@f2+1,w,c
  8847  002F88  1026               	iorwf	___ftsub@f2+2,w,c
  8848  002F8A  B4D8               	btfsc	status,2,c
  8849  002F8C  D006               	goto	i2l3109
  8850  002F8E  0E00               	movlw	0
  8851  002F90  1A24               	xorwf	___ftsub@f2,f,c
  8852  002F92  0E00               	movlw	0
  8853  002F94  1A25               	xorwf	___ftsub@f2+1,f,c
  8854  002F96  0E80               	movlw	128
  8855  002F98  1A26               	xorwf	___ftsub@f2+2,f,c
  8856  002F9A                     i2l3109:
  8857  002F9A  C021  F015         	movff	___ftsub@f1,___ftadd@f1
  8858  002F9E  C022  F016         	movff	___ftsub@f1+1,___ftadd@f1+1
  8859  002FA2  C023  F017         	movff	___ftsub@f1+2,___ftadd@f1+2
  8860  002FA6  C024  F018         	movff	___ftsub@f2,___ftadd@f2
  8861  002FAA  C025  F019         	movff	___ftsub@f2+1,___ftadd@f2+1
  8862  002FAE  C026  F01A         	movff	___ftsub@f2+2,___ftadd@f2+2
  8863  002FB2  ECF2  F00F         	call	___ftadd	;wreg free
  8864  002FB6  C015  F021         	movff	?___ftadd,?___ftsub
  8865  002FBA  C016  F022         	movff	?___ftadd+1,?___ftsub+1
  8866  002FBE  C017  F023         	movff	?___ftadd+2,?___ftsub+2
  8867  002FC2  0012               	return	
  8868  002FC4                     __end_of___ftsub:
  8869                           	opt stack 0
  8870                           tosu	equ	0xFFF
  8871                           tosh	equ	0xFFE
  8872                           tosl	equ	0xFFD
  8873                           pclatu	equ	0xFFB
  8874                           pclath	equ	0xFFA
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           intcon	equ	0xFF2
  8882                           intcon2	equ	0xFF1
  8883                           intcon3	equ	0xFF0
  8884                           postinc0	equ	0xFEE
  8885                           fsr0h	equ	0xFEA
  8886                           fsr0l	equ	0xFE9
  8887                           wreg	equ	0xFE8
  8888                           indf1	equ	0xFE7
  8889                           postinc1	equ	0xFE6
  8890                           postdec1	equ	0xFE5
  8891                           fsr1h	equ	0xFE2
  8892                           fsr1l	equ	0xFE1
  8893                           indf2	equ	0xFDF
  8894                           postinc2	equ	0xFDE
  8895                           postdec2	equ	0xFDD
  8896                           fsr2h	equ	0xFDA
  8897                           fsr2l	equ	0xFD9
  8898                           status	equ	0xFD8
  8899                           
  8900 ;; *************** function ___ftadd *****************
  8901 ;; Defined at:
  8902 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  f1              3   20[COMRAM] float 
  8905 ;;  f2              3   23[COMRAM] float 
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  exp1            1   31[COMRAM] unsigned char 
  8908 ;;  exp2            1   30[COMRAM] unsigned char 
  8909 ;;  sign            1   29[COMRAM] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  3   20[COMRAM] float 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2, status,0, cstack
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8919 ;;      Params:         6       0       0       0       0       0       0
  8920 ;;      Locals:         3       0       0       0       0       0       0
  8921 ;;      Temps:          3       0       0       0       0       0       0
  8922 ;;      Totals:        12       0       0       0       0       0       0
  8923 ;;Total ram usage:       12 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    1
  8926 ;; This function calls:
  8927 ;;		___ftpack
  8928 ;; This function is called by:
  8929 ;;		_INT0_ISR
  8930 ;;		__doprnt
  8931 ;;		___ftsub
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text41
  8936  001FE4                     __ptext41:
  8937                           	opt stack 0
  8938  001FE4                     ___ftadd:
  8939                           	opt stack 21
  8940                           
  8941                           ;incstack = 0
  8942  001FE4  C017  F01B         	movff	___ftadd@f1+2,??___ftadd
  8943  001FE8  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  8944  001FEA  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  8945  001FEC  3416               	rlcf	___ftadd@f1+1,w,c
  8946  001FEE  361B               	rlcf	??___ftadd& (0+255),f,c
  8947  001FF0  E301               	bnc	u242_41
  8948  001FF2  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  8949  001FF4                     u242_41:
  8950  001FF4  501B               	movf	??___ftadd,w,c
  8951  001FF6  6E20               	movwf	___ftadd@exp1,c
  8952  001FF8  C01A  F01B         	movff	___ftadd@f2+2,??___ftadd
  8953  001FFC  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  8954  001FFE  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  8955  002000  3419               	rlcf	___ftadd@f2+1,w,c
  8956  002002  361B               	rlcf	??___ftadd& (0+255),f,c
  8957  002004  E301               	bnc	u243_41
  8958  002006  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  8959  002008                     u243_41:
  8960  002008  501B               	movf	??___ftadd,w,c
  8961  00200A  6E1F               	movwf	___ftadd@exp2,c
  8962  00200C  5020               	movf	___ftadd@exp1,w,c
  8963  00200E  B4D8               	btfsc	status,2,c
  8964  002010  D00B               	goto	i2l789
  8965  002012  501F               	movf	___ftadd@exp2,w,c
  8966  002014  5C20               	subwf	___ftadd@exp1,w,c
  8967  002016  B0D8               	btfsc	status,0,c
  8968  002018  D00E               	goto	i2l2689
  8969  00201A  5020               	movf	___ftadd@exp1,w,c
  8970  00201C  0800               	sublw	0
  8971  00201E  241F               	addwf	___ftadd@exp2,w,c
  8972  002020  6E1B               	movwf	??___ftadd& (0+255),c
  8973  002022  0E18               	movlw	24
  8974  002024  641B               	cpfsgt	??___ftadd,c
  8975  002026  D007               	goto	i2l2689
  8976  002028                     i2l789:
  8977  002028  C018  F015         	movff	___ftadd@f2,?___ftadd
  8978  00202C  C019  F016         	movff	___ftadd@f2+1,?___ftadd+1
  8979  002030  C01A  F017         	movff	___ftadd@f2+2,?___ftadd+2
  8980  002034  0012               	return	
  8981  002036                     i2l2689:
  8982  002036  501F               	movf	___ftadd@exp2,w,c
  8983  002038  B4D8               	btfsc	status,2,c
  8984  00203A  D00B               	goto	i2l793
  8985  00203C  5020               	movf	___ftadd@exp1,w,c
  8986  00203E  5C1F               	subwf	___ftadd@exp2,w,c
  8987  002040  B0D8               	btfsc	status,0,c
  8988  002042  D00E               	goto	i2l2695
  8989  002044  501F               	movf	___ftadd@exp2,w,c
  8990  002046  0800               	sublw	0
  8991  002048  2420               	addwf	___ftadd@exp1,w,c
  8992  00204A  6E1B               	movwf	??___ftadd& (0+255),c
  8993  00204C  0E18               	movlw	24
  8994  00204E  641B               	cpfsgt	??___ftadd,c
  8995  002050  D007               	goto	i2l2695
  8996  002052                     i2l793:
  8997  002052  C015  F015         	movff	___ftadd@f1,?___ftadd
  8998  002056  C016  F016         	movff	___ftadd@f1+1,?___ftadd+1
  8999  00205A  C017  F017         	movff	___ftadd@f1+2,?___ftadd+2
  9000  00205E  0012               	return	
  9001  002060                     i2l2695:
  9002  002060  0E06               	movlw	6
  9003  002062  6E1E               	movwf	___ftadd@sign,c
  9004  002064  BE17               	btfsc	___ftadd@f1+2,7,c
  9005  002066  8E1E               	bsf	___ftadd@sign,7,c
  9006  002068  BE1A               	btfsc	___ftadd@f2+2,7,c
  9007  00206A  8C1E               	bsf	___ftadd@sign,6,c
  9008  00206C  8E16               	bsf	___ftadd@f1+1,7,c
  9009  00206E  0EFF               	movlw	255
  9010  002070  1615               	andwf	___ftadd@f1,f,c
  9011  002072  0EFF               	movlw	255
  9012  002074  1616               	andwf	___ftadd@f1+1,f,c
  9013  002076  0E00               	movlw	0
  9014  002078  1617               	andwf	___ftadd@f1+2,f,c
  9015  00207A  8E19               	bsf	___ftadd@f2+1,7,c
  9016  00207C  0EFF               	movlw	255
  9017  00207E  1618               	andwf	___ftadd@f2,f,c
  9018  002080  0EFF               	movlw	255
  9019  002082  1619               	andwf	___ftadd@f2+1,f,c
  9020  002084  0E00               	movlw	0
  9021  002086  161A               	andwf	___ftadd@f2+2,f,c
  9022  002088  501F               	movf	___ftadd@exp2,w,c
  9023  00208A  5C20               	subwf	___ftadd@exp1,w,c
  9024  00208C  B0D8               	btfsc	status,0,c
  9025  00208E  D01B               	goto	i2l2721
  9026  002090                     i2l2711:
  9027  002090  90D8               	bcf	status,0,c
  9028  002092  3618               	rlcf	___ftadd@f2,f,c
  9029  002094  3619               	rlcf	___ftadd@f2+1,f,c
  9030  002096  361A               	rlcf	___ftadd@f2+2,f,c
  9031  002098  061F               	decf	___ftadd@exp2,f,c
  9032  00209A  5020               	movf	___ftadd@exp1,w,c
  9033  00209C  181F               	xorwf	___ftadd@exp2,w,c
  9034  00209E  B4D8               	btfsc	status,2,c
  9035  0020A0  D00D               	goto	i2l2719
  9036  0020A2  061E               	decf	___ftadd@sign,f,c
  9037  0020A4  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  9038  0020A8  0E07               	movlw	7
  9039  0020AA  161B               	andwf	??___ftadd,f,c
  9040  0020AC  B4D8               	btfsc	status,2,c
  9041  0020AE  D006               	goto	i2l2719
  9042  0020B0  D7EF               	goto	i2l2711
  9043  0020B2                     i2l2717:
  9044  0020B2  90D8               	bcf	status,0,c
  9045  0020B4  3217               	rrcf	___ftadd@f1+2,f,c
  9046  0020B6  3216               	rrcf	___ftadd@f1+1,f,c
  9047  0020B8  3215               	rrcf	___ftadd@f1,f,c
  9048  0020BA  2A20               	incf	___ftadd@exp1,f,c
  9049  0020BC                     i2l2719:
  9050  0020BC  501F               	movf	___ftadd@exp2,w,c
  9051  0020BE  1820               	xorwf	___ftadd@exp1,w,c
  9052  0020C0  B4D8               	btfsc	status,2,c
  9053  0020C2  D01F               	goto	i2l804
  9054  0020C4  D7F6               	goto	i2l2717
  9055  0020C6                     i2l2721:
  9056  0020C6  5020               	movf	___ftadd@exp1,w,c
  9057  0020C8  5C1F               	subwf	___ftadd@exp2,w,c
  9058  0020CA  B0D8               	btfsc	status,0,c
  9059  0020CC  D01A               	goto	i2l804
  9060  0020CE                     i2l2723:
  9061  0020CE  90D8               	bcf	status,0,c
  9062  0020D0  3615               	rlcf	___ftadd@f1,f,c
  9063  0020D2  3616               	rlcf	___ftadd@f1+1,f,c
  9064  0020D4  3617               	rlcf	___ftadd@f1+2,f,c
  9065  0020D6  0620               	decf	___ftadd@exp1,f,c
  9066  0020D8  5020               	movf	___ftadd@exp1,w,c
  9067  0020DA  181F               	xorwf	___ftadd@exp2,w,c
  9068  0020DC  B4D8               	btfsc	status,2,c
  9069  0020DE  D00D               	goto	i2l2731
  9070  0020E0  061E               	decf	___ftadd@sign,f,c
  9071  0020E2  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  9072  0020E6  0E07               	movlw	7
  9073  0020E8  161B               	andwf	??___ftadd,f,c
  9074  0020EA  B4D8               	btfsc	status,2,c
  9075  0020EC  D006               	goto	i2l2731
  9076  0020EE  D7EF               	goto	i2l2723
  9077  0020F0                     i2l2729:
  9078  0020F0  90D8               	bcf	status,0,c
  9079  0020F2  321A               	rrcf	___ftadd@f2+2,f,c
  9080  0020F4  3219               	rrcf	___ftadd@f2+1,f,c
  9081  0020F6  3218               	rrcf	___ftadd@f2,f,c
  9082  0020F8  2A1F               	incf	___ftadd@exp2,f,c
  9083  0020FA                     i2l2731:
  9084  0020FA  501F               	movf	___ftadd@exp2,w,c
  9085  0020FC  1820               	xorwf	___ftadd@exp1,w,c
  9086  0020FE  A4D8               	btfss	status,2,c
  9087  002100  D7F7               	goto	i2l2729
  9088  002102                     i2l804:
  9089  002102  AE1E               	btfss	___ftadd@sign,7,c
  9090  002104  D00C               	goto	i2l813
  9091  002106  0EFF               	movlw	255
  9092  002108  1A15               	xorwf	___ftadd@f1,f,c
  9093  00210A  0EFF               	movlw	255
  9094  00210C  1A16               	xorwf	___ftadd@f1+1,f,c
  9095  00210E  0EFF               	movlw	255
  9096  002110  1A17               	xorwf	___ftadd@f1+2,f,c
  9097  002112  0E01               	movlw	1
  9098  002114  2615               	addwf	___ftadd@f1,f,c
  9099  002116  0E00               	movlw	0
  9100  002118  2216               	addwfc	___ftadd@f1+1,f,c
  9101  00211A  0E00               	movlw	0
  9102  00211C  2217               	addwfc	___ftadd@f1+2,f,c
  9103  00211E                     i2l813:
  9104  00211E  AC1E               	btfss	___ftadd@sign,6,c
  9105  002120  D00C               	goto	i2l2737
  9106  002122  0EFF               	movlw	255
  9107  002124  1A18               	xorwf	___ftadd@f2,f,c
  9108  002126  0EFF               	movlw	255
  9109  002128  1A19               	xorwf	___ftadd@f2+1,f,c
  9110  00212A  0EFF               	movlw	255
  9111  00212C  1A1A               	xorwf	___ftadd@f2+2,f,c
  9112  00212E  0E01               	movlw	1
  9113  002130  2618               	addwf	___ftadd@f2,f,c
  9114  002132  0E00               	movlw	0
  9115  002134  2219               	addwfc	___ftadd@f2+1,f,c
  9116  002136  0E00               	movlw	0
  9117  002138  221A               	addwfc	___ftadd@f2+2,f,c
  9118  00213A                     i2l2737:
  9119  00213A  0E00               	movlw	0
  9120  00213C  6E1E               	movwf	___ftadd@sign,c
  9121  00213E  5015               	movf	___ftadd@f1,w,c
  9122  002140  2618               	addwf	___ftadd@f2,f,c
  9123  002142  5016               	movf	___ftadd@f1+1,w,c
  9124  002144  2219               	addwfc	___ftadd@f2+1,f,c
  9125  002146  5017               	movf	___ftadd@f1+2,w,c
  9126  002148  221A               	addwfc	___ftadd@f2+2,f,c
  9127  00214A  AE1A               	btfss	___ftadd@f2+2,7,c
  9128  00214C  D00E               	goto	i2l2747
  9129  00214E  0EFF               	movlw	255
  9130  002150  1A18               	xorwf	___ftadd@f2,f,c
  9131  002152  0EFF               	movlw	255
  9132  002154  1A19               	xorwf	___ftadd@f2+1,f,c
  9133  002156  0EFF               	movlw	255
  9134  002158  1A1A               	xorwf	___ftadd@f2+2,f,c
  9135  00215A  0E01               	movlw	1
  9136  00215C  2618               	addwf	___ftadd@f2,f,c
  9137  00215E  0E00               	movlw	0
  9138  002160  2219               	addwfc	___ftadd@f2+1,f,c
  9139  002162  0E00               	movlw	0
  9140  002164  221A               	addwfc	___ftadd@f2+2,f,c
  9141  002166  0E01               	movlw	1
  9142  002168  6E1E               	movwf	___ftadd@sign,c
  9143  00216A                     i2l2747:
  9144  00216A  C018  F001         	movff	___ftadd@f2,___ftpack@arg
  9145  00216E  C019  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9146  002172  C01A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9147  002176  C020  F004         	movff	___ftadd@exp1,___ftpack@exp
  9148  00217A  C01E  F005         	movff	___ftadd@sign,___ftpack@sign
  9149  00217E  ECE0  F014         	call	___ftpack	;wreg free
  9150  002182  C001  F015         	movff	?___ftpack,?___ftadd
  9151  002186  C002  F016         	movff	?___ftpack+1,?___ftadd+1
  9152  00218A  C003  F017         	movff	?___ftpack+2,?___ftadd+2
  9153  00218E  0012               	return	
  9154  002190                     __end_of___ftadd:
  9155                           	opt stack 0
  9156                           tosu	equ	0xFFF
  9157                           tosh	equ	0xFFE
  9158                           tosl	equ	0xFFD
  9159                           pclatu	equ	0xFFB
  9160                           pclath	equ	0xFFA
  9161                           tblptru	equ	0xFF8
  9162                           tblptrh	equ	0xFF7
  9163                           tblptrl	equ	0xFF6
  9164                           tablat	equ	0xFF5
  9165                           prodh	equ	0xFF4
  9166                           prodl	equ	0xFF3
  9167                           intcon	equ	0xFF2
  9168                           intcon2	equ	0xFF1
  9169                           intcon3	equ	0xFF0
  9170                           postinc0	equ	0xFEE
  9171                           fsr0h	equ	0xFEA
  9172                           fsr0l	equ	0xFE9
  9173                           wreg	equ	0xFE8
  9174                           indf1	equ	0xFE7
  9175                           postinc1	equ	0xFE6
  9176                           postdec1	equ	0xFE5
  9177                           fsr1h	equ	0xFE2
  9178                           fsr1l	equ	0xFE1
  9179                           indf2	equ	0xFDF
  9180                           postinc2	equ	0xFDE
  9181                           postdec2	equ	0xFDD
  9182                           fsr2h	equ	0xFDA
  9183                           fsr2l	equ	0xFD9
  9184                           status	equ	0xFD8
  9185                           
  9186 ;; *************** function ___ftneg *****************
  9187 ;; Defined at:
  9188 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;  f1              3    0[COMRAM] float 
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;		None
  9193 ;; Return value:  Size  Location     Type
  9194 ;;                  3    0[COMRAM] float 
  9195 ;; Registers used:
  9196 ;;		wreg, status,2, status,0
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9202 ;;      Params:         3       0       0       0       0       0       0
  9203 ;;      Locals:         0       0       0       0       0       0       0
  9204 ;;      Temps:          0       0       0       0       0       0       0
  9205 ;;      Totals:         3       0       0       0       0       0       0
  9206 ;;Total ram usage:        3 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		__doprnt
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text42
  9216  0031D2                     __ptext42:
  9217                           	opt stack 0
  9218  0031D2                     ___ftneg:
  9219                           	opt stack 23
  9220                           
  9221                           ;incstack = 0
  9222  0031D2  5001               	movf	___ftneg@f1,w,c
  9223  0031D4  1002               	iorwf	___ftneg@f1+1,w,c
  9224  0031D6  1003               	iorwf	___ftneg@f1+2,w,c
  9225  0031D8  B4D8               	btfsc	status,2,c
  9226  0031DA  D006               	goto	i2l863
  9227  0031DC  0E00               	movlw	0
  9228  0031DE  1A01               	xorwf	___ftneg@f1,f,c
  9229  0031E0  0E00               	movlw	0
  9230  0031E2  1A02               	xorwf	___ftneg@f1+1,f,c
  9231  0031E4  0E80               	movlw	128
  9232  0031E6  1A03               	xorwf	___ftneg@f1+2,f,c
  9233  0031E8                     i2l863:
  9234  0031E8  C001  F001         	movff	___ftneg@f1,?___ftneg
  9235  0031EC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  9236  0031F0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  9237  0031F4  0012               	return		;funcret
  9238  0031F6                     __end_of___ftneg:
  9239                           	opt stack 0
  9240                           tosu	equ	0xFFF
  9241                           tosh	equ	0xFFE
  9242                           tosl	equ	0xFFD
  9243                           pclatu	equ	0xFFB
  9244                           pclath	equ	0xFFA
  9245                           tblptru	equ	0xFF8
  9246                           tblptrh	equ	0xFF7
  9247                           tblptrl	equ	0xFF6
  9248                           tablat	equ	0xFF5
  9249                           prodh	equ	0xFF4
  9250                           prodl	equ	0xFF3
  9251                           intcon	equ	0xFF2
  9252                           intcon2	equ	0xFF1
  9253                           intcon3	equ	0xFF0
  9254                           postinc0	equ	0xFEE
  9255                           fsr0h	equ	0xFEA
  9256                           fsr0l	equ	0xFE9
  9257                           wreg	equ	0xFE8
  9258                           indf1	equ	0xFE7
  9259                           postinc1	equ	0xFE6
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function ___ftge *****************
  9271 ;; Defined at:
  9272 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  ff1             3    0[COMRAM] float 
  9275 ;;  ff2             3    3[COMRAM] float 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;		None
  9278 ;; Return value:  Size  Location     Type
  9279 ;;		None               void
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9287 ;;      Params:         6       0       0       0       0       0       0
  9288 ;;      Locals:         0       0       0       0       0       0       0
  9289 ;;      Temps:          3       0       0       0       0       0       0
  9290 ;;      Totals:         9       0       0       0       0       0       0
  9291 ;;Total ram usage:        9 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		_UpdateDisplay
  9297 ;;		__doprnt
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text43
  9302  002A6E                     __ptext43:
  9303                           	opt stack 0
  9304  002A6E                     ___ftge:
  9305                           	opt stack 23
  9306                           
  9307                           ;incstack = 0
  9308  002A6E  AE03               	btfss	___ftge@ff1+2,7,c
  9309  002A70  D016               	goto	i2l3117
  9310  002A72  C001  F007         	movff	___ftge@ff1,??___ftge
  9311  002A76  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9312  002A7A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9313  002A7E  1E07               	comf	??___ftge,f,c
  9314  002A80  1E08               	comf	??___ftge+1,f,c
  9315  002A82  1E09               	comf	??___ftge+2,f,c
  9316  002A84  2A07               	incf	??___ftge,f,c
  9317  002A86  0E00               	movlw	0
  9318  002A88  2208               	addwfc	??___ftge+1,f,c
  9319  002A8A  2209               	addwfc	??___ftge+2,f,c
  9320  002A8C  0E00               	movlw	0
  9321  002A8E  2407               	addwf	??___ftge,w,c
  9322  002A90  6E01               	movwf	___ftge@ff1,c
  9323  002A92  0E00               	movlw	0
  9324  002A94  2008               	addwfc	??___ftge+1,w,c
  9325  002A96  6E02               	movwf	___ftge@ff1+1,c
  9326  002A98  0E80               	movlw	128
  9327  002A9A  2009               	addwfc	??___ftge+2,w,c
  9328  002A9C  6E03               	movwf	___ftge@ff1+2,c
  9329  002A9E                     i2l3117:
  9330  002A9E  AE06               	btfss	___ftge@ff2+2,7,c
  9331  002AA0  D016               	goto	i2l3121
  9332  002AA2  C004  F007         	movff	___ftge@ff2,??___ftge
  9333  002AA6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9334  002AAA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9335  002AAE  1E07               	comf	??___ftge,f,c
  9336  002AB0  1E08               	comf	??___ftge+1,f,c
  9337  002AB2  1E09               	comf	??___ftge+2,f,c
  9338  002AB4  2A07               	incf	??___ftge,f,c
  9339  002AB6  0E00               	movlw	0
  9340  002AB8  2208               	addwfc	??___ftge+1,f,c
  9341  002ABA  2209               	addwfc	??___ftge+2,f,c
  9342  002ABC  0E00               	movlw	0
  9343  002ABE  2407               	addwf	??___ftge,w,c
  9344  002AC0  6E04               	movwf	___ftge@ff2,c
  9345  002AC2  0E00               	movlw	0
  9346  002AC4  2008               	addwfc	??___ftge+1,w,c
  9347  002AC6  6E05               	movwf	___ftge@ff2+1,c
  9348  002AC8  0E80               	movlw	128
  9349  002ACA  2009               	addwfc	??___ftge+2,w,c
  9350  002ACC  6E06               	movwf	___ftge@ff2+2,c
  9351  002ACE                     i2l3121:
  9352  002ACE  0E00               	movlw	0
  9353  002AD0  1A01               	xorwf	___ftge@ff1,f,c
  9354  002AD2  0E00               	movlw	0
  9355  002AD4  1A02               	xorwf	___ftge@ff1+1,f,c
  9356  002AD6  0E80               	movlw	128
  9357  002AD8  1A03               	xorwf	___ftge@ff1+2,f,c
  9358  002ADA  0E00               	movlw	0
  9359  002ADC  1A04               	xorwf	___ftge@ff2,f,c
  9360  002ADE  0E00               	movlw	0
  9361  002AE0  1A05               	xorwf	___ftge@ff2+1,f,c
  9362  002AE2  0E80               	movlw	128
  9363  002AE4  1A06               	xorwf	___ftge@ff2+2,f,c
  9364  002AE6  5004               	movf	___ftge@ff2,w,c
  9365  002AE8  5C01               	subwf	___ftge@ff1,w,c
  9366  002AEA  5005               	movf	___ftge@ff2+1,w,c
  9367  002AEC  5802               	subwfb	___ftge@ff1+1,w,c
  9368  002AEE  5006               	movf	___ftge@ff2+2,w,c
  9369  002AF0  5803               	subwfb	___ftge@ff1+2,w,c
  9370  002AF2  B0D8               	btfsc	status,0,c
  9371  002AF4  D002               	goto	i2l3127
  9372  002AF6  90D8               	bcf	status,0,c
  9373  002AF8  0012               	return	
  9374  002AFA                     i2l3127:
  9375  002AFA  80D8               	bsf	status,0,c
  9376  002AFC  0012               	return	
  9377  002AFE                     __end_of___ftge:
  9378                           	opt stack 0
  9379                           tosu	equ	0xFFF
  9380                           tosh	equ	0xFFE
  9381                           tosl	equ	0xFFD
  9382                           pclatu	equ	0xFFB
  9383                           pclath	equ	0xFFA
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           prodh	equ	0xFF4
  9389                           prodl	equ	0xFF3
  9390                           intcon	equ	0xFF2
  9391                           intcon2	equ	0xFF1
  9392                           intcon3	equ	0xFF0
  9393                           postinc0	equ	0xFEE
  9394                           fsr0h	equ	0xFEA
  9395                           fsr0l	equ	0xFE9
  9396                           wreg	equ	0xFE8
  9397                           indf1	equ	0xFE7
  9398                           postinc1	equ	0xFE6
  9399                           postdec1	equ	0xFE5
  9400                           fsr1h	equ	0xFE2
  9401                           fsr1l	equ	0xFE1
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           fsr2h	equ	0xFDA
  9406                           fsr2l	equ	0xFD9
  9407                           status	equ	0xFD8
  9408                           
  9409 ;; *************** function _lcd_sendStringToPos *****************
  9410 ;; Defined at:
  9411 ;;		line 81 in file "lcd.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  x               1    wreg     unsigned char 
  9414 ;;  y               1    8[COMRAM] unsigned char 
  9415 ;;  charString      2    9[COMRAM] PTR const unsigned char 
  9416 ;;		 -> UpdateDisplay@range_string(16), UpdateDisplay@cap_string(16), 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  x               1   11[COMRAM] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9428 ;;      Params:         3       0       0       0       0       0       0
  9429 ;;      Locals:         1       0       0       0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0
  9431 ;;      Totals:         4       0       0       0       0       0       0
  9432 ;;Total ram usage:        4 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    3
  9435 ;; This function calls:
  9436 ;;		_lcd_sendString
  9437 ;;		_lcd_setPosition
  9438 ;; This function is called by:
  9439 ;;		_UpdateDisplay
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text44
  9444  00326C                     __ptext44:
  9445                           	opt stack 0
  9446  00326C                     _lcd_sendStringToPos:
  9447                           	opt stack 21
  9448                           
  9449                           ;incstack = 0
  9450                           ;lcd_sendStringToPos@x stored from wreg
  9451  00326C  6E0C               	movwf	lcd_sendStringToPos@x,c
  9452                           
  9453                           ;lcd.c: 83: lcd_setPosition(x, y);
  9454  00326E  C009  F004         	movff	lcd_sendStringToPos@y,lcd_setPosition@y
  9455  003272  500C               	movf	lcd_sendStringToPos@x,w,c
  9456  003274  EC14  F017         	call	_lcd_setPosition
  9457                           
  9458                           ;lcd.c: 84: lcd_sendString(charString);
  9459  003278  C00A  F005         	movff	lcd_sendStringToPos@charString,lcd_sendString@a
  9460  00327C  C00B  F006         	movff	lcd_sendStringToPos@charString+1,lcd_sendString@a+1
  9461  003280  EC51  F018         	call	_lcd_sendString	;wreg free
  9462  003284  0012               	return		;funcret
  9463  003286                     __end_of_lcd_sendStringToPos:
  9464                           	opt stack 0
  9465                           tosu	equ	0xFFF
  9466                           tosh	equ	0xFFE
  9467                           tosl	equ	0xFFD
  9468                           pclatu	equ	0xFFB
  9469                           pclath	equ	0xFFA
  9470                           tblptru	equ	0xFF8
  9471                           tblptrh	equ	0xFF7
  9472                           tblptrl	equ	0xFF6
  9473                           tablat	equ	0xFF5
  9474                           prodh	equ	0xFF4
  9475                           prodl	equ	0xFF3
  9476                           intcon	equ	0xFF2
  9477                           intcon2	equ	0xFF1
  9478                           intcon3	equ	0xFF0
  9479                           postinc0	equ	0xFEE
  9480                           fsr0h	equ	0xFEA
  9481                           fsr0l	equ	0xFE9
  9482                           wreg	equ	0xFE8
  9483                           indf1	equ	0xFE7
  9484                           postinc1	equ	0xFE6
  9485                           postdec1	equ	0xFE5
  9486                           fsr1h	equ	0xFE2
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           postdec2	equ	0xFDD
  9491                           fsr2h	equ	0xFDA
  9492                           fsr2l	equ	0xFD9
  9493                           status	equ	0xFD8
  9494                           
  9495 ;; *************** function _lcd_setPosition *****************
  9496 ;; Defined at:
  9497 ;;		line 18 in file "lcd.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;  x               1    wreg     unsigned char 
  9500 ;;  y               1    3[COMRAM] unsigned char 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  x               1    4[COMRAM] unsigned char 
  9503 ;;  temp            1    7[COMRAM] unsigned char 
  9504 ;;  j               1    6[COMRAM] unsigned char 
  9505 ;;  i               1    5[COMRAM] unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  1    wreg      void 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9515 ;;      Params:         1       0       0       0       0       0       0
  9516 ;;      Locals:         4       0       0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0
  9518 ;;      Totals:         5       0       0       0       0       0       0
  9519 ;;Total ram usage:        5 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    2
  9522 ;; This function calls:
  9523 ;;		i2_lcd_sendCommand
  9524 ;; This function is called by:
  9525 ;;		_lcd_sendStringToPos
  9526 ;;		_lcd_sendIntToPos
  9527 ;;		_lcd_sendFloatToPos
  9528 ;;		_lcd_sendUIntToPos
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text45
  9533  002E28                     __ptext45:
  9534                           	opt stack 0
  9535  002E28                     _lcd_setPosition:
  9536                           	opt stack 21
  9537                           
  9538                           ;incstack = 0
  9539                           ;lcd_setPosition@x stored from wreg
  9540  002E28  6E05               	movwf	lcd_setPosition@x,c
  9541                           
  9542                           ;lcd.c: 20: unsigned char temp, i, j;
  9543                           ;lcd.c: 21: if(y == 1)
  9544  002E2A  0404               	decf	lcd_setPosition@y,w,c
  9545  002E2C  A4D8               	btfss	status,2,c
  9546  002E2E  D010               	goto	i2l3247
  9547                           
  9548                           ;lcd.c: 22: {
  9549                           ;lcd.c: 23: temp = 0x80 + x - 1;
  9550  002E30  5005               	movf	lcd_setPosition@x,w,c
  9551  002E32  0F7F               	addlw	127
  9552  002E34  6E08               	movwf	lcd_setPosition@temp,c
  9553                           
  9554                           ;lcd.c: 24: i = temp>>4;
  9555  002E36  3808               	swapf	lcd_setPosition@temp,w,c
  9556  002E38  0B0F               	andlw	15
  9557  002E3A  6E06               	movwf	lcd_setPosition@i,c
  9558                           
  9559                           ;lcd.c: 25: j = temp & 0x0F;
  9560  002E3C  5008               	movf	lcd_setPosition@temp,w,c
  9561  002E3E  0B0F               	andlw	15
  9562  002E40  6E07               	movwf	lcd_setPosition@j,c
  9563                           
  9564                           ;lcd.c: 26: lcd_sendCommand(i);
  9565  002E42  5006               	movf	lcd_setPosition@i,w,c
  9566  002E44  ECFB  F018         	call	i2_lcd_sendCommand
  9567                           
  9568                           ;lcd.c: 27: lcd_sendCommand(j);
  9569  002E48  5007               	movf	lcd_setPosition@j,w,c
  9570  002E4A  ECFB  F018         	call	i2_lcd_sendCommand
  9571                           
  9572                           ;lcd.c: 28: }
  9573  002E4E  0012               	return	
  9574  002E50                     i2l3247:
  9575                           
  9576                           ;lcd.c: 29: else if(y == 2)
  9577  002E50  0E02               	movlw	2
  9578  002E52  1804               	xorwf	lcd_setPosition@y,w,c
  9579  002E54  A4D8               	btfss	status,2,c
  9580  002E56  0012               	return	
  9581                           
  9582                           ;lcd.c: 30: {
  9583                           ;lcd.c: 31: temp = 0xC0 + x - 1;
  9584  002E58  5005               	movf	lcd_setPosition@x,w,c
  9585  002E5A  0FBF               	addlw	191
  9586  002E5C  6E08               	movwf	lcd_setPosition@temp,c
  9587                           
  9588                           ;lcd.c: 32: i = temp>>4;
  9589  002E5E  3808               	swapf	lcd_setPosition@temp,w,c
  9590  002E60  0B0F               	andlw	15
  9591  002E62  6E06               	movwf	lcd_setPosition@i,c
  9592                           
  9593                           ;lcd.c: 33: j = temp & 0x0F;
  9594  002E64  5008               	movf	lcd_setPosition@temp,w,c
  9595  002E66  0B0F               	andlw	15
  9596  002E68  6E07               	movwf	lcd_setPosition@j,c
  9597                           
  9598                           ;lcd.c: 34: lcd_sendCommand(i);
  9599  002E6A  5006               	movf	lcd_setPosition@i,w,c
  9600  002E6C  ECFB  F018         	call	i2_lcd_sendCommand
  9601                           
  9602                           ;lcd.c: 35: lcd_sendCommand(j);
  9603  002E70  5007               	movf	lcd_setPosition@j,w,c
  9604  002E72  ECFB  F018         	call	i2_lcd_sendCommand
  9605  002E76  0012               	return	
  9606  002E78                     __end_of_lcd_setPosition:
  9607                           	opt stack 0
  9608                           tosu	equ	0xFFF
  9609                           tosh	equ	0xFFE
  9610                           tosl	equ	0xFFD
  9611                           pclatu	equ	0xFFB
  9612                           pclath	equ	0xFFA
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           intcon	equ	0xFF2
  9620                           intcon2	equ	0xFF1
  9621                           intcon3	equ	0xFF0
  9622                           postinc0	equ	0xFEE
  9623                           fsr0h	equ	0xFEA
  9624                           fsr0l	equ	0xFE9
  9625                           wreg	equ	0xFE8
  9626                           indf1	equ	0xFE7
  9627                           postinc1	equ	0xFE6
  9628                           postdec1	equ	0xFE5
  9629                           fsr1h	equ	0xFE2
  9630                           fsr1l	equ	0xFE1
  9631                           indf2	equ	0xFDF
  9632                           postinc2	equ	0xFDE
  9633                           postdec2	equ	0xFDD
  9634                           fsr2h	equ	0xFDA
  9635                           fsr2l	equ	0xFD9
  9636                           status	equ	0xFD8
  9637                           
  9638 ;; *************** function i2_lcd_sendCommand *****************
  9639 ;; Defined at:
  9640 ;;		line 3 in file "lcd.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  a               1    wreg     unsigned char 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  a               1    2[COMRAM] unsigned char 
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  1    wreg      void 
  9647 ;; Registers used:
  9648 ;;		wreg, status,2, cstack
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9654 ;;      Params:         0       0       0       0       0       0       0
  9655 ;;      Locals:         1       0       0       0       0       0       0
  9656 ;;      Temps:          1       0       0       0       0       0       0
  9657 ;;      Totals:         2       0       0       0       0       0       0
  9658 ;;Total ram usage:        2 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    1
  9661 ;; This function calls:
  9662 ;;		i2__lcd_Port
  9663 ;; This function is called by:
  9664 ;;		_lcd_setPosition
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text46
  9669  0031F6                     __ptext46:
  9670                           	opt stack 0
  9671  0031F6                     i2_lcd_sendCommand:
  9672                           	opt stack 21
  9673                           
  9674                           ;incstack = 0
  9675                           ;i2lcd_sendCommand@a stored from wreg
  9676  0031F6  6E03               	movwf	i2lcd_sendCommand@a,c
  9677                           
  9678                           ;lcd.c: 5: LATAbits.LA5 = 0;
  9679  0031F8  9A89               	bcf	3977,5,c	;volatile
  9680                           
  9681                           ;lcd.c: 6: _lcd_Port(a);
  9682  0031FA  5003               	movf	i2lcd_sendCommand@a,w,c
  9683  0031FC  EC9B  F018         	call	i2__lcd_Port
  9684                           
  9685                           ;lcd.c: 7: LATAbits.LA4 = 1;
  9686  003200  8889               	bsf	3977,4,c	;volatile
  9687                           
  9688                           ;lcd.c: 8: _delay((unsigned long)((4)*(16000000UL/4000.0)));
  9689  003202  0E15               	movlw	21
  9690  003204  6E02               	movwf	??i2_lcd_sendCommand& (0+255),c
  9691  003206  0EC6               	movlw	198
  9692  003208                     i2u468_47:
  9693  003208  2EE8               	decfsz	wreg,f,c
  9694  00320A  D7FE               	bra	i2u468_47
  9695  00320C  2E02               	decfsz	??i2_lcd_sendCommand& (0+255),f,c
  9696  00320E  D7FC               	bra	i2u468_47
  9697  003210  D000               	nop2	
  9698                           
  9699                           ;lcd.c: 9: LATAbits.LA4 = 0;
  9700  003212  9889               	bcf	3977,4,c	;volatile
  9701  003214  0012               	return		;funcret
  9702  003216                     __end_ofi2_lcd_sendCommand:
  9703                           	opt stack 0
  9704                           tosu	equ	0xFFF
  9705                           tosh	equ	0xFFE
  9706                           tosl	equ	0xFFD
  9707                           pclatu	equ	0xFFB
  9708                           pclath	equ	0xFFA
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           intcon	equ	0xFF2
  9716                           intcon2	equ	0xFF1
  9717                           intcon3	equ	0xFF0
  9718                           postinc0	equ	0xFEE
  9719                           fsr0h	equ	0xFEA
  9720                           fsr0l	equ	0xFE9
  9721                           wreg	equ	0xFE8
  9722                           indf1	equ	0xFE7
  9723                           postinc1	equ	0xFE6
  9724                           postdec1	equ	0xFE5
  9725                           fsr1h	equ	0xFE2
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _lcd_sendString *****************
  9735 ;; Defined at:
  9736 ;;		line 74 in file "lcd.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  a               2    4[COMRAM] PTR const unsigned char 
  9739 ;;		 -> ftoa@buf(17), lcd_sendUInt@displayString(10), lcd_sendInt@displayString(10), UpdateDisplay@range_string(16), 
  9740 ;;		 -> UpdateDisplay@cap_string(16), 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;  i               2    6[COMRAM] int 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  1    wreg      void 
  9745 ;; Registers used:
  9746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9752 ;;      Params:         2       0       0       0       0       0       0
  9753 ;;      Locals:         2       0       0       0       0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0
  9755 ;;      Totals:         4       0       0       0       0       0       0
  9756 ;;Total ram usage:        4 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    2
  9759 ;; This function calls:
  9760 ;;		_lcd_sendChar
  9761 ;; This function is called by:
  9762 ;;		_lcd_sendStringToPos
  9763 ;;		_lcd_sendInt
  9764 ;;		_lcd_sendFloat
  9765 ;;		_lcd_sendUInt
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769                           	psect	text47
  9770  0030A2                     __ptext47:
  9771                           	opt stack 0
  9772  0030A2                     _lcd_sendString:
  9773                           	opt stack 21
  9774                           
  9775                           ;lcd.c: 76: int i;
  9776                           ;lcd.c: 77: for(i=0;a[i]!='\0';i++)
  9777                           
  9778                           ;incstack = 0
  9779  0030A2  0E00               	movlw	0
  9780  0030A4  6E08               	movwf	lcd_sendString@i+1,c
  9781  0030A6  0E00               	movlw	0
  9782  0030A8  6E07               	movwf	lcd_sendString@i,c
  9783  0030AA  D00B               	goto	i2l3261
  9784  0030AC                     i2l3257:
  9785                           
  9786                           ;lcd.c: 78: lcd_sendChar(a[i]);
  9787  0030AC  5007               	movf	lcd_sendString@i,w,c
  9788  0030AE  2405               	addwf	lcd_sendString@a,w,c
  9789  0030B0  6ED9               	movwf	fsr2l,c
  9790  0030B2  5008               	movf	lcd_sendString@i+1,w,c
  9791  0030B4  2006               	addwfc	lcd_sendString@a+1,w,c
  9792  0030B6  6EDA               	movwf	fsr2h,c
  9793  0030B8  50DF               	movf	indf2,w,c
  9794  0030BA  ECFF  F017         	call	_lcd_sendChar
  9795  0030BE  4A07               	infsnz	lcd_sendString@i,f,c
  9796  0030C0  2A08               	incf	lcd_sendString@i+1,f,c
  9797  0030C2                     i2l3261:
  9798  0030C2  5007               	movf	lcd_sendString@i,w,c
  9799  0030C4  2405               	addwf	lcd_sendString@a,w,c
  9800  0030C6  6ED9               	movwf	fsr2l,c
  9801  0030C8  5008               	movf	lcd_sendString@i+1,w,c
  9802  0030CA  2006               	addwfc	lcd_sendString@a+1,w,c
  9803  0030CC  6EDA               	movwf	fsr2h,c
  9804  0030CE  50DF               	movf	indf2,w,c
  9805  0030D0  B4D8               	btfsc	status,2,c
  9806  0030D2  0012               	return	
  9807  0030D4  D7EB               	goto	i2l3257
  9808  0030D6                     __end_of_lcd_sendString:
  9809                           	opt stack 0
  9810                           tosu	equ	0xFFF
  9811                           tosh	equ	0xFFE
  9812                           tosl	equ	0xFFD
  9813                           pclatu	equ	0xFFB
  9814                           pclath	equ	0xFFA
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           intcon	equ	0xFF2
  9822                           intcon2	equ	0xFF1
  9823                           intcon3	equ	0xFF0
  9824                           postinc0	equ	0xFEE
  9825                           fsr0h	equ	0xFEA
  9826                           fsr0l	equ	0xFE9
  9827                           wreg	equ	0xFE8
  9828                           indf1	equ	0xFE7
  9829                           postinc1	equ	0xFE6
  9830                           postdec1	equ	0xFE5
  9831                           fsr1h	equ	0xFE2
  9832                           fsr1l	equ	0xFE1
  9833                           indf2	equ	0xFDF
  9834                           postinc2	equ	0xFDE
  9835                           postdec2	equ	0xFDD
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function _lcd_sendChar *****************
  9841 ;; Defined at:
  9842 ;;		line 58 in file "lcd.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  a               1    wreg     const unsigned char 
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;  a               1    3[COMRAM] const unsigned char 
  9847 ;;  y               1    2[COMRAM] unsigned char 
  9848 ;;  temp            1    1[COMRAM] unsigned char 
  9849 ;; Return value:  Size  Location     Type
  9850 ;;                  1    wreg      void 
  9851 ;; Registers used:
  9852 ;;		wreg, status,2, status,0, cstack
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9858 ;;      Params:         0       0       0       0       0       0       0
  9859 ;;      Locals:         3       0       0       0       0       0       0
  9860 ;;      Temps:          0       0       0       0       0       0       0
  9861 ;;      Totals:         3       0       0       0       0       0       0
  9862 ;;Total ram usage:        3 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    1
  9865 ;; This function calls:
  9866 ;;		i2__lcd_Port
  9867 ;; This function is called by:
  9868 ;;		_lcd_sendString
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           	psect	text48
  9873  002FFE                     __ptext48:
  9874                           	opt stack 0
  9875  002FFE                     _lcd_sendChar:
  9876                           	opt stack 21
  9877                           
  9878                           ;incstack = 0
  9879                           ;lcd_sendChar@a stored from wreg
  9880  002FFE  6E04               	movwf	lcd_sendChar@a,c
  9881                           
  9882                           ;lcd.c: 60: char temp,y;
  9883                           ;lcd.c: 61: temp = a&0x0F;
  9884  003000  5004               	movf	lcd_sendChar@a,w,c
  9885  003002  0B0F               	andlw	15
  9886  003004  6E02               	movwf	lcd_sendChar@temp,c
  9887                           
  9888                           ;lcd.c: 62: y = a&0xF0;
  9889  003006  5004               	movf	lcd_sendChar@a,w,c
  9890  003008  0BF0               	andlw	240
  9891  00300A  6E03               	movwf	lcd_sendChar@y,c
  9892                           
  9893                           ;lcd.c: 63: LATAbits.LA5 = 1;
  9894  00300C  8A89               	bsf	3977,5,c	;volatile
  9895                           
  9896                           ;lcd.c: 64: _lcd_Port(y>>4);
  9897  00300E  3803               	swapf	lcd_sendChar@y,w,c
  9898  003010  0B0F               	andlw	15
  9899  003012  EC9B  F018         	call	i2__lcd_Port
  9900                           
  9901                           ;lcd.c: 65: LATAbits.LA4 = 1;
  9902  003016  8889               	bsf	3977,4,c	;volatile
  9903                           
  9904                           ;lcd.c: 66: _delay((unsigned long)((40)*(16000000UL/4000000.0)));
  9905  003018  0E35               	movlw	53
  9906  00301A                     i2u469_47:
  9907  00301A  2EE8               	decfsz	wreg,f,c
  9908  00301C  D7FE               	bra	i2u469_47
  9909  00301E  F000               	nop	
  9910                           
  9911                           ;lcd.c: 67: LATAbits.LA4 = 0;
  9912  003020  9889               	bcf	3977,4,c	;volatile
  9913                           
  9914                           ;lcd.c: 68: _lcd_Port(temp);
  9915  003022  5002               	movf	lcd_sendChar@temp,w,c
  9916  003024  EC9B  F018         	call	i2__lcd_Port
  9917                           
  9918                           ;lcd.c: 69: LATAbits.LA4 = 1;
  9919  003028  8889               	bsf	3977,4,c	;volatile
  9920                           
  9921                           ;lcd.c: 70: _delay((unsigned long)((40)*(16000000UL/4000000.0)));
  9922  00302A  0E35               	movlw	53
  9923  00302C                     i2u470_47:
  9924  00302C  2EE8               	decfsz	wreg,f,c
  9925  00302E  D7FE               	bra	i2u470_47
  9926  003030  F000               	nop	
  9927                           
  9928                           ;lcd.c: 71: LATAbits.LA4 = 0;
  9929  003032  9889               	bcf	3977,4,c	;volatile
  9930  003034  0012               	return		;funcret
  9931  003036                     __end_of_lcd_sendChar:
  9932                           	opt stack 0
  9933                           tosu	equ	0xFFF
  9934                           tosh	equ	0xFFE
  9935                           tosl	equ	0xFFD
  9936                           pclatu	equ	0xFFB
  9937                           pclath	equ	0xFFA
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           intcon2	equ	0xFF1
  9946                           intcon3	equ	0xFF0
  9947                           postinc0	equ	0xFEE
  9948                           fsr0h	equ	0xFEA
  9949                           fsr0l	equ	0xFE9
  9950                           wreg	equ	0xFE8
  9951                           indf1	equ	0xFE7
  9952                           postinc1	equ	0xFE6
  9953                           postdec1	equ	0xFE5
  9954                           fsr1h	equ	0xFE2
  9955                           fsr1l	equ	0xFE1
  9956                           indf2	equ	0xFDF
  9957                           postinc2	equ	0xFDE
  9958                           postdec2	equ	0xFDD
  9959                           fsr2h	equ	0xFDA
  9960                           fsr2l	equ	0xFD9
  9961                           status	equ	0xFD8
  9962                           
  9963 ;; *************** function i2__lcd_Port *****************
  9964 ;; Defined at:
  9965 ;;		line 139 in file "lcd.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;  a               1    wreg     unsigned char 
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;  a               1    0[COMRAM] unsigned char 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9979 ;;      Params:         0       0       0       0       0       0       0
  9980 ;;      Locals:         1       0       0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0
  9982 ;;      Totals:         1       0       0       0       0       0       0
  9983 ;;Total ram usage:        1 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; This function calls:
  9986 ;;		Nothing
  9987 ;; This function is called by:
  9988 ;;		_lcd_sendChar
  9989 ;;		i2_lcd_sendCommand
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text49
  9994  003136                     __ptext49:
  9995                           	opt stack 0
  9996  003136                     i2__lcd_Port:
  9997                           	opt stack 21
  9998                           
  9999                           ;incstack = 0
 10000                           ;i2__lcd_Port@a stored from wreg
 10001  003136  6E01               	movwf	i2__lcd_Port@a,c
 10002                           
 10003                           ;lcd.c: 141: if(a & 1)
 10004  003138  A001               	btfss	i2__lcd_Port@a,0,c
 10005  00313A  D002               	goto	i2l353
 10006                           
 10007                           ;lcd.c: 142: LATAbits.LA3 = 1;
 10008  00313C  8689               	bsf	3977,3,c	;volatile
 10009  00313E  D001               	goto	i2l2883
 10010  003140                     i2l353:
 10011                           
 10012                           ;lcd.c: 143: else
 10013                           ;lcd.c: 144: LATAbits.LA3 = 0;
 10014  003140  9689               	bcf	3977,3,c	;volatile
 10015  003142                     i2l2883:
 10016                           
 10017                           ;lcd.c: 146: if(a & 2)
 10018  003142  A201               	btfss	i2__lcd_Port@a,1,c
 10019  003144  D002               	goto	i2l355
 10020                           
 10021                           ;lcd.c: 147: LATAbits.LA2 = 1;
 10022  003146  8489               	bsf	3977,2,c	;volatile
 10023  003148  D001               	goto	i2l2887
 10024  00314A                     i2l355:
 10025                           
 10026                           ;lcd.c: 148: else
 10027                           ;lcd.c: 149: LATAbits.LA2 = 0;
 10028  00314A  9489               	bcf	3977,2,c	;volatile
 10029  00314C                     i2l2887:
 10030                           
 10031                           ;lcd.c: 151: if(a & 4)
 10032  00314C  A401               	btfss	i2__lcd_Port@a,2,c
 10033  00314E  D002               	goto	i2l357
 10034                           
 10035                           ;lcd.c: 152: LATAbits.LA1 = 1;
 10036  003150  8289               	bsf	3977,1,c	;volatile
 10037  003152  D001               	goto	i2l2891
 10038  003154                     i2l357:
 10039                           
 10040                           ;lcd.c: 153: else
 10041                           ;lcd.c: 154: LATAbits.LA1 = 0;
 10042  003154  9289               	bcf	3977,1,c	;volatile
 10043  003156                     i2l2891:
 10044                           
 10045                           ;lcd.c: 156: if(a & 8)
 10046  003156  A601               	btfss	i2__lcd_Port@a,3,c
 10047  003158  D002               	goto	i2l359
 10048                           
 10049                           ;lcd.c: 157: LATAbits.LA0 = 1;
 10050  00315A  8089               	bsf	3977,0,c	;volatile
 10051  00315C  0012               	return	
 10052  00315E                     i2l359:
 10053                           
 10054                           ;lcd.c: 158: else
 10055                           ;lcd.c: 159: LATAbits.LA0 = 0;
 10056  00315E  9089               	bcf	3977,0,c	;volatile
 10057  003160  0012               	return	
 10058  003162                     __end_ofi2__lcd_Port:
 10059                           	opt stack 0
 10060                           tosu	equ	0xFFF
 10061                           tosh	equ	0xFFE
 10062                           tosl	equ	0xFFD
 10063                           pclatu	equ	0xFFB
 10064                           pclath	equ	0xFFA
 10065                           tblptru	equ	0xFF8
 10066                           tblptrh	equ	0xFF7
 10067                           tblptrl	equ	0xFF6
 10068                           tablat	equ	0xFF5
 10069                           prodh	equ	0xFF4
 10070                           prodl	equ	0xFF3
 10071                           intcon	equ	0xFF2
 10072                           intcon2	equ	0xFF1
 10073                           intcon3	equ	0xFF0
 10074                           postinc0	equ	0xFEE
 10075                           fsr0h	equ	0xFEA
 10076                           fsr0l	equ	0xFE9
 10077                           wreg	equ	0xFE8
 10078                           indf1	equ	0xFE7
 10079                           postinc1	equ	0xFE6
 10080                           postdec1	equ	0xFE5
 10081                           fsr1h	equ	0xFE2
 10082                           fsr1l	equ	0xFE1
 10083                           indf2	equ	0xFDF
 10084                           postinc2	equ	0xFDE
 10085                           postdec2	equ	0xFDD
 10086                           fsr2h	equ	0xFDA
 10087                           fsr2l	equ	0xFD9
 10088                           status	equ	0xFD8
 10089                           
 10090 ;; *************** function ___ftdiv *****************
 10091 ;; Defined at:
 10092 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;  f1              3   47[COMRAM] float 
 10095 ;;  f2              3   50[COMRAM] float 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  f3              3   57[COMRAM] float 
 10098 ;;  sign            1   61[COMRAM] unsigned char 
 10099 ;;  exp             1   60[COMRAM] unsigned char 
 10100 ;;  cntr            1   56[COMRAM] unsigned char 
 10101 ;; Return value:  Size  Location     Type
 10102 ;;                  3   47[COMRAM] float 
 10103 ;; Registers used:
 10104 ;;		wreg, status,2, status,0, cstack
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10110 ;;      Params:         6       0       0       0       0       0       0
 10111 ;;      Locals:         6       0       0       0       0       0       0
 10112 ;;      Temps:          3       0       0       0       0       0       0
 10113 ;;      Totals:        15       0       0       0       0       0       0
 10114 ;;Total ram usage:       15 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:    1
 10117 ;; This function calls:
 10118 ;;		___ftpack
 10119 ;; This function is called by:
 10120 ;;		_UpdateDisplay
 10121 ;;		_INT0_ISR
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           	psect	text50
 10126  0028DA                     __ptext50:
 10127                           	opt stack 0
 10128  0028DA                     ___ftdiv:
 10129                           	opt stack 23
 10130                           
 10131                           ;incstack = 0
 10132  0028DA  C032  F036         	movff	___ftdiv@f1+2,??___ftdiv
 10133  0028DE  6A37               	clrf	(??___ftdiv+1)& (0+255),c
 10134  0028E0  6A38               	clrf	(??___ftdiv+2)& (0+255),c
 10135  0028E2  3431               	rlcf	___ftdiv@f1+1,w,c
 10136  0028E4  3636               	rlcf	??___ftdiv& (0+255),f,c
 10137  0028E6  E301               	bnc	u432_41
 10138  0028E8  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
 10139  0028EA                     u432_41:
 10140  0028EA  5036               	movf	??___ftdiv,w,c
 10141  0028EC  6E3D               	movwf	___ftdiv@exp,c
 10142  0028EE  503D               	movf	___ftdiv@exp,w,c
 10143  0028F0  A4D8               	btfss	status,2,c
 10144  0028F2  D007               	goto	i2l3687
 10145  0028F4  0E00               	movlw	0
 10146  0028F6  6E30               	movwf	?___ftdiv,c
 10147  0028F8  0E00               	movlw	0
 10148  0028FA  6E31               	movwf	?___ftdiv+1,c
 10149  0028FC  0E00               	movlw	0
 10150  0028FE  6E32               	movwf	?___ftdiv+2,c
 10151  002900  0012               	return	
 10152  002902                     i2l3687:
 10153  002902  C035  F036         	movff	___ftdiv@f2+2,??___ftdiv
 10154  002906  6A37               	clrf	(??___ftdiv+1)& (0+255),c
 10155  002908  6A38               	clrf	(??___ftdiv+2)& (0+255),c
 10156  00290A  3434               	rlcf	___ftdiv@f2+1,w,c
 10157  00290C  3636               	rlcf	??___ftdiv& (0+255),f,c
 10158  00290E  E301               	bnc	u434_41
 10159  002910  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
 10160  002912                     u434_41:
 10161  002912  5036               	movf	??___ftdiv,w,c
 10162  002914  6E3E               	movwf	___ftdiv@sign,c
 10163  002916  503E               	movf	___ftdiv@sign,w,c
 10164  002918  A4D8               	btfss	status,2,c
 10165  00291A  D007               	goto	i2l3693
 10166  00291C  0E00               	movlw	0
 10167  00291E  6E30               	movwf	?___ftdiv,c
 10168  002920  0E00               	movlw	0
 10169  002922  6E31               	movwf	?___ftdiv+1,c
 10170  002924  0E00               	movlw	0
 10171  002926  6E32               	movwf	?___ftdiv+2,c
 10172  002928  0012               	return	
 10173  00292A                     i2l3693:
 10174  00292A  0E00               	movlw	0
 10175  00292C  6E3A               	movwf	___ftdiv@f3,c
 10176  00292E  0E00               	movlw	0
 10177  002930  6E3B               	movwf	___ftdiv@f3+1,c
 10178  002932  0E00               	movlw	0
 10179  002934  6E3C               	movwf	___ftdiv@f3+2,c
 10180  002936  503E               	movf	___ftdiv@sign,w,c
 10181  002938  0F89               	addlw	137
 10182  00293A  5E3D               	subwf	___ftdiv@exp,f,c
 10183  00293C  C032  F03E         	movff	___ftdiv@f1+2,___ftdiv@sign
 10184  002940  5035               	movf	___ftdiv@f2+2,w,c
 10185  002942  1A3E               	xorwf	___ftdiv@sign,f,c
 10186  002944  0E80               	movlw	128
 10187  002946  163E               	andwf	___ftdiv@sign,f,c
 10188  002948  8E31               	bsf	___ftdiv@f1+1,7,c
 10189  00294A  0EFF               	movlw	255
 10190  00294C  1630               	andwf	___ftdiv@f1,f,c
 10191  00294E  0EFF               	movlw	255
 10192  002950  1631               	andwf	___ftdiv@f1+1,f,c
 10193  002952  0E00               	movlw	0
 10194  002954  1632               	andwf	___ftdiv@f1+2,f,c
 10195  002956  8E34               	bsf	___ftdiv@f2+1,7,c
 10196  002958  0EFF               	movlw	255
 10197  00295A  1633               	andwf	___ftdiv@f2,f,c
 10198  00295C  0EFF               	movlw	255
 10199  00295E  1634               	andwf	___ftdiv@f2+1,f,c
 10200  002960  0E00               	movlw	0
 10201  002962  1635               	andwf	___ftdiv@f2+2,f,c
 10202  002964  0E18               	movlw	24
 10203  002966  6E39               	movwf	___ftdiv@cntr,c
 10204  002968                     i2l3713:
 10205  002968  90D8               	bcf	status,0,c
 10206  00296A  363A               	rlcf	___ftdiv@f3,f,c
 10207  00296C  363B               	rlcf	___ftdiv@f3+1,f,c
 10208  00296E  363C               	rlcf	___ftdiv@f3+2,f,c
 10209  002970  5033               	movf	___ftdiv@f2,w,c
 10210  002972  5C30               	subwf	___ftdiv@f1,w,c
 10211  002974  5034               	movf	___ftdiv@f2+1,w,c
 10212  002976  5831               	subwfb	___ftdiv@f1+1,w,c
 10213  002978  5035               	movf	___ftdiv@f2+2,w,c
 10214  00297A  5832               	subwfb	___ftdiv@f1+2,w,c
 10215  00297C  A0D8               	btfss	status,0,c
 10216  00297E  D007               	goto	i2l824
 10217  002980  5033               	movf	___ftdiv@f2,w,c
 10218  002982  5E30               	subwf	___ftdiv@f1,f,c
 10219  002984  5034               	movf	___ftdiv@f2+1,w,c
 10220  002986  5A31               	subwfb	___ftdiv@f1+1,f,c
 10221  002988  5035               	movf	___ftdiv@f2+2,w,c
 10222  00298A  5A32               	subwfb	___ftdiv@f1+2,f,c
 10223  00298C  803A               	bsf	___ftdiv@f3,0,c
 10224  00298E                     i2l824:
 10225  00298E  90D8               	bcf	status,0,c
 10226  002990  3630               	rlcf	___ftdiv@f1,f,c
 10227  002992  3631               	rlcf	___ftdiv@f1+1,f,c
 10228  002994  3632               	rlcf	___ftdiv@f1+2,f,c
 10229  002996  2E39               	decfsz	___ftdiv@cntr,f,c
 10230  002998  D7E7               	goto	i2l3713
 10231  00299A  C03A  F001         	movff	___ftdiv@f3,___ftpack@arg
 10232  00299E  C03B  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10233  0029A2  C03C  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10234  0029A6  C03D  F004         	movff	___ftdiv@exp,___ftpack@exp
 10235  0029AA  C03E  F005         	movff	___ftdiv@sign,___ftpack@sign
 10236  0029AE  ECE0  F014         	call	___ftpack	;wreg free
 10237  0029B2  C001  F030         	movff	?___ftpack,?___ftdiv
 10238  0029B6  C002  F031         	movff	?___ftpack+1,?___ftdiv+1
 10239  0029BA  C003  F032         	movff	?___ftpack+2,?___ftdiv+2
 10240  0029BE  0012               	return	
 10241  0029C0                     __end_of___ftdiv:
 10242                           	opt stack 0
 10243                           tosu	equ	0xFFF
 10244                           tosh	equ	0xFFE
 10245                           tosl	equ	0xFFD
 10246                           pclatu	equ	0xFFB
 10247                           pclath	equ	0xFFA
 10248                           tblptru	equ	0xFF8
 10249                           tblptrh	equ	0xFF7
 10250                           tblptrl	equ	0xFF6
 10251                           tablat	equ	0xFF5
 10252                           prodh	equ	0xFF4
 10253                           prodl	equ	0xFF3
 10254                           intcon	equ	0xFF2
 10255                           intcon2	equ	0xFF1
 10256                           intcon3	equ	0xFF0
 10257                           postinc0	equ	0xFEE
 10258                           fsr0h	equ	0xFEA
 10259                           fsr0l	equ	0xFE9
 10260                           wreg	equ	0xFE8
 10261                           indf1	equ	0xFE7
 10262                           postinc1	equ	0xFE6
 10263                           postdec1	equ	0xFE5
 10264                           fsr1h	equ	0xFE2
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function ___ftpack *****************
 10274 ;; Defined at:
 10275 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  arg             3    0[COMRAM] unsigned um
 10278 ;;  exp             1    3[COMRAM] unsigned char 
 10279 ;;  sign            1    4[COMRAM] unsigned char 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;		None
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  3    0[COMRAM] float 
 10284 ;; Registers used:
 10285 ;;		wreg, status,2, status,0
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10291 ;;      Params:         5       0       0       0       0       0       0
 10292 ;;      Locals:         0       0       0       0       0       0       0
 10293 ;;      Temps:          3       0       0       0       0       0       0
 10294 ;;      Totals:         8       0       0       0       0       0       0
 10295 ;;Total ram usage:        8 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; This function calls:
 10298 ;;		Nothing
 10299 ;; This function is called by:
 10300 ;;		___ftadd
 10301 ;;		___ftdiv
 10302 ;;		___ftmul
 10303 ;;		___lltoft
 10304 ;;		___lwtoft
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text51
 10309  0029C0                     __ptext51:
 10310                           	opt stack 0
 10311  0029C0                     ___ftpack:
 10312                           	opt stack 21
 10313                           
 10314                           ;incstack = 0
 10315  0029C0  5004               	movf	___ftpack@exp,w,c
 10316  0029C2  B4D8               	btfsc	status,2,c
 10317  0029C4  D005               	goto	i2l2639
 10318  0029C6  5001               	movf	___ftpack@arg,w,c
 10319  0029C8  1002               	iorwf	___ftpack@arg+1,w,c
 10320  0029CA  1003               	iorwf	___ftpack@arg+2,w,c
 10321  0029CC  A4D8               	btfss	status,2,c
 10322  0029CE  D00C               	goto	i2l2645
 10323  0029D0                     i2l2639:
 10324  0029D0  0E00               	movlw	0
 10325  0029D2  6E01               	movwf	?___ftpack,c
 10326  0029D4  0E00               	movlw	0
 10327  0029D6  6E02               	movwf	?___ftpack+1,c
 10328  0029D8  0E00               	movlw	0
 10329  0029DA  6E03               	movwf	?___ftpack+2,c
 10330  0029DC  0012               	return	
 10331  0029DE                     i2l2643:
 10332  0029DE  2A04               	incf	___ftpack@exp,f,c
 10333  0029E0  90D8               	bcf	status,0,c
 10334  0029E2  3203               	rrcf	___ftpack@arg+2,f,c
 10335  0029E4  3202               	rrcf	___ftpack@arg+1,f,c
 10336  0029E6  3201               	rrcf	___ftpack@arg,f,c
 10337  0029E8                     i2l2645:
 10338  0029E8  0E00               	movlw	0
 10339  0029EA  1401               	andwf	___ftpack@arg,w,c
 10340  0029EC  6E06               	movwf	??___ftpack& (0+255),c
 10341  0029EE  0E00               	movlw	0
 10342  0029F0  1402               	andwf	___ftpack@arg+1,w,c
 10343  0029F2  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10344  0029F4  0EFE               	movlw	254
 10345  0029F6  1403               	andwf	___ftpack@arg+2,w,c
 10346  0029F8  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10347  0029FA  5006               	movf	??___ftpack,w,c
 10348  0029FC  1007               	iorwf	??___ftpack+1,w,c
 10349  0029FE  1008               	iorwf	??___ftpack+2,w,c
 10350  002A00  B4D8               	btfsc	status,2,c
 10351  002A02  D00C               	goto	i2l2651
 10352  002A04  D7EC               	goto	i2l2643
 10353  002A06                     i2l2647:
 10354  002A06  2A04               	incf	___ftpack@exp,f,c
 10355  002A08  0E01               	movlw	1
 10356  002A0A  2601               	addwf	___ftpack@arg,f,c
 10357  002A0C  0E00               	movlw	0
 10358  002A0E  2202               	addwfc	___ftpack@arg+1,f,c
 10359  002A10  0E00               	movlw	0
 10360  002A12  2203               	addwfc	___ftpack@arg+2,f,c
 10361  002A14  90D8               	bcf	status,0,c
 10362  002A16  3203               	rrcf	___ftpack@arg+2,f,c
 10363  002A18  3202               	rrcf	___ftpack@arg+1,f,c
 10364  002A1A  3201               	rrcf	___ftpack@arg,f,c
 10365  002A1C                     i2l2651:
 10366  002A1C  0E00               	movlw	0
 10367  002A1E  1401               	andwf	___ftpack@arg,w,c
 10368  002A20  6E06               	movwf	??___ftpack& (0+255),c
 10369  002A22  0E00               	movlw	0
 10370  002A24  1402               	andwf	___ftpack@arg+1,w,c
 10371  002A26  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10372  002A28  0EFF               	movlw	255
 10373  002A2A  1403               	andwf	___ftpack@arg+2,w,c
 10374  002A2C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10375  002A2E  5006               	movf	??___ftpack,w,c
 10376  002A30  1007               	iorwf	??___ftpack+1,w,c
 10377  002A32  1008               	iorwf	??___ftpack+2,w,c
 10378  002A34  B4D8               	btfsc	status,2,c
 10379  002A36  D006               	goto	i2l2655
 10380  002A38  D7E6               	goto	i2l2647
 10381  002A3A                     i2l2653:
 10382  002A3A  0604               	decf	___ftpack@exp,f,c
 10383  002A3C  90D8               	bcf	status,0,c
 10384  002A3E  3601               	rlcf	___ftpack@arg,f,c
 10385  002A40  3602               	rlcf	___ftpack@arg+1,f,c
 10386  002A42  3603               	rlcf	___ftpack@arg+2,f,c
 10387  002A44                     i2l2655:
 10388  002A44  BE02               	btfsc	___ftpack@arg+1,7,c
 10389  002A46  D003               	goto	i2l766
 10390  002A48  0E02               	movlw	2
 10391  002A4A  6004               	cpfslt	___ftpack@exp,c
 10392  002A4C  D7F6               	goto	i2l2653
 10393  002A4E                     i2l766:
 10394  002A4E  A004               	btfss	___ftpack@exp,0,c
 10395  002A50  9E02               	bcf	___ftpack@arg+1,7,c
 10396  002A52  90D8               	bcf	status,0,c
 10397  002A54  3204               	rrcf	___ftpack@exp,f,c
 10398  002A56  5004               	movf	___ftpack@exp,w,c
 10399  002A58  1203               	iorwf	___ftpack@arg+2,f,c
 10400  002A5A  5005               	movf	___ftpack@sign,w,c
 10401  002A5C  A4D8               	btfss	status,2,c
 10402  002A5E  8E03               	bsf	___ftpack@arg+2,7,c
 10403  002A60  C001  F001         	movff	___ftpack@arg,?___ftpack
 10404  002A64  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10405  002A68  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10406  002A6C  0012               	return	
 10407  002A6E                     __end_of___ftpack:
 10408                           	opt stack 0
 10409                           tosu	equ	0xFFF
 10410                           tosh	equ	0xFFE
 10411                           tosl	equ	0xFFD
 10412                           pclatu	equ	0xFFB
 10413                           pclath	equ	0xFFA
 10414                           tblptru	equ	0xFF8
 10415                           tblptrh	equ	0xFF7
 10416                           tblptrl	equ	0xFF6
 10417                           tablat	equ	0xFF5
 10418                           prodh	equ	0xFF4
 10419                           prodl	equ	0xFF3
 10420                           intcon	equ	0xFF2
 10421                           intcon2	equ	0xFF1
 10422                           intcon3	equ	0xFF0
 10423                           postinc0	equ	0xFEE
 10424                           fsr0h	equ	0xFEA
 10425                           fsr0l	equ	0xFE9
 10426                           wreg	equ	0xFE8
 10427                           indf1	equ	0xFE7
 10428                           postinc1	equ	0xFE6
 10429                           postdec1	equ	0xFE5
 10430                           fsr1h	equ	0xFE2
 10431                           fsr1l	equ	0xFE1
 10432                           indf2	equ	0xFDF
 10433                           postinc2	equ	0xFDE
 10434                           postdec2	equ	0xFDD
 10435                           fsr2h	equ	0xFDA
 10436                           fsr2l	equ	0xFD9
 10437                           status	equ	0xFD8
 10438                           
 10439 ;; *************** function _TMR0_StopTimer *****************
 10440 ;; Defined at:
 10441 ;;		line 57 in file "mcc_generated_files/tmr0.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;		None
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;		None
 10446 ;; Return value:  Size  Location     Type
 10447 ;;                  1    wreg      void 
 10448 ;; Registers used:
 10449 ;;		None
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10455 ;;      Params:         0       0       0       0       0       0       0
 10456 ;;      Locals:         0       0       0       0       0       0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0
 10458 ;;      Totals:         0       0       0       0       0       0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; This function calls:
 10462 ;;		Nothing
 10463 ;; This function is called by:
 10464 ;;		_INT0_ISR
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           	psect	text52
 10469  0032FC                     __ptext52:
 10470                           	opt stack 0
 10471  0032FC                     _TMR0_StopTimer:
 10472                           	opt stack 25
 10473                           
 10474                           ;tmr0.c: 60: T0CONbits.TMR0ON = 0;
 10475                           
 10476                           ;incstack = 0
 10477  0032FC  9ED5               	bcf	4053,7,c	;volatile
 10478  0032FE  0012               	return		;funcret
 10479  003300                     __end_of_TMR0_StopTimer:
 10480                           	opt stack 0
 10481                           tosu	equ	0xFFF
 10482                           tosh	equ	0xFFE
 10483                           tosl	equ	0xFFD
 10484                           pclatu	equ	0xFFB
 10485                           pclath	equ	0xFFA
 10486                           tblptru	equ	0xFF8
 10487                           tblptrh	equ	0xFF7
 10488                           tblptrl	equ	0xFF6
 10489                           tablat	equ	0xFF5
 10490                           prodh	equ	0xFF4
 10491                           prodl	equ	0xFF3
 10492                           intcon	equ	0xFF2
 10493                           intcon2	equ	0xFF1
 10494                           intcon3	equ	0xFF0
 10495                           postinc0	equ	0xFEE
 10496                           fsr0h	equ	0xFEA
 10497                           fsr0l	equ	0xFE9
 10498                           wreg	equ	0xFE8
 10499                           indf1	equ	0xFE7
 10500                           postinc1	equ	0xFE6
 10501                           postdec1	equ	0xFE5
 10502                           fsr1h	equ	0xFE2
 10503                           fsr1l	equ	0xFE1
 10504                           indf2	equ	0xFDF
 10505                           postinc2	equ	0xFDE
 10506                           postdec2	equ	0xFDD
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _TMR0_Reload *****************
 10512 ;; Defined at:
 10513 ;;		line 85 in file "mcc_generated_files/tmr0.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      void 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10527 ;;      Params:         0       0       0       0       0       0       0
 10528 ;;      Locals:         0       0       0       0       0       0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0
 10530 ;;      Totals:         0       0       0       0       0       0       0
 10531 ;;Total ram usage:        0 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; This function calls:
 10534 ;;		Nothing
 10535 ;; This function is called by:
 10536 ;;		_INT0_ISR
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text53
 10541  0032E6                     __ptext53:
 10542                           	opt stack 0
 10543  0032E6                     _TMR0_Reload:
 10544                           	opt stack 25
 10545                           
 10546                           ;tmr0.c: 88: TMR0H = timer0ReloadVal >> 8;
 10547                           
 10548                           ;incstack = 0
 10549  0032E6  505D               	movf	_timer0ReloadVal+1,w,c	;volatile
 10550  0032E8  6ED7               	movwf	4055,c	;volatile
 10551                           
 10552                           ;tmr0.c: 89: TMR0L = (uint8_t) timer0ReloadVal;
 10553  0032EA  C05C  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 10554  0032EE  0012               	return		;funcret
 10555  0032F0                     __end_of_TMR0_Reload:
 10556                           	opt stack 0
 10557                           tosu	equ	0xFFF
 10558                           tosh	equ	0xFFE
 10559                           tosl	equ	0xFFD
 10560                           pclatu	equ	0xFFB
 10561                           pclath	equ	0xFFA
 10562                           tblptru	equ	0xFF8
 10563                           tblptrh	equ	0xFF7
 10564                           tblptrl	equ	0xFF6
 10565                           tablat	equ	0xFF5
 10566                           prodh	equ	0xFF4
 10567                           prodl	equ	0xFF3
 10568                           intcon	equ	0xFF2
 10569                           intcon2	equ	0xFF1
 10570                           intcon3	equ	0xFF0
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           indf1	equ	0xFE7
 10576                           postinc1	equ	0xFE6
 10577                           postdec1	equ	0xFE5
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           postdec2	equ	0xFDD
 10583                           fsr2h	equ	0xFDA
 10584                           fsr2l	equ	0xFD9
 10585                           status	equ	0xFD8
 10586                           
 10587 ;; *************** function _TMR0_ReadTimer *****************
 10588 ;; Defined at:
 10589 ;;		line 63 in file "mcc_generated_files/tmr0.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;  readVal         2    6[COMRAM] unsigned int 
 10594 ;;  readValHigh     1    9[COMRAM] unsigned char 
 10595 ;;  readValLow      1    8[COMRAM] unsigned char 
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  2    0[COMRAM] unsigned int 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10605 ;;      Params:         2       0       0       0       0       0       0
 10606 ;;      Locals:         4       0       0       0       0       0       0
 10607 ;;      Temps:          4       0       0       0       0       0       0
 10608 ;;      Totals:        10       0       0       0       0       0       0
 10609 ;;Total ram usage:       10 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_INT0_ISR
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text54
 10619  002F42                     __ptext54:
 10620                           	opt stack 0
 10621  002F42                     _TMR0_ReadTimer:
 10622                           	opt stack 25
 10623                           
 10624                           ;tmr0.c: 65: uint16_t readVal;
 10625                           ;tmr0.c: 66: uint8_t readValLow;
 10626                           ;tmr0.c: 67: uint8_t readValHigh;
 10627                           ;tmr0.c: 69: readValLow = TMR0L;
 10628                           
 10629                           ;incstack = 0
 10630  002F42  CFD6 F009          	movff	4054,TMR0_ReadTimer@readValLow	;volatile
 10631                           
 10632                           ;tmr0.c: 70: readValHigh = TMR0H;
 10633  002F46  CFD7 F00A          	movff	4055,TMR0_ReadTimer@readValHigh	;volatile
 10634                           
 10635                           ;tmr0.c: 73: readVal = ((uint16_t)readValHigh << 8) + readValLow - (timer0ReloadVal);
 10636  002F4A  C05C  F003         	movff	_timer0ReloadVal,??_TMR0_ReadTimer	;volatile
 10637  002F4E  C05D  F004         	movff	_timer0ReloadVal+1,??_TMR0_ReadTimer+1	;volatile
 10638  002F52  1E03               	comf	??_TMR0_ReadTimer,f,c
 10639  002F54  1E04               	comf	??_TMR0_ReadTimer+1,f,c
 10640  002F56  4A03               	infsnz	??_TMR0_ReadTimer,f,c
 10641  002F58  2A04               	incf	??_TMR0_ReadTimer+1,f,c
 10642  002F5A  5009               	movf	TMR0_ReadTimer@readValLow,w,c
 10643  002F5C  C00A  F005         	movff	TMR0_ReadTimer@readValHigh,??_TMR0_ReadTimer+2
 10644  002F60  6A06               	clrf	(??_TMR0_ReadTimer+3)& (0+255),c
 10645  002F62  C005  F006         	movff	??_TMR0_ReadTimer+2,??_TMR0_ReadTimer+3
 10646  002F66  6A05               	clrf	??_TMR0_ReadTimer+2,c
 10647  002F68  2605               	addwf	??_TMR0_ReadTimer+2,f,c
 10648  002F6A  0E00               	movlw	0
 10649  002F6C  2206               	addwfc	??_TMR0_ReadTimer+3,f,c
 10650  002F6E  5003               	movf	??_TMR0_ReadTimer,w,c
 10651  002F70  2405               	addwf	??_TMR0_ReadTimer+2,w,c
 10652  002F72  6E07               	movwf	TMR0_ReadTimer@readVal,c
 10653  002F74  5004               	movf	??_TMR0_ReadTimer+1,w,c
 10654  002F76  2006               	addwfc	??_TMR0_ReadTimer+3,w,c
 10655  002F78  6E08               	movwf	TMR0_ReadTimer@readVal+1,c
 10656                           
 10657                           ;tmr0.c: 75: return readVal;
 10658  002F7A  C007  F001         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
 10659  002F7E  C008  F002         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
 10660  002F82  0012               	return	
 10661  002F84                     __end_of_TMR0_ReadTimer:
 10662                           	opt stack 0
 10663                           tosu	equ	0xFFF
 10664                           tosh	equ	0xFFE
 10665                           tosl	equ	0xFFD
 10666                           pclatu	equ	0xFFB
 10667                           pclath	equ	0xFFA
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           intcon	equ	0xFF2
 10675                           intcon2	equ	0xFF1
 10676                           intcon3	equ	0xFF0
 10677                           postinc0	equ	0xFEE
 10678                           fsr0h	equ	0xFEA
 10679                           fsr0l	equ	0xFE9
 10680                           wreg	equ	0xFE8
 10681                           indf1	equ	0xFE7
 10682                           postinc1	equ	0xFE6
 10683                           postdec1	equ	0xFE5
 10684                           fsr1h	equ	0xFE2
 10685                           fsr1l	equ	0xFE1
 10686                           indf2	equ	0xFDF
 10687                           postinc2	equ	0xFDE
 10688                           postdec2	equ	0xFDD
 10689                           fsr2h	equ	0xFDA
 10690                           fsr2l	equ	0xFD9
 10691                           status	equ	0xFD8
 10692                           
 10693 ;; *************** function _SetRange *****************
 10694 ;; Defined at:
 10695 ;;		line 47 in file "mcc_generated_files/ext_int.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;  new_range       1    wreg     unsigned char 
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;  new_range       1   10[COMRAM] unsigned char 
 10700 ;; Return value:  Size  Location     Type
 10701 ;;                  1    wreg      void 
 10702 ;; Registers used:
 10703 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10709 ;;      Params:         0       0       0       0       0       0       0
 10710 ;;      Locals:         1       0       0       0       0       0       0
 10711 ;;      Temps:         10       0       0       0       0       0       0
 10712 ;;      Totals:        11       0       0       0       0       0       0
 10713 ;;Total ram usage:       11 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_INT1_ISR
 10719 ;;		_INT0_ISR
 10720 ;;		_TMR0_DefaultInterruptHandler
 10721 ;; This function uses a non-reentrant model
 10722 ;;
 10723                           
 10724                           	psect	text55
 10725  002190                     __ptext55:
 10726                           	opt stack 0
 10727  002190                     _SetRange:
 10728                           	opt stack 24
 10729                           
 10730                           ;incstack = 0
 10731                           ;SetRange@new_range stored from wreg
 10732  002190  6E0B               	movwf	SetRange@new_range,c
 10733                           
 10734                           ;ext_int.c: 50: LATC |= (1 << R1_BIT[0]) | (1 << R1_BIT[1]) | (1 << R1_BIT[2]) | (1 << R
      +                          1_BIT[3]) | (1 << R1_BIT[4]);
 10735  002192  0E8A               	movlw	low (_R1_BIT+4)
 10736  002194  6EF6               	movwf	tblptrl,c
 10737  002196  0E06               	movlw	high (_R1_BIT+4)
 10738  002198  6EF7               	movwf	tblptrh,c
 10739  00219A                     	if	0	;tblptru may be non-zero
 10740  00219A                     	endif
 10741  00219A                     	if	0	;tblptru may be non-zero
 10742  00219A                     	endif
 10743  00219A  0008               	tblrd		*
 10744  00219C  CFF5 F001          	movff	tablat,??_SetRange
 10745  0021A0  0E01               	movlw	1
 10746  0021A2  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10747  0021A4  2A01               	incf	??_SetRange,f,c
 10748  0021A6  D002               	goto	i2u417_44
 10749  0021A8                     i2u417_45:
 10750  0021A8  90D8               	bcf	status,0,c
 10751  0021AA  3602               	rlcf	??_SetRange+1,f,c
 10752  0021AC                     i2u417_44:
 10753  0021AC  2E01               	decfsz	??_SetRange,f,c
 10754  0021AE  D7FC               	goto	i2u417_45
 10755  0021B0  0E89               	movlw	low (_R1_BIT+3)
 10756  0021B2  6EF6               	movwf	tblptrl,c
 10757  0021B4  0E06               	movlw	high (_R1_BIT+3)
 10758  0021B6  6EF7               	movwf	tblptrh,c
 10759  0021B8                     	if	0	;tblptru may be non-zero
 10760  0021B8                     	endif
 10761  0021B8                     	if	0	;tblptru may be non-zero
 10762  0021B8                     	endif
 10763  0021B8  0008               	tblrd		*
 10764  0021BA  CFF5 F003          	movff	tablat,??_SetRange+2
 10765  0021BE  0E01               	movlw	1
 10766  0021C0  6E04               	movwf	(??_SetRange+3)& (0+255),c
 10767  0021C2  2A03               	incf	??_SetRange+2,f,c
 10768  0021C4  D002               	goto	i2u418_44
 10769  0021C6                     i2u418_45:
 10770  0021C6  90D8               	bcf	status,0,c
 10771  0021C8  3604               	rlcf	??_SetRange+3,f,c
 10772  0021CA                     i2u418_44:
 10773  0021CA  2E03               	decfsz	??_SetRange+2,f,c
 10774  0021CC  D7FC               	goto	i2u418_45
 10775  0021CE  0E88               	movlw	low (_R1_BIT+2)
 10776  0021D0  6EF6               	movwf	tblptrl,c
 10777  0021D2  0E06               	movlw	high (_R1_BIT+2)
 10778  0021D4  6EF7               	movwf	tblptrh,c
 10779  0021D6                     	if	0	;tblptru may be non-zero
 10780  0021D6                     	endif
 10781  0021D6                     	if	0	;tblptru may be non-zero
 10782  0021D6                     	endif
 10783  0021D6  0008               	tblrd		*
 10784  0021D8  CFF5 F005          	movff	tablat,??_SetRange+4
 10785  0021DC  0E01               	movlw	1
 10786  0021DE  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10787  0021E0  2A05               	incf	??_SetRange+4,f,c
 10788  0021E2  D002               	goto	i2u419_44
 10789  0021E4                     i2u419_45:
 10790  0021E4  90D8               	bcf	status,0,c
 10791  0021E6  3606               	rlcf	??_SetRange+5,f,c
 10792  0021E8                     i2u419_44:
 10793  0021E8  2E05               	decfsz	??_SetRange+4,f,c
 10794  0021EA  D7FC               	goto	i2u419_45
 10795  0021EC  0E87               	movlw	low (_R1_BIT+1)
 10796  0021EE  6EF6               	movwf	tblptrl,c
 10797  0021F0  0E06               	movlw	high (_R1_BIT+1)
 10798  0021F2  6EF7               	movwf	tblptrh,c
 10799  0021F4                     	if	0	;tblptru may be non-zero
 10800  0021F4                     	endif
 10801  0021F4                     	if	0	;tblptru may be non-zero
 10802  0021F4                     	endif
 10803  0021F4  0008               	tblrd		*
 10804  0021F6  CFF5 F007          	movff	tablat,??_SetRange+6
 10805  0021FA  0E01               	movlw	1
 10806  0021FC  6E08               	movwf	(??_SetRange+7)& (0+255),c
 10807  0021FE  2A07               	incf	??_SetRange+6,f,c
 10808  002200  D002               	goto	i2u420_44
 10809  002202                     i2u420_45:
 10810  002202  90D8               	bcf	status,0,c
 10811  002204  3608               	rlcf	??_SetRange+7,f,c
 10812  002206                     i2u420_44:
 10813  002206  2E07               	decfsz	??_SetRange+6,f,c
 10814  002208  D7FC               	goto	i2u420_45
 10815  00220A  0E86               	movlw	low _R1_BIT
 10816  00220C  6EF6               	movwf	tblptrl,c
 10817  00220E                     	if	1	;There is more than 1 active tblptr byte
 10818  00220E  0E06               	movlw	high _R1_BIT
 10819  002210  6EF7               	movwf	tblptrh,c
 10820  002212                     	endif
 10821  002212                     	if	0	;There are less than 3 active tblptr bytes
 10822  002212                     	endif
 10823  002212  0008               	tblrd		*
 10824  002214  CFF5 F009          	movff	tablat,??_SetRange+8
 10825  002218  0E01               	movlw	1
 10826  00221A  6E0A               	movwf	(??_SetRange+9)& (0+255),c
 10827  00221C  2A09               	incf	??_SetRange+8,f,c
 10828  00221E  D002               	goto	i2u421_44
 10829  002220                     i2u421_45:
 10830  002220  90D8               	bcf	status,0,c
 10831  002222  360A               	rlcf	??_SetRange+9,f,c
 10832  002224                     i2u421_44:
 10833  002224  2E09               	decfsz	??_SetRange+8,f,c
 10834  002226  D7FC               	goto	i2u421_45
 10835  002228  500A               	movf	??_SetRange+9,w,c
 10836  00222A  1008               	iorwf	??_SetRange+7,w,c
 10837  00222C  1006               	iorwf	??_SetRange+5,w,c
 10838  00222E  1004               	iorwf	??_SetRange+3,w,c
 10839  002230  1002               	iorwf	??_SetRange+1,w,c
 10840  002232  128B               	iorwf	3979,f,c	;volatile
 10841                           
 10842                           ;ext_int.c: 51: LATB |= (1 << RSET_BIT[0]) | (1 << RSET_BIT[1]) | (1 << RSET_BIT[3]) | (
      +                          1 << RSET_BIT[4]);
 10843  002234  0E8F               	movlw	low (_RSET_BIT+4)
 10844  002236  6EF6               	movwf	tblptrl,c
 10845  002238  0E06               	movlw	high (_RSET_BIT+4)
 10846  00223A  6EF7               	movwf	tblptrh,c
 10847  00223C                     	if	0	;tblptru may be non-zero
 10848  00223C                     	endif
 10849  00223C                     	if	0	;tblptru may be non-zero
 10850  00223C                     	endif
 10851  00223C  0008               	tblrd		*
 10852  00223E  CFF5 F001          	movff	tablat,??_SetRange
 10853  002242  0E01               	movlw	1
 10854  002244  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10855  002246  2A01               	incf	??_SetRange,f,c
 10856  002248  D002               	goto	i2u422_44
 10857  00224A                     i2u422_45:
 10858  00224A  90D8               	bcf	status,0,c
 10859  00224C  3602               	rlcf	??_SetRange+1,f,c
 10860  00224E                     i2u422_44:
 10861  00224E  2E01               	decfsz	??_SetRange,f,c
 10862  002250  D7FC               	goto	i2u422_45
 10863  002252  0E8E               	movlw	low (_RSET_BIT+3)
 10864  002254  6EF6               	movwf	tblptrl,c
 10865  002256  0E06               	movlw	high (_RSET_BIT+3)
 10866  002258  6EF7               	movwf	tblptrh,c
 10867  00225A                     	if	0	;tblptru may be non-zero
 10868  00225A                     	endif
 10869  00225A                     	if	0	;tblptru may be non-zero
 10870  00225A                     	endif
 10871  00225A  0008               	tblrd		*
 10872  00225C  CFF5 F003          	movff	tablat,??_SetRange+2
 10873  002260  0E01               	movlw	1
 10874  002262  6E04               	movwf	(??_SetRange+3)& (0+255),c
 10875  002264  2A03               	incf	??_SetRange+2,f,c
 10876  002266  D002               	goto	i2u423_44
 10877  002268                     i2u423_45:
 10878  002268  90D8               	bcf	status,0,c
 10879  00226A  3604               	rlcf	??_SetRange+3,f,c
 10880  00226C                     i2u423_44:
 10881  00226C  2E03               	decfsz	??_SetRange+2,f,c
 10882  00226E  D7FC               	goto	i2u423_45
 10883  002270  0E8C               	movlw	low (_RSET_BIT+1)
 10884  002272  6EF6               	movwf	tblptrl,c
 10885  002274  0E06               	movlw	high (_RSET_BIT+1)
 10886  002276  6EF7               	movwf	tblptrh,c
 10887  002278                     	if	0	;tblptru may be non-zero
 10888  002278                     	endif
 10889  002278                     	if	0	;tblptru may be non-zero
 10890  002278                     	endif
 10891  002278  0008               	tblrd		*
 10892  00227A  CFF5 F005          	movff	tablat,??_SetRange+4
 10893  00227E  0E01               	movlw	1
 10894  002280  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10895  002282  2A05               	incf	??_SetRange+4,f,c
 10896  002284  D002               	goto	i2u424_44
 10897  002286                     i2u424_45:
 10898  002286  90D8               	bcf	status,0,c
 10899  002288  3606               	rlcf	??_SetRange+5,f,c
 10900  00228A                     i2u424_44:
 10901  00228A  2E05               	decfsz	??_SetRange+4,f,c
 10902  00228C  D7FC               	goto	i2u424_45
 10903  00228E  0E8B               	movlw	low _RSET_BIT
 10904  002290  6EF6               	movwf	tblptrl,c
 10905  002292                     	if	1	;There is more than 1 active tblptr byte
 10906  002292  0E06               	movlw	high _RSET_BIT
 10907  002294  6EF7               	movwf	tblptrh,c
 10908  002296                     	endif
 10909  002296                     	if	0	;There are less than 3 active tblptr bytes
 10910  002296                     	endif
 10911  002296  0008               	tblrd		*
 10912  002298  CFF5 F007          	movff	tablat,??_SetRange+6
 10913  00229C  0E01               	movlw	1
 10914  00229E  6E08               	movwf	(??_SetRange+7)& (0+255),c
 10915  0022A0  2A07               	incf	??_SetRange+6,f,c
 10916  0022A2  D002               	goto	i2u425_44
 10917  0022A4                     i2u425_45:
 10918  0022A4  90D8               	bcf	status,0,c
 10919  0022A6  3608               	rlcf	??_SetRange+7,f,c
 10920  0022A8                     i2u425_44:
 10921  0022A8  2E07               	decfsz	??_SetRange+6,f,c
 10922  0022AA  D7FC               	goto	i2u425_45
 10923  0022AC  5008               	movf	??_SetRange+7,w,c
 10924  0022AE  1006               	iorwf	??_SetRange+5,w,c
 10925  0022B0  1004               	iorwf	??_SetRange+3,w,c
 10926  0022B2  1002               	iorwf	??_SetRange+1,w,c
 10927  0022B4  128A               	iorwf	3978,f,c	;volatile
 10928                           
 10929                           ;ext_int.c: 53: LATC &= ~(1 << R1_BIT[new_range - 1]);
 10930  0022B6  0EFF               	movlw	255
 10931  0022B8  6E01               	movwf	??_SetRange& (0+255),c
 10932  0022BA  0EFF               	movlw	255
 10933  0022BC  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10934  0022BE  500B               	movf	SetRange@new_range,w,c
 10935  0022C0  6E03               	movwf	(??_SetRange+2)& (0+255),c
 10936  0022C2  6A04               	clrf	(??_SetRange+3)& (0+255),c
 10937  0022C4  5001               	movf	??_SetRange,w,c
 10938  0022C6  2603               	addwf	??_SetRange+2,f,c
 10939  0022C8  5002               	movf	??_SetRange+1,w,c
 10940  0022CA  2204               	addwfc	??_SetRange+3,f,c
 10941  0022CC  0E86               	movlw	low _R1_BIT
 10942  0022CE  2403               	addwf	??_SetRange+2,w,c
 10943  0022D0  6EF6               	movwf	tblptrl,c
 10944  0022D2  0E06               	movlw	high _R1_BIT
 10945  0022D4  2004               	addwfc	??_SetRange+3,w,c
 10946  0022D6  6EF7               	movwf	tblptrh,c
 10947  0022D8                     	if	0	;There are less than 3 active tblptr bytes
 10948  0022D8                     	endif
 10949  0022D8  0008               	tblrd		*
 10950  0022DA  CFF5 F005          	movff	tablat,??_SetRange+4
 10951  0022DE  0E01               	movlw	1
 10952  0022E0  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10953  0022E2  2A05               	incf	??_SetRange+4,f,c
 10954  0022E4  D002               	goto	i2u426_44
 10955  0022E6                     i2u426_45:
 10956  0022E6  90D8               	bcf	status,0,c
 10957  0022E8  3606               	rlcf	??_SetRange+5,f,c
 10958  0022EA                     i2u426_44:
 10959  0022EA  2E05               	decfsz	??_SetRange+4,f,c
 10960  0022EC  D7FC               	goto	i2u426_45
 10961  0022EE  5006               	movf	??_SetRange+5,w,c
 10962  0022F0  0AFF               	xorlw	255
 10963  0022F2  168B               	andwf	3979,f,c	;volatile
 10964                           
 10965                           ;ext_int.c: 54: LATB &= ~(1 << RSET_BIT[new_range - 1]);
 10966  0022F4  0EFF               	movlw	255
 10967  0022F6  6E01               	movwf	??_SetRange& (0+255),c
 10968  0022F8  0EFF               	movlw	255
 10969  0022FA  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10970  0022FC  500B               	movf	SetRange@new_range,w,c
 10971  0022FE  6E03               	movwf	(??_SetRange+2)& (0+255),c
 10972  002300  6A04               	clrf	(??_SetRange+3)& (0+255),c
 10973  002302  5001               	movf	??_SetRange,w,c
 10974  002304  2603               	addwf	??_SetRange+2,f,c
 10975  002306  5002               	movf	??_SetRange+1,w,c
 10976  002308  2204               	addwfc	??_SetRange+3,f,c
 10977  00230A  0E8B               	movlw	low _RSET_BIT
 10978  00230C  2403               	addwf	??_SetRange+2,w,c
 10979  00230E  6EF6               	movwf	tblptrl,c
 10980  002310  0E06               	movlw	high _RSET_BIT
 10981  002312  2004               	addwfc	??_SetRange+3,w,c
 10982  002314  6EF7               	movwf	tblptrh,c
 10983  002316                     	if	0	;There are less than 3 active tblptr bytes
 10984  002316                     	endif
 10985  002316  0008               	tblrd		*
 10986  002318  CFF5 F005          	movff	tablat,??_SetRange+4
 10987  00231C  0E01               	movlw	1
 10988  00231E  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10989  002320  2A05               	incf	??_SetRange+4,f,c
 10990  002322  D002               	goto	i2u427_44
 10991  002324                     i2u427_45:
 10992  002324  90D8               	bcf	status,0,c
 10993  002326  3606               	rlcf	??_SetRange+5,f,c
 10994  002328                     i2u427_44:
 10995  002328  2E05               	decfsz	??_SetRange+4,f,c
 10996  00232A  D7FC               	goto	i2u427_45
 10997  00232C  5006               	movf	??_SetRange+5,w,c
 10998  00232E  0AFF               	xorlw	255
 10999  002330  168A               	andwf	3978,f,c	;volatile
 11000  002332  0012               	return		;funcret
 11001  002334                     __end_of_SetRange:
 11002                           	opt stack 0
 11003                           tosu	equ	0xFFF
 11004                           tosh	equ	0xFFE
 11005                           tosl	equ	0xFFD
 11006                           pclatu	equ	0xFFB
 11007                           pclath	equ	0xFFA
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon2	equ	0xFF1
 11016                           intcon3	equ	0xFF0
 11017                           postinc0	equ	0xFEE
 11018                           fsr0h	equ	0xFEA
 11019                           fsr0l	equ	0xFE9
 11020                           wreg	equ	0xFE8
 11021                           indf1	equ	0xFE7
 11022                           postinc1	equ	0xFE6
 11023                           postdec1	equ	0xFE5
 11024                           fsr1h	equ	0xFE2
 11025                           fsr1l	equ	0xFE1
 11026                           indf2	equ	0xFDF
 11027                           postinc2	equ	0xFDE
 11028                           postdec2	equ	0xFDD
 11029                           fsr2h	equ	0xFDA
 11030                           fsr2l	equ	0xFD9
 11031                           status	equ	0xFD8
 11032                           tosu	equ	0xFFF
 11033                           tosh	equ	0xFFE
 11034                           tosl	equ	0xFFD
 11035                           pclatu	equ	0xFFB
 11036                           pclath	equ	0xFFA
 11037                           tblptru	equ	0xFF8
 11038                           tblptrh	equ	0xFF7
 11039                           tblptrl	equ	0xFF6
 11040                           tablat	equ	0xFF5
 11041                           prodh	equ	0xFF4
 11042                           prodl	equ	0xFF3
 11043                           intcon	equ	0xFF2
 11044                           intcon2	equ	0xFF1
 11045                           intcon3	equ	0xFF0
 11046                           postinc0	equ	0xFEE
 11047                           fsr0h	equ	0xFEA
 11048                           fsr0l	equ	0xFE9
 11049                           wreg	equ	0xFE8
 11050                           indf1	equ	0xFE7
 11051                           postinc1	equ	0xFE6
 11052                           postdec1	equ	0xFE5
 11053                           fsr1h	equ	0xFE2
 11054                           fsr1l	equ	0xFE1
 11055                           indf2	equ	0xFDF
 11056                           postinc2	equ	0xFDE
 11057                           postdec2	equ	0xFDD
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062                           	psect	text56
 11063  000000                     __ptext56:
 11064                           	opt stack 0
 11065                           tosu	equ	0xFFF
 11066                           tosh	equ	0xFFE
 11067                           tosl	equ	0xFFD
 11068                           pclatu	equ	0xFFB
 11069                           pclath	equ	0xFFA
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           intcon2	equ	0xFF1
 11078                           intcon3	equ	0xFF0
 11079                           postinc0	equ	0xFEE
 11080                           fsr0h	equ	0xFEA
 11081                           fsr0l	equ	0xFE9
 11082                           wreg	equ	0xFE8
 11083                           indf1	equ	0xFE7
 11084                           postinc1	equ	0xFE6
 11085                           postdec1	equ	0xFE5
 11086                           fsr1h	equ	0xFE2
 11087                           fsr1l	equ	0xFE1
 11088                           indf2	equ	0xFDF
 11089                           postinc2	equ	0xFDE
 11090                           postdec2	equ	0xFDD
 11091                           fsr2h	equ	0xFDA
 11092                           fsr2l	equ	0xFD9
 11093                           status	equ	0xFD8
 11094                           
 11095                           	psect	rparam
 11096  0000                     tosu	equ	0xFFF
 11097                           tosh	equ	0xFFE
 11098                           tosl	equ	0xFFD
 11099                           pclatu	equ	0xFFB
 11100                           pclath	equ	0xFFA
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           intcon2	equ	0xFF1
 11109                           intcon3	equ	0xFF0
 11110                           postinc0	equ	0xFEE
 11111                           fsr0h	equ	0xFEA
 11112                           fsr0l	equ	0xFE9
 11113                           wreg	equ	0xFE8
 11114                           indf1	equ	0xFE7
 11115                           postinc1	equ	0xFE6
 11116                           postdec1	equ	0xFE5
 11117                           fsr1h	equ	0xFE2
 11118                           fsr1l	equ	0xFE1
 11119                           indf2	equ	0xFDF
 11120                           postinc2	equ	0xFDE
 11121                           postdec2	equ	0xFDD
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126                           	psect	temp
 11127  00005F                     btemp:
 11128                           	opt stack 0
 11129  00005F                     	ds	1
 11130  0000                     int$flags	set	btemp
 11131                           tosu	equ	0xFFF
 11132                           tosh	equ	0xFFE
 11133                           tosl	equ	0xFFD
 11134                           pclatu	equ	0xFFB
 11135                           pclath	equ	0xFFA
 11136                           tblptru	equ	0xFF8
 11137                           tblptrh	equ	0xFF7
 11138                           tblptrl	equ	0xFF6
 11139                           tablat	equ	0xFF5
 11140                           prodh	equ	0xFF4
 11141                           prodl	equ	0xFF3
 11142                           intcon	equ	0xFF2
 11143                           intcon2	equ	0xFF1
 11144                           intcon3	equ	0xFF0
 11145                           postinc0	equ	0xFEE
 11146                           fsr0h	equ	0xFEA
 11147                           fsr0l	equ	0xFE9
 11148                           wreg	equ	0xFE8
 11149                           indf1	equ	0xFE7
 11150                           postinc1	equ	0xFE6
 11151                           postdec1	equ	0xFE5
 11152                           fsr1h	equ	0xFE2
 11153                           fsr1l	equ	0xFE1
 11154                           indf2	equ	0xFDF
 11155                           postinc2	equ	0xFDE
 11156                           postdec2	equ	0xFDD
 11157                           fsr2h	equ	0xFDA
 11158                           fsr2l	equ	0xFD9
 11159                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    143
    Data        3
    BSS         25
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     91      94
    BANK0           160     85     112
    BANK1           256      4       6
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_7(CODE[11]), STR_5(CODE[19]), STR_4(CODE[11]), STR_3(CODE[17]), 
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_6(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> _doprnt@c(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_7(CODE[11]), STR_6(CODE[23]), STR_5(CODE[19]), STR_4(CODE[11]), 
		 -> STR_3(CODE[17]), STR_2(CODE[11]), STR_1(CODE[11]), 

    S911__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S911__prbuf$ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendUInt@displayString(COMRAM[10]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    lcd_sendStringToPos@charString	PTR const unsigned char  size(2) Largest target is 16
		 -> UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    lcd_sendString@a	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), lcd_sendUInt@displayString(COMRAM[10]), lcd_sendInt@displayString(COMRAM[10]), UpdateDisplay@range_string(BANK0[16]), 
		 -> UpdateDisplay@cap_string(BANK0[16]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_INT0_ISR
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->_SetRange
    _INT1_ISR->_printf
    _printf->__doprnt
    ___lwtoft->___ftpack
    _UpdateDisplay->_sprintf
    _sprintf->__doprnt
    __doprnt->___fttol
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftadd
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->___wmul
    _lcd_sendStringToPos->_lcd_sendString
    _lcd_sendStringToPos->_lcd_setPosition
    _lcd_setPosition->i2_lcd_sendCommand
    i2_lcd_sendCommand->i2__lcd_Port
    _lcd_sendString->_lcd_sendChar
    _lcd_sendChar->i2__lcd_Port
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INT1_ISR->_UpdateDisplay
    _printf->__doprnt
    _INT0_ISR->_UpdateDisplay
    _UpdateDisplay->_sprintf
    _sprintf->__doprnt

Critical Paths under _main in BANK1

    _main->_lcd_init
    _lcd_init->_lcd_sendCommand
    _lcd_clear->_lcd_sendCommand
    _lcd_sendCommand->__lcd_Port
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     394
                  _SYSTEM_Initialize
                          _lcd_clear
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     198
                                              3 BANK1      1     1      0
                          __lcd_Port
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     110
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (2) _lcd_sendCommand                                      2     2      0     110
                                              1 BANK1      2     2      0
                          __lcd_Port
 ---------------------------------------------------------------------------------
 (3) __lcd_Port                                            1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      86
                                              2 BANK1      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0  174672
                                             71 BANK0     14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0      44
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         1     1      0      44
                                             11 COMRAM     1     1      0
                           _SetRange
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0  103623
                           _SetRange
                      _UpdateDisplay
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              10     6      4   48621
                                             81 COMRAM     6     6      0
                                             27 BANK0      4     0      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             4     4      0   71005
                                             87 COMRAM     4     4      0
                           _SetRange
                     _TMR0_ReadTimer
                        _TMR0_Reload
                     _TMR0_StopTimer
                      _UpdateDisplay
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (6) i2_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) _UpdateDisplay                                       32    32      0   54958
                                             39 BANK0     32    32      0
                            ___ftdiv
                             ___ftge
                _lcd_sendStringToPos
                            _sprintf
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             18     6     12   49355
                                             81 COMRAM     6     6      0
                                             27 BANK0     12     0     12
                            ___ftdiv (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (7) __doprnt                                             40    34      6   48388
                                             69 COMRAM    12     6      6
                                              0 BANK0     27    27      0
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (8) _scale                                               10     7      3   10667
                                             47 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) _fround                                              13    10      3   10469
                                             47 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    4559
                                             32 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (8) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2293
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___llmod                                              9     1      8     773
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             13     5      8     750
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     546
                                             54 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    3962
                                             32 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    3563
                                             20 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     160
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     904
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lcd_sendStringToPos                                  4     1      3    1482
                                              8 COMRAM     4     1      3
                     _lcd_sendString
                    _lcd_setPosition
 ---------------------------------------------------------------------------------
 (8) _lcd_setPosition                                      5     4      1     636
                                              3 COMRAM     5     4      1
                  i2_lcd_sendCommand
 ---------------------------------------------------------------------------------
 (9) i2_lcd_sendCommand                                    2     2      0     110
                                              1 COMRAM     2     2      0
                        i2__lcd_Port
 ---------------------------------------------------------------------------------
 (8) _lcd_sendString                                       4     2      2     524
                                              4 COMRAM     4     2      2
                       _lcd_sendChar
 ---------------------------------------------------------------------------------
 (9) _lcd_sendChar                                         3     3      0     178
                                              1 COMRAM     3     3      0
                        i2__lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2__lcd_Port                                         1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    3003
                                             47 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ReadTimer                                      10     8      2      69
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (7) _SetRange                                            11    11      0      44
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _lcd_clear
     _lcd_sendCommand
       __lcd_Port
   _lcd_init
     __lcd_Port
     _lcd_sendCommand
       __lcd_Port

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     _SetRange
     _TMR0_ReadTimer
     _TMR0_Reload
     _TMR0_StopTimer
     _UpdateDisplay
       ___ftdiv
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       _lcd_sendStringToPos
         _lcd_sendString
           _lcd_sendChar
             i2__lcd_Port
         _lcd_setPosition
           i2_lcd_sendCommand
             i2__lcd_Port
       _sprintf
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
           ___ftsub *
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
             _EUSART1_Write
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     i2_TMR0_StartTimer
   _INT1_ISR
     _SetRange
     _UpdateDisplay
       ___ftdiv
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       _lcd_sendStringToPos
         _lcd_sendString
           _lcd_sendChar
             i2__lcd_Port
         _lcd_setPosition
           i2_lcd_sendCommand
             i2__lcd_Port
       _sprintf
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
           ___ftsub *
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
             _EUSART1_Write
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _printf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
         ___ftsub *
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
           _EUSART1_Write
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _SetRange

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      4       6       6        2.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     55      70       4       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5B      5E       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4       9        0.0%
DATA                 0      0      D4      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Jan 23 23:54:53 2017

                           ?_lcd_sendChar 0001                           ??_UpdateDisplay 0058  
                            ___awdiv@sign 000C                       ___wmul@multiplicand 0011  
                         _timer0ReloadVal 005C                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0020  
                            ___ftadd@exp2 001F                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 001E                           ?_lcd_sendString 0005  
                        ?_lcd_sendCommand 0001                                       l353 3044  
                                     l355 3050                                       l284 3232  
                                     l357 305C                                       l359 3068  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                            ___awmod@sign 0006                                       tosl 000FFD  
                                     wreg 000FE8                              ___ftdiv@cntr 0039  
                            ___ftdiv@sign 003E                                      l3673 3052  
                                    l3677 305E                                      l3669 3046  
                             i2__lcd_Port 3136                                      STR_1 06EC  
                                    STR_2 06D6                                      STR_3 06BA  
                                    STR_4 06E1                                      STR_5 06A7  
                                    STR_6 0690                                      STR_7 06CB  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      u4637 2C8C  
                                    u4647 2CA4                                      u4657 2CBC  
                                    u4667 317A                                      i2l56 1E46  
                                    i2l59 1F82                                      _WPUB 000F61  
                           _EUSART1_Write 32C6                                      _main 3216  
                            ___ftpack@arg 0001                          ?_lcd_setPosition 0004  
                            ___ftpack@exp 0004                           _TMR0_StartTimer 32F0  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 005F                             __CFG_BORV$190 000000  
             __end_of_lcd_sendStringToPos 3286                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00A0  
                           __CFG_IESO$OFF 000000                            ??_lcd_sendChar 0002  
                            ___ftmul@cntr 002E                              ___param_bank 000000  
                            ___ftmul@sign 002F                              ___fttol@exp1 0045  
                            ___fttol@lval 0041                   __end_of_TMR0_Initialize 2EBC  
                        __end_of_INT0_ISR 2498                          __end_of_INT1_ISR 2C7E  
          ??_TMR0_DefaultInterruptHandler 000C            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 32B8                                     ?_main 0001  
                         __end_of___awdiv 2B82                           __end_of___ftadd 2190  
                         __end_of___awmod 2D66                 TMR0_ReadTimer@readValHigh 000A  
                         __end_of___ftdiv 29C0                           __end_of___ftneg 31F6  
                         __end_of___lldiv 2C04                           __end_of___ftmul 27E6  
                                   _T0CON 000FD5                           ___awdiv@divisor 0009  
                         __end_of___llmod 2DCC                           __end_of___ftsub 2FC4  
                         __end_of___fttol 28DA                            __CFG_DEBUG$OFF 000000  
                                   i2l131 005A                                     i2l135 0064  
                                   i2l129 004E                                     i2l260 32C8  
                                   i2l353 3140                                     i2l433 1388  
                                   i2l355 314A                                     i2l357 3154  
                                   i2l197 2EE0                                     i2l359 315E  
                                   i2l490 141A                                     i2l475 10EC  
                                   i2l804 2102                                     i2l813 211E  
                                   i2l734 26E0                                     i2l831 252A  
                                   i2l824 298E                                     i2l832 2552  
                                   i2l766 2A4E                                     i2l838 25B8  
                                   i2l863 31E8                                     i2l935 2BF2  
                                   i2l793 2052                                     i2l945 2DBA  
                         ___awdiv@counter 000B                                     i2l789 2028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                         __end_of__doprnt 1800                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0100                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0011                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 3136                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                          __end_of_RSET_BIT 0690  
                         __end_of_dpowers 0629                                     _scale 1800  
                                   _range 00CE                           __end_of_isdigit 3252  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   _putch 32DC                            ?_EUSART1_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                           __end_of_sprintf 2F42  
                          __CFG_HFOFST$ON 000000                            __CFG_FOSC$HSMP 000000  
                          __CFG_PBADEN$ON 000000                           __initialization 2FC4  
              __end_of_EUSART1_Initialize 329C                              __end_of_main 3234  
                            _stored_range 00BB                      lcd_sendStringToPos@x 000C  
                    lcd_sendStringToPos@y 0009               ?_INTERRUPT_InterruptManager 0001  
                           lcd_sendChar@a 0004                             lcd_sendChar@y 0003  
                                  ??_main 0104                             ___fttol@sign1 0040  
                        __end_of_SetRange 2334                             __activetblptr 000002  
                    __size_of__tdiv_to_l_ 0132                   __end_of_TMR0_StartTimer 32F4  
                        ___llmod@dividend 000E                                    ?_scale 0030  
                           i2__lcd_Port@a 0001                          ___awdiv@dividend 0007  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                        __end_of___ftpack 2A6E                          __end_of___lltoft 2E28  
                                  _R1_BIT 0686                                    i2l3001 24F0  
                                  i2l3101 26CE                                    i2l3103 26DA  
                                  i2l3031 257E                                    i2l3121 2ACE  
                                  i2l3041 25A6                                    i2l3211 2D88  
                                  i2l3051 25E8                                    i2l3043 25B2  
                                  i2l3035 258E                                    i2l3117 2A9E  
                                  i2l3109 2F9A                                    i2l3141 2812  
                                  i2l3221 2DD2                                    i2l3301 087A  
                                  i2l3127 2AFA                                    i2l3215 2DAC  
                                  i2l3207 2D78                                    i2l3223 2DDE  
                                  i2l3071 2648                                    i2l3209 2D84  
                                  i2l3057 2606                                    i2l3401 0C46  
                                  i2l3321 08F0                                    i2l3305 088A  
                                  i2l3171 28AC                                    i2l3163 2888  
                                  i2l3091 26A6                                    i2l3411 0CCE  
                                  i2l3403 0C76                                    i2l3331 096C  
                                  i2l3315 08BE                                    i2l3307 0890  
                                  i2l3261 30C2                                    i2l3173 28B2  
                                  i2l3501 10F0                                    i2l3405 0C8C  
                                  i2l3325 092A                                    i2l3309 0896  
                          __CFG_WDTEN$OFF 000000                                    i2l3247 2E50  
                                  i2l2711 2090                                    i2l3159 2878  
                                  i2l3191 2BB4                                    i2l3095 26B6  
                                  i2l3079 2678                                    i2l3431 0DBE  
                                  i2l3415 0CF4                                    i2l3351 0A46  
                                  i2l3335 09AE                                    i2l3343 09EE  
                                  i2l3319 08E4                                    i2l3271 0744  
                                  i2l3257 30AC                                    i2l2721 20C6  
                                  i2l3177 28C8                                    i2l3169 28A0  
                                  i2l3601 15B4                                    i2l3513 1172  
                                  i2l3425 0D52                                    i2l3345 0A08  
                                  i2l3337 09B6                                    i2l3329 0954  
                                  i2l3281 07A4                                    i2l3265 06FC  
                                  i2l2651 2A1C                                    i2l2643 29DE  
                                  i2l2731 20FA                                    i2l2723 20CE  
                                  i2l3187 2BA4                                    i2l3531 130E  
                                  i2l3451 0E60                                    i2l3443 0E04  
                                  i2l3371 0B00                                    i2l3363 0AAC  
                                  i2l3347 0A2E                                    i2l3355 0A4C  
                                  i2l3275 0772                                    i2l2653 2A3A  
                                  i2l2645 29E8                                    i2l2717 20B2  
                                  i2l3189 2BB0                                    i2l2821 2B40  
                                  i2l2813 2B22                                    i2l3613 1638  
                                  i2l3605 15E8                                    i2l3541 137A  
                                  i2l3525 1284                                    i2l3517 11C4  
                                  i2l3509 1148                                    i2l3461 0ECC  
                                  i2l3429 0DB8                                    i2l3357 0A90  
                                  i2l2655 2A44                                    i2l2647 2A06  
                                  i2l2639 29D0                                    i2l2719 20BC  
                                  i2l3199 2BE4                                    i2l2831 2B60  
                                  i2l2823 2B44                                    i2l2807 2B12  
                                  i2l3607 15F2                                    i2l3535 1348  
                                  i2l3527 12B2                                    i2l3471 0F4E  
                                  i2l3463 0EE0                                    i2l3455 0E9A  
                                  i2l3447 0E46                                    i2l3295 082A  
                                  i2l3713 2968                                    i2l2737 213A  
                                  i2l2729 20F0                                    i2l3625 16C8  
                                  i2l3617 1662                                    i2l3609 15FE  
                                  i2l3529 1300                                    i2l3481 101E  
                                  i2l3473 0F5E                                    i2l3289 0804  
                                  i2l3641 17DA                                    i2l3801 2EE2  
                                  i2l2747 216A                                    i2l2819 2B38  
                                  i2l2835 2B6A                                    i2l2851 2D0A  
                                  i2l2763 2742                                    i2l3635 179A  
                                  i2l3619 1676                                    i2l3547 13C6  
                                  i2l3539 1372                                    i2l3483 1040  
                                  i2l3459 0EC4                                    i2l3395 0C0A  
                                  i2l3387 0BA2                                    i2l3643 17F6  
                                  i2l3299 0864                                    i2l3731 1E4A  
                                  i2l2861 2D2C                                    i2l2781 2784  
                                  i2l2757 271A                                    i2l3637 17B6  
                                  i2l3629 16E6                                    i2l3565 14AE  
                                  i2l3557 1452                                    i2l3549 13FA  
                                  i2l3493 10B2                                    i2l3485 104E  
                                  i2l3469 0F32                                    i2l3741 1F36  
                                  i2l2695 2060                                    i2l2839 2B78  
                                  i2l2863 2D30                                    i2l2871 2D4E  
                                  i2l2855 2D16                                    i2l2791 27AC  
                                  i2l2935 1DF6                                    i2l2927 1D36  
                                  i2l3639 17C4                                    i2l3583 151E  
                                  i2l3567 14B4                                    i2l3559 1488  
                                  i2l3495 10BA                                    i2l3399 0C30  
                                  i2l3735 1EB0                                    i2l3831 2C16  
                                  i2l2689 2036                                    i2l2777 2774  
                                  i2l3593 1576                                    i2l3497 10CE  
                                  i2l3489 1088                                    i2l3745 1F5A  
                                  i2l2891 3156                                    i2l2883 3142  
                                  i2l2875 2D5C                                    i2l2867 2D44  
                                  i2l2859 2D24                                    i2l2787 279C  
                                  i2l2955 19D8                                    i2l3587 154A  
                                  i2l3579 14FA                                    i2l3835 2C24  
                                  i2l3693 292A                                    i2l2973 1BCC  
                                  i2l2949 1934                                    i2l3837 2C2A  
                                  i2l3687 2902                                    i2l2887 314C  
                                  i2l2967 1B28                                    i2l2959 19FC  
                                  i2l3599 15AA                                    i2l3855 233E  
                                  i2l3847 2C5A                                    i2l2985 324A  
                                  i2l2995 24C4                                    i2l3875 2450  
                                  i2l3885 247C                                    u242_41 1FF4  
                                  u243_41 2008                                    u315_41 27F6  
                                  u263_41 2702                                    _RCREG1 000FAE  
                                  u432_41 28EA                                    u265_41 272A  
                        __end_of___lwtoft 31D2                                    u434_41 2912  
                                  u294_41 24A8                                    _RCSTA1 000FAB  
                                  u296_41 24D4                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                              __doprnt$1659 0060  
                          __CFG_XINST$OFF 000000                          __end_of__powers_ 0677  
                        __end_of_lcd_init 2CF6                              ?_TMR0_Reload 0001  
                                  ___ftge 2A6E                          lcd_sendChar@temp 0002  
                                  ___wmul 3188                                 ??___awdiv 000B  
                               ??___ftadd 001B                            __CFG_STVREN$ON 000000  
                               ??___awmod 0005                                 ??___ftdiv 0036  
                               ??___ftneg 0004                                 ??___lldiv 0009  
                               ??___ftmul 0027                                 ??___llmod 0016  
                               ??___ftsub 0027                                 ??___fttol 003B  
                               ??__doprnt 004C                          ?_TMR0_Initialize 0001  
                                  _fround 1BF0                                    clear_0 2FE8  
                        ___awdiv@quotient 000D                           ___awmod@divisor 0003  
                                  _result 00B5                              __doprnt@flag 0067  
                         ___awmod@counter 0005                                    _printf 306C  
                                  _toggle 00CF                              __doprnt@fval 0075  
                            __doprnt@prec 0078                     ___ftmul@f3_as_product 002B  
                               ??_isdigit 0001                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                      __end_of_lcd_sendChar 3036  
                        lcd_sendCommand@a 0102                           ??_EUSART1_Write 0001  
TMR0_SetInterruptHandler@InterruptHandler 0100                                 ??_sprintf 0052  
           __size_of_INTERRUPT_Initialize 0004                         _SYSTEM_Initialize 3252  
                              __accesstop 0060                   __end_of__initialization 2FF0  
                               ?_INT0_ISR 0001                                 ?_INT1_ISR 0001  
                              ___ftadd@f1 0015                                ___ftadd@f2 0018  
                              ___ftge@ff1 0001                                ___ftge@ff2 0004  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                              ___ftdiv@f1 0030                                ___ftdiv@f2 0033  
                              ___ftdiv@f3 003A                                ___ftneg@f1 0001  
                      __size_of__lcd_Port 0036                                ___ftmul@f1 0021  
                              ___ftmul@f2 0024                                ___ftsub@f1 0021  
                              ___ftsub@f2 0024                                ___fttol@f1 0037  
                          __pcstackCOMRAM 0001                              __pidataBANK0 3300  
                     ??_SYSTEM_Initialize 0104                          ??_lcd_sendString 0007  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0009  
                           __end_of_scale 1BF0                             __end_of_putch 32E6  
                 __size_of_TMR0_ReadTimer 0042                                ___lwtoft@c 0009  
             __size_of_EXT_INT_Initialize 000E                                __div_to_l_ 25CA  
                      __size_of_lcd_clear 000E                                __doprnt@ap 004A  
                              __doprnt@cp 0063                                __doprnt@pb 0046  
                         __div_to_l_@exp1 000C                          ?_TMR0_StartTimer 0001  
                         __div_to_l_@cntr 000B                                   ??_scale 0033  
               __end_of_SYSTEM_Initialize 326C                           __div_to_l_@quot 0007  
                            ?i2__lcd_Port 0001                                   ??_putch 0002  
                              __pbssBANK0 00B5                           __CFG_PLLCFG$OFF 000000  
                              ??_INT0_ISR 0058                 UpdateDisplay@range_string 0087  
                              ??_INT1_ISR 0058                                __pnvCOMRAM 005C  
                           __div_to_l_@f1 0001                             __div_to_l_@f2 0004  
                               ?_SetRange 0001                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0001          __end_of_TMR0_SetInterruptHandler 32DC  
                 __size_of_TMR0_StopTimer 0004                                   ?___wmul 000F  
                              ??_TMR0_ISR 000D                        __CFG_CCP3MX$PORTB5 000000  
                   __end_of_UpdateDisplay 1FE4                                   ?_fround 0030  
                               ?___ftpack 0001                                   ?_printf 007B  
                               ?___lltoft 0009                                 ?___lwtoft 0009  
                       __end_of__lcd_Port 306C                                   _OSCCON2 000FD2  
                        lcd_setPosition@i 0006                          lcd_setPosition@j 0007  
                        lcd_setPosition@x 0005                          lcd_setPosition@y 0004  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                __size_of_lcd_sendCommand 0026                                 ?_lcd_init 0001  
                              ??_SetRange 0001                                _auto_range 00CD  
                         __CFG_PWRTEN$OFF 000000                         __end_of__npowers_ 0650  
                                 __Hparam 0000                                _scale$1658 0033  
                                 __Lparam 0000                         __end_of_lcd_clear 32AA  
                         __size_of___ftge 0090                                   ___awdiv 2AFE  
                __size_of_lcd_setPosition 0050                                   ___ftadd 1FE4  
                                 ___awmod 2CF6                                   ___ftdiv 28DA  
                                 ___ftneg 31D2                                   ___lldiv 2B82  
                         __size_of___wmul 0026                                   ___ftmul 26F2  
                                 ___llmod 2D66                                   ___ftsub 2F84  
                                 ___fttol 27E6              __size_of_lcd_sendStringToPos 001A  
                            __psmallconst 0600                      __size_of_TMR0_Reload 000A  
                                 __doprnt 06F8                                   __pcinit 2FC4  
                              ??___ftpack 0006                           __size_of_fround 0246  
                                 __ramtop 0600                                ??___lltoft 000D  
                                 __ptext0 3216                                   __ptext1 2C7E  
                                 __ptext2 329C                                   __ptext3 3162  
                                 __ptext4 3036                                   __ptext5 3252  
                                 __ptext6 2E78                                   __ptext7 32F0  
                                 __ptext8 32D2                                   __ptext9 30D6  
                         __size_of_printf 0036                     __size_of_lcd_sendChar 0038  
                              ??___lwtoft 000C                                 _T0CONbits 000FD5  
                             ?__div_to_l_ 0001                                   _dpowers 0601  
                   _OSCILLATOR_Initialize 32AA                                   _isdigit 3234  
                                 _reading 00B8                          ___awmod@dividend 0001  
                      _EUSART1_Initialize 3286                  ??_PIN_MANAGER_Initialize 0100  
              __size_of_SYSTEM_Initialize 001A                                   _sprintf 2F00  
                           __doprnt@width 006F                                ??_lcd_init 0103  
                    end_of_initialization 2FF0                         i2_lcd_sendCommand 31F6  
                                 ftoa@buf 00BC                       ?_EUSART1_Initialize 0001  
                      ?i2_lcd_sendCommand 0001                             __Lmediumconst 0000  
                         ___lldiv@divisor 0005                           ___lldiv@counter 000D  
                     ??i2_lcd_sendCommand 0002                     TMR0_ReadTimer@readVal 0007  
                                 printf@f 007B                              _lcd_sendChar 2FFE  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                            __tdiv_to_l_@f1 0001  
                          __tdiv_to_l_@f2 0004                            _TMR0_ReadTimer 2F42  
                    ??_EUSART1_Initialize 0100                       __end_of_cal_current 0686  
                           ??__tdiv_to_l_ 0007                  _TMR0_SetInterruptHandler 32D2  
               __end_ofi2_lcd_sendCommand 3216                       EUSART1_Write@txData 0001  
                    __size_ofi2__lcd_Port 002C                            __end_of_R1_BIT 068B  
                             ___ftdiv@exp 003D                         ??_lcd_sendCommand 0101  
                       __size_of_INT0_ISR 0164                       __size_of__div_to_l_ 0128  
                       __size_of_INT1_ISR 007A                               ___ftmul@exp 002A  
                          _TMR0_StopTimer 32FC                    __end_of_TMR0_ReadTimer 2F84  
                       SetRange@new_range 000B              __end_of_INTERRUPT_Initialize 32F8  
                          __end_of___ftge 2AFE                            __end_of___wmul 31AE  
                       __size_of_TMR0_ISR 0030                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_fround 1E36                         ??_lcd_setPosition 0005  
                          __end_of_printf 30A2                       start_initialization 2FC4  
                 UpdateDisplay@cap_string 0097                  __size_of_TMR0_Initialize 0044  
         __size_of_PIN_MANAGER_Initialize 0030                       __end_of__tdiv_to_l_ 25CA  
                             __lcd_Port@a 0100                               putch@txData 0002  
                   __end_of_EUSART1_Write 32D2             lcd_sendStringToPos@charString 000A  
                      i2lcd_sendCommand@a 0003                           ___llmod@divisor 0012  
                         ___llmod@counter 0016                    __end_of_TMR0_StopTimer 3300  
                             _cal_current 0677                                  ??___ftge 0007  
                       __size_of_SetRange 01A4                           ?_TMR0_ReadTimer 0001  
                                ??___wmul 0013                               __doprnt@len 0065  
                             __doprnt@exp 0069                               __doprnt@val 006B  
                             __pdataBANK0 00CD                                  ??_fround 0033  
              __end_of_EXT_INT_Initialize 32C6                                  ??_printf 0052  
                              fround@prec 0039                         __size_of___ftpack 00AE  
                       __size_of___lltoft 005C                               __pbssCOMRAM 005E  
                       __size_of___lwtoft 0024                             __pcstackBANK0 0060  
                           __pcstackBANK1 0100                __size_ofi2_lcd_sendCommand 0020  
                            _isdigit$1203 0002                                 __lcd_Port 3036  
                     _lcd_sendStringToPos 326C                         __size_of_lcd_init 0078  
                               __doprnt@c 007A                                 __doprnt@f 0048  
                   _TMR0_InterruptHandler 0104                                 __pnvBANK1 0104  
                __size_of_TMR0_StartTimer 0004                           lcd_sendString@a 0005  
                         lcd_sendString@i 0007                           ?_TMR0_StopTimer 0001  
                  _PIN_MANAGER_Initialize 30D6                                 __pintcode 0008  
                                ?___awdiv 0007                                  ?___ftadd 0015  
                                ?___awmod 0001                                  ?___ftdiv 0030  
                                ?___ftneg 0001                                  ?___lldiv 0001  
                    ?_lcd_sendStringToPos 0009                                  ?___ftmul 0021  
                                ?___llmod 000E                                  ?___ftsub 0021  
                               __npowers_ 0629                                  ?___fttol 0037  
                                ?__doprnt 0046                                 _lcd_clear 329C  
            ??_INTERRUPT_InterruptManager 00A7                          __CFG_PRICLKEN$ON 000000  
                             __tdiv_to_l_ 2498                              ??__div_to_l_ 0007  
                             __smallconst 0600                                  _BAUDCON1 000FB8  
                                ?_isdigit 0001                   __size_of_lcd_sendString 0034  
                                ?_sprintf 007B                            __size_of_scale 03F0  
                              ?__lcd_Port 0001                            __size_of_putch 000A  
                    _INTERRUPT_Initialize 32F4                         ??_TMR0_Initialize 0102  
                  __size_of_UpdateDisplay 01AE                                  _INT0_ISR 2334  
                                _INT1_ISR 2C04                            ___wmul@product 0013  
                                _LATAbits 000F89                                  _LATCbits 000F8B  
                       i2_TMR0_StartTimer 32F8       __size_of_INTERRUPT_InterruptManager 0098  
                                i2u420_44 2206                                  i2u420_45 2202  
                                i2u317_40 2830                                  i2u412_48 16B2  
              ??_TMR0_SetInterruptHandler 0102                                  i2u421_44 2224  
                                i2u421_45 2220                                  i2u317_45 2828  
                                i2u422_44 224E                                  i2u422_45 224A  
                                i2u414_48 1782                                  i2u423_44 226C  
                                i2u423_45 2268                                  i2u335_48 072C  
                                i2u424_44 228A                                  i2u424_45 2286  
                                i2u408_48 1622                                  i2u353_40 0B40  
                                i2u344_48 0914                                  _PIR1bits 000F9E  
                                i2u425_44 22A8                                  i2u417_44 21AC  
                                i2u425_45 22A4                                  i2u417_45 21A8  
                                i2u353_45 0B36                        __end_of__div_to_l_ 26F2  
                                i2u426_44 22EA                                  i2u418_44 21CA  
                                i2u426_45 22E6                                  i2u418_45 21C6  
                                i2u443_40 2ECA                                  i2u427_44 2328  
                                i2u419_44 21E8                                  i2u427_45 2324  
                                i2u419_45 21E4                                  i2u443_46 2ECC  
                                i2u380_40 10E4                                  i2u347_48 0990  
                                i2u373_48 0F1C                                  i2u470_47 302C  
                                i2u383_48 1132                                  i2u375_48 1004  
                                i2u456_48 3120                                  i2u385_48 126A  
                                i2u369_48 0E84                                  i2u378_48 1072  
                                i2u467_47 2482                                  i2u468_47 3208  
                                i2u388_48 1332                                  i2u469_47 301A  
                           ??_TMR0_Reload 0001                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                        ?i2_TMR0_StartTimer 0001  
                   ??_lcd_sendStringToPos 000C                                  _TMR0_ISR 3106  
                                _RSET_BIT 068B                                ?_lcd_clear 0001  
                TMR0_ReadTimer@readValLow 0009                       ??i2_TMR0_StartTimer 0001  
                       ___wmul@multiplier 000F                           _lcd_sendCommand 3162  
                             _INTCON2bits 000FF1                               _INTCON3bits 000FF0  
                   ?_INTERRUPT_Initialize 0001                 __end_ofi2_TMR0_StartTimer 32FC  
                                _SetRange 2190                                  __Hrparam 0000  
                                __Lrparam 0000                           _lcd_setPosition 2E28  
                      __CFG_BOREN$SBORDIS 000000                         __CFG_P2BMX$PORTB5 000000  
                 ??_OSCILLATOR_Initialize 0100                         ??_TMR0_StartTimer 0100  
                        __size_of___awdiv 0084                          __size_of___ftadd 01AC  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E6  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                        __size_of___ftmul 00F4                          __size_of___llmod 0066  
                        __size_of___ftsub 0040                          __size_of___fttol 00F4  
             __size_of_EUSART1_Initialize 0016                                  ___ftpack 29C0  
                           _UpdateDisplay 1E36                          __size_of__doprnt 1108  
                             _fround$1656 0036                               _fround$1657 0033  
                                ___lltoft 2DCC                       __end_of_TMR0_Reload 32F0  
                                ___lwtoft 31AE                                  _cal_mode 005E  
                        __size_of_isdigit 001E                                  __ptext10 32AA  
                                __ptext11 32F4                                  __ptext20 32F8  
                                __ptext12 32B8                                  __ptext21 31AE  
                                __ptext13 3286                                  __ptext30 3188  
                                __ptext22 1E36                                  __ptext31 26F2  
                                __ptext23 2F00                                  __ptext15 3106  
                                __ptext40 2F84                                  __ptext32 2CF6  
                                __ptext24 06F8                                  __ptext16 2EBC  
                                __ptext41 1FE4                                  __ptext33 2AFE  
                                __ptext25 1800                                  __ptext17 2C04  
                                __ptext50 28DA                                  __ptext42 31D2  
                                __ptext34 2498                                  __ptext26 32DC  
                                __ptext18 306C                                  __ptext51 29C0  
                                __ptext43 2A6E                                  __ptext35 25CA  
                                __ptext27 32C6                                  __ptext19 2334  
                                __ptext52 32FC                                  __ptext44 326C  
                                __ptext36 2DCC                                  __ptext28 3234  
                                __ptext53 32E6                                  __ptext45 2E28  
                                __ptext37 2D66                                  __ptext29 1BF0  
                                __ptext54 2F42                                  __ptext46 31F6  
                                __ptext38 2B82                                  __ptext55 2190  
                                __ptext47 30A2                                  __ptext39 27E6  
                                __ptext56 0000                                  __ptext48 2FFE  
                                __ptext49 3136                                  _av_count 00BA  
                                __powers_ 0650                             ??i2__lcd_Port 0001  
                                _lcd_init 2C7E                               ??__lcd_Port 0100  
                        __size_of_sprintf 0042                             __size_of_main 001E  
                        ??_TMR0_ReadTimer 0003      __end_of_TMR0_DefaultInterruptHandler 2F00  
   __size_of_TMR0_DefaultInterruptHandler 0044              _TMR0_DefaultInterruptHandler 2EBC  
                                int$flags 005F        __end_of_INTERRUPT_InterruptManager 00A0  
              _INTERRUPT_InterruptManager 0008                               ??_lcd_clear 0103  
                          ?_UpdateDisplay 0001                            __doprnt@tmpval 0071  
                 __end_of_lcd_sendCommand 3188                                _INTCONbits 000FF2  
                          _lcd_sendString 30A2                                  isdigit@c 0003  
                  ??_INTERRUPT_Initialize 0100                                  scale@scl 0036  
                      _EXT_INT_Initialize 32B8                                  intlevel2 0000  
                               sprintf@ap 0052                                 sprintf@pb 0054  
                        ??_TMR0_StopTimer 0001                          __tdiv_to_l_@exp1 000F  
                        __tdiv_to_l_@cntr 000E                                 sprintf@wh 007B  
                        __tdiv_to_l_@quot 000A                   __end_of_lcd_setPosition 2E78  
                        ___lldiv@dividend 0001                   ?_PIN_MANAGER_Initialize 0001  
              __size_ofi2_TMR0_StartTimer 0004                       ?_EXT_INT_Initialize 0001  
                              _RCSTA1bits 000FAB                       __end_ofi2__lcd_Port 3162  
           ?_TMR0_DefaultInterruptHandler 0001                       lcd_setPosition@temp 0008  
                             _TMR0_Reload 32E6                                  printf@ap 0052  
                                printf@pb 0054                    __size_of_EUSART1_Write 000C  
                            ?__tdiv_to_l_ 0001                    __end_of_lcd_sendString 30D6  
                    ??_EXT_INT_Initialize 0100                                  sprintf@f 007D  
                        ___lldiv@quotient 0009                           _TMR0_Initialize 2E78  
                       __CFG_T3CMX$PORTC0 000000            __end_of_PIN_MANAGER_Initialize 3106  
                           _INT0_ISR$1655 0059  
