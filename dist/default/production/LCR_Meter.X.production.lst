

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jan 15 16:02:42 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
    60  0000                     
    61                           	psect	smallconst
    62  000600                     __psmallconst:
    63                           	opt stack 0
    64  000600  00                 	db	0
    65  000601                     _dpowers:
    66                           	opt stack 0
    67  000601  0001               	dw	1
    68  000603  0000               	dw	0
    69  000605  000A               	dw	10
    70  000607  0000               	dw	0
    71  000609  0064               	dw	100
    72  00060B  0000               	dw	0
    73  00060D  03E8               	dw	1000
    74  00060F  0000               	dw	0
    75  000611  2710               	dw	10000
    76  000613  0000               	dw	0
    77  000615  86A0               	dw	34464
    78  000617  0001               	dw	1
    79  000619  4240               	dw	16960
    80  00061B  000F               	dw	15
    81  00061D  9680               	dw	38528
    82  00061F  0098               	dw	152
    83  000621  E100               	dw	57600
    84  000623  05F5               	dw	1525
    85  000625  CA00               	dw	51712
    86  000627  3B9A               	dw	15258
    87  000629                     __end_of_dpowers:
    88                           	opt stack 0
    89  000629                     __npowers_:
    90                           	opt stack 0
    91  000629  00                 	db	0
    92  00062A  80                 	db	128
    93  00062B  3F                 	db	63
    94  00062C  CD                 	db	205
    95  00062D  CC                 	db	204
    96  00062E  3D                 	db	61
    97  00062F  D7                 	db	215
    98  000630  23                 	db	35
    99  000631  3C                 	db	60
   100  000632  12                 	db	18
   101  000633  83                 	db	131
   102  000634  3A                 	db	58
   103  000635  B7                 	db	183
   104  000636  D1                 	db	209
   105  000637  38                 	db	56
   106  000638  C6                 	db	198
   107  000639  27                 	db	39
   108  00063A  37                 	db	55
   109  00063B  38                 	db	56
   110  00063C  86                 	db	134
   111  00063D  35                 	db	53
   112  00063E  C0                 	db	192
   113  00063F  D6                 	db	214
   114  000640  33                 	db	51
   115  000641  CC                 	db	204
   116  000642  2B                 	db	43
   117  000643  32                 	db	50
   118  000644  70                 	db	112
   119  000645  89                 	db	137
   120  000646  30                 	db	48
   121  000647  E7                 	db	231
   122  000648  DB                 	db	219
   123  000649  2E                 	db	46
   124  00064A  E5                 	db	229
   125  00064B  3C                 	db	60
   126  00064C  1E                 	db	30
   127  00064D  42                 	db	66
   128  00064E  A2                 	db	162
   129  00064F  0D                 	db	13
   130  000650                     __end_of__npowers_:
   131                           	opt stack 0
   132  000650                     __powers_:
   133                           	opt stack 0
   134  000650  00                 	db	0
   135  000651  80                 	db	128
   136  000652  3F                 	db	63
   137  000653  00                 	db	0
   138  000654  20                 	db	32
   139  000655  41                 	db	65
   140  000656  00                 	db	0
   141  000657  C8                 	db	200
   142  000658  42                 	db	66
   143  000659  00                 	db	0
   144  00065A  7A                 	db	122
   145  00065B  44                 	db	68
   146  00065C  40                 	db	64
   147  00065D  1C                 	db	28
   148  00065E  46                 	db	70
   149  00065F  50                 	db	80
   150  000660  C3                 	db	195
   151  000661  47                 	db	71
   152  000662  24                 	db	36
   153  000663  74                 	db	116
   154  000664  49                 	db	73
   155  000665  97                 	db	151
   156  000666  18                 	db	24
   157  000667  4B                 	db	75
   158  000668  BC                 	db	188
   159  000669  BE                 	db	190
   160  00066A  4C                 	db	76
   161  00066B  6B                 	db	107
   162  00066C  6E                 	db	110
   163  00066D  4E                 	db	78
   164  00066E  03                 	db	3
   165  00066F  15                 	db	21
   166  000670  50                 	db	80
   167  000671  79                 	db	121
   168  000672  AD                 	db	173
   169  000673  60                 	db	96
   170  000674  F3                 	db	243
   171  000675  49                 	db	73
   172  000676  71                 	db	113
   173  000677                     __end_of__powers_:
   174                           	opt stack 0
   175  000677                     STR_1:
   176  000677  43                 	db	67	;'C'
   177  000678  61                 	db	97	;'a'
   178  000679  70                 	db	112	;'p'
   179  00067A  61                 	db	97	;'a'
   180  00067B  63                 	db	99	;'c'
   181  00067C  69                 	db	105	;'i'
   182  00067D  74                 	db	116	;'t'
   183  00067E  61                 	db	97	;'a'
   184  00067F  6E                 	db	110	;'n'
   185  000680  63                 	db	99	;'c'
   186  000681  65                 	db	101	;'e'
   187  000682  3A                 	db	58	;':'
   188  000683  20                 	db	32
   189  000684  25                 	db	37
   190  000685  30                 	db	48	;'0'
   191  000686  2E                 	db	46
   192  000687  32                 	db	50	;'2'
   193  000688  66                 	db	102	;'f'
   194  000689  20                 	db	32
   195  00068A  70                 	db	112	;'p'
   196  00068B  46                 	db	70	;'F'
   197  00068C  20                 	db	32
   198  00068D  28                 	db	40
   199  00068E  43                 	db	67	;'C'
   200  00068F  6F                 	db	111	;'o'
   201  000690  75                 	db	117	;'u'
   202  000691  6E                 	db	110	;'n'
   203  000692  74                 	db	116	;'t'
   204  000693  3A                 	db	58	;':'
   205  000694  20                 	db	32
   206  000695  25                 	db	37
   207  000696  75                 	db	117	;'u'
   208  000697  29                 	db	41
   209  000698  0D                 	db	13
   210  000699  0A                 	db	10
   211  00069A  00                 	db	0
   212                           
   213                           ; #config settings
   214  00069B  00                 	db	0	; dummy byte at the end
   215  0000                     
   216                           	psect	nvCOMRAM
   217  000058                     __pnvCOMRAM:
   218                           	opt stack 0
   219  000058                     _timer0ReloadVal:
   220                           	opt stack 0
   221  000058                     	ds	2
   222                           
   223                           	psect	nvBANK0
   224  00008B                     __pnvBANK0:
   225                           	opt stack 0
   226  00008B                     _INT0_InterruptHandler:
   227                           	opt stack 0
   228  00008B                     	ds	2
   229  00008D                     _TMR0_InterruptHandler:
   230                           	opt stack 0
   231  00008D                     	ds	2
   232  0000                     _ANSELA	set	3896
   233  0000                     _ANSELB	set	3897
   234  0000                     _ANSELC	set	3898
   235  0000                     _BAUDCON1	set	4024
   236  0000                     _INTCON2bits	set	4081
   237  0000                     _INTCONbits	set	4082
   238  0000                     _LATA	set	3977
   239  0000                     _LATB	set	3978
   240  0000                     _LATBbits	set	3978
   241  0000                     _LATC	set	3979
   242  0000                     _OSCCON	set	4051
   243  0000                     _OSCCON2	set	4050
   244  0000                     _OSCTUNE	set	3995
   245  0000                     _PIR1bits	set	3998
   246  0000                     _RCONbits	set	4048
   247  0000                     _RCREG1	set	4014
   248  0000                     _RCSTA1	set	4011
   249  0000                     _RCSTA1bits	set	4011
   250  0000                     _SPBRG1	set	4015
   251  0000                     _SPBRGH1	set	4016
   252  0000                     _T0CON	set	4053
   253  0000                     _T0CONbits	set	4053
   254  0000                     _TMR0H	set	4055
   255  0000                     _TMR0L	set	4054
   256  0000                     _TRISA	set	3986
   257  0000                     _TRISB	set	3987
   258  0000                     _TRISC	set	3988
   259  0000                     _TXREG1	set	4013
   260  0000                     _TXSTA1	set	4012
   261  0000                     _WPUB	set	3937
   262                           
   263                           	psect	cinit
   264  0024B4                     __pcinit:
   265                           	opt stack 0
   266  0024B4                     start_initialization:
   267                           	opt stack 0
   268  0024B4                     __initialization:
   269                           	opt stack 0
   270                           
   271                           ; Clear objects allocated to COMRAM (5 bytes)
   272  0024B4  6A57               	clrf	(__pbssCOMRAM+4)& (0+255),c
   273  0024B6  6A56               	clrf	(__pbssCOMRAM+3)& (0+255),c
   274  0024B8  6A55               	clrf	(__pbssCOMRAM+2)& (0+255),c
   275  0024BA  6A54               	clrf	(__pbssCOMRAM+1)& (0+255),c
   276  0024BC  6A53               	clrf	__pbssCOMRAM& (0+255),c
   277  0024BE                     end_of_initialization:
   278                           	opt stack 0
   279  0024BE                     __end_of__initialization:
   280                           	opt stack 0
   281  0024BE  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   282  0024C0  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   283  0024C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   284  0024C4  6EF8               	movwf	tblptru,c
   285  0024C6  0100               	movlb	0
   286  0024C8  EF8A  F012         	goto	_main	;jump to C main() function
   287                           tblptru	equ	0xFF8
   288                           
   289                           	psect	bssCOMRAM
   290  000053                     __pbssCOMRAM:
   291                           	opt stack 0
   292  000053                     _result:
   293                           	opt stack 0
   294  000053                     	ds	3
   295  000056                     _reading:
   296                           	opt stack 0
   297  000056                     	ds	2
   298                           tblptru	equ	0xFF8
   299                           
   300                           	psect	cstackBANK0
   301  000060                     __pcstackBANK0:
   302                           	opt stack 0
   303  000060                     _printf$1307:
   304                           	opt stack 0
   305                           
   306                           ; 3 bytes @ 0x0
   307  000060                     	ds	3
   308  000063                     printf@ap:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x3
   312  000063                     	ds	2
   313  000065                     printf@val:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0x5
   317  000065                     	ds	4
   318  000069                     printf@tmpval:
   319                           	opt stack 0
   320                           
   321                           ; 4 bytes @ 0x9
   322  000069                     	ds	4
   323  00006D                     printf@exp:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0xD
   327  00006D                     	ds	2
   328  00006F                     printf@flag:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0xF
   332  00006F                     	ds	2
   333  000071                     printf@width:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x11
   337  000071                     	ds	2
   338  000073                     printf@fval:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x13
   342  000073                     	ds	3
   343  000076                     printf@prec:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x16
   347  000076                     	ds	2
   348  000078                     printf@c:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x18
   352  000078                     	ds	1
   353  000079                     ??_INTERRUPT_InterruptManager:
   354                           
   355                           ; 1 bytes @ 0x19
   356  000079                     	ds	14
   357  000087                     INT0_SetInterruptHandler@InterruptHandler:
   358                           	opt stack 0
   359  000087                     TMR0_SetInterruptHandler@InterruptHandler:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x27
   363  000087                     	ds	2
   364  000089                     ??_TMR0_Initialize:
   365  000089                     
   366                           ; 1 bytes @ 0x29
   367  000089                     	ds	2
   368  00008B                     tblptru	equ	0xFF8
   369                           
   370                           ; 1 bytes @ 0x2B
   371                           
   372                           	psect	cstackCOMRAM
   373  000001                     __pcstackCOMRAM:
   374                           	opt stack 0
   375  000001                     ??_TMR0_DefaultInterruptHandler:
   376  000001                     ??_isdigit:
   377  000001                     ?_TMR0_ReadTimer:
   378                           	opt stack 0
   379  000001                     ?___awmod:
   380                           	opt stack 0
   381  000001                     ?___ftpack:
   382                           	opt stack 0
   383  000001                     ?___ftneg:
   384                           	opt stack 0
   385  000001                     ?__tdiv_to_l_:
   386                           	opt stack 0
   387  000001                     ?__div_to_l_:
   388                           	opt stack 0
   389  000001                     ?___lldiv:
   390                           	opt stack 0
   391  000001                     EUSART1_Write@txData:
   392                           	opt stack 0
   393  000001                     ___awmod@dividend:
   394                           	opt stack 0
   395  000001                     __div_to_l_@f1:
   396                           	opt stack 0
   397  000001                     ___ftpack@arg:
   398                           	opt stack 0
   399  000001                     __tdiv_to_l_@f1:
   400                           	opt stack 0
   401  000001                     ___ftge@ff1:
   402                           	opt stack 0
   403  000001                     ___ftneg@f1:
   404                           	opt stack 0
   405  000001                     ___lldiv@dividend:
   406                           	opt stack 0
   407                           
   408                           ; 4 bytes @ 0x0
   409  000001                     	ds	1
   410  000002                     putch@txData:
   411                           	opt stack 0
   412  000002                     _isdigit$955:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x1
   416  000002                     	ds	1
   417  000003                     ??_TMR0_ReadTimer:
   418  000003                     isdigit@c:
   419                           	opt stack 0
   420  000003                     ___awmod@divisor:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  000003                     	ds	1
   425  000004                     ___ftpack@exp:
   426                           	opt stack 0
   427  000004                     __div_to_l_@f2:
   428                           	opt stack 0
   429  000004                     __tdiv_to_l_@f2:
   430                           	opt stack 0
   431  000004                     ___ftge@ff2:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0x3
   435  000004                     	ds	1
   436  000005                     ___awmod@counter:
   437                           	opt stack 0
   438  000005                     ___ftpack@sign:
   439                           	opt stack 0
   440  000005                     ___lldiv@divisor:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x4
   444  000005                     	ds	1
   445  000006                     ??___ftpack:
   446  000006                     ___awmod@sign:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x5
   450  000006                     	ds	1
   451  000007                     ??__tdiv_to_l_:
   452  000007                     ??___ftge:
   453  000007                     ?___awdiv:
   454                           	opt stack 0
   455  000007                     TMR0_ReadTimer@readVal:
   456                           	opt stack 0
   457  000007                     ___awdiv@dividend:
   458                           	opt stack 0
   459  000007                     __div_to_l_@quot:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x6
   463  000007                     	ds	2
   464  000009                     ?___lltoft:
   465                           	opt stack 0
   466  000009                     ?___lwtoft:
   467                           	opt stack 0
   468  000009                     TMR0_ReadTimer@readValLow:
   469                           	opt stack 0
   470  000009                     ___awdiv@divisor:
   471                           	opt stack 0
   472  000009                     ___lwtoft@c:
   473                           	opt stack 0
   474  000009                     ___lldiv@quotient:
   475                           	opt stack 0
   476  000009                     ___lltoft@c:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x8
   480  000009                     	ds	1
   481  00000A                     TMR0_ReadTimer@readValHigh:
   482                           	opt stack 0
   483  00000A                     __tdiv_to_l_@quot:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x9
   487  00000A                     	ds	1
   488  00000B                     ___awdiv@counter:
   489                           	opt stack 0
   490  00000B                     __div_to_l_@cntr:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0xA
   494  00000B                     	ds	1
   495  00000C                     ___awdiv@sign:
   496                           	opt stack 0
   497  00000C                     __div_to_l_@exp1:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0xB
   501  00000C                     	ds	1
   502  00000D                     ??___lltoft:
   503  00000D                     ___lldiv@counter:
   504                           	opt stack 0
   505  00000D                     ___awdiv@quotient:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0xC
   509  00000D                     	ds	1
   510  00000E                     ?___llmod:
   511                           	opt stack 0
   512  00000E                     __tdiv_to_l_@cntr:
   513                           	opt stack 0
   514  00000E                     ___llmod@dividend:
   515                           	opt stack 0
   516                           
   517                           ; 4 bytes @ 0xD
   518  00000E                     	ds	1
   519  00000F                     ?___wmul:
   520                           	opt stack 0
   521  00000F                     __tdiv_to_l_@exp1:
   522                           	opt stack 0
   523  00000F                     ___wmul@multiplier:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0xE
   527  00000F                     	ds	2
   528  000011                     ___lltoft@exp:
   529                           	opt stack 0
   530  000011                     ___wmul@multiplicand:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x10
   534  000011                     	ds	1
   535  000012                     ___llmod@divisor:
   536                           	opt stack 0
   537                           
   538                           ; 4 bytes @ 0x11
   539  000012                     	ds	1
   540  000013                     ___wmul@product:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x12
   544  000013                     	ds	2
   545  000015                     ?___ftadd:
   546                           	opt stack 0
   547  000015                     ___ftadd@f1:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x14
   551  000015                     	ds	1
   552  000016                     ___llmod@counter:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x15
   556  000016                     	ds	2
   557  000018                     ___ftadd@f2:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x17
   561  000018                     	ds	3
   562  00001B                     ??___ftadd:
   563                           
   564                           ; 1 bytes @ 0x1A
   565  00001B                     	ds	3
   566  00001E                     ___ftadd@sign:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x1D
   570  00001E                     	ds	1
   571  00001F                     ___ftadd@exp2:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1E
   575  00001F                     	ds	1
   576  000020                     ___ftadd@exp1:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x1F
   580  000020                     	ds	1
   581  000021                     ?___ftmul:
   582                           	opt stack 0
   583  000021                     ?___ftsub:
   584                           	opt stack 0
   585  000021                     ___ftmul@f1:
   586                           	opt stack 0
   587  000021                     ___ftsub@f1:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x20
   591  000021                     	ds	3
   592  000024                     ___ftmul@f2:
   593                           	opt stack 0
   594  000024                     ___ftsub@f2:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x23
   598  000024                     	ds	3
   599  000027                     ??___ftmul:
   600  000027                     
   601                           ; 1 bytes @ 0x26
   602  000027                     	ds	3
   603  00002A                     ___ftmul@exp:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x29
   607  00002A                     	ds	1
   608  00002B                     ___ftmul@f3_as_product:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x2A
   612  00002B                     	ds	3
   613  00002E                     ___ftmul@cntr:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x2D
   617  00002E                     	ds	1
   618  00002F                     ___ftmul@sign:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x2E
   622  00002F                     	ds	1
   623  000030                     ?___ftdiv:
   624                           	opt stack 0
   625  000030                     ?_fround:
   626                           	opt stack 0
   627  000030                     ?_scale:
   628                           	opt stack 0
   629  000030                     ___ftdiv@f1:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x2F
   633  000030                     	ds	3
   634  000033                     ___ftdiv@f2:
   635                           	opt stack 0
   636  000033                     _fround$1305:
   637                           	opt stack 0
   638  000033                     _scale$1306:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x32
   642  000033                     	ds	3
   643  000036                     ??___ftdiv:
   644  000036                     scale@scl:
   645                           	opt stack 0
   646  000036                     _fround$1304:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x35
   650  000036                     	ds	1
   651  000037                     ?___fttol:
   652                           	opt stack 0
   653  000037                     ___fttol@f1:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x36
   657  000037                     	ds	2
   658  000039                     fround@prec:
   659                           	opt stack 0
   660  000039                     ___ftdiv@cntr:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x38
   664  000039                     	ds	1
   665  00003A                     ___ftdiv@f3:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x39
   669  00003A                     	ds	1
   670  00003B                     ??___fttol:
   671                           
   672                           ; 1 bytes @ 0x3A
   673  00003B                     	ds	2
   674  00003D                     ___ftdiv@exp:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x3C
   678  00003D                     	ds	1
   679  00003E                     ___ftdiv@sign:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x3D
   683  00003E                     	ds	2
   684  000040                     ___fttol@sign1:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x3F
   688  000040                     	ds	1
   689  000041                     ___fttol@lval:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x40
   693  000041                     	ds	4
   694  000045                     ___fttol@exp1:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x44
   698  000045                     	ds	1
   699  000046                     ?_printf:
   700                           	opt stack 0
   701  000046                     printf@f:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x45
   705  000046                     	ds	7
   706  00004D                     ??_printf:
   707                           
   708                           ; 1 bytes @ 0x4C
   709  00004D                     	ds	6
   710  000053                     tblptru	equ	0xFF8
   711                           
   712                           ; 1 bytes @ 0x52
   713 ;;
   714 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   715 ;;
   716 ;; *************** function _main *****************
   717 ;; Defined at:
   718 ;;		line 3 in file "main.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   732 ;;      Params:         0       0       0       0       0       0       0
   733 ;;      Locals:         0       0       0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0       0       0
   735 ;;      Totals:         0       0       0       0       0       0       0
   736 ;;Total ram usage:        0 bytes
   737 ;; Hardware stack levels required when called:    9
   738 ;; This function calls:
   739 ;;		_SYSTEM_Initialize
   740 ;; This function is called by:
   741 ;;		Startup code after reset
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text0
   746  002514                     __ptext0:
   747                           	opt stack 0
   748  002514                     _main:
   749                           	opt stack 22
   750                           
   751                           ;main.c: 6: SYSTEM_Initialize();
   752                           
   753                           ;incstack = 0
   754  002514  EC4D  F012         	call	_SYSTEM_Initialize	;wreg free
   755                           
   756                           ;main.c: 25: (INTCONbits.GIE = 1);
   757  002518  8EF2               	bsf	intcon,7,c	;volatile
   758                           
   759                           ;main.c: 28: (INTCONbits.PEIE = 1);
   760  00251A  8CF2               	bsf	intcon,6,c	;volatile
   761  00251C                     l163:
   762                           
   763                           ;main.c: 37: {
   764  00251C  D7FF               	goto	l163
   765  00251E                     __end_of_main:
   766                           	opt stack 0
   767                           tblptru	equ	0xFF8
   768                           intcon	equ	0xFF2
   769                           
   770 ;; *************** function _SYSTEM_Initialize *****************
   771 ;; Defined at:
   772 ;;		line 111 in file "mcc_generated_files/mcc.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, status,2, status,0, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   786 ;;      Params:         0       0       0       0       0       0       0
   787 ;;      Locals:         0       0       0       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0
   789 ;;      Totals:         0       0       0       0       0       0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:    8
   793 ;; This function calls:
   794 ;;		_EUSART1_Initialize
   795 ;;		_EXT_INT_Initialize
   796 ;;		_INTERRUPT_Initialize
   797 ;;		_OSCILLATOR_Initialize
   798 ;;		_PIN_MANAGER_Initialize
   799 ;;		_TMR0_Initialize
   800 ;; This function is called by:
   801 ;;		_main
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text1
   806  00249A                     __ptext1:
   807                           	opt stack 0
   808  00249A                     _SYSTEM_Initialize:
   809                           	opt stack 22
   810                           
   811                           ;mcc.c: 114: INTERRUPT_Initialize();
   812                           
   813                           ;incstack = 0
   814  00249A  ECA5  F012         	call	_INTERRUPT_Initialize	;wreg free
   815                           
   816                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   817  00249E  ECE2  F011         	call	_PIN_MANAGER_Initialize	;wreg free
   818                           
   819                           ;mcc.c: 116: OSCILLATOR_Initialize();
   820  0024A2  EC7D  F012         	call	_OSCILLATOR_Initialize	;wreg free
   821                           
   822                           ;mcc.c: 117: EXT_INT_Initialize();
   823  0024A6  EC66  F012         	call	_EXT_INT_Initialize	;wreg free
   824                           
   825                           ;mcc.c: 118: TMR0_Initialize();
   826  0024AA  EC67  F011         	call	_TMR0_Initialize	;wreg free
   827                           
   828                           ;mcc.c: 119: EUSART1_Initialize();
   829  0024AE  EC72  F012         	call	_EUSART1_Initialize	;wreg free
   830  0024B2  0012               	return		;funcret
   831  0024B4                     __end_of_SYSTEM_Initialize:
   832                           	opt stack 0
   833                           tblptru	equ	0xFF8
   834                           intcon	equ	0xFF2
   835                           
   836 ;; *************** function _TMR0_Initialize *****************
   837 ;; Defined at:
   838 ;;		line 14 in file "mcc_generated_files/tmr0.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   852 ;;      Params:         0       0       0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0       0       0
   854 ;;      Temps:          0       2       0       0       0       0       0
   855 ;;      Totals:         0       2       0       0       0       0       0
   856 ;;Total ram usage:        2 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    7
   859 ;; This function calls:
   860 ;;		_TMR0_SetInterruptHandler
   861 ;;		_TMR0_StartTimer
   862 ;; This function is called by:
   863 ;;		_SYSTEM_Initialize
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	text2
   868  0022CE                     __ptext2:
   869                           	opt stack 0
   870  0022CE                     _TMR0_Initialize:
   871                           	opt stack 22
   872                           
   873                           ;tmr0.c: 19: T0CON = 0x11;
   874                           
   875                           ;incstack = 0
   876  0022CE  0E11               	movlw	17
   877  0022D0  6ED5               	movwf	4053,c	;volatile
   878                           
   879                           ;tmr0.c: 22: TMR0H = 0x15;
   880  0022D2  0E15               	movlw	21
   881  0022D4  6ED7               	movwf	4055,c	;volatile
   882                           
   883                           ;tmr0.c: 25: TMR0L = 0x9F;
   884  0022D6  0E9F               	movlw	159
   885  0022D8  6ED6               	movwf	4054,c	;volatile
   886                           
   887                           ;tmr0.c: 28: timer0ReloadVal = (TMR0H << 8) | TMR0L;
   888  0022DA  50D6               	movf	4054,w,c	;volatile
   889  0022DC  CFD7 F089          	movff	4055,??_TMR0_Initialize	;volatile
   890  0022E0  0100               	movlb	0	; () banked
   891  0022E2  6B8A               	clrf	(??_TMR0_Initialize+1)& (0+255),b
   892  0022E4  C089  F08A         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
   893  0022E8  0100               	movlb	0	; () banked
   894  0022EA  6B89               	clrf	??_TMR0_Initialize& (0+255),b
   895  0022EC  0100               	movlb	0	; () banked
   896  0022EE  1189               	iorwf	??_TMR0_Initialize& (0+255),w,b
   897  0022F0  6E58               	movwf	_timer0ReloadVal,c	;volatile
   898  0022F2  0100               	movlb	0	; () banked
   899  0022F4  518A               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
   900  0022F6  6E59               	movwf	_timer0ReloadVal+1,c	;volatile
   901                           
   902                           ; BSR set to: 0
   903                           ;tmr0.c: 31: INTCONbits.TMR0IF = 0;
   904  0022F8  94F2               	bcf	intcon,2,c	;volatile
   905                           
   906                           ; BSR set to: 0
   907                           ;tmr0.c: 34: INTCONbits.TMR0IE = 1;
   908  0022FA  8AF2               	bsf	intcon,5,c	;volatile
   909                           
   910                           ; BSR set to: 0
   911                           ;tmr0.c: 37: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
   912  0022FC  0E7E               	movlw	low _TMR0_DefaultInterruptHandler
   913  0022FE  0100               	movlb	0	; () banked
   914  002300  6F87               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
   915  002302  0E24               	movlw	high _TMR0_DefaultInterruptHandler
   916  002304  0100               	movlb	0	; () banked
   917  002306  6F88               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
   918  002308  EC8F  F012         	call	_TMR0_SetInterruptHandler	;wreg free
   919                           
   920                           ;tmr0.c: 40: TMR0_StartTimer();
   921  00230C  ECA3  F012         	call	_TMR0_StartTimer	;wreg free
   922  002310  0012               	return		;funcret
   923  002312                     __end_of_TMR0_Initialize:
   924                           	opt stack 0
   925                           tblptru	equ	0xFF8
   926                           intcon	equ	0xFF2
   927                           
   928 ;; *************** function _TMR0_StartTimer *****************
   929 ;; Defined at:
   930 ;;		line 43 in file "mcc_generated_files/tmr0.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;		None
   933 ;; Auto vars:     Size  Location     Type
   934 ;;		None
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		None
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   944 ;;      Params:         0       0       0       0       0       0       0
   945 ;;      Locals:         0       0       0       0       0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0
   947 ;;      Totals:         0       0       0       0       0       0       0
   948 ;;Total ram usage:        0 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; Hardware stack levels required when called:    6
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_TMR0_Initialize
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text3
   959  002546                     __ptext3:
   960                           	opt stack 0
   961  002546                     _TMR0_StartTimer:
   962                           	opt stack 22
   963                           
   964                           ;tmr0.c: 46: T0CONbits.TMR0ON = 1;
   965                           
   966                           ;incstack = 0
   967  002546  8ED5               	bsf	4053,7,c	;volatile
   968  002548  0012               	return		;funcret
   969  00254A                     __end_of_TMR0_StartTimer:
   970                           	opt stack 0
   971                           tblptru	equ	0xFF8
   972                           intcon	equ	0xFF2
   973                           
   974 ;; *************** function _TMR0_SetInterruptHandler *****************
   975 ;; Defined at:
   976 ;;		line 104 in file "mcc_generated_files/tmr0.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  InterruptHan    2   39[BANK0 ] PTR void 
   979 ;;		 -> TMR0_DefaultInterruptHandler(1), 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;		None
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   991 ;;      Params:         0       2       0       0       0       0       0
   992 ;;      Locals:         0       0       0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0
   994 ;;      Totals:         0       2       0       0       0       0       0
   995 ;;Total ram usage:        2 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    6
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_TMR0_Initialize
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text4
  1006  00251E                     __ptext4:
  1007                           	opt stack 0
  1008  00251E                     _TMR0_SetInterruptHandler:
  1009                           	opt stack 22
  1010                           
  1011                           ;tmr0.c: 105: TMR0_InterruptHandler = InterruptHandler;
  1012                           
  1013                           ;incstack = 0
  1014  00251E  C087  F08D         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1015  002522  C088  F08E         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1016  002526  0012               	return		;funcret
  1017  002528                     __end_of_TMR0_SetInterruptHandler:
  1018                           	opt stack 0
  1019                           tblptru	equ	0xFF8
  1020                           intcon	equ	0xFF2
  1021                           
  1022 ;; *************** function _PIN_MANAGER_Initialize *****************
  1023 ;; Defined at:
  1024 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, status,2
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1038 ;;      Params:         0       0       0       0       0       0       0
  1039 ;;      Locals:         0       0       0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0       0       0
  1041 ;;      Totals:         0       0       0       0       0       0       0
  1042 ;;Total ram usage:        0 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    6
  1045 ;; This function calls:
  1046 ;;		Nothing
  1047 ;; This function is called by:
  1048 ;;		_SYSTEM_Initialize
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text5
  1053  0023C4                     __ptext5:
  1054                           	opt stack 0
  1055  0023C4                     _PIN_MANAGER_Initialize:
  1056                           	opt stack 23
  1057                           
  1058                           ;pin_manager.c: 56: LATA = 0x00;
  1059                           
  1060                           ;incstack = 0
  1061  0023C4  0E00               	movlw	0
  1062  0023C6  6E89               	movwf	3977,c	;volatile
  1063                           
  1064                           ;pin_manager.c: 57: LATB = 0x02;
  1065  0023C8  0E02               	movlw	2
  1066  0023CA  6E8A               	movwf	3978,c	;volatile
  1067                           
  1068                           ;pin_manager.c: 58: LATC = 0x00;
  1069  0023CC  0E00               	movlw	0
  1070  0023CE  6E8B               	movwf	3979,c	;volatile
  1071                           
  1072                           ;pin_manager.c: 63: TRISA = 0xFF;
  1073  0023D0  6892               	setf	3986,c	;volatile
  1074                           
  1075                           ;pin_manager.c: 64: TRISB = 0xFD;
  1076  0023D2  0EFD               	movlw	253
  1077  0023D4  6E93               	movwf	3987,c	;volatile
  1078                           
  1079                           ;pin_manager.c: 65: TRISC = 0xBF;
  1080  0023D6  0EBF               	movlw	191
  1081  0023D8  6E94               	movwf	3988,c	;volatile
  1082                           
  1083                           ;pin_manager.c: 70: ANSELC = 0xBC;
  1084  0023DA  0EBC               	movlw	188
  1085  0023DC  010F               	movlb	15	; () banked
  1086  0023DE  6F3A               	movwf	58,b	;volatile
  1087                           
  1088                           ;pin_manager.c: 71: ANSELB = 0x3C;
  1089  0023E0  0E3C               	movlw	60
  1090  0023E2  010F               	movlb	15	; () banked
  1091  0023E4  6F39               	movwf	57,b	;volatile
  1092                           
  1093                           ;pin_manager.c: 72: ANSELA = 0x2F;
  1094  0023E6  0E2F               	movlw	47
  1095  0023E8  010F               	movlb	15	; () banked
  1096  0023EA  6F38               	movwf	56,b	;volatile
  1097                           
  1098                           ; BSR set to: 15
  1099                           ;pin_manager.c: 77: WPUB = 0xFF;
  1100  0023EC  6861               	setf	3937,c	;volatile
  1101                           
  1102                           ; BSR set to: 15
  1103                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  1104  0023EE  9EF1               	bcf	intcon2,7,c	;volatile
  1105                           
  1106                           ; BSR set to: 15
  1107  0023F0  0012               	return		;funcret
  1108  0023F2                     __end_of_PIN_MANAGER_Initialize:
  1109                           	opt stack 0
  1110                           tblptru	equ	0xFF8
  1111                           intcon	equ	0xFF2
  1112                           intcon2	equ	0xFF1
  1113                           
  1114 ;; *************** function _OSCILLATOR_Initialize *****************
  1115 ;; Defined at:
  1116 ;;		line 122 in file "mcc_generated_files/mcc.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1130 ;;      Params:         0       0       0       0       0       0       0
  1131 ;;      Locals:         0       0       0       0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0
  1133 ;;      Totals:         0       0       0       0       0       0       0
  1134 ;;Total ram usage:        0 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    6
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_SYSTEM_Initialize
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text6
  1145  0024FA                     __ptext6:
  1146                           	opt stack 0
  1147  0024FA                     _OSCILLATOR_Initialize:
  1148                           	opt stack 23
  1149                           
  1150                           ;mcc.c: 125: OSCCON = 0x70;
  1151                           
  1152                           ; BSR set to: 15
  1153                           ;incstack = 0
  1154  0024FA  0E70               	movlw	112
  1155  0024FC  6ED3               	movwf	4051,c	;volatile
  1156                           
  1157                           ;mcc.c: 127: OSCCON2 = 0x04;
  1158  0024FE  0E04               	movlw	4
  1159  002500  6ED2               	movwf	4050,c	;volatile
  1160                           
  1161                           ;mcc.c: 129: OSCTUNE = 0x00;
  1162  002502  0E00               	movlw	0
  1163  002504  6E9B               	movwf	3995,c	;volatile
  1164  002506  0012               	return		;funcret
  1165  002508                     __end_of_OSCILLATOR_Initialize:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           intcon	equ	0xFF2
  1169                           intcon2	equ	0xFF1
  1170                           
  1171 ;; *************** function _INTERRUPT_Initialize *****************
  1172 ;; Defined at:
  1173 ;;		line 4 in file "mcc_generated_files/interrupt_manager.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;		None
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		None
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1187 ;;      Params:         0       0       0       0       0       0       0
  1188 ;;      Locals:         0       0       0       0       0       0       0
  1189 ;;      Temps:          0       0       0       0       0       0       0
  1190 ;;      Totals:         0       0       0       0       0       0       0
  1191 ;;Total ram usage:        0 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    6
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_SYSTEM_Initialize
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text7
  1202  00254A                     __ptext7:
  1203                           	opt stack 0
  1204  00254A                     _INTERRUPT_Initialize:
  1205                           	opt stack 23
  1206                           
  1207                           ;interrupt_manager.c: 7: RCONbits.IPEN = 0;
  1208                           
  1209                           ;incstack = 0
  1210  00254A  9ED0               	bcf	4048,7,c	;volatile
  1211  00254C  0012               	return		;funcret
  1212  00254E                     __end_of_INTERRUPT_Initialize:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           intcon	equ	0xFF2
  1216                           intcon2	equ	0xFF1
  1217                           
  1218 ;; *************** function _EXT_INT_Initialize *****************
  1219 ;; Defined at:
  1220 ;;		line 79 in file "mcc_generated_files/ext_int.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;		None
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1234 ;;      Params:         0       0       0       0       0       0       0
  1235 ;;      Locals:         0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0
  1237 ;;      Totals:         0       0       0       0       0       0       0
  1238 ;;Total ram usage:        0 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    7
  1241 ;; This function calls:
  1242 ;;		_INT0_SetInterruptHandler
  1243 ;; This function is called by:
  1244 ;;		_SYSTEM_Initialize
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text8
  1249  0024CC                     __ptext8:
  1250                           	opt stack 0
  1251  0024CC                     _EXT_INT_Initialize:
  1252                           	opt stack 22
  1253                           
  1254                           ;ext_int.c: 88: (INTCONbits.INT0IF = 0);
  1255                           
  1256                           ;incstack = 0
  1257  0024CC  92F2               	bcf	intcon,1,c	;volatile
  1258                           
  1259                           ;ext_int.c: 89: (INTCON2bits.INTEDG0 = 0);
  1260  0024CE  9CF1               	bcf	intcon2,6,c	;volatile
  1261                           
  1262                           ;ext_int.c: 91: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  1263  0024D0  0E00               	movlw	0
  1264  0024D2  0100               	movlb	0	; () banked
  1265  0024D4  6F87               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  1266  0024D6  0E00               	movlw	0
  1267  0024D8  0100               	movlb	0	; () banked
  1268  0024DA  6F88               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1269  0024DC  EC94  F012         	call	_INT0_SetInterruptHandler	;wreg free
  1270                           
  1271                           ;ext_int.c: 92: (INTCONbits.INT0IE = 1);
  1272  0024E0  88F2               	bsf	intcon,4,c	;volatile
  1273  0024E2  0012               	return		;funcret
  1274  0024E4                     __end_of_EXT_INT_Initialize:
  1275                           	opt stack 0
  1276                           tblptru	equ	0xFF8
  1277                           intcon	equ	0xFF2
  1278                           intcon2	equ	0xFF1
  1279                           
  1280 ;; *************** function _INT0_SetInterruptHandler *****************
  1281 ;; Defined at:
  1282 ;;		line 59 in file "mcc_generated_files/ext_int.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  InterruptHan    2   39[BANK0 ] PTR void 
  1285 ;;		 -> INT0_DefaultInterruptHandler(1), 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1297 ;;      Params:         0       2       0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0       0       0
  1299 ;;      Temps:          0       0       0       0       0       0       0
  1300 ;;      Totals:         0       2       0       0       0       0       0
  1301 ;;Total ram usage:        2 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    6
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_EXT_INT_Initialize
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text9
  1312  002528                     __ptext9:
  1313                           	opt stack 0
  1314  002528                     _INT0_SetInterruptHandler:
  1315                           	opt stack 22
  1316                           
  1317                           ;ext_int.c: 60: INT0_InterruptHandler = InterruptHandler;
  1318                           
  1319                           ;incstack = 0
  1320  002528  C087  F08B         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  1321  00252C  C088  F08C         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  1322  002530  0012               	return		;funcret
  1323  002532                     __end_of_INT0_SetInterruptHandler:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           intcon	equ	0xFF2
  1327                           intcon2	equ	0xFF1
  1328                           
  1329 ;; *************** function _EUSART1_Initialize *****************
  1330 ;; Defined at:
  1331 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, status,2
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1345 ;;      Params:         0       0       0       0       0       0       0
  1346 ;;      Locals:         0       0       0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0
  1348 ;;      Totals:         0       0       0       0       0       0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    6
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_SYSTEM_Initialize
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text10
  1360  0024E4                     __ptext10:
  1361                           	opt stack 0
  1362  0024E4                     _EUSART1_Initialize:
  1363                           	opt stack 23
  1364                           
  1365                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  1366                           
  1367                           ;incstack = 0
  1368  0024E4  0E08               	movlw	8
  1369  0024E6  6EB8               	movwf	4024,c	;volatile
  1370                           
  1371                           ;eusart1.c: 63: RCSTA1 = 0x80;
  1372  0024E8  0E80               	movlw	128
  1373  0024EA  6EAB               	movwf	4011,c	;volatile
  1374                           
  1375                           ;eusart1.c: 66: TXSTA1 = 0x24;
  1376  0024EC  0E24               	movlw	36
  1377  0024EE  6EAC               	movwf	4012,c	;volatile
  1378                           
  1379                           ;eusart1.c: 69: SPBRG1 = 0xA0;
  1380  0024F0  0EA0               	movlw	160
  1381  0024F2  6EAF               	movwf	4015,c	;volatile
  1382                           
  1383                           ;eusart1.c: 72: SPBRGH1 = 0x01;
  1384  0024F4  0E01               	movlw	1
  1385  0024F6  6EB0               	movwf	4016,c	;volatile
  1386  0024F8  0012               	return		;funcret
  1387  0024FA                     __end_of_EUSART1_Initialize:
  1388                           	opt stack 0
  1389                           tblptru	equ	0xFF8
  1390                           intcon	equ	0xFF2
  1391                           intcon2	equ	0xFF1
  1392                           
  1393 ;; *************** function _INTERRUPT_InterruptManager *****************
  1394 ;; Defined at:
  1395 ;;		line 10 in file "mcc_generated_files/interrupt_manager.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1409 ;;      Params:         0       0       0       0       0       0       0
  1410 ;;      Locals:         0       0       0       0       0       0       0
  1411 ;;      Temps:          0      14       0       0       0       0       0
  1412 ;;      Totals:         0      14       0       0       0       0       0
  1413 ;;Total ram usage:       14 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    5
  1416 ;; This function calls:
  1417 ;;		_INT0_ISR
  1418 ;;		_TMR0_ISR
  1419 ;; This function is called by:
  1420 ;;		Interrupt level 2
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	intcode
  1425  000008                     __pintcode:
  1426                           	opt stack 0
  1427  000008                     _INTERRUPT_InterruptManager:
  1428                           	opt stack 22
  1429                           
  1430                           ;incstack = 0
  1431  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1432  00000A  CFFA F079          	movff	pclath,??_INTERRUPT_InterruptManager
  1433  00000E  CFFB F07A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  1434  000012  CFE9 F07B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  1435  000016  CFEA F07C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  1436  00001A  CFE1 F07D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  1437  00001E  CFE2 F07E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  1438  000022  CFD9 F07F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  1439  000026  CFDA F080          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  1440  00002A  CFF3 F081          	movff	prodl,??_INTERRUPT_InterruptManager+8
  1441  00002E  CFF4 F082          	movff	prodh,??_INTERRUPT_InterruptManager+9
  1442  000032  CFF6 F083          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  1443  000036  CFF7 F084          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  1444  00003A  CFF8 F085          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  1445  00003E  CFF5 F086          	movff	tablat,??_INTERRUPT_InterruptManager+13
  1446                           
  1447                           ;interrupt_manager.c: 13: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  1448  000042  BAF2               	btfsc	intcon,5,c	;volatile
  1449  000044  A4F2               	btfss	intcon,2,c	;volatile
  1450  000046  D003               	goto	i2l74
  1451                           
  1452                           ;interrupt_manager.c: 14: {
  1453                           ;interrupt_manager.c: 15: TMR0_ISR();
  1454  000048  ECCA  F011         	call	_TMR0_ISR	;wreg free
  1455                           
  1456                           ;interrupt_manager.c: 16: }
  1457  00004C  D005               	goto	i2l78
  1458  00004E                     i2l74:
  1459                           
  1460                           ;interrupt_manager.c: 17: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  1461  00004E  B8F2               	btfsc	intcon,4,c	;volatile
  1462  000050  A2F2               	btfss	intcon,1,c	;volatile
  1463  000052  D002               	goto	i2l78
  1464                           
  1465                           ;interrupt_manager.c: 18: {
  1466                           ;interrupt_manager.c: 19: INT0_ISR();
  1467  000054  ECAF  F00F         	call	_INT0_ISR	;wreg free
  1468  000058                     i2l78:
  1469  000058  C086  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  1470  00005C  C085  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  1471  000060  C084  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  1472  000064  C083  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  1473  000068  C082  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  1474  00006C  C081  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  1475  000070  C080  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  1476  000074  C07F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  1477  000078  C07E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1478  00007C  C07D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1479  000080  C07C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1480  000084  C07B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1481  000088  C07A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1482  00008C  C079  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1483  000090  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1484  000092  0011               	retfie		f
  1485  000094                     __end_of_INTERRUPT_InterruptManager:
  1486                           	opt stack 0
  1487                           pclatu	equ	0xFFB
  1488                           pclath	equ	0xFFA
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           prodh	equ	0xFF4
  1494                           prodl	equ	0xFF3
  1495                           intcon	equ	0xFF2
  1496                           intcon2	equ	0xFF1
  1497                           fsr0h	equ	0xFEA
  1498                           fsr0l	equ	0xFE9
  1499                           fsr1h	equ	0xFE2
  1500                           fsr1l	equ	0xFE1
  1501                           fsr2h	equ	0xFDA
  1502                           fsr2l	equ	0xFD9
  1503                           
  1504 ;; *************** function _TMR0_ISR *****************
  1505 ;; Defined at:
  1506 ;;		line 84 in file "mcc_generated_files/tmr0.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, pclat, tosl, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         0       0       0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0
  1523 ;;      Totals:         0       0       0       0       0       0       0
  1524 ;;Total ram usage:        0 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    1
  1527 ;; This function calls:
  1528 ;;		Absolute function
  1529 ;;		_TMR0_DefaultInterruptHandler
  1530 ;; This function is called by:
  1531 ;;		_INTERRUPT_InterruptManager
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text12
  1536  002394                     __ptext12:
  1537                           	opt stack 0
  1538  002394                     _TMR0_ISR:
  1539                           	opt stack 25
  1540                           
  1541                           ;tmr0.c: 88: INTCONbits.TMR0IF = 0;
  1542                           
  1543                           ;incstack = 0
  1544  002394  94F2               	bcf	intcon,2,c	;volatile
  1545                           
  1546                           ;tmr0.c: 92: TMR0H = timer0ReloadVal >> 8;
  1547  002396  5059               	movf	_timer0ReloadVal+1,w,c	;volatile
  1548  002398  6ED7               	movwf	4055,c	;volatile
  1549                           
  1550                           ;tmr0.c: 93: TMR0L = (uint8_t) timer0ReloadVal;
  1551  00239A  C058  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  1552                           
  1553                           ;tmr0.c: 95: if(TMR0_InterruptHandler)
  1554  00239E  0100               	movlb	0	; () banked
  1555  0023A0  518D               	movf	_TMR0_InterruptHandler& (0+255),w,b
  1556  0023A2  0100               	movlb	0	; () banked
  1557  0023A4  118E               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  1558  0023A6  B4D8               	btfsc	status,2,c
  1559  0023A8  0012               	return	
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;tmr0.c: 96: {
  1563                           ;tmr0.c: 97: TMR0_InterruptHandler();
  1564  0023AA  D801               	call	i2u322_48
  1565  0023AC  0012               	return	
  1566  0023AE                     i2u322_48:
  1567  0023AE  0005               	push	
  1568  0023B0  0100               	movlb	0	; () banked
  1569  0023B2  6EFA               	movwf	pclath,c
  1570  0023B4  518D               	movf	_TMR0_InterruptHandler& (0+255),w,b
  1571  0023B6  6EFD               	movwf	tosl,c
  1572  0023B8  518E               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  1573  0023BA  6EFE               	movwf	tosh,c
  1574  0023BC  50F8               	movf	tblptru,w,c
  1575  0023BE  6EFF               	movwf	tosu,c
  1576  0023C0  50FA               	movf	pclath,w,c
  1577  0023C2  0012               	return		;indir
  1578  0023C4                     __end_of_TMR0_ISR:
  1579                           	opt stack 0
  1580                           tosu	equ	0xFFF
  1581                           tosh	equ	0xFFE
  1582                           tosl	equ	0xFFD
  1583                           pclatu	equ	0xFFB
  1584                           pclath	equ	0xFFA
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           prodh	equ	0xFF4
  1590                           prodl	equ	0xFF3
  1591                           intcon	equ	0xFF2
  1592                           intcon2	equ	0xFF1
  1593                           fsr0h	equ	0xFEA
  1594                           fsr0l	equ	0xFE9
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  1602 ;; Defined at:
  1603 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2, status,0
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       0       0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0
  1619 ;;      Temps:          1       0       0       0       0       0       0
  1620 ;;      Totals:         1       0       0       0       0       0       0
  1621 ;;Total ram usage:        1 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_TMR0_Initialize
  1627 ;;		_TMR0_ISR
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text13
  1632  00247E                     __ptext13:
  1633                           	opt stack 0
  1634  00247E                     _TMR0_DefaultInterruptHandler:
  1635                           	opt stack 25
  1636                           
  1637                           ;tmr0.c: 109: LATBbits.LATB1 = ~LATBbits.LATB1;
  1638                           
  1639                           ;incstack = 0
  1640  00247E  A28A               	btfss	3978,1,c	;volatile
  1641  002480  D002               	goto	i2u315_40
  1642  002482  0E01               	movlw	1
  1643  002484  D001               	goto	i2u315_46
  1644  002486                     i2u315_40:
  1645  002486  0E00               	movlw	0
  1646  002488                     i2u315_46:
  1647  002488  0AFF               	xorlw	255
  1648  00248A  6E01               	movwf	??_TMR0_DefaultInterruptHandler& (0+255),c
  1649  00248C  4601               	rlncf	??_TMR0_DefaultInterruptHandler,f,c
  1650  00248E  508A               	movf	3978,w,c	;volatile
  1651  002490  1801               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  1652  002492  0BFD               	andlw	-3
  1653  002494  1801               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  1654  002496  6E8A               	movwf	3978,c	;volatile
  1655  002498  0012               	return		;funcret
  1656  00249A                     __end_of_TMR0_DefaultInterruptHandler:
  1657                           	opt stack 0
  1658                           tosu	equ	0xFFF
  1659                           tosh	equ	0xFFE
  1660                           tosl	equ	0xFFD
  1661                           pclatu	equ	0xFFB
  1662                           pclath	equ	0xFFA
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           intcon	equ	0xFF2
  1670                           intcon2	equ	0xFF1
  1671                           fsr0h	equ	0xFEA
  1672                           fsr0l	equ	0xFE9
  1673                           fsr1h	equ	0xFE2
  1674                           fsr1l	equ	0xFE1
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _INT0_ISR *****************
  1680 ;; Defined at:
  1681 ;;		line 22 in file "mcc_generated_files/ext_int.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1695 ;;      Params:         0       0       0       0       0       0       0
  1696 ;;      Locals:         0       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0
  1698 ;;      Totals:         0       0       0       0       0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    4
  1702 ;; This function calls:
  1703 ;;		_TMR0_ReadTimer
  1704 ;;		_TMR0_Reload
  1705 ;;		_TMR0_StopTimer
  1706 ;;		___ftadd
  1707 ;;		___ftdiv
  1708 ;;		___ftmul
  1709 ;;		___lwtoft
  1710 ;;		_printf
  1711 ;;		i2_TMR0_StartTimer
  1712 ;; This function is called by:
  1713 ;;		_INTERRUPT_InterruptManager
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text14
  1718  001F5E                     __ptext14:
  1719                           	opt stack 0
  1720  001F5E                     _INT0_ISR:
  1721                           	opt stack 22
  1722                           
  1723                           ;ext_int.c: 25: TMR0_StopTimer();
  1724                           
  1725                           ;incstack = 0
  1726  001F5E  ECA9  F012         	call	_TMR0_StopTimer	;wreg free
  1727                           
  1728                           ;ext_int.c: 26: reading = TMR0_ReadTimer();
  1729  001F62  EC89  F011         	call	_TMR0_ReadTimer	;wreg free
  1730  001F66  C001  F056         	movff	?_TMR0_ReadTimer,_reading
  1731  001F6A  C002  F057         	movff	?_TMR0_ReadTimer+1,_reading+1
  1732                           
  1733                           ;ext_int.c: 29: result = 494.5 * ((float)reading - 27) / 3.01004;
  1734  001F6E  0E40               	movlw	64
  1735  001F70  6E24               	movwf	___ftmul@f2,c
  1736  001F72  0EF7               	movlw	247
  1737  001F74  6E25               	movwf	___ftmul@f2+1,c
  1738  001F76  0E43               	movlw	67
  1739  001F78  6E26               	movwf	___ftmul@f2+2,c
  1740  001F7A  0E00               	movlw	0
  1741  001F7C  6E18               	movwf	___ftadd@f2,c
  1742  001F7E  0ED8               	movlw	216
  1743  001F80  6E19               	movwf	___ftadd@f2+1,c
  1744  001F82  0EC1               	movlw	193
  1745  001F84  6E1A               	movwf	___ftadd@f2+2,c
  1746  001F86  C056  F009         	movff	_reading,___lwtoft@c
  1747  001F8A  C057  F00A         	movff	_reading+1,___lwtoft@c+1
  1748  001F8E  EC1E  F012         	call	___lwtoft	;wreg free
  1749  001F92  C009  F015         	movff	?___lwtoft,___ftadd@f1
  1750  001F96  C00A  F016         	movff	?___lwtoft+1,___ftadd@f1+1
  1751  001F9A  C00B  F017         	movff	?___lwtoft+2,___ftadd@f1+2
  1752  001F9E  ECEE  F00B         	call	___ftadd	;wreg free
  1753  001FA2  C015  F021         	movff	?___ftadd,___ftmul@f1
  1754  001FA6  C016  F022         	movff	?___ftadd+1,___ftmul@f1+1
  1755  001FAA  C017  F023         	movff	?___ftadd+2,___ftmul@f1+2
  1756  001FAE  ECF1  F00D         	call	___ftmul	;wreg free
  1757  001FB2  C021  F030         	movff	?___ftmul,___ftdiv@f1
  1758  001FB6  C022  F031         	movff	?___ftmul+1,___ftdiv@f1+1
  1759  001FBA  C023  F032         	movff	?___ftmul+2,___ftdiv@f1+2
  1760  001FBE  0EA4               	movlw	164
  1761  001FC0  6E33               	movwf	___ftdiv@f2,c
  1762  001FC2  0E40               	movlw	64
  1763  001FC4  6E34               	movwf	___ftdiv@f2+1,c
  1764  001FC6  0E40               	movlw	64
  1765  001FC8  6E35               	movwf	___ftdiv@f2+2,c
  1766  001FCA  ECE5  F00E         	call	___ftdiv	;wreg free
  1767  001FCE  C030  F053         	movff	?___ftdiv,_result
  1768  001FD2  C031  F054         	movff	?___ftdiv+1,_result+1
  1769  001FD6  C032  F055         	movff	?___ftdiv+2,_result+2
  1770                           
  1771                           ;ext_int.c: 32: printf("Capacitance: %0.2f pF (Count: %u)\r\n", result, reading);
  1772  001FDA  0E77               	movlw	low STR_1
  1773  001FDC  6E46               	movwf	printf@f,c
  1774  001FDE  0E06               	movlw	high STR_1
  1775  001FE0  6E47               	movwf	printf@f+1,c
  1776  001FE2  C053  F048         	movff	_result,?_printf+2
  1777  001FE6  C054  F049         	movff	_result+1,?_printf+3
  1778  001FEA  C055  F04A         	movff	_result+2,?_printf+4
  1779  001FEE  C056  F04B         	movff	_reading,?_printf+5
  1780  001FF2  C057  F04C         	movff	_reading+1,?_printf+6
  1781  001FF6  EC4E  F003         	call	_printf	;wreg free
  1782                           
  1783                           ;ext_int.c: 35: TMR0_Reload();
  1784  001FFA  EC9E  F012         	call	_TMR0_Reload	;wreg free
  1785                           
  1786                           ;ext_int.c: 38: TMR0_StartTimer();
  1787  001FFE  ECA7  F012         	call	i2_TMR0_StartTimer	;wreg free
  1788                           
  1789                           ;ext_int.c: 41: (INTCONbits.INT0IF = 0);
  1790  002002  92F2               	bcf	intcon,1,c	;volatile
  1791  002004  0012               	return		;funcret
  1792  002006                     __end_of_INT0_ISR:
  1793                           	opt stack 0
  1794                           tosu	equ	0xFFF
  1795                           tosh	equ	0xFFE
  1796                           tosl	equ	0xFFD
  1797                           pclatu	equ	0xFFB
  1798                           pclath	equ	0xFFA
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           intcon2	equ	0xFF1
  1807                           fsr0h	equ	0xFEA
  1808                           fsr0l	equ	0xFE9
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function i2_TMR0_StartTimer *****************
  1816 ;; Defined at:
  1817 ;;		line 43 in file "mcc_generated_files/tmr0.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		None
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1831 ;;      Params:         0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_INT0_ISR
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text15
  1845  00254E                     __ptext15:
  1846                           	opt stack 0
  1847  00254E                     i2_TMR0_StartTimer:
  1848                           	opt stack 25
  1849                           
  1850                           ;tmr0.c: 46: T0CONbits.TMR0ON = 1;
  1851                           
  1852                           ;incstack = 0
  1853  00254E  8ED5               	bsf	4053,7,c	;volatile
  1854  002550  0012               	return		;funcret
  1855  002552                     __end_ofi2_TMR0_StartTimer:
  1856                           	opt stack 0
  1857                           tosu	equ	0xFFF
  1858                           tosh	equ	0xFFE
  1859                           tosl	equ	0xFFD
  1860                           pclatu	equ	0xFFB
  1861                           pclath	equ	0xFFA
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           intcon	equ	0xFF2
  1869                           intcon2	equ	0xFF1
  1870                           fsr0h	equ	0xFEA
  1871                           fsr0l	equ	0xFE9
  1872                           fsr1h	equ	0xFE2
  1873                           fsr1l	equ	0xFE1
  1874                           fsr2h	equ	0xFDA
  1875                           fsr2l	equ	0xFD9
  1876                           status	equ	0xFD8
  1877                           
  1878 ;; *************** function _printf *****************
  1879 ;; Defined at:
  1880 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  f               2   69[COMRAM] PTR const unsigned char 
  1883 ;;		 -> STR_1(36), 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  tmpval          4    9[BANK0 ] struct .
  1886 ;;  val             4    5[BANK0 ] unsigned long 
  1887 ;;  fval            3   19[BANK0 ] unsigned long 
  1888 ;;  cp              3    0        PTR const unsigned char 
  1889 ;;  prec            2   22[BANK0 ] int 
  1890 ;;  width           2   17[BANK0 ] int 
  1891 ;;  flag            2   15[BANK0 ] unsigned short 
  1892 ;;  exp             2   13[BANK0 ] int 
  1893 ;;  ap              2    3[BANK0 ] PTR void [1]
  1894 ;;		 -> ?_printf(2), 
  1895 ;;  len             2    0        unsigned int 
  1896 ;;  c               1   24[BANK0 ] char 
  1897 ;;  d               1    0        unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  2   69[COMRAM] int 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1907 ;;      Params:         7       0       0       0       0       0       0
  1908 ;;      Locals:         0      25       0       0       0       0       0
  1909 ;;      Temps:          6       0       0       0       0       0       0
  1910 ;;      Totals:        13      25       0       0       0       0       0
  1911 ;;Total ram usage:       38 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    3
  1914 ;; This function calls:
  1915 ;;		___awdiv
  1916 ;;		___ftadd
  1917 ;;		___ftge
  1918 ;;		___ftmul
  1919 ;;		___ftneg
  1920 ;;		___ftsub
  1921 ;;		___fttol
  1922 ;;		___lldiv
  1923 ;;		___llmod
  1924 ;;		___lltoft
  1925 ;;		___wmul
  1926 ;;		__div_to_l_
  1927 ;;		__tdiv_to_l_
  1928 ;;		_fround
  1929 ;;		_isdigit
  1930 ;;		_putch
  1931 ;;		_scale
  1932 ;; This function is called by:
  1933 ;;		_INT0_ISR
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text16
  1938  00069C                     __ptext16:
  1939                           	opt stack 0
  1940  00069C                     _printf:
  1941                           	opt stack 22
  1942                           
  1943                           ;doprnt.c: 466: va_list ap;
  1944                           ;doprnt.c: 499: signed char c;
  1945                           ;doprnt.c: 501: int width;
  1946                           ;doprnt.c: 504: int prec;
  1947                           ;doprnt.c: 508: unsigned short flag;
  1948                           ;doprnt.c: 515: char d;
  1949                           ;doprnt.c: 516: double fval;
  1950                           ;doprnt.c: 517: int exp;
  1951                           ;doprnt.c: 523: union {
  1952                           ;doprnt.c: 524: unsigned long vd;
  1953                           ;doprnt.c: 525: double integ;
  1954                           ;doprnt.c: 526: } tmpval;
  1955                           ;doprnt.c: 528: unsigned long val;
  1956                           ;doprnt.c: 529: unsigned len;
  1957                           ;doprnt.c: 530: const char * cp;
  1958                           ;doprnt.c: 533: *ap = __va_start();
  1959                           
  1960                           ;incstack = 0
  1961  00069C  0E48               	movlw	low (?_printf+2)
  1962  00069E  0100               	movlb	0	; () banked
  1963  0006A0  6F63               	movwf	printf@ap& (0+255),b
  1964  0006A2  0E00               	movlw	high (?_printf+2)
  1965  0006A4  0100               	movlb	0	; () banked
  1966  0006A6  6F64               	movwf	(printf@ap+1)& (0+255),b
  1967                           
  1968                           ;doprnt.c: 536: while(c = *f++) {
  1969  0006A8  EFC4  F008         	goto	i2l2906
  1970  0006AC                     i2l2618:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;doprnt.c: 538: if(c != '%')
  1974  0006AC  0E25               	movlw	37
  1975  0006AE  0100               	movlb	0	; () banked
  1976  0006B0  1978               	xorwf	printf@c& (0+255),w,b
  1977  0006B2  B4D8               	btfsc	status,2,c
  1978  0006B4  D006               	goto	i2l2622
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;doprnt.c: 540: {
  1982                           ;doprnt.c: 541: (putch(c) );
  1983  0006B6  0100               	movlb	0	; () banked
  1984  0006B8  5178               	movf	printf@c& (0+255),w,b
  1985  0006BA  EC99  F012         	call	_putch
  1986                           
  1987                           ;doprnt.c: 542: continue;
  1988  0006BE  EFC4  F008         	goto	i2l2906
  1989  0006C2                     i2l2622:
  1990                           
  1991                           ;doprnt.c: 543: }
  1992                           ;doprnt.c: 546: width = 0;
  1993  0006C2  0E00               	movlw	0
  1994  0006C4  0100               	movlb	0	; () banked
  1995  0006C6  6F72               	movwf	(printf@width+1)& (0+255),b
  1996  0006C8  0E00               	movlw	0
  1997  0006CA  6F71               	movwf	printf@width& (0+255),b
  1998                           
  1999                           ;doprnt.c: 548: flag = 0;
  2000  0006CC  0E00               	movlw	0
  2001  0006CE  0100               	movlb	0	; () banked
  2002  0006D0  6F70               	movwf	(printf@flag+1)& (0+255),b
  2003  0006D2  0E00               	movlw	0
  2004  0006D4  6F6F               	movwf	printf@flag& (0+255),b
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;doprnt.c: 551: switch(*f) {
  2008                           
  2009                           ;doprnt.c: 550: for(;;) {
  2010  0006D6  D004               	goto	i2l2628
  2011  0006D8                     i2l2624:
  2012                           
  2013                           ;doprnt.c: 580: flag |= 0x04;
  2014  0006D8  0100               	movlb	0	; () banked
  2015  0006DA  856F               	bsf	printf@flag& (0+255),2,b
  2016                           
  2017                           ;doprnt.c: 581: f++;
  2018  0006DC  4A46               	infsnz	printf@f,f,c
  2019  0006DE  2A47               	incf	printf@f+1,f,c
  2020  0006E0                     i2l2628:
  2021  0006E0  C046  FFF6         	movff	printf@f,tblptrl
  2022  0006E4  C047  FFF7         	movff	printf@f+1,tblptrh
  2023  0006E8                     	if	0	;tblptru may be non-zero
  2024  0006E8                     	endif
  2025  0006E8                     	if	0	;tblptru may be non-zero
  2026  0006E8                     	endif
  2027  0006E8  0008               	tblrd		*
  2028  0006EA  50F5               	movf	tablat,w,c
  2029                           
  2030                           ; Switch size 1, requested type "space"
  2031                           ; Number of cases is 1, Range of values is 48 to 48
  2032                           ; switch strategies available:
  2033                           ; Name         Instructions Cycles
  2034                           ; simple_byte            4     3 (average)
  2035                           ;	Chosen strategy is simple_byte
  2036  0006EC  0A30               	xorlw	48	; case 48
  2037  0006EE  B4D8               	btfsc	status,2,c
  2038  0006F0  D7F3               	goto	i2l2624
  2039                           
  2040                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2041                           
  2042                           ;doprnt.c: 586: }
  2043                           
  2044                           ;doprnt.c: 585: break;
  2045  0006F2  C046  FFF6         	movff	printf@f,tblptrl
  2046  0006F6  C047  FFF7         	movff	printf@f+1,tblptrh
  2047  0006FA                     	if	0	;tblptru may be non-zero
  2048  0006FA                     	endif
  2049  0006FA                     	if	0	;tblptru may be non-zero
  2050  0006FA                     	endif
  2051  0006FA  0008               	tblrd		*
  2052  0006FC  50F5               	movf	tablat,w,c
  2053  0006FE  EC30  F012         	call	_isdigit
  2054  000702  A0D8               	btfss	status,0,c
  2055  000704  D035               	goto	i2l2642
  2056                           
  2057                           ;doprnt.c: 598: width = 0;
  2058  000706  0E00               	movlw	0
  2059  000708  0100               	movlb	0	; () banked
  2060  00070A  6F72               	movwf	(printf@width+1)& (0+255),b
  2061  00070C  0E00               	movlw	0
  2062  00070E  6F71               	movwf	printf@width& (0+255),b
  2063  000710                     i2l2634:
  2064                           
  2065                           ;doprnt.c: 600: width *= 10;
  2066  000710  C071  F00F         	movff	printf@width,___wmul@multiplier
  2067  000714  C072  F010         	movff	printf@width+1,___wmul@multiplier+1
  2068  000718  0E00               	movlw	0
  2069  00071A  6E12               	movwf	___wmul@multiplicand+1,c
  2070  00071C  0E0A               	movlw	10
  2071  00071E  6E11               	movwf	___wmul@multiplicand,c
  2072  000720  ECF9  F011         	call	___wmul	;wreg free
  2073  000724  C00F  F071         	movff	?___wmul,printf@width
  2074  000728  C010  F072         	movff	?___wmul+1,printf@width+1
  2075                           
  2076                           ;doprnt.c: 601: width += *f++ - '0';
  2077  00072C  0ED0               	movlw	208
  2078  00072E  6E4D               	movwf	??_printf& (0+255),c
  2079  000730  0EFF               	movlw	255
  2080  000732  6E4E               	movwf	(??_printf+1)& (0+255),c
  2081  000734  C046  FFF6         	movff	printf@f,tblptrl
  2082  000738  C047  FFF7         	movff	printf@f+1,tblptrh
  2083  00073C                     	if	0	;tblptru may be non-zero
  2084  00073C                     	endif
  2085  00073C                     	if	0	;tblptru may be non-zero
  2086  00073C                     	endif
  2087  00073C  0008               	tblrd		*
  2088  00073E  50F5               	movf	tablat,w,c
  2089  000740  6E4F               	movwf	(??_printf+2)& (0+255),c
  2090  000742  6A50               	clrf	(??_printf+3)& (0+255),c
  2091  000744  504D               	movf	??_printf,w,c
  2092  000746  264F               	addwf	??_printf+2,f,c
  2093  000748  504E               	movf	??_printf+1,w,c
  2094  00074A  2250               	addwfc	??_printf+3,f,c
  2095  00074C  504F               	movf	??_printf+2,w,c
  2096  00074E  0100               	movlb	0	; () banked
  2097  000750  2771               	addwf	printf@width& (0+255),f,b
  2098  000752  5050               	movf	??_printf+3,w,c
  2099  000754  0100               	movlb	0	; () banked
  2100  000756  2372               	addwfc	(printf@width+1)& (0+255),f,b
  2101                           
  2102                           ; BSR set to: 0
  2103  000758  4A46               	infsnz	printf@f,f,c
  2104  00075A  2A47               	incf	printf@f+1,f,c
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2108  00075C  C046  FFF6         	movff	printf@f,tblptrl
  2109  000760  C047  FFF7         	movff	printf@f+1,tblptrh
  2110  000764                     	if	0	;tblptru may be non-zero
  2111  000764                     	endif
  2112  000764                     	if	0	;tblptru may be non-zero
  2113  000764                     	endif
  2114  000764  0008               	tblrd		*
  2115  000766  50F5               	movf	tablat,w,c
  2116  000768  EC30  F012         	call	_isdigit
  2117  00076C  B0D8               	btfsc	status,0,c
  2118  00076E  D7D0               	goto	i2l2634
  2119  000770                     i2l2642:
  2120                           
  2121                           ;doprnt.c: 608: }
  2122                           ;doprnt.c: 611: if(*f == '.') {
  2123  000770  C046  FFF6         	movff	printf@f,tblptrl
  2124  000774  C047  FFF7         	movff	printf@f+1,tblptrh
  2125  000778                     	if	0	;tblptru may be non-zero
  2126  000778                     	endif
  2127  000778                     	if	0	;tblptru may be non-zero
  2128  000778                     	endif
  2129  000778  0008               	tblrd		*
  2130  00077A  50F5               	movf	tablat,w,c
  2131  00077C  0A2E               	xorlw	46
  2132  00077E  A4D8               	btfss	status,2,c
  2133  000780  D032               	goto	i2l2654
  2134                           
  2135                           ;doprnt.c: 612: flag |= 0x4000;
  2136  000782  0100               	movlb	0	; () banked
  2137  000784  8D70               	bsf	(printf@flag+1)& (0+255),6,b
  2138                           
  2139                           ;doprnt.c: 613: f++;
  2140  000786  4A46               	infsnz	printf@f,f,c
  2141  000788  2A47               	incf	printf@f+1,f,c
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;doprnt.c: 620: {
  2145                           ;doprnt.c: 621: prec = 0;
  2146  00078A  0E00               	movlw	0
  2147  00078C  0100               	movlb	0	; () banked
  2148  00078E  6F77               	movwf	(printf@prec+1)& (0+255),b
  2149  000790  0E00               	movlw	0
  2150  000792  6F76               	movwf	printf@prec& (0+255),b
  2151                           
  2152                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2153  000794  D01D               	goto	i2l2652
  2154  000796                     i2l2648:
  2155                           
  2156                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2157  000796  C076  F00F         	movff	printf@prec,___wmul@multiplier
  2158  00079A  C077  F010         	movff	printf@prec+1,___wmul@multiplier+1
  2159  00079E  0E00               	movlw	0
  2160  0007A0  6E12               	movwf	___wmul@multiplicand+1,c
  2161  0007A2  0E0A               	movlw	10
  2162  0007A4  6E11               	movwf	___wmul@multiplicand,c
  2163  0007A6  ECF9  F011         	call	___wmul	;wreg free
  2164  0007AA  C046  FFF6         	movff	printf@f,tblptrl
  2165  0007AE  C047  FFF7         	movff	printf@f+1,tblptrh
  2166  0007B2                     	if	0	;tblptru may be non-zero
  2167  0007B2                     	endif
  2168  0007B2                     	if	0	;tblptru may be non-zero
  2169  0007B2                     	endif
  2170  0007B2  0008               	tblrd		*
  2171  0007B4  50F5               	movf	tablat,w,c
  2172  0007B6  260F               	addwf	?___wmul,f,c
  2173  0007B8  0E00               	movlw	0
  2174  0007BA  2210               	addwfc	?___wmul+1,f,c
  2175  0007BC  0ED0               	movlw	208
  2176  0007BE  240F               	addwf	?___wmul,w,c
  2177  0007C0  0100               	movlb	0	; () banked
  2178  0007C2  6F76               	movwf	printf@prec& (0+255),b
  2179  0007C4  0EFF               	movlw	255
  2180  0007C6  2010               	addwfc	?___wmul+1,w,c
  2181  0007C8  0100               	movlb	0	; () banked
  2182  0007CA  6F77               	movwf	(printf@prec+1)& (0+255),b
  2183                           
  2184                           ; BSR set to: 0
  2185  0007CC  4A46               	infsnz	printf@f,f,c
  2186  0007CE  2A47               	incf	printf@f+1,f,c
  2187  0007D0                     i2l2652:
  2188                           
  2189                           ; BSR set to: 0
  2190  0007D0  C046  FFF6         	movff	printf@f,tblptrl
  2191  0007D4  C047  FFF7         	movff	printf@f+1,tblptrh
  2192  0007D8                     	if	0	;tblptru may be non-zero
  2193  0007D8                     	endif
  2194  0007D8                     	if	0	;tblptru may be non-zero
  2195  0007D8                     	endif
  2196  0007D8  0008               	tblrd		*
  2197  0007DA  50F5               	movf	tablat,w,c
  2198  0007DC  EC30  F012         	call	_isdigit
  2199  0007E0  A0D8               	btfss	status,0,c
  2200  0007E2  D010               	goto	i2l2664
  2201  0007E4  D7D8               	goto	i2l2648
  2202  0007E6                     i2l2654:
  2203                           
  2204                           ;doprnt.c: 626: prec = 0;
  2205  0007E6  0E00               	movlw	0
  2206  0007E8  0100               	movlb	0	; () banked
  2207  0007EA  6F77               	movwf	(printf@prec+1)& (0+255),b
  2208  0007EC  0E00               	movlw	0
  2209  0007EE  6F76               	movwf	printf@prec& (0+255),b
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 628: flag |= 0x1000;
  2213  0007F0  0100               	movlb	0	; () banked
  2214  0007F2  8970               	bsf	(printf@flag+1)& (0+255),4,b
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 630: }
  2218                           ;doprnt.c: 635: switch(c = *f++) {
  2219  0007F4  D007               	goto	i2l2664
  2220  0007F6                     i2l2658:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 663: flag |= 0x400;
  2224  0007F6  0100               	movlb	0	; () banked
  2225  0007F8  8570               	bsf	(printf@flag+1)& (0+255),2,b
  2226                           
  2227                           ;doprnt.c: 664: break;
  2228  0007FA  D01A               	goto	i2l2666
  2229  0007FC                     i2l2660:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 818: flag |= 0xC0;
  2233  0007FC  0EC0               	movlw	192
  2234  0007FE  0100               	movlb	0	; () banked
  2235  000800  136F               	iorwf	printf@flag& (0+255),f,b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;doprnt.c: 822: }
  2239                           
  2240                           ;doprnt.c: 819: break;
  2241  000802  D016               	goto	i2l2666
  2242  000804                     i2l2664:
  2243  000804  C046  FFF6         	movff	printf@f,tblptrl
  2244  000808  C047  FFF7         	movff	printf@f+1,tblptrh
  2245  00080C  4A46               	infsnz	printf@f,f,c
  2246  00080E  2A47               	incf	printf@f+1,f,c
  2247  000810                     	if	0	;tblptru may be non-zero
  2248  000810                     	endif
  2249  000810                     	if	0	;tblptru may be non-zero
  2250  000810                     	endif
  2251  000810  0008               	tblrd		*
  2252  000812  CFF5 F078          	movff	tablat,printf@c
  2253  000816  0100               	movlb	0	; () banked
  2254  000818  5178               	movf	printf@c& (0+255),w,b
  2255                           
  2256                           ; Switch size 1, requested type "space"
  2257                           ; Number of cases is 3, Range of values is 0 to 117
  2258                           ; switch strategies available:
  2259                           ; Name         Instructions Cycles
  2260                           ; simple_byte           10     6 (average)
  2261                           ;	Chosen strategy is simple_byte
  2262  00081A  0A00               	xorlw	0	; case 0
  2263  00081C  B4D8               	btfsc	status,2,c
  2264  00081E  0012               	return	
  2265  000820  0A66               	xorlw	102	; case 102
  2266  000822  B4D8               	btfsc	status,2,c
  2267  000824  D7E8               	goto	i2l2658
  2268  000826  0A13               	xorlw	19	; case 117
  2269  000828  B4D8               	btfsc	status,2,c
  2270  00082A  D7E8               	goto	i2l2660
  2271  00082C  EFC4  F008         	goto	i2l2906
  2272  000830                     i2l2666:
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;doprnt.c: 825: if(flag & (0x700)) {
  2276  000830  0E07               	movlw	7
  2277  000832  0100               	movlb	0	; () banked
  2278  000834  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2279  000836  B4D8               	btfsc	status,2,c
  2280  000838  D350               	goto	i2l2826
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;doprnt.c: 827: if(flag & 0x1000)
  2284  00083A  0100               	movlb	0	; () banked
  2285  00083C  A970               	btfss	(printf@flag+1)& (0+255),4,b
  2286  00083E  D005               	goto	i2l2672
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;doprnt.c: 829: prec = 6;
  2290  000840  0E00               	movlw	0
  2291  000842  0100               	movlb	0	; () banked
  2292  000844  6F77               	movwf	(printf@prec+1)& (0+255),b
  2293  000846  0E06               	movlw	6
  2294  000848  6F76               	movwf	printf@prec& (0+255),b
  2295  00084A                     i2l2672:
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2299  00084A  C063  FFD9         	movff	printf@ap,fsr2l
  2300  00084E  C064  FFDA         	movff	printf@ap+1,fsr2h
  2301  000852  CFDE F073          	movff	postinc2,printf@fval
  2302  000856  CFDE F074          	movff	postinc2,printf@fval+1
  2303  00085A  CFDD F075          	movff	postdec2,printf@fval+2
  2304                           
  2305                           ; BSR set to: 0
  2306  00085E  0E03               	movlw	3
  2307  000860  0100               	movlb	0	; () banked
  2308  000862  2763               	addwf	printf@ap& (0+255),f,b
  2309  000864  0E00               	movlw	0
  2310  000866  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 831: if(fval < 0.0) {
  2314  000868  0100               	movlb	0	; () banked
  2315  00086A  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  2316  00086C  D011               	goto	i2l2682
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 832: fval = -fval;
  2320  00086E  C073  F001         	movff	printf@fval,___ftneg@f1
  2321  000872  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  2322  000876  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  2323  00087A  EC0C  F012         	call	___ftneg	;wreg free
  2324  00087E  C001  F073         	movff	?___ftneg,printf@fval
  2325  000882  C002  F074         	movff	?___ftneg+1,printf@fval+1
  2326  000886  C003  F075         	movff	?___ftneg+2,printf@fval+2
  2327                           
  2328                           ;doprnt.c: 833: flag |= 0x03;
  2329  00088A  0E03               	movlw	3
  2330  00088C  0100               	movlb	0	; () banked
  2331  00088E  136F               	iorwf	printf@flag& (0+255),f,b
  2332  000890                     i2l2682:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;doprnt.c: 834: }
  2336                           ;doprnt.c: 835: exp = 0;
  2337  000890  0E00               	movlw	0
  2338  000892  0100               	movlb	0	; () banked
  2339  000894  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2340  000896  0E00               	movlw	0
  2341  000898  6F6D               	movwf	printf@exp& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 836: if( fval!=0) {
  2345  00089A  0100               	movlb	0	; () banked
  2346  00089C  5173               	movf	printf@fval& (0+255),w,b
  2347  00089E  0100               	movlb	0	; () banked
  2348  0008A0  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2349  0008A2  0100               	movlb	0	; () banked
  2350  0008A4  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2351  0008A6  B4D8               	btfsc	status,2,c
  2352  0008A8  D08B               	goto	i2l2710
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2356  0008AA  0E82               	movlw	130
  2357  0008AC  6E4D               	movwf	??_printf& (0+255),c
  2358  0008AE  0EFF               	movlw	255
  2359  0008B0  6E4E               	movwf	(??_printf+1)& (0+255),c
  2360  0008B2  C073  F04F         	movff	printf@fval,??_printf+2
  2361  0008B6  C074  F050         	movff	printf@fval+1,??_printf+3
  2362  0008BA  C075  F051         	movff	printf@fval+2,??_printf+4
  2363  0008BE  C076  F052         	movff	printf@fval+3,??_printf+5
  2364  0008C2  0E10               	movlw	16
  2365  0008C4  D005               	goto	i2u268_40
  2366  0008C6                     i2u268_45:
  2367  0008C6  90D8               	bcf	status,0,c
  2368  0008C8  3252               	rrcf	??_printf+5,f,c
  2369  0008CA  3251               	rrcf	??_printf+4,f,c
  2370  0008CC  3250               	rrcf	??_printf+3,f,c
  2371  0008CE  324F               	rrcf	??_printf+2,f,c
  2372  0008D0                     i2u268_40:
  2373  0008D0  2EE8               	decfsz	wreg,f,c
  2374  0008D2  D7F9               	goto	i2u268_45
  2375  0008D4  504F               	movf	??_printf+2,w,c
  2376  0008D6  244D               	addwf	??_printf,w,c
  2377  0008D8  0100               	movlb	0	; () banked
  2378  0008DA  6F6D               	movwf	printf@exp& (0+255),b
  2379  0008DC  0E00               	movlw	0
  2380  0008DE  204E               	addwfc	??_printf+1,w,c
  2381  0008E0  0100               	movlb	0	; () banked
  2382  0008E2  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;doprnt.c: 838: exp--;
  2386  0008E4  0100               	movlb	0	; () banked
  2387  0008E6  076D               	decf	printf@exp& (0+255),f,b
  2388  0008E8  A0D8               	btfss	status,0,c
  2389  0008EA  076E               	decf	(printf@exp+1)& (0+255),f,b
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;doprnt.c: 839: exp *= 3;
  2393  0008EC  C06D  F00F         	movff	printf@exp,___wmul@multiplier
  2394  0008F0  C06E  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2395  0008F4  0E00               	movlw	0
  2396  0008F6  6E12               	movwf	___wmul@multiplicand+1,c
  2397  0008F8  0E03               	movlw	3
  2398  0008FA  6E11               	movwf	___wmul@multiplicand,c
  2399  0008FC  ECF9  F011         	call	___wmul	;wreg free
  2400  000900  C00F  F06D         	movff	?___wmul,printf@exp
  2401  000904  C010  F06E         	movff	?___wmul+1,printf@exp+1
  2402                           
  2403                           ;doprnt.c: 840: exp /= 10;
  2404  000908  C06D  F007         	movff	printf@exp,___awdiv@dividend
  2405  00090C  C06E  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2406  000910  0E00               	movlw	0
  2407  000912  6E0A               	movwf	___awdiv@divisor+1,c
  2408  000914  0E0A               	movlw	10
  2409  000916  6E09               	movwf	___awdiv@divisor,c
  2410  000918  EC4B  F010         	call	___awdiv	;wreg free
  2411  00091C  C007  F06D         	movff	?___awdiv,printf@exp
  2412  000920  C008  F06E         	movff	?___awdiv+1,printf@exp+1
  2413                           
  2414                           ;doprnt.c: 841: if(exp < 0)
  2415  000924  0100               	movlb	0	; () banked
  2416  000926  AF6E               	btfss	(printf@exp+1)& (0+255),7,b
  2417  000928  D004               	goto	i2l2698
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 842: exp--;
  2421  00092A  0100               	movlb	0	; () banked
  2422  00092C  076D               	decf	printf@exp& (0+255),f,b
  2423  00092E  A0D8               	btfss	status,0,c
  2424  000930  076E               	decf	(printf@exp+1)& (0+255),f,b
  2425  000932                     i2l2698:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2429  000932  0100               	movlb	0	; () banked
  2430  000934  516D               	movf	printf@exp& (0+255),w,b
  2431  000936  0800               	sublw	0
  2432  000938  ECD3  F008         	call	_scale
  2433  00093C  C030  F069         	movff	?_scale,printf@tmpval
  2434  000940  C031  F06A         	movff	?_scale+1,printf@tmpval+1
  2435  000944  C032  F06B         	movff	?_scale+2,printf@tmpval+2
  2436                           
  2437                           ;doprnt.c: 847: tmpval.integ *= fval;
  2438  000948  C069  F021         	movff	printf@tmpval,___ftmul@f1
  2439  00094C  C06A  F022         	movff	printf@tmpval+1,___ftmul@f1+1
  2440  000950  C06B  F023         	movff	printf@tmpval+2,___ftmul@f1+2
  2441  000954  C073  F024         	movff	printf@fval,___ftmul@f2
  2442  000958  C074  F025         	movff	printf@fval+1,___ftmul@f2+1
  2443  00095C  C075  F026         	movff	printf@fval+2,___ftmul@f2+2
  2444  000960  ECF1  F00D         	call	___ftmul	;wreg free
  2445  000964  C021  F069         	movff	?___ftmul,printf@tmpval
  2446  000968  C022  F06A         	movff	?___ftmul+1,printf@tmpval+1
  2447  00096C  C023  F06B         	movff	?___ftmul+2,printf@tmpval+2
  2448                           
  2449                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2450  000970  C069  F001         	movff	printf@tmpval,___ftge@ff1
  2451  000974  C06A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2452  000978  C06B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2453  00097C  0E00               	movlw	0
  2454  00097E  6E04               	movwf	___ftge@ff2,c
  2455  000980  0E80               	movlw	128
  2456  000982  6E05               	movwf	___ftge@ff2+1,c
  2457  000984  0E3F               	movlw	63
  2458  000986  6E06               	movwf	___ftge@ff2+2,c
  2459  000988  EC03  F010         	call	___ftge	;wreg free
  2460  00098C  B0D8               	btfsc	status,0,c
  2461  00098E  D005               	goto	i2l2706
  2462                           
  2463                           ;doprnt.c: 849: exp--;
  2464  000990  0100               	movlb	0	; () banked
  2465  000992  076D               	decf	printf@exp& (0+255),f,b
  2466  000994  A0D8               	btfss	status,0,c
  2467  000996  076E               	decf	(printf@exp+1)& (0+255),f,b
  2468  000998  D013               	goto	i2l2710
  2469  00099A                     i2l2706:
  2470                           
  2471                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2472  00099A  C069  F001         	movff	printf@tmpval,___ftge@ff1
  2473  00099E  C06A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2474  0009A2  C06B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2475  0009A6  0E00               	movlw	0
  2476  0009A8  6E04               	movwf	___ftge@ff2,c
  2477  0009AA  0E20               	movlw	32
  2478  0009AC  6E05               	movwf	___ftge@ff2+1,c
  2479  0009AE  0E41               	movlw	65
  2480  0009B0  6E06               	movwf	___ftge@ff2+2,c
  2481  0009B2  EC03  F010         	call	___ftge	;wreg free
  2482  0009B6  A0D8               	btfss	status,0,c
  2483  0009B8  D003               	goto	i2l2710
  2484                           
  2485                           ;doprnt.c: 851: exp++;
  2486  0009BA  0100               	movlb	0	; () banked
  2487  0009BC  4B6D               	infsnz	printf@exp& (0+255),f,b
  2488  0009BE  2B6E               	incf	(printf@exp+1)& (0+255),f,b
  2489  0009C0                     i2l2710:
  2490                           
  2491                           ;doprnt.c: 852: }
  2492                           ;doprnt.c: 1112: if(prec <= 12)
  2493  0009C0  0100               	movlb	0	; () banked
  2494  0009C2  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  2495  0009C4  D008               	goto	i2l2712
  2496  0009C6  0100               	movlb	0	; () banked
  2497  0009C8  5177               	movf	(printf@prec+1)& (0+255),w,b
  2498  0009CA  E11D               	bnz	i2l2714
  2499  0009CC  0E0D               	movlw	13
  2500  0009CE  0100               	movlb	0	; () banked
  2501  0009D0  5D76               	subwf	printf@prec& (0+255),w,b
  2502  0009D2  B0D8               	btfsc	status,0,c
  2503  0009D4  D018               	goto	i2l2714
  2504  0009D6                     i2l2712:
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 1113: fval += fround(prec);
  2508  0009D6  C073  F015         	movff	printf@fval,___ftadd@f1
  2509  0009DA  C074  F016         	movff	printf@fval+1,___ftadd@f1+1
  2510  0009DE  C075  F017         	movff	printf@fval+2,___ftadd@f1+2
  2511  0009E2  0100               	movlb	0	; () banked
  2512  0009E4  5176               	movf	printf@prec& (0+255),w,b
  2513  0009E6  ECCB  F00A         	call	_fround
  2514  0009EA  C030  F018         	movff	?_fround,___ftadd@f2
  2515  0009EE  C031  F019         	movff	?_fround+1,___ftadd@f2+1
  2516  0009F2  C032  F01A         	movff	?_fround+2,___ftadd@f2+2
  2517  0009F6  ECEE  F00B         	call	___ftadd	;wreg free
  2518  0009FA  C015  F073         	movff	?___ftadd,printf@fval
  2519  0009FE  C016  F074         	movff	?___ftadd+1,printf@fval+1
  2520  000A02  C017  F075         	movff	?___ftadd+2,printf@fval+2
  2521  000A06                     i2l2714:
  2522                           
  2523                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2524  000A06  0100               	movlb	0	; () banked
  2525  000A08  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2526  000A0A  D008               	goto	i2l2716
  2527  000A0C  0100               	movlb	0	; () banked
  2528  000A0E  516E               	movf	(printf@exp+1)& (0+255),w,b
  2529  000A10  E126               	bnz	i2l2722
  2530  000A12  0E0A               	movlw	10
  2531  000A14  0100               	movlb	0	; () banked
  2532  000A16  5D6D               	subwf	printf@exp& (0+255),w,b
  2533  000A18  B0D8               	btfsc	status,0,c
  2534  000A1A  D021               	goto	i2l2722
  2535  000A1C                     i2l2716:
  2536                           
  2537                           ; BSR set to: 0
  2538  000A1C  0100               	movlb	0	; () banked
  2539  000A1E  5173               	movf	printf@fval& (0+255),w,b
  2540  000A20  0100               	movlb	0	; () banked
  2541  000A22  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2542  000A24  0100               	movlb	0	; () banked
  2543  000A26  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2544  000A28  B4D8               	btfsc	status,2,c
  2545  000A2A  D05B               	goto	i2l2736
  2546                           
  2547                           ; BSR set to: 0
  2548  000A2C  C073  F037         	movff	printf@fval,___fttol@f1
  2549  000A30  C074  F038         	movff	printf@fval+1,___fttol@f1+1
  2550  000A34  C075  F039         	movff	printf@fval+2,___fttol@f1+2
  2551  000A38  EC6B  F00E         	call	___fttol	;wreg free
  2552  000A3C  5037               	movf	?___fttol,w,c
  2553  000A3E  1038               	iorwf	?___fttol+1,w,c
  2554  000A40  1039               	iorwf	?___fttol+2,w,c
  2555  000A42  103A               	iorwf	?___fttol+3,w,c
  2556  000A44  A4D8               	btfss	status,2,c
  2557  000A46  D04D               	goto	i2l2736
  2558  000A48  0100               	movlb	0	; () banked
  2559  000A4A  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2560  000A4C  D04A               	goto	i2l2736
  2561  000A4E  0100               	movlb	0	; () banked
  2562  000A50  516E               	movf	(printf@exp+1)& (0+255),w,b
  2563  000A52  E105               	bnz	i2l2722
  2564  000A54  0E02               	movlw	2
  2565  000A56  0100               	movlb	0	; () banked
  2566  000A58  5D6D               	subwf	printf@exp& (0+255),w,b
  2567  000A5A  A0D8               	btfss	status,0,c
  2568  000A5C  D042               	goto	i2l2736
  2569  000A5E                     i2l2722:
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2573  000A5E  C069  F001         	movff	printf@tmpval,___ftge@ff1
  2574  000A62  C06A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2575  000A66  C06B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2576  000A6A  0E70               	movlw	112
  2577  000A6C  6E04               	movwf	___ftge@ff2,c
  2578  000A6E  0E89               	movlw	137
  2579  000A70  6E05               	movwf	___ftge@ff2+1,c
  2580  000A72  0E40               	movlw	64
  2581  000A74  6E06               	movwf	___ftge@ff2+2,c
  2582  000A76  EC03  F010         	call	___ftge	;wreg free
  2583  000A7A  B0D8               	btfsc	status,0,c
  2584  000A7C  D003               	goto	i2l2726
  2585                           
  2586                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2587  000A7E  0100               	movlb	0	; () banked
  2588  000A80  0EF7               	movlw	247
  2589  000A82  D002               	goto	L1
  2590  000A84                     i2l2726:
  2591                           
  2592                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2593  000A84  0100               	movlb	0	; () banked
  2594  000A86  0EF8               	movlw	248
  2595  000A88                     L1:
  2596  000A88  276D               	addwf	printf@exp& (0+255),f,b
  2597  000A8A  0EFF               	movlw	255
  2598  000A8C  236E               	addwfc	(printf@exp+1)& (0+255),f,b
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1124: }
  2602                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2603                           
  2604                           ; BSR set to: 0
  2605  000A8E  0100               	movlb	0	; () banked
  2606  000A90  516D               	movf	printf@exp& (0+255),w,b
  2607  000A92  ECD3  F008         	call	_scale
  2608  000A96  C030  F069         	movff	?_scale,printf@tmpval
  2609  000A9A  C031  F06A         	movff	?_scale+1,printf@tmpval+1
  2610  000A9E  C032  F06B         	movff	?_scale+2,printf@tmpval+2
  2611                           
  2612                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2613  000AA2  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2614  000AA6  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2615  000AAA  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2616  000AAE  C069  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2617  000AB2  C06A  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2618  000AB6  C06B  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2619  000ABA  ECC4  F00C         	call	__tdiv_to_l_	;wreg free
  2620  000ABE  C001  F065         	movff	?__tdiv_to_l_,printf@val
  2621  000AC2  C002  F066         	movff	?__tdiv_to_l_+1,printf@val+1
  2622  000AC6  C003  F067         	movff	?__tdiv_to_l_+2,printf@val+2
  2623  000ACA  C004  F068         	movff	?__tdiv_to_l_+3,printf@val+3
  2624                           
  2625                           ;doprnt.c: 1129: fval = 0.0;
  2626  000ACE  0E00               	movlw	0
  2627  000AD0  0100               	movlb	0	; () banked
  2628  000AD2  6F73               	movwf	printf@fval& (0+255),b
  2629  000AD4  0E00               	movlw	0
  2630  000AD6  0100               	movlb	0	; () banked
  2631  000AD8  6F74               	movwf	(printf@fval+1)& (0+255),b
  2632  000ADA  0E00               	movlw	0
  2633  000ADC  0100               	movlb	0	; () banked
  2634  000ADE  6F75               	movwf	(printf@fval+2)& (0+255),b
  2635                           
  2636                           ;doprnt.c: 1130: } else {
  2637  000AE0  D033               	goto	i2l2740
  2638  000AE2                     i2l2736:
  2639                           
  2640                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2641  000AE2  C073  F037         	movff	printf@fval,___fttol@f1
  2642  000AE6  C074  F038         	movff	printf@fval+1,___fttol@f1+1
  2643  000AEA  C075  F039         	movff	printf@fval+2,___fttol@f1+2
  2644  000AEE  EC6B  F00E         	call	___fttol	;wreg free
  2645  000AF2  C037  F065         	movff	?___fttol,printf@val
  2646  000AF6  C038  F066         	movff	?___fttol+1,printf@val+1
  2647  000AFA  C039  F067         	movff	?___fttol+2,printf@val+2
  2648  000AFE  C03A  F068         	movff	?___fttol+3,printf@val+3
  2649                           
  2650                           ;doprnt.c: 1132: fval -= (double)val;
  2651  000B02  C073  F021         	movff	printf@fval,___ftsub@f1
  2652  000B06  C074  F022         	movff	printf@fval+1,___ftsub@f1+1
  2653  000B0A  C075  F023         	movff	printf@fval+2,___ftsub@f1+2
  2654  000B0E  C065  F009         	movff	printf@val,___lltoft@c
  2655  000B12  C066  F00A         	movff	printf@val+1,___lltoft@c+1
  2656  000B16  C067  F00B         	movff	printf@val+2,___lltoft@c+2
  2657  000B1A  C068  F00C         	movff	printf@val+3,___lltoft@c+3
  2658  000B1E  EC39  F011         	call	___lltoft	;wreg free
  2659  000B22  C009  F024         	movff	?___lltoft,___ftsub@f2
  2660  000B26  C00A  F025         	movff	?___lltoft+1,___ftsub@f2+1
  2661  000B2A  C00B  F026         	movff	?___lltoft+2,___ftsub@f2+2
  2662  000B2E  ECAA  F011         	call	___ftsub	;wreg free
  2663  000B32  C021  F073         	movff	?___ftsub,printf@fval
  2664  000B36  C022  F074         	movff	?___ftsub+1,printf@fval+1
  2665  000B3A  C023  F075         	movff	?___ftsub+2,printf@fval+2
  2666                           
  2667                           ;doprnt.c: 1133: exp = 0;
  2668  000B3E  0E00               	movlw	0
  2669  000B40  0100               	movlb	0	; () banked
  2670  000B42  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2671  000B44  0E00               	movlw	0
  2672  000B46  6F6D               	movwf	printf@exp& (0+255),b
  2673  000B48                     i2l2740:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;doprnt.c: 1134: }
  2677                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2678  000B48  0E01               	movlw	1
  2679  000B4A  0100               	movlb	0	; () banked
  2680  000B4C  6F78               	movwf	printf@c& (0+255),b
  2681  000B4E                     i2l2742:
  2682                           
  2683                           ; BSR set to: 0
  2684  000B4E  0E0A               	movlw	10
  2685  000B50  0100               	movlb	0	; () banked
  2686  000B52  1978               	xorwf	printf@c& (0+255),w,b
  2687  000B54  B4D8               	btfsc	status,2,c
  2688  000B56  D01E               	goto	i2l2754
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1137: if(val < dpowers[c])
  2692                           
  2693                           ; BSR set to: 0
  2694                           
  2695                           ; BSR set to: 0
  2696  000B58  0100               	movlb	0	; () banked
  2697  000B5A  5178               	movf	printf@c& (0+255),w,b
  2698  000B5C  0D04               	mullw	4
  2699  000B5E  0E01               	movlw	low _dpowers
  2700  000B60  24F3               	addwf	prodl,w,c
  2701  000B62  6EF6               	movwf	tblptrl,c
  2702  000B64  0E06               	movlw	high _dpowers
  2703  000B66  20F4               	addwfc	prodh,w,c
  2704  000B68  6EF7               	movwf	tblptrh,c
  2705  000B6A                     	if	0	;There are less than 3 active tblptr bytes
  2706  000B6A                     	endif
  2707  000B6A  0009               	tblrd		*+
  2708  000B6C  50F5               	movf	tablat,w,c
  2709  000B6E  0100               	movlb	0	; () banked
  2710  000B70  5D65               	subwf	printf@val& (0+255),w,b
  2711  000B72  0009               	tblrd		*+
  2712  000B74  50F5               	movf	tablat,w,c
  2713  000B76  0100               	movlb	0	; () banked
  2714  000B78  5966               	subwfb	(printf@val+1)& (0+255),w,b
  2715  000B7A  0009               	tblrd		*+
  2716  000B7C  50F5               	movf	tablat,w,c
  2717  000B7E  0100               	movlb	0	; () banked
  2718  000B80  5967               	subwfb	(printf@val+2)& (0+255),w,b
  2719  000B82  0009               	tblrd		*+
  2720  000B84  50F5               	movf	tablat,w,c
  2721  000B86  0100               	movlb	0	; () banked
  2722  000B88  5968               	subwfb	(printf@val+3)& (0+255),w,b
  2723  000B8A  A0D8               	btfss	status,0,c
  2724  000B8C  D003               	goto	i2l2754
  2725                           
  2726                           ; BSR set to: 0
  2727                           
  2728                           ; BSR set to: 0
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;doprnt.c: 1138: break;
  2732  000B8E  0100               	movlb	0	; () banked
  2733  000B90  2B78               	incf	printf@c& (0+255),f,b
  2734  000B92  D7DD               	goto	i2l2742
  2735  000B94                     i2l2754:
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;doprnt.c: 1142: width -= prec + c + exp;
  2739  000B94  C078  F04D         	movff	printf@c,??_printf
  2740  000B98  6A4E               	clrf	(??_printf+1)& (0+255),c
  2741  000B9A  BE4D               	btfsc	??_printf& (0+255),7,c
  2742  000B9C  064E               	decf	(??_printf+1)& (0+255),f,c
  2743  000B9E  0100               	movlb	0	; () banked
  2744  000BA0  5176               	movf	printf@prec& (0+255),w,b
  2745  000BA2  264D               	addwf	??_printf,f,c
  2746  000BA4  0100               	movlb	0	; () banked
  2747  000BA6  5177               	movf	(printf@prec+1)& (0+255),w,b
  2748  000BA8  224E               	addwfc	??_printf+1,f,c
  2749  000BAA  0100               	movlb	0	; () banked
  2750  000BAC  516D               	movf	printf@exp& (0+255),w,b
  2751  000BAE  264D               	addwf	??_printf,f,c
  2752  000BB0  0100               	movlb	0	; () banked
  2753  000BB2  516E               	movf	(printf@exp+1)& (0+255),w,b
  2754  000BB4  224E               	addwfc	??_printf+1,f,c
  2755  000BB6  504D               	movf	??_printf,w,c
  2756  000BB8  0100               	movlb	0	; () banked
  2757  000BBA  5F71               	subwf	printf@width& (0+255),f,b
  2758  000BBC  504E               	movf	??_printf+1,w,c
  2759  000BBE  0100               	movlb	0	; () banked
  2760  000BC0  5B72               	subwfb	(printf@width+1)& (0+255),f,b
  2761                           
  2762                           ;doprnt.c: 1143: if(
  2763                           ;doprnt.c: 1147: prec)
  2764  000BC2  0100               	movlb	0	; () banked
  2765  000BC4  5176               	movf	printf@prec& (0+255),w,b
  2766  000BC6  0100               	movlb	0	; () banked
  2767  000BC8  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2768  000BCA  B4D8               	btfsc	status,2,c
  2769  000BCC  D004               	goto	i2l2758
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;doprnt.c: 1148: width--;
  2773  000BCE  0100               	movlb	0	; () banked
  2774  000BD0  0771               	decf	printf@width& (0+255),f,b
  2775  000BD2  A0D8               	btfss	status,0,c
  2776  000BD4  0772               	decf	(printf@width+1)& (0+255),f,b
  2777  000BD6                     i2l2758:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1149: if(flag & 0x03)
  2781  000BD6  0E03               	movlw	3
  2782  000BD8  0100               	movlb	0	; () banked
  2783  000BDA  156F               	andwf	printf@flag& (0+255),w,b
  2784  000BDC  6E4D               	movwf	??_printf& (0+255),c
  2785  000BDE  0E00               	movlw	0
  2786  000BE0  0100               	movlb	0	; () banked
  2787  000BE2  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2788  000BE4  6E4E               	movwf	(??_printf+1)& (0+255),c
  2789  000BE6  504D               	movf	??_printf,w,c
  2790  000BE8  104E               	iorwf	??_printf+1,w,c
  2791  000BEA  B4D8               	btfsc	status,2,c
  2792  000BEC  D004               	goto	i2l2762
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;doprnt.c: 1150: width--;
  2796  000BEE  0100               	movlb	0	; () banked
  2797  000BF0  0771               	decf	printf@width& (0+255),f,b
  2798  000BF2  A0D8               	btfss	status,0,c
  2799  000BF4  0772               	decf	(printf@width+1)& (0+255),f,b
  2800  000BF6                     i2l2762:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;doprnt.c: 1153: if(flag & 0x04) {
  2804  000BF6  0100               	movlb	0	; () banked
  2805  000BF8  A56F               	btfss	printf@flag& (0+255),2,b
  2806  000BFA  D029               	goto	i2l2778
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;doprnt.c: 1157: if(flag & 0x03)
  2810  000BFC  0E03               	movlw	3
  2811  000BFE  0100               	movlb	0	; () banked
  2812  000C00  156F               	andwf	printf@flag& (0+255),w,b
  2813  000C02  6E4D               	movwf	??_printf& (0+255),c
  2814  000C04  0E00               	movlw	0
  2815  000C06  0100               	movlb	0	; () banked
  2816  000C08  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2817  000C0A  6E4E               	movwf	(??_printf+1)& (0+255),c
  2818  000C0C  504D               	movf	??_printf,w,c
  2819  000C0E  104E               	iorwf	??_printf+1,w,c
  2820  000C10  B4D8               	btfsc	status,2,c
  2821  000C12  D00B               	goto	i2l2772
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;doprnt.c: 1159: (putch('-') );
  2825  000C14  0E2D               	movlw	45
  2826  000C16  EC99  F012         	call	_putch
  2827                           
  2828                           ;doprnt.c: 1168: while(width > 0) {
  2829  000C1A  D007               	goto	i2l2772
  2830  000C1C                     i2l2768:
  2831                           
  2832                           ;doprnt.c: 1169: (putch('0') );
  2833  000C1C  0E30               	movlw	48
  2834  000C1E  EC99  F012         	call	_putch
  2835                           
  2836                           ;doprnt.c: 1170: width--;
  2837  000C22  0100               	movlb	0	; () banked
  2838  000C24  0771               	decf	printf@width& (0+255),f,b
  2839  000C26  A0D8               	btfss	status,0,c
  2840  000C28  0772               	decf	(printf@width+1)& (0+255),f,b
  2841  000C2A                     i2l2772:
  2842  000C2A  0100               	movlb	0	; () banked
  2843  000C2C  BF72               	btfsc	(printf@width+1)& (0+255),7,b
  2844  000C2E  D06F               	goto	i2l2790
  2845  000C30  0100               	movlb	0	; () banked
  2846  000C32  5172               	movf	(printf@width+1)& (0+255),w,b
  2847  000C34  E1F3               	bnz	i2l2768
  2848  000C36  0100               	movlb	0	; () banked
  2849  000C38  0571               	decf	printf@width& (0+255),w,b
  2850  000C3A  A0D8               	btfss	status,0,c
  2851  000C3C  D068               	goto	i2l2790
  2852  000C3E  D7EE               	goto	i2l2768
  2853  000C40                     i2l2774:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;doprnt.c: 1181: (putch(' ') );
  2857  000C40  0E20               	movlw	32
  2858  000C42  EC99  F012         	call	_putch
  2859                           
  2860                           ;doprnt.c: 1182: width--;
  2861  000C46  0100               	movlb	0	; () banked
  2862  000C48  0771               	decf	printf@width& (0+255),f,b
  2863  000C4A  A0D8               	btfss	status,0,c
  2864  000C4C  0772               	decf	(printf@width+1)& (0+255),f,b
  2865  000C4E                     i2l2778:
  2866                           
  2867                           ; BSR set to: 0
  2868  000C4E  0100               	movlb	0	; () banked
  2869  000C50  BF72               	btfsc	(printf@width+1)& (0+255),7,b
  2870  000C52  D007               	goto	i2l2780
  2871  000C54  0100               	movlb	0	; () banked
  2872  000C56  5172               	movf	(printf@width+1)& (0+255),w,b
  2873  000C58  E1F3               	bnz	i2l2774
  2874  000C5A  0100               	movlb	0	; () banked
  2875  000C5C  0571               	decf	printf@width& (0+255),w,b
  2876  000C5E  B0D8               	btfsc	status,0,c
  2877  000C60  D7EF               	goto	i2l2774
  2878  000C62                     i2l2780:
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;doprnt.c: 1183: }
  2882                           ;doprnt.c: 1188: if(flag & 0x03)
  2883  000C62  0E03               	movlw	3
  2884  000C64  0100               	movlb	0	; () banked
  2885  000C66  156F               	andwf	printf@flag& (0+255),w,b
  2886  000C68  6E4D               	movwf	??_printf& (0+255),c
  2887  000C6A  0E00               	movlw	0
  2888  000C6C  0100               	movlb	0	; () banked
  2889  000C6E  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2890  000C70  6E4E               	movwf	(??_printf+1)& (0+255),c
  2891  000C72  504D               	movf	??_printf,w,c
  2892  000C74  104E               	iorwf	??_printf+1,w,c
  2893  000C76  B4D8               	btfsc	status,2,c
  2894  000C78  D04A               	goto	i2l2790
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 1190: (putch('-') );
  2898  000C7A  0E2D               	movlw	45
  2899  000C7C  EC99  F012         	call	_putch
  2900                           
  2901                           ;doprnt.c: 1195: }
  2902                           ;doprnt.c: 1196: while(c--) {
  2903  000C80  D046               	goto	i2l2790
  2904  000C82                     i2l2784:
  2905                           
  2906                           ;doprnt.c: 1200: {
  2907                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2908  000C82  C065  F001         	movff	printf@val,___lldiv@dividend
  2909  000C86  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  2910  000C8A  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  2911  000C8E  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  2912  000C92  0100               	movlb	0	; () banked
  2913  000C94  5178               	movf	printf@c& (0+255),w,b
  2914  000C96  0D04               	mullw	4
  2915  000C98  0E01               	movlw	low _dpowers
  2916  000C9A  24F3               	addwf	prodl,w,c
  2917  000C9C  6EF6               	movwf	tblptrl,c
  2918  000C9E  0E06               	movlw	high _dpowers
  2919  000CA0  20F4               	addwfc	prodh,w,c
  2920  000CA2  6EF7               	movwf	tblptrh,c
  2921  000CA4                     	if	0	;There are less than 3 active tblptr bytes
  2922  000CA4                     	endif
  2923  000CA4  0009               	tblrd		*+
  2924  000CA6  CFF5 F005          	movff	tablat,___lldiv@divisor
  2925  000CAA  0009               	tblrd		*+
  2926  000CAC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2927  000CB0  0009               	tblrd		*+
  2928  000CB2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2929  000CB6  000A               	tblrd		*-
  2930  000CB8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2931  000CBC  EC8D  F010         	call	___lldiv	;wreg free
  2932  000CC0  C001  F069         	movff	?___lldiv,printf@tmpval
  2933  000CC4  C002  F06A         	movff	?___lldiv+1,printf@tmpval+1
  2934  000CC8  C003  F06B         	movff	?___lldiv+2,printf@tmpval+2
  2935  000CCC  C004  F06C         	movff	?___lldiv+3,printf@tmpval+3
  2936                           
  2937                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2938  000CD0  C069  F00E         	movff	printf@tmpval,___llmod@dividend
  2939  000CD4  C06A  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2940  000CD8  C06B  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2941  000CDC  C06C  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2942  000CE0  0E0A               	movlw	10
  2943  000CE2  6E12               	movwf	___llmod@divisor,c
  2944  000CE4  0E00               	movlw	0
  2945  000CE6  6E13               	movwf	___llmod@divisor+1,c
  2946  000CE8  0E00               	movlw	0
  2947  000CEA  6E14               	movwf	___llmod@divisor+2,c
  2948  000CEC  0E00               	movlw	0
  2949  000CEE  6E15               	movwf	___llmod@divisor+3,c
  2950  000CF0  EC06  F011         	call	___llmod	;wreg free
  2951  000CF4  C00E  F069         	movff	?___llmod,printf@tmpval
  2952  000CF8  C00F  F06A         	movff	?___llmod+1,printf@tmpval+1
  2953  000CFC  C010  F06B         	movff	?___llmod+2,printf@tmpval+2
  2954  000D00  C011  F06C         	movff	?___llmod+3,printf@tmpval+3
  2955                           
  2956                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2957  000D04  0100               	movlb	0	; () banked
  2958  000D06  5169               	movf	printf@tmpval& (0+255),w,b
  2959  000D08  0F30               	addlw	48
  2960  000D0A  EC99  F012         	call	_putch
  2961  000D0E                     i2l2790:
  2962  000D0E  0100               	movlb	0	; () banked
  2963  000D10  0778               	decf	printf@c& (0+255),f,b
  2964  000D12  0100               	movlb	0	; () banked
  2965  000D14  2978               	incf	printf@c& (0+255),w,b
  2966  000D16  B4D8               	btfsc	status,2,c
  2967  000D18  D008               	goto	i2l2796
  2968  000D1A  D7B3               	goto	i2l2784
  2969  000D1C                     i2l2792:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 1208: (putch('0') );
  2973  000D1C  0E30               	movlw	48
  2974  000D1E  EC99  F012         	call	_putch
  2975                           
  2976                           ;doprnt.c: 1209: exp--;
  2977  000D22  0100               	movlb	0	; () banked
  2978  000D24  076D               	decf	printf@exp& (0+255),f,b
  2979  000D26  A0D8               	btfss	status,0,c
  2980  000D28  076E               	decf	(printf@exp+1)& (0+255),f,b
  2981  000D2A                     i2l2796:
  2982                           
  2983                           ; BSR set to: 0
  2984  000D2A  0100               	movlb	0	; () banked
  2985  000D2C  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2986  000D2E  D007               	goto	i2l2798
  2987  000D30  0100               	movlb	0	; () banked
  2988  000D32  516E               	movf	(printf@exp+1)& (0+255),w,b
  2989  000D34  E1F3               	bnz	i2l2792
  2990  000D36  0100               	movlb	0	; () banked
  2991  000D38  056D               	decf	printf@exp& (0+255),w,b
  2992  000D3A  B0D8               	btfsc	status,0,c
  2993  000D3C  D7EF               	goto	i2l2792
  2994  000D3E                     i2l2798:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;doprnt.c: 1210: }
  2998                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2999  000D3E  0100               	movlb	0	; () banked
  3000  000D40  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  3001  000D42  D00C               	goto	i2l307
  3002  000D44  0100               	movlb	0	; () banked
  3003  000D46  5177               	movf	(printf@prec+1)& (0+255),w,b
  3004  000D48  E105               	bnz	i2u290_40
  3005  000D4A  0E09               	movlw	9
  3006  000D4C  0100               	movlb	0	; () banked
  3007  000D4E  5D76               	subwf	printf@prec& (0+255),w,b
  3008  000D50  A0D8               	btfss	status,0,c
  3009  000D52  D004               	goto	i2l307
  3010  000D54                     i2u290_40:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3014  000D54  0E08               	movlw	8
  3015  000D56  0100               	movlb	0	; () banked
  3016  000D58  6F78               	movwf	printf@c& (0+255),b
  3017  000D5A  D002               	goto	i2l2802
  3018  000D5C                     i2l307:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;doprnt.c: 1213: else
  3022                           ;doprnt.c: 1214: c = prec;
  3023  000D5C  C076  F078         	movff	printf@prec,printf@c
  3024  000D60                     i2l2802:
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;doprnt.c: 1215: prec -= c;
  3028  000D60  0100               	movlb	0	; () banked
  3029  000D62  5178               	movf	printf@c& (0+255),w,b
  3030  000D64  0100               	movlb	0	; () banked
  3031  000D66  5F76               	subwf	printf@prec& (0+255),f,b
  3032  000D68  0E00               	movlw	0
  3033  000D6A  0100               	movlb	0	; () banked
  3034  000D6C  BF78               	btfsc	printf@c& (0+255),7,b
  3035  000D6E  0EFF               	movlw	255
  3036  000D70  0100               	movlb	0	; () banked
  3037  000D72  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;doprnt.c: 1219: if(c)
  3041  000D74  0100               	movlb	0	; () banked
  3042  000D76  5178               	movf	printf@c& (0+255),w,b
  3043  000D78  0100               	movlb	0	; () banked
  3044  000D7A  B4D8               	btfsc	status,2,c
  3045  000D7C  D003               	goto	i2l2808
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;doprnt.c: 1221: (putch('.') );
  3049  000D7E  0E2E               	movlw	46
  3050  000D80  EC99  F012         	call	_putch
  3051  000D84                     i2l2808:
  3052                           
  3053                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3054  000D84  0100               	movlb	0	; () banked
  3055  000D86  5178               	movf	printf@c& (0+255),w,b
  3056  000D88  ECD3  F008         	call	_scale
  3057  000D8C  C030  F060         	movff	?_scale,_printf$1307
  3058  000D90  C031  F061         	movff	?_scale+1,_printf$1307+1
  3059  000D94  C032  F062         	movff	?_scale+2,_printf$1307+2
  3060                           
  3061                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3062  000D98  C073  F024         	movff	printf@fval,___ftmul@f2
  3063  000D9C  C074  F025         	movff	printf@fval+1,___ftmul@f2+1
  3064  000DA0  C075  F026         	movff	printf@fval+2,___ftmul@f2+2
  3065  000DA4  C060  F021         	movff	_printf$1307,___ftmul@f1
  3066  000DA8  C061  F022         	movff	_printf$1307+1,___ftmul@f1+1
  3067  000DAC  C062  F023         	movff	_printf$1307+2,___ftmul@f1+2
  3068  000DB0  ECF1  F00D         	call	___ftmul	;wreg free
  3069  000DB4  C021  F037         	movff	?___ftmul,___fttol@f1
  3070  000DB8  C022  F038         	movff	?___ftmul+1,___fttol@f1+1
  3071  000DBC  C023  F039         	movff	?___ftmul+2,___fttol@f1+2
  3072  000DC0  EC6B  F00E         	call	___fttol	;wreg free
  3073  000DC4  C037  F065         	movff	?___fttol,printf@val
  3074  000DC8  C038  F066         	movff	?___fttol+1,printf@val+1
  3075  000DCC  C039  F067         	movff	?___fttol+2,printf@val+2
  3076  000DD0  C03A  F068         	movff	?___fttol+3,printf@val+3
  3077                           
  3078                           ;doprnt.c: 1228: while(c--) {
  3079  000DD4  D06D               	goto	i2l2818
  3080  000DD6                     i2l2812:
  3081                           
  3082                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3083  000DD6  C065  F001         	movff	printf@val,___lldiv@dividend
  3084  000DDA  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  3085  000DDE  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  3086  000DE2  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  3087  000DE6  0100               	movlb	0	; () banked
  3088  000DE8  5178               	movf	printf@c& (0+255),w,b
  3089  000DEA  0D04               	mullw	4
  3090  000DEC  0E01               	movlw	low _dpowers
  3091  000DEE  24F3               	addwf	prodl,w,c
  3092  000DF0  6EF6               	movwf	tblptrl,c
  3093  000DF2  0E06               	movlw	high _dpowers
  3094  000DF4  20F4               	addwfc	prodh,w,c
  3095  000DF6  6EF7               	movwf	tblptrh,c
  3096  000DF8                     	if	0	;There are less than 3 active tblptr bytes
  3097  000DF8                     	endif
  3098  000DF8  0009               	tblrd		*+
  3099  000DFA  CFF5 F005          	movff	tablat,___lldiv@divisor
  3100  000DFE  0009               	tblrd		*+
  3101  000E00  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3102  000E04  0009               	tblrd		*+
  3103  000E06  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3104  000E0A  000A               	tblrd		*-
  3105  000E0C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3106  000E10  EC8D  F010         	call	___lldiv	;wreg free
  3107  000E14  C001  F069         	movff	?___lldiv,printf@tmpval
  3108  000E18  C002  F06A         	movff	?___lldiv+1,printf@tmpval+1
  3109  000E1C  C003  F06B         	movff	?___lldiv+2,printf@tmpval+2
  3110  000E20  C004  F06C         	movff	?___lldiv+3,printf@tmpval+3
  3111                           
  3112                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3113  000E24  C069  F00E         	movff	printf@tmpval,___llmod@dividend
  3114  000E28  C06A  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3115  000E2C  C06B  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3116  000E30  C06C  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3117  000E34  0E0A               	movlw	10
  3118  000E36  6E12               	movwf	___llmod@divisor,c
  3119  000E38  0E00               	movlw	0
  3120  000E3A  6E13               	movwf	___llmod@divisor+1,c
  3121  000E3C  0E00               	movlw	0
  3122  000E3E  6E14               	movwf	___llmod@divisor+2,c
  3123  000E40  0E00               	movlw	0
  3124  000E42  6E15               	movwf	___llmod@divisor+3,c
  3125  000E44  EC06  F011         	call	___llmod	;wreg free
  3126  000E48  C00E  F069         	movff	?___llmod,printf@tmpval
  3127  000E4C  C00F  F06A         	movff	?___llmod+1,printf@tmpval+1
  3128  000E50  C010  F06B         	movff	?___llmod+2,printf@tmpval+2
  3129  000E54  C011  F06C         	movff	?___llmod+3,printf@tmpval+3
  3130                           
  3131                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3132  000E58  0100               	movlb	0	; () banked
  3133  000E5A  5169               	movf	printf@tmpval& (0+255),w,b
  3134  000E5C  0F30               	addlw	48
  3135  000E5E  EC99  F012         	call	_putch
  3136                           
  3137                           ;doprnt.c: 1232: val %= dpowers[c];
  3138  000E62  C065  F00E         	movff	printf@val,___llmod@dividend
  3139  000E66  C066  F00F         	movff	printf@val+1,___llmod@dividend+1
  3140  000E6A  C067  F010         	movff	printf@val+2,___llmod@dividend+2
  3141  000E6E  C068  F011         	movff	printf@val+3,___llmod@dividend+3
  3142  000E72  0100               	movlb	0	; () banked
  3143  000E74  5178               	movf	printf@c& (0+255),w,b
  3144  000E76  0D04               	mullw	4
  3145  000E78  0E01               	movlw	low _dpowers
  3146  000E7A  24F3               	addwf	prodl,w,c
  3147  000E7C  6EF6               	movwf	tblptrl,c
  3148  000E7E  0E06               	movlw	high _dpowers
  3149  000E80  20F4               	addwfc	prodh,w,c
  3150  000E82  6EF7               	movwf	tblptrh,c
  3151  000E84                     	if	0	;There are less than 3 active tblptr bytes
  3152  000E84                     	endif
  3153  000E84  0009               	tblrd		*+
  3154  000E86  CFF5 F012          	movff	tablat,___llmod@divisor
  3155  000E8A  0009               	tblrd		*+
  3156  000E8C  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3157  000E90  0009               	tblrd		*+
  3158  000E92  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3159  000E96  000A               	tblrd		*-
  3160  000E98  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3161  000E9C  EC06  F011         	call	___llmod	;wreg free
  3162  000EA0  C00E  F065         	movff	?___llmod,printf@val
  3163  000EA4  C00F  F066         	movff	?___llmod+1,printf@val+1
  3164  000EA8  C010  F067         	movff	?___llmod+2,printf@val+2
  3165  000EAC  C011  F068         	movff	?___llmod+3,printf@val+3
  3166  000EB0                     i2l2818:
  3167  000EB0  0100               	movlb	0	; () banked
  3168  000EB2  0778               	decf	printf@c& (0+255),f,b
  3169  000EB4  0100               	movlb	0	; () banked
  3170  000EB6  2978               	incf	printf@c& (0+255),w,b
  3171  000EB8  B4D8               	btfsc	status,2,c
  3172  000EBA  D008               	goto	i2l2824
  3173  000EBC  D78C               	goto	i2l2812
  3174  000EBE                     i2l2820:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;doprnt.c: 1236: (putch('0') );
  3178  000EBE  0E30               	movlw	48
  3179  000EC0  EC99  F012         	call	_putch
  3180                           
  3181                           ;doprnt.c: 1237: prec--;
  3182  000EC4  0100               	movlb	0	; () banked
  3183  000EC6  0776               	decf	printf@prec& (0+255),f,b
  3184  000EC8  A0D8               	btfss	status,0,c
  3185  000ECA  0777               	decf	(printf@prec+1)& (0+255),f,b
  3186  000ECC                     i2l2824:
  3187                           
  3188                           ; BSR set to: 0
  3189  000ECC  0100               	movlb	0	; () banked
  3190  000ECE  5176               	movf	printf@prec& (0+255),w,b
  3191  000ED0  0100               	movlb	0	; () banked
  3192  000ED2  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  3193  000ED4  B4D8               	btfsc	status,2,c
  3194  000ED6  D158               	goto	i2l2906
  3195  000ED8  D7F2               	goto	i2l2820
  3196  000EDA                     i2l2826:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;doprnt.c: 1246: }
  3200                           ;doprnt.c: 1273: {
  3201                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3202  000EDA  C063  FFD9         	movff	printf@ap,fsr2l
  3203  000EDE  C064  FFDA         	movff	printf@ap+1,fsr2h
  3204  000EE2  CFDE F04D          	movff	postinc2,??_printf
  3205  000EE6  CFDD F04E          	movff	postdec2,??_printf+1
  3206  000EEA  C04D  F065         	movff	??_printf,printf@val
  3207  000EEE  C04E  F066         	movff	??_printf+1,printf@val+1
  3208  000EF2  0100               	movlb	0	; () banked
  3209  000EF4  6B67               	clrf	(printf@val+2)& (0+255),b
  3210  000EF6  6B68               	clrf	(printf@val+3)& (0+255),b
  3211                           
  3212                           ; BSR set to: 0
  3213  000EF8  0E02               	movlw	2
  3214  000EFA  0100               	movlb	0	; () banked
  3215  000EFC  2763               	addwf	printf@ap& (0+255),f,b
  3216  000EFE  0E00               	movlw	0
  3217  000F00  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;doprnt.c: 1287: }
  3221                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3222  000F02  0100               	movlb	0	; () banked
  3223  000F04  5176               	movf	printf@prec& (0+255),w,b
  3224  000F06  0100               	movlb	0	; () banked
  3225  000F08  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  3226  000F0A  A4D8               	btfss	status,2,c
  3227  000F0C  D00D               	goto	i2l2836
  3228                           
  3229                           ; BSR set to: 0
  3230  000F0E  0100               	movlb	0	; () banked
  3231  000F10  5165               	movf	printf@val& (0+255),w,b
  3232  000F12  0100               	movlb	0	; () banked
  3233  000F14  1166               	iorwf	(printf@val+1)& (0+255),w,b
  3234  000F16  0100               	movlb	0	; () banked
  3235  000F18  1167               	iorwf	(printf@val+2)& (0+255),w,b
  3236  000F1A  0100               	movlb	0	; () banked
  3237  000F1C  1168               	iorwf	(printf@val+3)& (0+255),w,b
  3238  000F1E  A4D8               	btfss	status,2,c
  3239  000F20  D003               	goto	i2l2836
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;doprnt.c: 1291: prec++;
  3243  000F22  0100               	movlb	0	; () banked
  3244  000F24  4B76               	infsnz	printf@prec& (0+255),f,b
  3245  000F26  2B77               	incf	(printf@prec+1)& (0+255),f,b
  3246  000F28                     i2l2836:
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3250  000F28  0E01               	movlw	1
  3251  000F2A  0100               	movlb	0	; () banked
  3252  000F2C  6F78               	movwf	printf@c& (0+255),b
  3253  000F2E                     i2l2838:
  3254                           
  3255                           ; BSR set to: 0
  3256  000F2E  0E0A               	movlw	10
  3257  000F30  0100               	movlb	0	; () banked
  3258  000F32  1978               	xorwf	printf@c& (0+255),w,b
  3259  000F34  B4D8               	btfsc	status,2,c
  3260  000F36  D01E               	goto	i2l2850
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;doprnt.c: 1306: if(val < dpowers[c])
  3264                           
  3265                           ; BSR set to: 0
  3266                           
  3267                           ; BSR set to: 0
  3268  000F38  0100               	movlb	0	; () banked
  3269  000F3A  5178               	movf	printf@c& (0+255),w,b
  3270  000F3C  0D04               	mullw	4
  3271  000F3E  0E01               	movlw	low _dpowers
  3272  000F40  24F3               	addwf	prodl,w,c
  3273  000F42  6EF6               	movwf	tblptrl,c
  3274  000F44  0E06               	movlw	high _dpowers
  3275  000F46  20F4               	addwfc	prodh,w,c
  3276  000F48  6EF7               	movwf	tblptrh,c
  3277  000F4A                     	if	0	;There are less than 3 active tblptr bytes
  3278  000F4A                     	endif
  3279  000F4A  0009               	tblrd		*+
  3280  000F4C  50F5               	movf	tablat,w,c
  3281  000F4E  0100               	movlb	0	; () banked
  3282  000F50  5D65               	subwf	printf@val& (0+255),w,b
  3283  000F52  0009               	tblrd		*+
  3284  000F54  50F5               	movf	tablat,w,c
  3285  000F56  0100               	movlb	0	; () banked
  3286  000F58  5966               	subwfb	(printf@val+1)& (0+255),w,b
  3287  000F5A  0009               	tblrd		*+
  3288  000F5C  50F5               	movf	tablat,w,c
  3289  000F5E  0100               	movlb	0	; () banked
  3290  000F60  5967               	subwfb	(printf@val+2)& (0+255),w,b
  3291  000F62  0009               	tblrd		*+
  3292  000F64  50F5               	movf	tablat,w,c
  3293  000F66  0100               	movlb	0	; () banked
  3294  000F68  5968               	subwfb	(printf@val+3)& (0+255),w,b
  3295  000F6A  A0D8               	btfss	status,0,c
  3296  000F6C  D003               	goto	i2l2850
  3297                           
  3298                           ; BSR set to: 0
  3299                           
  3300                           ; BSR set to: 0
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;doprnt.c: 1307: break;
  3304  000F6E  0100               	movlb	0	; () banked
  3305  000F70  2B78               	incf	printf@c& (0+255),f,b
  3306  000F72  D7DD               	goto	i2l2838
  3307  000F74                     i2l2850:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;doprnt.c: 1339: if(c < prec)
  3311  000F74  0E80               	movlw	128
  3312  000F76  0100               	movlb	0	; () banked
  3313  000F78  BF78               	btfsc	printf@c& (0+255),7,b
  3314  000F7A  0E7F               	movlw	127
  3315  000F7C  6E4D               	movwf	??_printf& (0+255),c
  3316  000F7E  0100               	movlb	0	; () banked
  3317  000F80  5176               	movf	printf@prec& (0+255),w,b
  3318  000F82  0100               	movlb	0	; () banked
  3319  000F84  5D78               	subwf	printf@c& (0+255),w,b
  3320  000F86  0100               	movlb	0	; () banked
  3321  000F88  5177               	movf	(printf@prec+1)& (0+255),w,b
  3322  000F8A  0A80               	xorlw	128
  3323  000F8C  584D               	subwfb	??_printf& (0+255),w,c
  3324  000F8E  B0D8               	btfsc	status,0,c
  3325  000F90  D003               	goto	i2l2854
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;doprnt.c: 1340: c = prec;
  3329  000F92  C076  F078         	movff	printf@prec,printf@c
  3330  000F96  D016               	goto	i2l2858
  3331  000F98                     i2l2854:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;doprnt.c: 1341: else if(prec < c)
  3335  000F98  0100               	movlb	0	; () banked
  3336  000F9A  5177               	movf	(printf@prec+1)& (0+255),w,b
  3337  000F9C  0A80               	xorlw	128
  3338  000F9E  6E4D               	movwf	??_printf& (0+255),c
  3339  000FA0  0100               	movlb	0	; () banked
  3340  000FA2  5178               	movf	printf@c& (0+255),w,b
  3341  000FA4  0100               	movlb	0	; () banked
  3342  000FA6  5D76               	subwf	printf@prec& (0+255),w,b
  3343  000FA8  0E80               	movlw	128
  3344  000FAA  0100               	movlb	0	; () banked
  3345  000FAC  BF78               	btfsc	printf@c& (0+255),7,b
  3346  000FAE  0E7F               	movlw	127
  3347  000FB0  584D               	subwfb	??_printf& (0+255),w,c
  3348  000FB2  B0D8               	btfsc	status,0,c
  3349  000FB4  D007               	goto	i2l2858
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;doprnt.c: 1342: prec = c;
  3353  000FB6  0100               	movlb	0	; () banked
  3354  000FB8  5178               	movf	printf@c& (0+255),w,b
  3355  000FBA  0100               	movlb	0	; () banked
  3356  000FBC  6F76               	movwf	printf@prec& (0+255),b
  3357  000FBE  6B77               	clrf	(printf@prec+1)& (0+255),b
  3358  000FC0  BF76               	btfsc	printf@prec& (0+255),7,b
  3359  000FC2  0777               	decf	(printf@prec+1)& (0+255),f,b
  3360  000FC4                     i2l2858:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3364  000FC4  0100               	movlb	0	; () banked
  3365  000FC6  5171               	movf	printf@width& (0+255),w,b
  3366  000FC8  0100               	movlb	0	; () banked
  3367  000FCA  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3368  000FCC  B4D8               	btfsc	status,2,c
  3369  000FCE  D010               	goto	i2l2864
  3370                           
  3371                           ; BSR set to: 0
  3372  000FD0  0E03               	movlw	3
  3373  000FD2  0100               	movlb	0	; () banked
  3374  000FD4  156F               	andwf	printf@flag& (0+255),w,b
  3375  000FD6  6E4D               	movwf	??_printf& (0+255),c
  3376  000FD8  0E00               	movlw	0
  3377  000FDA  0100               	movlb	0	; () banked
  3378  000FDC  1570               	andwf	(printf@flag+1)& (0+255),w,b
  3379  000FDE  6E4E               	movwf	(??_printf+1)& (0+255),c
  3380  000FE0  504D               	movf	??_printf,w,c
  3381  000FE2  104E               	iorwf	??_printf+1,w,c
  3382  000FE4  B4D8               	btfsc	status,2,c
  3383  000FE6  D004               	goto	i2l2864
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;doprnt.c: 1346: width--;
  3387  000FE8  0100               	movlb	0	; () banked
  3388  000FEA  0771               	decf	printf@width& (0+255),f,b
  3389  000FEC  A0D8               	btfss	status,0,c
  3390  000FEE  0772               	decf	(printf@width+1)& (0+255),f,b
  3391  000FF0                     i2l2864:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3395  000FF0  0100               	movlb	0	; () banked
  3396  000FF2  AD70               	btfss	(printf@flag+1)& (0+255),6,b
  3397  000FF4  D01C               	goto	i2l2872
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;doprnt.c: 1349: if(width > prec)
  3401  000FF6  0100               	movlb	0	; () banked
  3402  000FF8  5171               	movf	printf@width& (0+255),w,b
  3403  000FFA  0100               	movlb	0	; () banked
  3404  000FFC  5D76               	subwf	printf@prec& (0+255),w,b
  3405  000FFE  0100               	movlb	0	; () banked
  3406  001000  5177               	movf	(printf@prec+1)& (0+255),w,b
  3407  001002  0A80               	xorlw	128
  3408  001004  6E4D               	movwf	??_printf& (0+255),c
  3409  001006  0100               	movlb	0	; () banked
  3410  001008  5172               	movf	(printf@width+1)& (0+255),w,b
  3411  00100A  0A80               	xorlw	128
  3412  00100C  584D               	subwfb	??_printf& (0+255),w,c
  3413  00100E  B0D8               	btfsc	status,0,c
  3414  001010  D009               	goto	i2l2870
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;doprnt.c: 1350: width -= prec;
  3418  001012  0100               	movlb	0	; () banked
  3419  001014  5176               	movf	printf@prec& (0+255),w,b
  3420  001016  0100               	movlb	0	; () banked
  3421  001018  5F71               	subwf	printf@width& (0+255),f,b
  3422  00101A  0100               	movlb	0	; () banked
  3423  00101C  5177               	movf	(printf@prec+1)& (0+255),w,b
  3424  00101E  0100               	movlb	0	; () banked
  3425  001020  5B72               	subwfb	(printf@width+1)& (0+255),f,b
  3426  001022  D005               	goto	i2l2872
  3427  001024                     i2l2870:
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 1351: else
  3431                           ;doprnt.c: 1352: width = 0;
  3432  001024  0E00               	movlw	0
  3433  001026  0100               	movlb	0	; () banked
  3434  001028  6F72               	movwf	(printf@width+1)& (0+255),b
  3435  00102A  0E00               	movlw	0
  3436  00102C  6F71               	movwf	printf@width& (0+255),b
  3437  00102E                     i2l2872:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;doprnt.c: 1353: }
  3441                           ;doprnt.c: 1381: if(width > c)
  3442  00102E  0E80               	movlw	128
  3443  001030  0100               	movlb	0	; () banked
  3444  001032  BF78               	btfsc	printf@c& (0+255),7,b
  3445  001034  0E7F               	movlw	127
  3446  001036  6E4D               	movwf	??_printf& (0+255),c
  3447  001038  0100               	movlb	0	; () banked
  3448  00103A  5171               	movf	printf@width& (0+255),w,b
  3449  00103C  0100               	movlb	0	; () banked
  3450  00103E  5D78               	subwf	printf@c& (0+255),w,b
  3451  001040  0100               	movlb	0	; () banked
  3452  001042  5172               	movf	(printf@width+1)& (0+255),w,b
  3453  001044  0A80               	xorlw	128
  3454  001046  584D               	subwfb	??_printf& (0+255),w,c
  3455  001048  B0D8               	btfsc	status,0,c
  3456  00104A  D00B               	goto	i2l2876
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;doprnt.c: 1382: width -= c;
  3460  00104C  0100               	movlb	0	; () banked
  3461  00104E  5178               	movf	printf@c& (0+255),w,b
  3462  001050  0100               	movlb	0	; () banked
  3463  001052  5F71               	subwf	printf@width& (0+255),f,b
  3464  001054  0E00               	movlw	0
  3465  001056  0100               	movlb	0	; () banked
  3466  001058  BF78               	btfsc	printf@c& (0+255),7,b
  3467  00105A  0EFF               	movlw	255
  3468  00105C  0100               	movlb	0	; () banked
  3469  00105E  5B72               	subwfb	(printf@width+1)& (0+255),f,b
  3470  001060  D005               	goto	i2l2878
  3471  001062                     i2l2876:
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;doprnt.c: 1383: else
  3475                           ;doprnt.c: 1384: width = 0;
  3476  001062  0E00               	movlw	0
  3477  001064  0100               	movlb	0	; () banked
  3478  001066  6F72               	movwf	(printf@width+1)& (0+255),b
  3479  001068  0E00               	movlw	0
  3480  00106A  6F71               	movwf	printf@width& (0+255),b
  3481  00106C                     i2l2878:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;doprnt.c: 1387: if(flag & 0x04) {
  3485  00106C  0100               	movlb	0	; () banked
  3486  00106E  A56F               	btfss	printf@flag& (0+255),2,b
  3487  001070  D01D               	goto	i2l2890
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;doprnt.c: 1392: if(flag & 0x03)
  3491  001072  0E03               	movlw	3
  3492  001074  0100               	movlb	0	; () banked
  3493  001076  156F               	andwf	printf@flag& (0+255),w,b
  3494  001078  6E4D               	movwf	??_printf& (0+255),c
  3495  00107A  0E00               	movlw	0
  3496  00107C  0100               	movlb	0	; () banked
  3497  00107E  1570               	andwf	(printf@flag+1)& (0+255),w,b
  3498  001080  6E4E               	movwf	(??_printf+1)& (0+255),c
  3499  001082  504D               	movf	??_printf,w,c
  3500  001084  104E               	iorwf	??_printf+1,w,c
  3501  001086  B4D8               	btfsc	status,2,c
  3502  001088  D003               	goto	i2l2884
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;doprnt.c: 1393: (putch('-') );
  3506  00108A  0E2D               	movlw	45
  3507  00108C  EC99  F012         	call	_putch
  3508  001090                     i2l2884:
  3509                           
  3510                           ;doprnt.c: 1415: if(width)
  3511  001090  0100               	movlb	0	; () banked
  3512  001092  5171               	movf	printf@width& (0+255),w,b
  3513  001094  0100               	movlb	0	; () banked
  3514  001096  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3515  001098  B4D8               	btfsc	status,2,c
  3516  00109A  D06B               	goto	i2l2904
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1417: (putch('0') );
  3520                           
  3521                           ; BSR set to: 0
  3522                           
  3523                           ;doprnt.c: 1416: do
  3524  00109C  0E30               	movlw	48
  3525  00109E  EC99  F012         	call	_putch
  3526                           
  3527                           ;doprnt.c: 1418: while(--width);
  3528  0010A2  0100               	movlb	0	; () banked
  3529  0010A4  0771               	decf	printf@width& (0+255),f,b
  3530  0010A6  A0D8               	btfss	status,0,c
  3531  0010A8  0772               	decf	(printf@width+1)& (0+255),f,b
  3532  0010AA  D7F2               	goto	i2l2884
  3533  0010AC                     i2l2890:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;doprnt.c: 1422: {
  3537                           ;doprnt.c: 1424: if(width
  3538                           ;doprnt.c: 1428: )
  3539  0010AC  0100               	movlb	0	; () banked
  3540  0010AE  5171               	movf	printf@width& (0+255),w,b
  3541  0010B0  0100               	movlb	0	; () banked
  3542  0010B2  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3543  0010B4  B4D8               	btfsc	status,2,c
  3544  0010B6  D00D               	goto	i2l2896
  3545  0010B8                     i2l2892:
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;doprnt.c: 1430: (putch(' ') );
  3549  0010B8  0E20               	movlw	32
  3550  0010BA  EC99  F012         	call	_putch
  3551                           
  3552                           ;doprnt.c: 1431: while(--width);
  3553  0010BE  0100               	movlb	0	; () banked
  3554  0010C0  0771               	decf	printf@width& (0+255),f,b
  3555  0010C2  A0D8               	btfss	status,0,c
  3556  0010C4  0772               	decf	(printf@width+1)& (0+255),f,b
  3557  0010C6  0100               	movlb	0	; () banked
  3558  0010C8  5171               	movf	printf@width& (0+255),w,b
  3559  0010CA  0100               	movlb	0	; () banked
  3560  0010CC  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3561  0010CE  A4D8               	btfss	status,2,c
  3562  0010D0  D7F3               	goto	i2l2892
  3563  0010D2                     i2l2896:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;doprnt.c: 1438: if(flag & 0x03)
  3567  0010D2  0E03               	movlw	3
  3568  0010D4  0100               	movlb	0	; () banked
  3569  0010D6  156F               	andwf	printf@flag& (0+255),w,b
  3570  0010D8  6E4D               	movwf	??_printf& (0+255),c
  3571  0010DA  0E00               	movlw	0
  3572  0010DC  0100               	movlb	0	; () banked
  3573  0010DE  1570               	andwf	(printf@flag+1)& (0+255),w,b
  3574  0010E0  6E4E               	movwf	(??_printf+1)& (0+255),c
  3575  0010E2  504D               	movf	??_printf,w,c
  3576  0010E4  104E               	iorwf	??_printf+1,w,c
  3577  0010E6  B4D8               	btfsc	status,2,c
  3578  0010E8  D044               	goto	i2l2904
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1439: (putch('-') );
  3582  0010EA  0E2D               	movlw	45
  3583  0010EC  EC99  F012         	call	_putch
  3584                           
  3585                           ;doprnt.c: 1469: }
  3586                           ;doprnt.c: 1474: while(prec--) {
  3587  0010F0  D040               	goto	i2l2904
  3588  0010F2                     i2l2900:
  3589                           
  3590                           ;doprnt.c: 1478: {
  3591                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3592  0010F2  C076  F04D         	movff	printf@prec,??_printf
  3593  0010F6  C077  F04E         	movff	printf@prec+1,??_printf+1
  3594  0010FA  90D8               	bcf	status,0,c
  3595  0010FC  364D               	rlcf	??_printf,f,c
  3596  0010FE  364E               	rlcf	??_printf+1,f,c
  3597  001100  90D8               	bcf	status,0,c
  3598  001102  364D               	rlcf	??_printf,f,c
  3599  001104  364E               	rlcf	??_printf+1,f,c
  3600  001106  0E01               	movlw	low _dpowers
  3601  001108  244D               	addwf	??_printf,w,c
  3602  00110A  6EF6               	movwf	tblptrl,c
  3603  00110C  0E06               	movlw	high _dpowers
  3604  00110E  204E               	addwfc	??_printf+1,w,c
  3605  001110  6EF7               	movwf	tblptrh,c
  3606  001112                     	if	0	;There are less than 3 active tblptr bytes
  3607  001112                     	endif
  3608  001112  0009               	tblrd		*+
  3609  001114  CFF5 F005          	movff	tablat,___lldiv@divisor
  3610  001118  0009               	tblrd		*+
  3611  00111A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3612  00111E  0009               	tblrd		*+
  3613  001120  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3614  001124  000A               	tblrd		*-
  3615  001126  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3616  00112A  C065  F001         	movff	printf@val,___lldiv@dividend
  3617  00112E  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  3618  001132  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  3619  001136  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  3620  00113A  EC8D  F010         	call	___lldiv	;wreg free
  3621  00113E  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3622  001142  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3623  001146  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3624  00114A  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3625  00114E  0E0A               	movlw	10
  3626  001150  6E12               	movwf	___llmod@divisor,c
  3627  001152  0E00               	movlw	0
  3628  001154  6E13               	movwf	___llmod@divisor+1,c
  3629  001156  0E00               	movlw	0
  3630  001158  6E14               	movwf	___llmod@divisor+2,c
  3631  00115A  0E00               	movlw	0
  3632  00115C  6E15               	movwf	___llmod@divisor+3,c
  3633  00115E  EC06  F011         	call	___llmod	;wreg free
  3634  001162  500E               	movf	?___llmod,w,c
  3635  001164  0F30               	addlw	48
  3636  001166  0100               	movlb	0	; () banked
  3637  001168  6F78               	movwf	printf@c& (0+255),b
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;doprnt.c: 1523: }
  3641                           ;doprnt.c: 1524: (putch(c) );
  3642  00116A  0100               	movlb	0	; () banked
  3643  00116C  5178               	movf	printf@c& (0+255),w,b
  3644  00116E  EC99  F012         	call	_putch
  3645  001172                     i2l2904:
  3646  001172  0100               	movlb	0	; () banked
  3647  001174  0776               	decf	printf@prec& (0+255),f,b
  3648  001176  A0D8               	btfss	status,0,c
  3649  001178  0777               	decf	(printf@prec+1)& (0+255),f,b
  3650  00117A  0100               	movlb	0	; () banked
  3651  00117C  2976               	incf	printf@prec& (0+255),w,b
  3652  00117E  E1B9               	bnz	i2l2900
  3653  001180  0100               	movlb	0	; () banked
  3654  001182  2977               	incf	(printf@prec+1)& (0+255),w,b
  3655  001184  A4D8               	btfss	status,2,c
  3656  001186  D7B5               	goto	i2l2900
  3657  001188                     i2l2906:
  3658  001188  C046  FFF6         	movff	printf@f,tblptrl
  3659  00118C  C047  FFF7         	movff	printf@f+1,tblptrh
  3660  001190  4A46               	infsnz	printf@f,f,c
  3661  001192  2A47               	incf	printf@f+1,f,c
  3662  001194                     	if	0	;tblptru may be non-zero
  3663  001194                     	endif
  3664  001194                     	if	0	;tblptru may be non-zero
  3665  001194                     	endif
  3666  001194  0008               	tblrd		*
  3667  001196  CFF5 F078          	movff	tablat,printf@c
  3668  00119A  0100               	movlb	0	; () banked
  3669  00119C  5178               	movf	printf@c& (0+255),w,b
  3670  00119E  B4D8               	btfsc	status,2,c
  3671  0011A0  0012               	return	
  3672  0011A2  EF56  F003         	goto	i2l2618
  3673  0011A6                     __end_of_printf:
  3674                           	opt stack 0
  3675                           tosu	equ	0xFFF
  3676                           tosh	equ	0xFFE
  3677                           tosl	equ	0xFFD
  3678                           pclatu	equ	0xFFB
  3679                           pclath	equ	0xFFA
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           prodh	equ	0xFF4
  3685                           prodl	equ	0xFF3
  3686                           intcon	equ	0xFF2
  3687                           intcon2	equ	0xFF1
  3688                           fsr0h	equ	0xFEA
  3689                           fsr0l	equ	0xFE9
  3690                           wreg	equ	0xFE8
  3691                           fsr1h	equ	0xFE2
  3692                           fsr1l	equ	0xFE1
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _scale *****************
  3700 ;; Defined at:
  3701 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  scl             1    wreg     char 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  scl             1   53[COMRAM] char 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  3   47[COMRAM] char 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3715 ;;      Params:         3       0       0       0       0       0       0
  3716 ;;      Locals:         4       0       0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0
  3718 ;;      Totals:         7       0       0       0       0       0       0
  3719 ;;Total ram usage:        7 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    2
  3722 ;; This function calls:
  3723 ;;		___awdiv
  3724 ;;		___awmod
  3725 ;;		___ftmul
  3726 ;;		___wmul
  3727 ;; This function is called by:
  3728 ;;		_printf
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text17
  3733  0011A6                     __ptext17:
  3734                           	opt stack 0
  3735  0011A6                     _scale:
  3736                           	opt stack 22
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;incstack = 0
  3740                           ;scale@scl stored from wreg
  3741  0011A6  6E36               	movwf	scale@scl,c
  3742                           
  3743                           ;doprnt.c: 428: if(scl < 0) {
  3744  0011A8  AE36               	btfss	scale@scl,7,c
  3745  0011AA  D0FB               	goto	i2l2338
  3746                           
  3747                           ;doprnt.c: 429: scl = -scl;
  3748  0011AC  6C36               	negf	scale@scl,c
  3749                           
  3750                           ;doprnt.c: 430: if(scl>=110)
  3751  0011AE  5036               	movf	scale@scl,w,c
  3752  0011B0  0A80               	xorlw	128
  3753  0011B2  0F12               	addlw	-238
  3754  0011B4  A0D8               	btfss	status,0,c
  3755  0011B6  D091               	goto	i2l2328
  3756                           
  3757                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3758  0011B8  0E00               	movlw	0
  3759  0011BA  6E12               	movwf	___wmul@multiplicand+1,c
  3760  0011BC  0E03               	movlw	3
  3761  0011BE  6E11               	movwf	___wmul@multiplicand,c
  3762  0011C0  0E00               	movlw	0
  3763  0011C2  6E0A               	movwf	___awdiv@divisor+1,c
  3764  0011C4  0E0A               	movlw	10
  3765  0011C6  6E09               	movwf	___awdiv@divisor,c
  3766  0011C8  0E00               	movlw	0
  3767  0011CA  6E04               	movwf	___awmod@divisor+1,c
  3768  0011CC  0E64               	movlw	100
  3769  0011CE  6E03               	movwf	___awmod@divisor,c
  3770  0011D0  5036               	movf	scale@scl,w,c
  3771  0011D2  6E01               	movwf	___awmod@dividend,c
  3772  0011D4  6A02               	clrf	___awmod@dividend+1,c
  3773  0011D6  BE01               	btfsc	___awmod@dividend,7,c
  3774  0011D8  0602               	decf	___awmod@dividend+1,f,c
  3775  0011DA  ECCE  F010         	call	___awmod	;wreg free
  3776  0011DE  C001  F007         	movff	?___awmod,___awdiv@dividend
  3777  0011E2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3778  0011E6  EC4B  F010         	call	___awdiv	;wreg free
  3779  0011EA  0E09               	movlw	9
  3780  0011EC  2407               	addwf	?___awdiv,w,c
  3781  0011EE  6E0F               	movwf	___wmul@multiplier,c
  3782  0011F0  0E00               	movlw	0
  3783  0011F2  2008               	addwfc	?___awdiv+1,w,c
  3784  0011F4  6E10               	movwf	___wmul@multiplier+1,c
  3785  0011F6  ECF9  F011         	call	___wmul	;wreg free
  3786  0011FA  0E29               	movlw	low __npowers_
  3787  0011FC  240F               	addwf	?___wmul,w,c
  3788  0011FE  6EF6               	movwf	tblptrl,c
  3789  001200  0E06               	movlw	high __npowers_
  3790  001202  2010               	addwfc	?___wmul+1,w,c
  3791  001204  6EF7               	movwf	tblptrh,c
  3792  001206                     	if	0	;There are less than 3 active tblptr bytes
  3793  001206                     	endif
  3794  001206  0009               	tblrd		*+
  3795  001208  CFF5 F024          	movff	tablat,___ftmul@f2
  3796  00120C  0009               	tblrd		*+
  3797  00120E  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3798  001212  000A               	tblrd		*-
  3799  001214  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3800  001218  0E00               	movlw	0
  3801  00121A  6E0A               	movwf	___awdiv@divisor+1,c
  3802  00121C  0E64               	movlw	100
  3803  00121E  6E09               	movwf	___awdiv@divisor,c
  3804  001220  5036               	movf	scale@scl,w,c
  3805  001222  6E07               	movwf	___awdiv@dividend,c
  3806  001224  6A08               	clrf	___awdiv@dividend+1,c
  3807  001226  BE07               	btfsc	___awdiv@dividend,7,c
  3808  001228  0608               	decf	___awdiv@dividend+1,f,c
  3809  00122A  EC4B  F010         	call	___awdiv	;wreg free
  3810  00122E  0E12               	movlw	18
  3811  001230  2407               	addwf	?___awdiv,w,c
  3812  001232  6E0F               	movwf	___wmul@multiplier,c
  3813  001234  0E00               	movlw	0
  3814  001236  2008               	addwfc	?___awdiv+1,w,c
  3815  001238  6E10               	movwf	___wmul@multiplier+1,c
  3816  00123A  0E00               	movlw	0
  3817  00123C  6E12               	movwf	___wmul@multiplicand+1,c
  3818  00123E  0E03               	movlw	3
  3819  001240  6E11               	movwf	___wmul@multiplicand,c
  3820  001242  ECF9  F011         	call	___wmul	;wreg free
  3821  001246  0E29               	movlw	low __npowers_
  3822  001248  240F               	addwf	?___wmul,w,c
  3823  00124A  6EF6               	movwf	tblptrl,c
  3824  00124C  0E06               	movlw	high __npowers_
  3825  00124E  2010               	addwfc	?___wmul+1,w,c
  3826  001250  6EF7               	movwf	tblptrh,c
  3827  001252                     	if	0	;There are less than 3 active tblptr bytes
  3828  001252                     	endif
  3829  001252  0009               	tblrd		*+
  3830  001254  CFF5 F021          	movff	tablat,___ftmul@f1
  3831  001258  0009               	tblrd		*+
  3832  00125A  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3833  00125E  000A               	tblrd		*-
  3834  001260  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3835  001264  ECF1  F00D         	call	___ftmul	;wreg free
  3836  001268  C021  F033         	movff	?___ftmul,_scale$1306
  3837  00126C  C022  F034         	movff	?___ftmul+1,_scale$1306+1
  3838  001270  C023  F035         	movff	?___ftmul+2,_scale$1306+2
  3839                           
  3840                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3841  001274  C033  F021         	movff	_scale$1306,___ftmul@f1
  3842  001278  C034  F022         	movff	_scale$1306+1,___ftmul@f1+1
  3843  00127C  C035  F023         	movff	_scale$1306+2,___ftmul@f1+2
  3844  001280  0E00               	movlw	0
  3845  001282  6E12               	movwf	___wmul@multiplicand+1,c
  3846  001284  0E03               	movlw	3
  3847  001286  6E11               	movwf	___wmul@multiplicand,c
  3848  001288  0E00               	movlw	0
  3849  00128A  6E04               	movwf	___awmod@divisor+1,c
  3850  00128C  0E0A               	movlw	10
  3851  00128E  6E03               	movwf	___awmod@divisor,c
  3852  001290  5036               	movf	scale@scl,w,c
  3853  001292  6E01               	movwf	___awmod@dividend,c
  3854  001294  6A02               	clrf	___awmod@dividend+1,c
  3855  001296  BE01               	btfsc	___awmod@dividend,7,c
  3856  001298  0602               	decf	___awmod@dividend+1,f,c
  3857  00129A  ECCE  F010         	call	___awmod	;wreg free
  3858  00129E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3859  0012A2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3860  0012A6  ECF9  F011         	call	___wmul	;wreg free
  3861  0012AA  0E29               	movlw	low __npowers_
  3862  0012AC  240F               	addwf	?___wmul,w,c
  3863  0012AE  6EF6               	movwf	tblptrl,c
  3864  0012B0  0E06               	movlw	high __npowers_
  3865  0012B2  2010               	addwfc	?___wmul+1,w,c
  3866  0012B4  6EF7               	movwf	tblptrh,c
  3867  0012B6                     	if	0	;There are less than 3 active tblptr bytes
  3868  0012B6                     	endif
  3869  0012B6  0009               	tblrd		*+
  3870  0012B8  CFF5 F024          	movff	tablat,___ftmul@f2
  3871  0012BC  0009               	tblrd		*+
  3872  0012BE  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3873  0012C2  000A               	tblrd		*-
  3874  0012C4  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3875  0012C8  ECF1  F00D         	call	___ftmul	;wreg free
  3876  0012CC  C021  F030         	movff	?___ftmul,?_scale
  3877  0012D0  C022  F031         	movff	?___ftmul+1,?_scale+1
  3878  0012D4  C023  F032         	movff	?___ftmul+2,?_scale+2
  3879  0012D8  0012               	return	
  3880  0012DA                     i2l2328:
  3881                           
  3882                           ;doprnt.c: 432: else if(scl > 10)
  3883  0012DA  5036               	movf	scale@scl,w,c
  3884  0012DC  0A80               	xorlw	128
  3885  0012DE  0F75               	addlw	-139
  3886  0012E0  A0D8               	btfss	status,0,c
  3887  0012E2  D04D               	goto	i2l2334
  3888                           
  3889                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3890  0012E4  0E00               	movlw	0
  3891  0012E6  6E0A               	movwf	___awdiv@divisor+1,c
  3892  0012E8  0E0A               	movlw	10
  3893  0012EA  6E09               	movwf	___awdiv@divisor,c
  3894  0012EC  5036               	movf	scale@scl,w,c
  3895  0012EE  6E07               	movwf	___awdiv@dividend,c
  3896  0012F0  6A08               	clrf	___awdiv@dividend+1,c
  3897  0012F2  BE07               	btfsc	___awdiv@dividend,7,c
  3898  0012F4  0608               	decf	___awdiv@dividend+1,f,c
  3899  0012F6  EC4B  F010         	call	___awdiv	;wreg free
  3900  0012FA  0E09               	movlw	9
  3901  0012FC  2407               	addwf	?___awdiv,w,c
  3902  0012FE  6E0F               	movwf	___wmul@multiplier,c
  3903  001300  0E00               	movlw	0
  3904  001302  2008               	addwfc	?___awdiv+1,w,c
  3905  001304  6E10               	movwf	___wmul@multiplier+1,c
  3906  001306  0E00               	movlw	0
  3907  001308  6E12               	movwf	___wmul@multiplicand+1,c
  3908  00130A  0E03               	movlw	3
  3909  00130C  6E11               	movwf	___wmul@multiplicand,c
  3910  00130E  ECF9  F011         	call	___wmul	;wreg free
  3911  001312  0E29               	movlw	low __npowers_
  3912  001314  240F               	addwf	?___wmul,w,c
  3913  001316  6EF6               	movwf	tblptrl,c
  3914  001318  0E06               	movlw	high __npowers_
  3915  00131A  2010               	addwfc	?___wmul+1,w,c
  3916  00131C  6EF7               	movwf	tblptrh,c
  3917  00131E                     	if	0	;There are less than 3 active tblptr bytes
  3918  00131E                     	endif
  3919  00131E  0009               	tblrd		*+
  3920  001320  CFF5 F021          	movff	tablat,___ftmul@f1
  3921  001324  0009               	tblrd		*+
  3922  001326  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3923  00132A  000A               	tblrd		*-
  3924  00132C  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3925  001330  0E00               	movlw	0
  3926  001332  6E12               	movwf	___wmul@multiplicand+1,c
  3927  001334  0E03               	movlw	3
  3928  001336  6E11               	movwf	___wmul@multiplicand,c
  3929  001338  0E00               	movlw	0
  3930  00133A  6E04               	movwf	___awmod@divisor+1,c
  3931  00133C  0E0A               	movlw	10
  3932  00133E  6E03               	movwf	___awmod@divisor,c
  3933  001340  5036               	movf	scale@scl,w,c
  3934  001342  6E01               	movwf	___awmod@dividend,c
  3935  001344  6A02               	clrf	___awmod@dividend+1,c
  3936  001346  BE01               	btfsc	___awmod@dividend,7,c
  3937  001348  0602               	decf	___awmod@dividend+1,f,c
  3938  00134A  ECCE  F010         	call	___awmod	;wreg free
  3939  00134E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3940  001352  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3941  001356  ECF9  F011         	call	___wmul	;wreg free
  3942  00135A  0E29               	movlw	low __npowers_
  3943  00135C  240F               	addwf	?___wmul,w,c
  3944  00135E  6EF6               	movwf	tblptrl,c
  3945  001360  0E06               	movlw	high __npowers_
  3946  001362  2010               	addwfc	?___wmul+1,w,c
  3947  001364  6EF7               	movwf	tblptrh,c
  3948  001366                     	if	0	;There are less than 3 active tblptr bytes
  3949  001366                     	endif
  3950  001366  0009               	tblrd		*+
  3951  001368  CFF5 F024          	movff	tablat,___ftmul@f2
  3952  00136C  0009               	tblrd		*+
  3953  00136E  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3954  001372  000A               	tblrd		*-
  3955  001374  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3956  001378  ECF1  F00D         	call	___ftmul	;wreg free
  3957  00137C  D7A7               	goto	L2
  3958  00137E                     i2l2334:
  3959                           
  3960                           ;doprnt.c: 434: return _npowers_[scl];
  3961  00137E  5036               	movf	scale@scl,w,c
  3962  001380  0D03               	mullw	3
  3963  001382  0E29               	movlw	low __npowers_
  3964  001384  24F3               	addwf	prodl,w,c
  3965  001386  6EF6               	movwf	tblptrl,c
  3966  001388  0E06               	movlw	high __npowers_
  3967  00138A  20F4               	addwfc	prodh,w,c
  3968  00138C  6EF7               	movwf	tblptrh,c
  3969  00138E                     	if	0	;There are less than 3 active tblptr bytes
  3970  00138E                     	endif
  3971  00138E  0009               	tblrd		*+
  3972  001390  CFF5 F030          	movff	tablat,?_scale
  3973  001394  0009               	tblrd		*+
  3974  001396  CFF5 F031          	movff	tablat,?_scale+1
  3975  00139A  000A               	tblrd		*-
  3976  00139C  CFF5 F032          	movff	tablat,?_scale+2
  3977  0013A0  0012               	return	
  3978  0013A2                     i2l2338:
  3979                           
  3980                           ;doprnt.c: 435: }
  3981                           ;doprnt.c: 436: if(scl>=110)
  3982  0013A2  5036               	movf	scale@scl,w,c
  3983  0013A4  0A80               	xorlw	128
  3984  0013A6  0F12               	addlw	-238
  3985  0013A8  A0D8               	btfss	status,0,c
  3986  0013AA  D091               	goto	i2l2346
  3987                           
  3988                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3989  0013AC  0E00               	movlw	0
  3990  0013AE  6E12               	movwf	___wmul@multiplicand+1,c
  3991  0013B0  0E03               	movlw	3
  3992  0013B2  6E11               	movwf	___wmul@multiplicand,c
  3993  0013B4  0E00               	movlw	0
  3994  0013B6  6E0A               	movwf	___awdiv@divisor+1,c
  3995  0013B8  0E0A               	movlw	10
  3996  0013BA  6E09               	movwf	___awdiv@divisor,c
  3997  0013BC  0E00               	movlw	0
  3998  0013BE  6E04               	movwf	___awmod@divisor+1,c
  3999  0013C0  0E64               	movlw	100
  4000  0013C2  6E03               	movwf	___awmod@divisor,c
  4001  0013C4  5036               	movf	scale@scl,w,c
  4002  0013C6  6E01               	movwf	___awmod@dividend,c
  4003  0013C8  6A02               	clrf	___awmod@dividend+1,c
  4004  0013CA  BE01               	btfsc	___awmod@dividend,7,c
  4005  0013CC  0602               	decf	___awmod@dividend+1,f,c
  4006  0013CE  ECCE  F010         	call	___awmod	;wreg free
  4007  0013D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  4008  0013D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4009  0013DA  EC4B  F010         	call	___awdiv	;wreg free
  4010  0013DE  0E09               	movlw	9
  4011  0013E0  2407               	addwf	?___awdiv,w,c
  4012  0013E2  6E0F               	movwf	___wmul@multiplier,c
  4013  0013E4  0E00               	movlw	0
  4014  0013E6  2008               	addwfc	?___awdiv+1,w,c
  4015  0013E8  6E10               	movwf	___wmul@multiplier+1,c
  4016  0013EA  ECF9  F011         	call	___wmul	;wreg free
  4017  0013EE  0E50               	movlw	low __powers_
  4018  0013F0  240F               	addwf	?___wmul,w,c
  4019  0013F2  6EF6               	movwf	tblptrl,c
  4020  0013F4  0E06               	movlw	high __powers_
  4021  0013F6  2010               	addwfc	?___wmul+1,w,c
  4022  0013F8  6EF7               	movwf	tblptrh,c
  4023  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  4024  0013FA                     	endif
  4025  0013FA  0009               	tblrd		*+
  4026  0013FC  CFF5 F024          	movff	tablat,___ftmul@f2
  4027  001400  0009               	tblrd		*+
  4028  001402  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4029  001406  000A               	tblrd		*-
  4030  001408  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4031  00140C  0E00               	movlw	0
  4032  00140E  6E0A               	movwf	___awdiv@divisor+1,c
  4033  001410  0E64               	movlw	100
  4034  001412  6E09               	movwf	___awdiv@divisor,c
  4035  001414  5036               	movf	scale@scl,w,c
  4036  001416  6E07               	movwf	___awdiv@dividend,c
  4037  001418  6A08               	clrf	___awdiv@dividend+1,c
  4038  00141A  BE07               	btfsc	___awdiv@dividend,7,c
  4039  00141C  0608               	decf	___awdiv@dividend+1,f,c
  4040  00141E  EC4B  F010         	call	___awdiv	;wreg free
  4041  001422  0E12               	movlw	18
  4042  001424  2407               	addwf	?___awdiv,w,c
  4043  001426  6E0F               	movwf	___wmul@multiplier,c
  4044  001428  0E00               	movlw	0
  4045  00142A  2008               	addwfc	?___awdiv+1,w,c
  4046  00142C  6E10               	movwf	___wmul@multiplier+1,c
  4047  00142E  0E00               	movlw	0
  4048  001430  6E12               	movwf	___wmul@multiplicand+1,c
  4049  001432  0E03               	movlw	3
  4050  001434  6E11               	movwf	___wmul@multiplicand,c
  4051  001436  ECF9  F011         	call	___wmul	;wreg free
  4052  00143A  0E50               	movlw	low __powers_
  4053  00143C  240F               	addwf	?___wmul,w,c
  4054  00143E  6EF6               	movwf	tblptrl,c
  4055  001440  0E06               	movlw	high __powers_
  4056  001442  2010               	addwfc	?___wmul+1,w,c
  4057  001444  6EF7               	movwf	tblptrh,c
  4058  001446                     	if	0	;There are less than 3 active tblptr bytes
  4059  001446                     	endif
  4060  001446  0009               	tblrd		*+
  4061  001448  CFF5 F021          	movff	tablat,___ftmul@f1
  4062  00144C  0009               	tblrd		*+
  4063  00144E  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4064  001452  000A               	tblrd		*-
  4065  001454  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4066  001458  ECF1  F00D         	call	___ftmul	;wreg free
  4067  00145C  C021  F033         	movff	?___ftmul,_scale$1306
  4068  001460  C022  F034         	movff	?___ftmul+1,_scale$1306+1
  4069  001464  C023  F035         	movff	?___ftmul+2,_scale$1306+2
  4070                           
  4071                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4072  001468  C033  F021         	movff	_scale$1306,___ftmul@f1
  4073  00146C  C034  F022         	movff	_scale$1306+1,___ftmul@f1+1
  4074  001470  C035  F023         	movff	_scale$1306+2,___ftmul@f1+2
  4075  001474  0E00               	movlw	0
  4076  001476  6E12               	movwf	___wmul@multiplicand+1,c
  4077  001478  0E03               	movlw	3
  4078  00147A  6E11               	movwf	___wmul@multiplicand,c
  4079  00147C  0E00               	movlw	0
  4080  00147E  6E04               	movwf	___awmod@divisor+1,c
  4081  001480  0E0A               	movlw	10
  4082  001482  6E03               	movwf	___awmod@divisor,c
  4083  001484  5036               	movf	scale@scl,w,c
  4084  001486  6E01               	movwf	___awmod@dividend,c
  4085  001488  6A02               	clrf	___awmod@dividend+1,c
  4086  00148A  BE01               	btfsc	___awmod@dividend,7,c
  4087  00148C  0602               	decf	___awmod@dividend+1,f,c
  4088  00148E  ECCE  F010         	call	___awmod	;wreg free
  4089  001492  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4090  001496  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4091  00149A  ECF9  F011         	call	___wmul	;wreg free
  4092  00149E  0E50               	movlw	low __powers_
  4093  0014A0  240F               	addwf	?___wmul,w,c
  4094  0014A2  6EF6               	movwf	tblptrl,c
  4095  0014A4  0E06               	movlw	high __powers_
  4096  0014A6  2010               	addwfc	?___wmul+1,w,c
  4097  0014A8  6EF7               	movwf	tblptrh,c
  4098  0014AA                     	if	0	;There are less than 3 active tblptr bytes
  4099  0014AA                     	endif
  4100  0014AA  0009               	tblrd		*+
  4101  0014AC  CFF5 F024          	movff	tablat,___ftmul@f2
  4102  0014B0  0009               	tblrd		*+
  4103  0014B2  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4104  0014B6  000A               	tblrd		*-
  4105  0014B8  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4106  0014BC  ECF1  F00D         	call	___ftmul	;wreg free
  4107  0014C0  C021  F030         	movff	?___ftmul,?_scale
  4108  0014C4  C022  F031         	movff	?___ftmul+1,?_scale+1
  4109  0014C8  C023  F032         	movff	?___ftmul+2,?_scale+2
  4110  0014CC  0012               	return	
  4111  0014CE                     i2l2346:
  4112                           
  4113                           ;doprnt.c: 438: else if(scl > 10)
  4114  0014CE  5036               	movf	scale@scl,w,c
  4115  0014D0  0A80               	xorlw	128
  4116  0014D2  0F75               	addlw	-139
  4117  0014D4  A0D8               	btfss	status,0,c
  4118  0014D6  D04D               	goto	i2l2352
  4119                           
  4120                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4121  0014D8  0E00               	movlw	0
  4122  0014DA  6E0A               	movwf	___awdiv@divisor+1,c
  4123  0014DC  0E0A               	movlw	10
  4124  0014DE  6E09               	movwf	___awdiv@divisor,c
  4125  0014E0  5036               	movf	scale@scl,w,c
  4126  0014E2  6E07               	movwf	___awdiv@dividend,c
  4127  0014E4  6A08               	clrf	___awdiv@dividend+1,c
  4128  0014E6  BE07               	btfsc	___awdiv@dividend,7,c
  4129  0014E8  0608               	decf	___awdiv@dividend+1,f,c
  4130  0014EA  EC4B  F010         	call	___awdiv	;wreg free
  4131  0014EE  0E09               	movlw	9
  4132  0014F0  2407               	addwf	?___awdiv,w,c
  4133  0014F2  6E0F               	movwf	___wmul@multiplier,c
  4134  0014F4  0E00               	movlw	0
  4135  0014F6  2008               	addwfc	?___awdiv+1,w,c
  4136  0014F8  6E10               	movwf	___wmul@multiplier+1,c
  4137  0014FA  0E00               	movlw	0
  4138  0014FC  6E12               	movwf	___wmul@multiplicand+1,c
  4139  0014FE  0E03               	movlw	3
  4140  001500  6E11               	movwf	___wmul@multiplicand,c
  4141  001502  ECF9  F011         	call	___wmul	;wreg free
  4142  001506  0E50               	movlw	low __powers_
  4143  001508  240F               	addwf	?___wmul,w,c
  4144  00150A  6EF6               	movwf	tblptrl,c
  4145  00150C  0E06               	movlw	high __powers_
  4146  00150E  2010               	addwfc	?___wmul+1,w,c
  4147  001510  6EF7               	movwf	tblptrh,c
  4148  001512                     	if	0	;There are less than 3 active tblptr bytes
  4149  001512                     	endif
  4150  001512  0009               	tblrd		*+
  4151  001514  CFF5 F021          	movff	tablat,___ftmul@f1
  4152  001518  0009               	tblrd		*+
  4153  00151A  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4154  00151E  000A               	tblrd		*-
  4155  001520  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4156  001524  0E00               	movlw	0
  4157  001526  6E12               	movwf	___wmul@multiplicand+1,c
  4158  001528  0E03               	movlw	3
  4159  00152A  6E11               	movwf	___wmul@multiplicand,c
  4160  00152C  0E00               	movlw	0
  4161  00152E  6E04               	movwf	___awmod@divisor+1,c
  4162  001530  0E0A               	movlw	10
  4163  001532  6E03               	movwf	___awmod@divisor,c
  4164  001534  5036               	movf	scale@scl,w,c
  4165  001536  6E01               	movwf	___awmod@dividend,c
  4166  001538  6A02               	clrf	___awmod@dividend+1,c
  4167  00153A  BE01               	btfsc	___awmod@dividend,7,c
  4168  00153C  0602               	decf	___awmod@dividend+1,f,c
  4169  00153E  ECCE  F010         	call	___awmod	;wreg free
  4170  001542  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4171  001546  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4172  00154A  ECF9  F011         	call	___wmul	;wreg free
  4173  00154E  0E50               	movlw	low __powers_
  4174  001550  240F               	addwf	?___wmul,w,c
  4175  001552  6EF6               	movwf	tblptrl,c
  4176  001554  0E06               	movlw	high __powers_
  4177  001556  2010               	addwfc	?___wmul+1,w,c
  4178  001558  6EF7               	movwf	tblptrh,c
  4179  00155A                     	if	0	;There are less than 3 active tblptr bytes
  4180  00155A                     	endif
  4181  00155A  0009               	tblrd		*+
  4182  00155C  CFF5 F024          	movff	tablat,___ftmul@f2
  4183  001560  0009               	tblrd		*+
  4184  001562  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4185  001566  000A               	tblrd		*-
  4186  001568  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4187  00156C  ECF1  F00D         	call	___ftmul	;wreg free
  4188  001570  D7A7               	goto	L3
  4189  001572                     i2l2352:
  4190                           
  4191                           ;doprnt.c: 440: return _powers_[scl];
  4192  001572  5036               	movf	scale@scl,w,c
  4193  001574  0D03               	mullw	3
  4194  001576  0E50               	movlw	low __powers_
  4195  001578  24F3               	addwf	prodl,w,c
  4196  00157A  6EF6               	movwf	tblptrl,c
  4197  00157C  0E06               	movlw	high __powers_
  4198  00157E  20F4               	addwfc	prodh,w,c
  4199  001580  6EF7               	movwf	tblptrh,c
  4200  001582                     	if	0	;There are less than 3 active tblptr bytes
  4201  001582                     	endif
  4202  001582  0009               	tblrd		*+
  4203  001584  CFF5 F030          	movff	tablat,?_scale
  4204  001588  0009               	tblrd		*+
  4205  00158A  CFF5 F031          	movff	tablat,?_scale+1
  4206  00158E  000A               	tblrd		*-
  4207  001590  CFF5 F032          	movff	tablat,?_scale+2
  4208  001594  0012               	return	
  4209  001596                     __end_of_scale:
  4210                           	opt stack 0
  4211                           tosu	equ	0xFFF
  4212                           tosh	equ	0xFFE
  4213                           tosl	equ	0xFFD
  4214                           pclatu	equ	0xFFB
  4215                           pclath	equ	0xFFA
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           intcon	equ	0xFF2
  4223                           intcon2	equ	0xFF1
  4224                           fsr0h	equ	0xFEA
  4225                           fsr0l	equ	0xFE9
  4226                           wreg	equ	0xFE8
  4227                           fsr1h	equ	0xFE2
  4228                           fsr1l	equ	0xFE1
  4229                           postinc2	equ	0xFDE
  4230                           postdec2	equ	0xFDD
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _putch *****************
  4236 ;; Defined at:
  4237 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  txData          1    wreg     unsigned char 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  txData          1    1[COMRAM] unsigned char 
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      void 
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4251 ;;      Params:         0       0       0       0       0       0       0
  4252 ;;      Locals:         1       0       0       0       0       0       0
  4253 ;;      Temps:          0       0       0       0       0       0       0
  4254 ;;      Totals:         1       0       0       0       0       0       0
  4255 ;;Total ram usage:        1 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    1
  4258 ;; This function calls:
  4259 ;;		_EUSART1_Write
  4260 ;; This function is called by:
  4261 ;;		_printf
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text18
  4266  002532                     __ptext18:
  4267                           	opt stack 0
  4268  002532                     _putch:
  4269                           	opt stack 23
  4270                           
  4271                           ;incstack = 0
  4272                           ;putch@txData stored from wreg
  4273  002532  6E02               	movwf	putch@txData,c
  4274                           
  4275                           ;eusart1.c: 113: EUSART1_Write(txData);
  4276  002534  5002               	movf	putch@txData,w,c
  4277  002536  EC84  F012         	call	_EUSART1_Write
  4278  00253A  0012               	return		;funcret
  4279  00253C                     __end_of_putch:
  4280                           	opt stack 0
  4281                           tosu	equ	0xFFF
  4282                           tosh	equ	0xFFE
  4283                           tosl	equ	0xFFD
  4284                           pclatu	equ	0xFFB
  4285                           pclath	equ	0xFFA
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           prodh	equ	0xFF4
  4291                           prodl	equ	0xFF3
  4292                           intcon	equ	0xFF2
  4293                           intcon2	equ	0xFF1
  4294                           fsr0h	equ	0xFEA
  4295                           fsr0l	equ	0xFE9
  4296                           wreg	equ	0xFE8
  4297                           fsr1h	equ	0xFE2
  4298                           fsr1l	equ	0xFE1
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _EUSART1_Write *****************
  4306 ;; Defined at:
  4307 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  txData          1    wreg     unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  txData          1    0[COMRAM] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4321 ;;      Params:         0       0       0       0       0       0       0
  4322 ;;      Locals:         1       0       0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0
  4324 ;;      Totals:         1       0       0       0       0       0       0
  4325 ;;Total ram usage:        1 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_putch
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text19
  4335  002508                     __ptext19:
  4336                           	opt stack 0
  4337  002508                     _EUSART1_Write:
  4338                           	opt stack 23
  4339                           
  4340                           ;incstack = 0
  4341                           ;EUSART1_Write@txData stored from wreg
  4342  002508  6E01               	movwf	EUSART1_Write@txData,c
  4343  00250A                     i2l197:
  4344  00250A  A89E               	btfss	3998,4,c	;volatile
  4345  00250C  D7FE               	goto	i2l197
  4346                           
  4347                           ;eusart1.c: 101: }
  4348                           ;eusart1.c: 103: TXREG1 = txData;
  4349  00250E  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  4350  002512  0012               	return		;funcret
  4351  002514                     __end_of_EUSART1_Write:
  4352                           	opt stack 0
  4353                           tosu	equ	0xFFF
  4354                           tosh	equ	0xFFE
  4355                           tosl	equ	0xFFD
  4356                           pclatu	equ	0xFFB
  4357                           pclath	equ	0xFFA
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon	equ	0xFF2
  4365                           intcon2	equ	0xFF1
  4366                           fsr0h	equ	0xFEA
  4367                           fsr0l	equ	0xFE9
  4368                           wreg	equ	0xFE8
  4369                           fsr1h	equ	0xFE2
  4370                           fsr1l	equ	0xFE1
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _isdigit *****************
  4378 ;; Defined at:
  4379 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  c               1    wreg     unsigned char 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  c               1    2[COMRAM] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;		None               void
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4393 ;;      Params:         0       0       0       0       0       0       0
  4394 ;;      Locals:         2       0       0       0       0       0       0
  4395 ;;      Temps:          1       0       0       0       0       0       0
  4396 ;;      Totals:         3       0       0       0       0       0       0
  4397 ;;Total ram usage:        3 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_printf
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text20
  4407  002460                     __ptext20:
  4408                           	opt stack 0
  4409  002460                     _isdigit:
  4410                           	opt stack 24
  4411                           
  4412                           ;incstack = 0
  4413                           ;isdigit@c stored from wreg
  4414  002460  6E03               	movwf	isdigit@c,c
  4415  002462  0E00               	movlw	0
  4416  002464  6E02               	movwf	_isdigit$955,c
  4417  002466  0E3A               	movlw	58
  4418  002468  6003               	cpfslt	isdigit@c,c
  4419  00246A  D005               	goto	i2l2364
  4420  00246C  0E2F               	movlw	47
  4421  00246E  6403               	cpfsgt	isdigit@c,c
  4422  002470  D002               	goto	i2l2364
  4423  002472  0E01               	movlw	1
  4424  002474  6E02               	movwf	_isdigit$955,c
  4425  002476                     i2l2364:
  4426  002476  C002  F001         	movff	_isdigit$955,??_isdigit
  4427  00247A  3001               	rrcf	??_isdigit,w,c
  4428  00247C  0012               	return	
  4429  00247E                     __end_of_isdigit:
  4430                           	opt stack 0
  4431                           tosu	equ	0xFFF
  4432                           tosh	equ	0xFFE
  4433                           tosl	equ	0xFFD
  4434                           pclatu	equ	0xFFB
  4435                           pclath	equ	0xFFA
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           intcon2	equ	0xFF1
  4444                           fsr0h	equ	0xFEA
  4445                           fsr0l	equ	0xFE9
  4446                           wreg	equ	0xFE8
  4447                           fsr1h	equ	0xFE2
  4448                           fsr1l	equ	0xFE1
  4449                           postinc2	equ	0xFDE
  4450                           postdec2	equ	0xFDD
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _fround *****************
  4456 ;; Defined at:
  4457 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  prec            1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  prec            1   56[COMRAM] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  3   47[COMRAM] unsigned char 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4471 ;;      Params:         3       0       0       0       0       0       0
  4472 ;;      Locals:         7       0       0       0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0
  4474 ;;      Totals:        10       0       0       0       0       0       0
  4475 ;;Total ram usage:       10 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		___awdiv
  4480 ;;		___awmod
  4481 ;;		___ftmul
  4482 ;;		___wmul
  4483 ;; This function is called by:
  4484 ;;		_printf
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text21
  4489  001596                     __ptext21:
  4490                           	opt stack 0
  4491  001596                     _fround:
  4492                           	opt stack 22
  4493                           
  4494                           ;incstack = 0
  4495                           ;fround@prec stored from wreg
  4496  001596  6E39               	movwf	fround@prec,c
  4497                           
  4498                           ;doprnt.c: 413: if(prec>=110)
  4499  001598  0E6D               	movlw	109
  4500  00159A  6439               	cpfsgt	fround@prec,c
  4501  00159C  D09F               	goto	i2l2306
  4502                           
  4503                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4504  00159E  0E00               	movlw	0
  4505  0015A0  6E12               	movwf	___wmul@multiplicand+1,c
  4506  0015A2  0E03               	movlw	3
  4507  0015A4  6E11               	movwf	___wmul@multiplicand,c
  4508  0015A6  0E00               	movlw	0
  4509  0015A8  6E0A               	movwf	___awdiv@divisor+1,c
  4510  0015AA  0E0A               	movlw	10
  4511  0015AC  6E09               	movwf	___awdiv@divisor,c
  4512  0015AE  0E00               	movlw	0
  4513  0015B0  6E04               	movwf	___awmod@divisor+1,c
  4514  0015B2  0E64               	movlw	100
  4515  0015B4  6E03               	movwf	___awmod@divisor,c
  4516  0015B6  C039  F001         	movff	fround@prec,___awmod@dividend
  4517  0015BA  6A02               	clrf	___awmod@dividend+1,c
  4518  0015BC  ECCE  F010         	call	___awmod	;wreg free
  4519  0015C0  C001  F007         	movff	?___awmod,___awdiv@dividend
  4520  0015C4  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4521  0015C8  EC4B  F010         	call	___awdiv	;wreg free
  4522  0015CC  0E09               	movlw	9
  4523  0015CE  2407               	addwf	?___awdiv,w,c
  4524  0015D0  6E0F               	movwf	___wmul@multiplier,c
  4525  0015D2  0E00               	movlw	0
  4526  0015D4  2008               	addwfc	?___awdiv+1,w,c
  4527  0015D6  6E10               	movwf	___wmul@multiplier+1,c
  4528  0015D8  ECF9  F011         	call	___wmul	;wreg free
  4529  0015DC  0E29               	movlw	low __npowers_
  4530  0015DE  240F               	addwf	?___wmul,w,c
  4531  0015E0  6EF6               	movwf	tblptrl,c
  4532  0015E2  0E06               	movlw	high __npowers_
  4533  0015E4  2010               	addwfc	?___wmul+1,w,c
  4534  0015E6  6EF7               	movwf	tblptrh,c
  4535  0015E8                     	if	0	;There are less than 3 active tblptr bytes
  4536  0015E8                     	endif
  4537  0015E8  0009               	tblrd		*+
  4538  0015EA  CFF5 F024          	movff	tablat,___ftmul@f2
  4539  0015EE  0009               	tblrd		*+
  4540  0015F0  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4541  0015F4  000A               	tblrd		*-
  4542  0015F6  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4543  0015FA  0E00               	movlw	0
  4544  0015FC  6E0A               	movwf	___awdiv@divisor+1,c
  4545  0015FE  0E64               	movlw	100
  4546  001600  6E09               	movwf	___awdiv@divisor,c
  4547  001602  C039  F007         	movff	fround@prec,___awdiv@dividend
  4548  001606  6A08               	clrf	___awdiv@dividend+1,c
  4549  001608  EC4B  F010         	call	___awdiv	;wreg free
  4550  00160C  0E12               	movlw	18
  4551  00160E  2407               	addwf	?___awdiv,w,c
  4552  001610  6E0F               	movwf	___wmul@multiplier,c
  4553  001612  0E00               	movlw	0
  4554  001614  2008               	addwfc	?___awdiv+1,w,c
  4555  001616  6E10               	movwf	___wmul@multiplier+1,c
  4556  001618  0E00               	movlw	0
  4557  00161A  6E12               	movwf	___wmul@multiplicand+1,c
  4558  00161C  0E03               	movlw	3
  4559  00161E  6E11               	movwf	___wmul@multiplicand,c
  4560  001620  ECF9  F011         	call	___wmul	;wreg free
  4561  001624  0E29               	movlw	low __npowers_
  4562  001626  240F               	addwf	?___wmul,w,c
  4563  001628  6EF6               	movwf	tblptrl,c
  4564  00162A  0E06               	movlw	high __npowers_
  4565  00162C  2010               	addwfc	?___wmul+1,w,c
  4566  00162E  6EF7               	movwf	tblptrh,c
  4567  001630                     	if	0	;There are less than 3 active tblptr bytes
  4568  001630                     	endif
  4569  001630  0009               	tblrd		*+
  4570  001632  CFF5 F021          	movff	tablat,___ftmul@f1
  4571  001636  0009               	tblrd		*+
  4572  001638  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4573  00163C  000A               	tblrd		*-
  4574  00163E  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4575  001642  ECF1  F00D         	call	___ftmul	;wreg free
  4576  001646  C021  F036         	movff	?___ftmul,_fround$1304
  4577  00164A  C022  F037         	movff	?___ftmul+1,_fround$1304+1
  4578  00164E  C023  F038         	movff	?___ftmul+2,_fround$1304+2
  4579                           
  4580                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4581  001652  0E00               	movlw	0
  4582  001654  6E12               	movwf	___wmul@multiplicand+1,c
  4583  001656  0E03               	movlw	3
  4584  001658  6E11               	movwf	___wmul@multiplicand,c
  4585  00165A  0E00               	movlw	0
  4586  00165C  6E04               	movwf	___awmod@divisor+1,c
  4587  00165E  0E0A               	movlw	10
  4588  001660  6E03               	movwf	___awmod@divisor,c
  4589  001662  C039  F001         	movff	fround@prec,___awmod@dividend
  4590  001666  6A02               	clrf	___awmod@dividend+1,c
  4591  001668  ECCE  F010         	call	___awmod	;wreg free
  4592  00166C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4593  001670  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4594  001674  ECF9  F011         	call	___wmul	;wreg free
  4595  001678  0E29               	movlw	low __npowers_
  4596  00167A  240F               	addwf	?___wmul,w,c
  4597  00167C  6EF6               	movwf	tblptrl,c
  4598  00167E  0E06               	movlw	high __npowers_
  4599  001680  2010               	addwfc	?___wmul+1,w,c
  4600  001682  6EF7               	movwf	tblptrh,c
  4601  001684                     	if	0	;There are less than 3 active tblptr bytes
  4602  001684                     	endif
  4603  001684  0009               	tblrd		*+
  4604  001686  CFF5 F024          	movff	tablat,___ftmul@f2
  4605  00168A  0009               	tblrd		*+
  4606  00168C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4607  001690  000A               	tblrd		*-
  4608  001692  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4609  001696  C036  F021         	movff	_fround$1304,___ftmul@f1
  4610  00169A  C037  F022         	movff	_fround$1304+1,___ftmul@f1+1
  4611  00169E  C038  F023         	movff	_fround$1304+2,___ftmul@f1+2
  4612  0016A2  ECF1  F00D         	call	___ftmul	;wreg free
  4613  0016A6  C021  F033         	movff	?___ftmul,_fround$1305
  4614  0016AA  C022  F034         	movff	?___ftmul+1,_fround$1305+1
  4615  0016AE  C023  F035         	movff	?___ftmul+2,_fround$1305+2
  4616                           
  4617                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4618  0016B2  C033  F021         	movff	_fround$1305,___ftmul@f1
  4619  0016B6  C034  F022         	movff	_fround$1305+1,___ftmul@f1+1
  4620  0016BA  C035  F023         	movff	_fround$1305+2,___ftmul@f1+2
  4621  0016BE  0E00               	movlw	0
  4622  0016C0  6E24               	movwf	___ftmul@f2,c
  4623  0016C2  0E00               	movlw	0
  4624  0016C4  6E25               	movwf	___ftmul@f2+1,c
  4625  0016C6  0E3F               	movlw	63
  4626  0016C8  6E26               	movwf	___ftmul@f2+2,c
  4627  0016CA  ECF1  F00D         	call	___ftmul	;wreg free
  4628  0016CE  C021  F030         	movff	?___ftmul,?_fround
  4629  0016D2  C022  F031         	movff	?___ftmul+1,?_fround+1
  4630  0016D6  C023  F032         	movff	?___ftmul+2,?_fround+2
  4631  0016DA  0012               	return	
  4632  0016DC                     i2l2306:
  4633                           
  4634                           ;doprnt.c: 415: else if(prec > 10)
  4635  0016DC  0E0A               	movlw	10
  4636  0016DE  6439               	cpfsgt	fround@prec,c
  4637  0016E0  D05D               	goto	i2l2314
  4638                           
  4639                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4640  0016E2  0E00               	movlw	0
  4641  0016E4  6E12               	movwf	___wmul@multiplicand+1,c
  4642  0016E6  0E03               	movlw	3
  4643  0016E8  6E11               	movwf	___wmul@multiplicand,c
  4644  0016EA  0E00               	movlw	0
  4645  0016EC  6E04               	movwf	___awmod@divisor+1,c
  4646  0016EE  0E0A               	movlw	10
  4647  0016F0  6E03               	movwf	___awmod@divisor,c
  4648  0016F2  C039  F001         	movff	fround@prec,___awmod@dividend
  4649  0016F6  6A02               	clrf	___awmod@dividend+1,c
  4650  0016F8  ECCE  F010         	call	___awmod	;wreg free
  4651  0016FC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4652  001700  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4653  001704  ECF9  F011         	call	___wmul	;wreg free
  4654  001708  0E29               	movlw	low __npowers_
  4655  00170A  240F               	addwf	?___wmul,w,c
  4656  00170C  6EF6               	movwf	tblptrl,c
  4657  00170E  0E06               	movlw	high __npowers_
  4658  001710  2010               	addwfc	?___wmul+1,w,c
  4659  001712  6EF7               	movwf	tblptrh,c
  4660  001714                     	if	0	;There are less than 3 active tblptr bytes
  4661  001714                     	endif
  4662  001714  0009               	tblrd		*+
  4663  001716  CFF5 F024          	movff	tablat,___ftmul@f2
  4664  00171A  0009               	tblrd		*+
  4665  00171C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4666  001720  000A               	tblrd		*-
  4667  001722  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4668  001726  0E00               	movlw	0
  4669  001728  6E0A               	movwf	___awdiv@divisor+1,c
  4670  00172A  0E0A               	movlw	10
  4671  00172C  6E09               	movwf	___awdiv@divisor,c
  4672  00172E  C039  F007         	movff	fround@prec,___awdiv@dividend
  4673  001732  6A08               	clrf	___awdiv@dividend+1,c
  4674  001734  EC4B  F010         	call	___awdiv	;wreg free
  4675  001738  0E09               	movlw	9
  4676  00173A  2407               	addwf	?___awdiv,w,c
  4677  00173C  6E0F               	movwf	___wmul@multiplier,c
  4678  00173E  0E00               	movlw	0
  4679  001740  2008               	addwfc	?___awdiv+1,w,c
  4680  001742  6E10               	movwf	___wmul@multiplier+1,c
  4681  001744  0E00               	movlw	0
  4682  001746  6E12               	movwf	___wmul@multiplicand+1,c
  4683  001748  0E03               	movlw	3
  4684  00174A  6E11               	movwf	___wmul@multiplicand,c
  4685  00174C  ECF9  F011         	call	___wmul	;wreg free
  4686  001750  0E29               	movlw	low __npowers_
  4687  001752  240F               	addwf	?___wmul,w,c
  4688  001754  6EF6               	movwf	tblptrl,c
  4689  001756  0E06               	movlw	high __npowers_
  4690  001758  2010               	addwfc	?___wmul+1,w,c
  4691  00175A  6EF7               	movwf	tblptrh,c
  4692  00175C                     	if	0	;There are less than 3 active tblptr bytes
  4693  00175C                     	endif
  4694  00175C  0009               	tblrd		*+
  4695  00175E  CFF5 F021          	movff	tablat,___ftmul@f1
  4696  001762  0009               	tblrd		*+
  4697  001764  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4698  001768  000A               	tblrd		*-
  4699  00176A  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4700  00176E  ECF1  F00D         	call	___ftmul	;wreg free
  4701  001772  C021  F036         	movff	?___ftmul,_fround$1304
  4702  001776  C022  F037         	movff	?___ftmul+1,_fround$1304+1
  4703  00177A  C023  F038         	movff	?___ftmul+2,_fround$1304+2
  4704                           
  4705                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4706  00177E  C036  F021         	movff	_fround$1304,___ftmul@f1
  4707  001782  C037  F022         	movff	_fround$1304+1,___ftmul@f1+1
  4708  001786  C038  F023         	movff	_fround$1304+2,___ftmul@f1+2
  4709  00178A  0E00               	movlw	0
  4710  00178C  6E24               	movwf	___ftmul@f2,c
  4711  00178E  0E00               	movlw	0
  4712  001790  6E25               	movwf	___ftmul@f2+1,c
  4713  001792  0E3F               	movlw	63
  4714  001794  6E26               	movwf	___ftmul@f2+2,c
  4715  001796  ECF1  F00D         	call	___ftmul	;wreg free
  4716  00179A  D799               	goto	L4
  4717  00179C                     i2l2314:
  4718                           
  4719                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4720  00179C  5039               	movf	fround@prec,w,c
  4721  00179E  0D03               	mullw	3
  4722  0017A0  0E29               	movlw	low __npowers_
  4723  0017A2  24F3               	addwf	prodl,w,c
  4724  0017A4  6EF6               	movwf	tblptrl,c
  4725  0017A6  0E06               	movlw	high __npowers_
  4726  0017A8  20F4               	addwfc	prodh,w,c
  4727  0017AA  6EF7               	movwf	tblptrh,c
  4728  0017AC                     	if	0	;There are less than 3 active tblptr bytes
  4729  0017AC                     	endif
  4730  0017AC  0009               	tblrd		*+
  4731  0017AE  CFF5 F021          	movff	tablat,___ftmul@f1
  4732  0017B2  0009               	tblrd		*+
  4733  0017B4  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4734  0017B8  000A               	tblrd		*-
  4735  0017BA  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4736  0017BE  0E00               	movlw	0
  4737  0017C0  6E24               	movwf	___ftmul@f2,c
  4738  0017C2  0E00               	movlw	0
  4739  0017C4  6E25               	movwf	___ftmul@f2+1,c
  4740  0017C6  0E3F               	movlw	63
  4741  0017C8  6E26               	movwf	___ftmul@f2+2,c
  4742  0017CA  ECF1  F00D         	call	___ftmul	;wreg free
  4743  0017CE  C021  F030         	movff	?___ftmul,?_fround
  4744  0017D2  C022  F031         	movff	?___ftmul+1,?_fround+1
  4745  0017D6  C023  F032         	movff	?___ftmul+2,?_fround+2
  4746  0017DA  0012               	return	
  4747  0017DC                     __end_of_fround:
  4748                           	opt stack 0
  4749                           tosu	equ	0xFFF
  4750                           tosh	equ	0xFFE
  4751                           tosl	equ	0xFFD
  4752                           pclatu	equ	0xFFB
  4753                           pclath	equ	0xFFA
  4754                           tblptru	equ	0xFF8
  4755                           tblptrh	equ	0xFF7
  4756                           tblptrl	equ	0xFF6
  4757                           tablat	equ	0xFF5
  4758                           prodh	equ	0xFF4
  4759                           prodl	equ	0xFF3
  4760                           intcon	equ	0xFF2
  4761                           intcon2	equ	0xFF1
  4762                           fsr0h	equ	0xFEA
  4763                           fsr0l	equ	0xFE9
  4764                           wreg	equ	0xFE8
  4765                           fsr1h	equ	0xFE2
  4766                           fsr1l	equ	0xFE1
  4767                           postinc2	equ	0xFDE
  4768                           postdec2	equ	0xFDD
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function ___wmul *****************
  4774 ;; Defined at:
  4775 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  multiplier      2   14[COMRAM] unsigned int 
  4778 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;  product         2   18[COMRAM] unsigned int 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  2   14[COMRAM] unsigned int 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, prodl, prodh
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4790 ;;      Params:         4       0       0       0       0       0       0
  4791 ;;      Locals:         2       0       0       0       0       0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0
  4793 ;;      Totals:         6       0       0       0       0       0       0
  4794 ;;Total ram usage:        6 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_fround
  4800 ;;		_scale
  4801 ;;		_printf
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text22
  4806  0023F2                     __ptext22:
  4807                           	opt stack 0
  4808  0023F2                     ___wmul:
  4809                           	opt stack 23
  4810                           
  4811                           ;incstack = 0
  4812  0023F2  500F               	movf	___wmul@multiplier,w,c
  4813  0023F4  0211               	mulwf	___wmul@multiplicand,c
  4814  0023F6  CFF3 F013          	movff	prodl,___wmul@product
  4815  0023FA  CFF4 F014          	movff	prodh,___wmul@product+1
  4816  0023FE  500F               	movf	___wmul@multiplier,w,c
  4817  002400  0212               	mulwf	___wmul@multiplicand+1,c
  4818  002402  50F3               	movf	prodl,w,c
  4819  002404  2614               	addwf	___wmul@product+1,f,c
  4820  002406  5010               	movf	___wmul@multiplier+1,w,c
  4821  002408  0211               	mulwf	___wmul@multiplicand,c
  4822  00240A  50F3               	movf	prodl,w,c
  4823  00240C  2614               	addwf	___wmul@product+1,f,c
  4824  00240E  C013  F00F         	movff	___wmul@product,?___wmul
  4825  002412  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4826  002416  0012               	return	
  4827  002418                     __end_of___wmul:
  4828                           	opt stack 0
  4829                           tosu	equ	0xFFF
  4830                           tosh	equ	0xFFE
  4831                           tosl	equ	0xFFD
  4832                           pclatu	equ	0xFFB
  4833                           pclath	equ	0xFFA
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           fsr0h	equ	0xFEA
  4843                           fsr0l	equ	0xFE9
  4844                           wreg	equ	0xFE8
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           postinc2	equ	0xFDE
  4848                           postdec2	equ	0xFDD
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function ___ftmul *****************
  4854 ;; Defined at:
  4855 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  f1              3   32[COMRAM] float 
  4858 ;;  f2              3   35[COMRAM] float 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  4861 ;;  sign            1   46[COMRAM] unsigned char 
  4862 ;;  cntr            1   45[COMRAM] unsigned char 
  4863 ;;  exp             1   41[COMRAM] unsigned char 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  3   32[COMRAM] float 
  4866 ;; Registers used:
  4867 ;;		wreg, status,2, status,0, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4873 ;;      Params:         6       0       0       0       0       0       0
  4874 ;;      Locals:         6       0       0       0       0       0       0
  4875 ;;      Temps:          3       0       0       0       0       0       0
  4876 ;;      Totals:        15       0       0       0       0       0       0
  4877 ;;Total ram usage:       15 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    1
  4880 ;; This function calls:
  4881 ;;		___ftpack
  4882 ;; This function is called by:
  4883 ;;		_INT0_ISR
  4884 ;;		_fround
  4885 ;;		_scale
  4886 ;;		_printf
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text23
  4891  001BE2                     __ptext23:
  4892                           	opt stack 0
  4893  001BE2                     ___ftmul:
  4894                           	opt stack 22
  4895                           
  4896                           ;incstack = 0
  4897  001BE2  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  4898  001BE6  6A28               	clrf	(??___ftmul+1)& (0+255),c
  4899  001BE8  6A29               	clrf	(??___ftmul+2)& (0+255),c
  4900  001BEA  3422               	rlcf	___ftmul@f1+1,w,c
  4901  001BEC  3627               	rlcf	??___ftmul& (0+255),f,c
  4902  001BEE  E301               	bnc	u196_41
  4903  001BF0  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  4904  001BF2                     u196_41:
  4905  001BF2  5027               	movf	??___ftmul,w,c
  4906  001BF4  6E2A               	movwf	___ftmul@exp,c
  4907  001BF6  502A               	movf	___ftmul@exp,w,c
  4908  001BF8  A4D8               	btfss	status,2,c
  4909  001BFA  D007               	goto	i2l2166
  4910  001BFC  0E00               	movlw	0
  4911  001BFE  6E21               	movwf	?___ftmul,c
  4912  001C00  0E00               	movlw	0
  4913  001C02  6E22               	movwf	?___ftmul+1,c
  4914  001C04  0E00               	movlw	0
  4915  001C06  6E23               	movwf	?___ftmul+2,c
  4916  001C08  0012               	return	
  4917  001C0A                     i2l2166:
  4918  001C0A  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  4919  001C0E  6A28               	clrf	(??___ftmul+1)& (0+255),c
  4920  001C10  6A29               	clrf	(??___ftmul+2)& (0+255),c
  4921  001C12  3425               	rlcf	___ftmul@f2+1,w,c
  4922  001C14  3627               	rlcf	??___ftmul& (0+255),f,c
  4923  001C16  E301               	bnc	u198_41
  4924  001C18  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  4925  001C1A                     u198_41:
  4926  001C1A  5027               	movf	??___ftmul,w,c
  4927  001C1C  6E2F               	movwf	___ftmul@sign,c
  4928  001C1E  502F               	movf	___ftmul@sign,w,c
  4929  001C20  A4D8               	btfss	status,2,c
  4930  001C22  D007               	goto	i2l2172
  4931  001C24  0E00               	movlw	0
  4932  001C26  6E21               	movwf	?___ftmul,c
  4933  001C28  0E00               	movlw	0
  4934  001C2A  6E22               	movwf	?___ftmul+1,c
  4935  001C2C  0E00               	movlw	0
  4936  001C2E  6E23               	movwf	?___ftmul+2,c
  4937  001C30  0012               	return	
  4938  001C32                     i2l2172:
  4939  001C32  502F               	movf	___ftmul@sign,w,c
  4940  001C34  0F7B               	addlw	123
  4941  001C36  262A               	addwf	___ftmul@exp,f,c
  4942  001C38  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  4943  001C3C  5026               	movf	___ftmul@f2+2,w,c
  4944  001C3E  1A2F               	xorwf	___ftmul@sign,f,c
  4945  001C40  0E80               	movlw	128
  4946  001C42  162F               	andwf	___ftmul@sign,f,c
  4947  001C44  8E22               	bsf	___ftmul@f1+1,7,c
  4948  001C46  8E25               	bsf	___ftmul@f2+1,7,c
  4949  001C48  0EFF               	movlw	255
  4950  001C4A  1624               	andwf	___ftmul@f2,f,c
  4951  001C4C  0EFF               	movlw	255
  4952  001C4E  1625               	andwf	___ftmul@f2+1,f,c
  4953  001C50  0E00               	movlw	0
  4954  001C52  1626               	andwf	___ftmul@f2+2,f,c
  4955  001C54  0E00               	movlw	0
  4956  001C56  6E2B               	movwf	___ftmul@f3_as_product,c
  4957  001C58  0E00               	movlw	0
  4958  001C5A  6E2C               	movwf	___ftmul@f3_as_product+1,c
  4959  001C5C  0E00               	movlw	0
  4960  001C5E  6E2D               	movwf	___ftmul@f3_as_product+2,c
  4961  001C60  0E07               	movlw	7
  4962  001C62  6E2E               	movwf	___ftmul@cntr,c
  4963  001C64                     i2l2186:
  4964  001C64  A021               	btfss	___ftmul@f1,0,c
  4965  001C66  D006               	goto	i2l2190
  4966  001C68  5024               	movf	___ftmul@f2,w,c
  4967  001C6A  262B               	addwf	___ftmul@f3_as_product,f,c
  4968  001C6C  5025               	movf	___ftmul@f2+1,w,c
  4969  001C6E  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  4970  001C70  5026               	movf	___ftmul@f2+2,w,c
  4971  001C72  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  4972  001C74                     i2l2190:
  4973  001C74  90D8               	bcf	status,0,c
  4974  001C76  3223               	rrcf	___ftmul@f1+2,f,c
  4975  001C78  3222               	rrcf	___ftmul@f1+1,f,c
  4976  001C7A  3221               	rrcf	___ftmul@f1,f,c
  4977  001C7C  90D8               	bcf	status,0,c
  4978  001C7E  3624               	rlcf	___ftmul@f2,f,c
  4979  001C80  3625               	rlcf	___ftmul@f2+1,f,c
  4980  001C82  3626               	rlcf	___ftmul@f2+2,f,c
  4981  001C84  2E2E               	decfsz	___ftmul@cntr,f,c
  4982  001C86  D7EE               	goto	i2l2186
  4983  001C88  0E09               	movlw	9
  4984  001C8A  6E2E               	movwf	___ftmul@cntr,c
  4985  001C8C                     i2l2196:
  4986  001C8C  A021               	btfss	___ftmul@f1,0,c
  4987  001C8E  D006               	goto	i2l2200
  4988  001C90  5024               	movf	___ftmul@f2,w,c
  4989  001C92  262B               	addwf	___ftmul@f3_as_product,f,c
  4990  001C94  5025               	movf	___ftmul@f2+1,w,c
  4991  001C96  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  4992  001C98  5026               	movf	___ftmul@f2+2,w,c
  4993  001C9A  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  4994  001C9C                     i2l2200:
  4995  001C9C  90D8               	bcf	status,0,c
  4996  001C9E  3223               	rrcf	___ftmul@f1+2,f,c
  4997  001CA0  3222               	rrcf	___ftmul@f1+1,f,c
  4998  001CA2  3221               	rrcf	___ftmul@f1,f,c
  4999  001CA4  90D8               	bcf	status,0,c
  5000  001CA6  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  5001  001CA8  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  5002  001CAA  322B               	rrcf	___ftmul@f3_as_product,f,c
  5003  001CAC  2E2E               	decfsz	___ftmul@cntr,f,c
  5004  001CAE  D7EE               	goto	i2l2196
  5005  001CB0  C02B  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5006  001CB4  C02C  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5007  001CB8  C02D  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5008  001CBC  C02A  F004         	movff	___ftmul@exp,___ftpack@exp
  5009  001CC0  C02F  F005         	movff	___ftmul@sign,___ftpack@sign
  5010  001CC4  EC58  F00F         	call	___ftpack	;wreg free
  5011  001CC8  C001  F021         	movff	?___ftpack,?___ftmul
  5012  001CCC  C002  F022         	movff	?___ftpack+1,?___ftmul+1
  5013  001CD0  C003  F023         	movff	?___ftpack+2,?___ftmul+2
  5014  001CD4  0012               	return	
  5015  001CD6                     __end_of___ftmul:
  5016                           	opt stack 0
  5017                           tosu	equ	0xFFF
  5018                           tosh	equ	0xFFE
  5019                           tosl	equ	0xFFD
  5020                           pclatu	equ	0xFFB
  5021                           pclath	equ	0xFFA
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           intcon2	equ	0xFF1
  5030                           fsr0h	equ	0xFEA
  5031                           fsr0l	equ	0xFE9
  5032                           wreg	equ	0xFE8
  5033                           fsr1h	equ	0xFE2
  5034                           fsr1l	equ	0xFE1
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function ___awmod *****************
  5042 ;; Defined at:
  5043 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  dividend        2    0[COMRAM] int 
  5046 ;;  divisor         2    2[COMRAM] int 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  sign            1    5[COMRAM] unsigned char 
  5049 ;;  counter         1    4[COMRAM] unsigned char 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  2    0[COMRAM] int 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, status,0
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5059 ;;      Params:         4       0       0       0       0       0       0
  5060 ;;      Locals:         2       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0
  5062 ;;      Totals:         6       0       0       0       0       0       0
  5063 ;;Total ram usage:        6 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_fround
  5069 ;;		_scale
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text24
  5074  00219C                     __ptext24:
  5075                           	opt stack 0
  5076  00219C                     ___awmod:
  5077                           	opt stack 23
  5078                           
  5079                           ;incstack = 0
  5080  00219C  0E00               	movlw	0
  5081  00219E  6E06               	movwf	___awmod@sign,c
  5082  0021A0  AE02               	btfss	___awmod@dividend+1,7,c
  5083  0021A2  D006               	goto	i2l2260
  5084  0021A4  6C01               	negf	___awmod@dividend,c
  5085  0021A6  1E02               	comf	___awmod@dividend+1,f,c
  5086  0021A8  B0D8               	btfsc	status,0,c
  5087  0021AA  2A02               	incf	___awmod@dividend+1,f,c
  5088  0021AC  0E01               	movlw	1
  5089  0021AE  6E06               	movwf	___awmod@sign,c
  5090  0021B0                     i2l2260:
  5091  0021B0  AE04               	btfss	___awmod@divisor+1,7,c
  5092  0021B2  D004               	goto	i2l2264
  5093  0021B4  6C03               	negf	___awmod@divisor,c
  5094  0021B6  1E04               	comf	___awmod@divisor+1,f,c
  5095  0021B8  B0D8               	btfsc	status,0,c
  5096  0021BA  2A04               	incf	___awmod@divisor+1,f,c
  5097  0021BC                     i2l2264:
  5098  0021BC  5003               	movf	___awmod@divisor,w,c
  5099  0021BE  1004               	iorwf	___awmod@divisor+1,w,c
  5100  0021C0  B4D8               	btfsc	status,2,c
  5101  0021C2  D018               	goto	i2l2280
  5102  0021C4  0E01               	movlw	1
  5103  0021C6  6E05               	movwf	___awmod@counter,c
  5104  0021C8  D004               	goto	i2l2270
  5105  0021CA                     i2l2268:
  5106  0021CA  90D8               	bcf	status,0,c
  5107  0021CC  3603               	rlcf	___awmod@divisor,f,c
  5108  0021CE  3604               	rlcf	___awmod@divisor+1,f,c
  5109  0021D0  2A05               	incf	___awmod@counter,f,c
  5110  0021D2                     i2l2270:
  5111  0021D2  AE04               	btfss	___awmod@divisor+1,7,c
  5112  0021D4  D7FA               	goto	i2l2268
  5113  0021D6                     i2l2272:
  5114  0021D6  5003               	movf	___awmod@divisor,w,c
  5115  0021D8  5C01               	subwf	___awmod@dividend,w,c
  5116  0021DA  5004               	movf	___awmod@divisor+1,w,c
  5117  0021DC  5802               	subwfb	___awmod@dividend+1,w,c
  5118  0021DE  A0D8               	btfss	status,0,c
  5119  0021E0  D004               	goto	i2l2276
  5120  0021E2  5003               	movf	___awmod@divisor,w,c
  5121  0021E4  5E01               	subwf	___awmod@dividend,f,c
  5122  0021E6  5004               	movf	___awmod@divisor+1,w,c
  5123  0021E8  5A02               	subwfb	___awmod@dividend+1,f,c
  5124  0021EA                     i2l2276:
  5125  0021EA  90D8               	bcf	status,0,c
  5126  0021EC  3204               	rrcf	___awmod@divisor+1,f,c
  5127  0021EE  3203               	rrcf	___awmod@divisor,f,c
  5128  0021F0  2E05               	decfsz	___awmod@counter,f,c
  5129  0021F2  D7F1               	goto	i2l2272
  5130  0021F4                     i2l2280:
  5131  0021F4  5006               	movf	___awmod@sign,w,c
  5132  0021F6  B4D8               	btfsc	status,2,c
  5133  0021F8  D004               	goto	i2l2284
  5134  0021FA  6C01               	negf	___awmod@dividend,c
  5135  0021FC  1E02               	comf	___awmod@dividend+1,f,c
  5136  0021FE  B0D8               	btfsc	status,0,c
  5137  002200  2A02               	incf	___awmod@dividend+1,f,c
  5138  002202                     i2l2284:
  5139  002202  C001  F001         	movff	___awmod@dividend,?___awmod
  5140  002206  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5141  00220A  0012               	return	
  5142  00220C                     __end_of___awmod:
  5143                           	opt stack 0
  5144                           tosu	equ	0xFFF
  5145                           tosh	equ	0xFFE
  5146                           tosl	equ	0xFFD
  5147                           pclatu	equ	0xFFB
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           fsr0h	equ	0xFEA
  5158                           fsr0l	equ	0xFE9
  5159                           wreg	equ	0xFE8
  5160                           fsr1h	equ	0xFE2
  5161                           fsr1l	equ	0xFE1
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function ___awdiv *****************
  5169 ;; Defined at:
  5170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  dividend        2    6[COMRAM] int 
  5173 ;;  divisor         2    8[COMRAM] int 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  quotient        2   12[COMRAM] int 
  5176 ;;  sign            1   11[COMRAM] unsigned char 
  5177 ;;  counter         1   10[COMRAM] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  2    6[COMRAM] int 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5187 ;;      Params:         4       0       0       0       0       0       0
  5188 ;;      Locals:         4       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0
  5190 ;;      Totals:         8       0       0       0       0       0       0
  5191 ;;Total ram usage:        8 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; This function calls:
  5194 ;;		Nothing
  5195 ;; This function is called by:
  5196 ;;		_fround
  5197 ;;		_scale
  5198 ;;		_printf
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text25
  5203  002096                     __ptext25:
  5204                           	opt stack 0
  5205  002096                     ___awdiv:
  5206                           	opt stack 23
  5207                           
  5208                           ;incstack = 0
  5209  002096  0E00               	movlw	0
  5210  002098  6E0C               	movwf	___awdiv@sign,c
  5211  00209A  AE0A               	btfss	___awdiv@divisor+1,7,c
  5212  00209C  D006               	goto	i2l2216
  5213  00209E  6C09               	negf	___awdiv@divisor,c
  5214  0020A0  1E0A               	comf	___awdiv@divisor+1,f,c
  5215  0020A2  B0D8               	btfsc	status,0,c
  5216  0020A4  2A0A               	incf	___awdiv@divisor+1,f,c
  5217  0020A6  0E01               	movlw	1
  5218  0020A8  6E0C               	movwf	___awdiv@sign,c
  5219  0020AA                     i2l2216:
  5220  0020AA  AE08               	btfss	___awdiv@dividend+1,7,c
  5221  0020AC  D006               	goto	i2l2222
  5222  0020AE  6C07               	negf	___awdiv@dividend,c
  5223  0020B0  1E08               	comf	___awdiv@dividend+1,f,c
  5224  0020B2  B0D8               	btfsc	status,0,c
  5225  0020B4  2A08               	incf	___awdiv@dividend+1,f,c
  5226  0020B6  0E01               	movlw	1
  5227  0020B8  1A0C               	xorwf	___awdiv@sign,f,c
  5228  0020BA                     i2l2222:
  5229  0020BA  0E00               	movlw	0
  5230  0020BC  6E0E               	movwf	___awdiv@quotient+1,c
  5231  0020BE  0E00               	movlw	0
  5232  0020C0  6E0D               	movwf	___awdiv@quotient,c
  5233  0020C2  5009               	movf	___awdiv@divisor,w,c
  5234  0020C4  100A               	iorwf	___awdiv@divisor+1,w,c
  5235  0020C6  B4D8               	btfsc	status,2,c
  5236  0020C8  D01C               	goto	i2l2244
  5237  0020CA  0E01               	movlw	1
  5238  0020CC  6E0B               	movwf	___awdiv@counter,c
  5239  0020CE  D004               	goto	i2l2230
  5240  0020D0                     i2l2228:
  5241  0020D0  90D8               	bcf	status,0,c
  5242  0020D2  3609               	rlcf	___awdiv@divisor,f,c
  5243  0020D4  360A               	rlcf	___awdiv@divisor+1,f,c
  5244  0020D6  2A0B               	incf	___awdiv@counter,f,c
  5245  0020D8                     i2l2230:
  5246  0020D8  AE0A               	btfss	___awdiv@divisor+1,7,c
  5247  0020DA  D7FA               	goto	i2l2228
  5248  0020DC                     i2l2232:
  5249  0020DC  90D8               	bcf	status,0,c
  5250  0020DE  360D               	rlcf	___awdiv@quotient,f,c
  5251  0020E0  360E               	rlcf	___awdiv@quotient+1,f,c
  5252  0020E2  5009               	movf	___awdiv@divisor,w,c
  5253  0020E4  5C07               	subwf	___awdiv@dividend,w,c
  5254  0020E6  500A               	movf	___awdiv@divisor+1,w,c
  5255  0020E8  5808               	subwfb	___awdiv@dividend+1,w,c
  5256  0020EA  A0D8               	btfss	status,0,c
  5257  0020EC  D005               	goto	i2l2240
  5258  0020EE  5009               	movf	___awdiv@divisor,w,c
  5259  0020F0  5E07               	subwf	___awdiv@dividend,f,c
  5260  0020F2  500A               	movf	___awdiv@divisor+1,w,c
  5261  0020F4  5A08               	subwfb	___awdiv@dividend+1,f,c
  5262  0020F6  800D               	bsf	___awdiv@quotient,0,c
  5263  0020F8                     i2l2240:
  5264  0020F8  90D8               	bcf	status,0,c
  5265  0020FA  320A               	rrcf	___awdiv@divisor+1,f,c
  5266  0020FC  3209               	rrcf	___awdiv@divisor,f,c
  5267  0020FE  2E0B               	decfsz	___awdiv@counter,f,c
  5268  002100  D7ED               	goto	i2l2232
  5269  002102                     i2l2244:
  5270  002102  500C               	movf	___awdiv@sign,w,c
  5271  002104  B4D8               	btfsc	status,2,c
  5272  002106  D004               	goto	i2l2248
  5273  002108  6C0D               	negf	___awdiv@quotient,c
  5274  00210A  1E0E               	comf	___awdiv@quotient+1,f,c
  5275  00210C  B0D8               	btfsc	status,0,c
  5276  00210E  2A0E               	incf	___awdiv@quotient+1,f,c
  5277  002110                     i2l2248:
  5278  002110  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5279  002114  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5280  002118  0012               	return	
  5281  00211A                     __end_of___awdiv:
  5282                           	opt stack 0
  5283                           tosu	equ	0xFFF
  5284                           tosh	equ	0xFFE
  5285                           tosl	equ	0xFFD
  5286                           pclatu	equ	0xFFB
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           intcon2	equ	0xFF1
  5296                           fsr0h	equ	0xFEA
  5297                           fsr0l	equ	0xFE9
  5298                           wreg	equ	0xFE8
  5299                           fsr1h	equ	0xFE2
  5300                           fsr1l	equ	0xFE1
  5301                           postinc2	equ	0xFDE
  5302                           postdec2	equ	0xFDD
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function __tdiv_to_l_ *****************
  5308 ;; Defined at:
  5309 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  f1              3    0[COMRAM] float 
  5312 ;;  f2              3    3[COMRAM] float 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  quot            4    9[COMRAM] unsigned long 
  5315 ;;  exp1            1   14[COMRAM] unsigned char 
  5316 ;;  cntr            1   13[COMRAM] unsigned char 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  4    0[COMRAM] unsigned long 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5326 ;;      Params:         6       0       0       0       0       0       0
  5327 ;;      Locals:         6       0       0       0       0       0       0
  5328 ;;      Temps:          3       0       0       0       0       0       0
  5329 ;;      Totals:        15       0       0       0       0       0       0
  5330 ;;Total ram usage:       15 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; This function calls:
  5333 ;;		Nothing
  5334 ;; This function is called by:
  5335 ;;		_printf
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text26
  5340  001988                     __ptext26:
  5341                           	opt stack 0
  5342  001988                     __tdiv_to_l_:
  5343                           	opt stack 24
  5344                           
  5345                           ;incstack = 0
  5346  001988  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5347  00198C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5348  00198E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5349  001990  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5350  001992  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5351  001994  E301               	bnc	u223_41
  5352  001996  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5353  001998                     u223_41:
  5354  001998  5007               	movf	??__tdiv_to_l_,w,c
  5355  00199A  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5356  00199C  500F               	movf	__tdiv_to_l_@exp1,w,c
  5357  00199E  A4D8               	btfss	status,2,c
  5358  0019A0  D009               	goto	i2l2374
  5359  0019A2  0E00               	movlw	0
  5360  0019A4  6E01               	movwf	?__tdiv_to_l_,c
  5361  0019A6  0E00               	movlw	0
  5362  0019A8  6E02               	movwf	?__tdiv_to_l_+1,c
  5363  0019AA  0E00               	movlw	0
  5364  0019AC  6E03               	movwf	?__tdiv_to_l_+2,c
  5365  0019AE  0E00               	movlw	0
  5366  0019B0  6E04               	movwf	?__tdiv_to_l_+3,c
  5367  0019B2  0012               	return	
  5368  0019B4                     i2l2374:
  5369  0019B4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5370  0019B8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5371  0019BA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5372  0019BC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5373  0019BE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5374  0019C0  E301               	bnc	u225_41
  5375  0019C2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5376  0019C4                     u225_41:
  5377  0019C4  5007               	movf	??__tdiv_to_l_,w,c
  5378  0019C6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5379  0019C8  500E               	movf	__tdiv_to_l_@cntr,w,c
  5380  0019CA  A4D8               	btfss	status,2,c
  5381  0019CC  D009               	goto	i2l2380
  5382  0019CE  0E00               	movlw	0
  5383  0019D0  6E01               	movwf	?__tdiv_to_l_,c
  5384  0019D2  0E00               	movlw	0
  5385  0019D4  6E02               	movwf	?__tdiv_to_l_+1,c
  5386  0019D6  0E00               	movlw	0
  5387  0019D8  6E03               	movwf	?__tdiv_to_l_+2,c
  5388  0019DA  0E00               	movlw	0
  5389  0019DC  6E04               	movwf	?__tdiv_to_l_+3,c
  5390  0019DE  0012               	return	
  5391  0019E0                     i2l2380:
  5392  0019E0  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5393  0019E2  0EFF               	movlw	255
  5394  0019E4  1601               	andwf	__tdiv_to_l_@f1,f,c
  5395  0019E6  0EFF               	movlw	255
  5396  0019E8  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5397  0019EA  0E00               	movlw	0
  5398  0019EC  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5399  0019EE  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5400  0019F0  0EFF               	movlw	255
  5401  0019F2  1604               	andwf	__tdiv_to_l_@f2,f,c
  5402  0019F4  0EFF               	movlw	255
  5403  0019F6  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5404  0019F8  0E00               	movlw	0
  5405  0019FA  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5406  0019FC  0E00               	movlw	0
  5407  0019FE  6E0A               	movwf	__tdiv_to_l_@quot,c
  5408  001A00  0E00               	movlw	0
  5409  001A02  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5410  001A04  0E00               	movlw	0
  5411  001A06  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5412  001A08  0E00               	movlw	0
  5413  001A0A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5414  001A0C  0E7F               	movlw	127
  5415  001A0E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5416  001A10  500E               	movf	__tdiv_to_l_@cntr,w,c
  5417  001A12  0F98               	addlw	152
  5418  001A14  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5419  001A16  0E18               	movlw	24
  5420  001A18  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5421  001A1A                     i2l650:
  5422  001A1A  90D8               	bcf	status,0,c
  5423  001A1C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5424  001A1E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5425  001A20  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5426  001A22  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5427  001A24  5004               	movf	__tdiv_to_l_@f2,w,c
  5428  001A26  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5429  001A28  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5430  001A2A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5431  001A2C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5432  001A2E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5433  001A30  A0D8               	btfss	status,0,c
  5434  001A32  D007               	goto	i2l651
  5435  001A34  5004               	movf	__tdiv_to_l_@f2,w,c
  5436  001A36  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5437  001A38  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5438  001A3A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5439  001A3C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5440  001A3E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5441  001A40  800A               	bsf	__tdiv_to_l_@quot,0,c
  5442  001A42                     i2l651:
  5443  001A42  90D8               	bcf	status,0,c
  5444  001A44  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5445  001A46  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5446  001A48  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5447  001A4A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5448  001A4C  D7E6               	goto	i2l650
  5449  001A4E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5450  001A50  D016               	goto	i2l2414
  5451  001A52  500F               	movf	__tdiv_to_l_@exp1,w,c
  5452  001A54  0A80               	xorlw	128
  5453  001A56  0F97               	addlw	151
  5454  001A58  B0D8               	btfsc	status,0,c
  5455  001A5A  D009               	goto	i2l2410
  5456  001A5C  0E00               	movlw	0
  5457  001A5E  6E01               	movwf	?__tdiv_to_l_,c
  5458  001A60  0E00               	movlw	0
  5459  001A62  6E02               	movwf	?__tdiv_to_l_+1,c
  5460  001A64  0E00               	movlw	0
  5461  001A66  6E03               	movwf	?__tdiv_to_l_+2,c
  5462  001A68  0E00               	movlw	0
  5463  001A6A  6E04               	movwf	?__tdiv_to_l_+3,c
  5464  001A6C  0012               	return	
  5465  001A6E                     i2l2410:
  5466  001A6E  90D8               	bcf	status,0,c
  5467  001A70  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5468  001A72  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5469  001A74  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5470  001A76  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5471  001A78  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5472  001A7A  D7F9               	goto	i2l2410
  5473  001A7C  D015               	goto	i2l657
  5474  001A7E                     i2l2414:
  5475  001A7E  0E17               	movlw	23
  5476  001A80  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5477  001A82  D00F               	goto	i2l2422
  5478  001A84  0E00               	movlw	0
  5479  001A86  6E01               	movwf	?__tdiv_to_l_,c
  5480  001A88  0E00               	movlw	0
  5481  001A8A  6E02               	movwf	?__tdiv_to_l_+1,c
  5482  001A8C  0E00               	movlw	0
  5483  001A8E  6E03               	movwf	?__tdiv_to_l_+2,c
  5484  001A90  0E00               	movlw	0
  5485  001A92  6E04               	movwf	?__tdiv_to_l_+3,c
  5486  001A94  0012               	return	
  5487  001A96                     i2l2420:
  5488  001A96  90D8               	bcf	status,0,c
  5489  001A98  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5490  001A9A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5491  001A9C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5492  001A9E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5493  001AA0  060F               	decf	__tdiv_to_l_@exp1,f,c
  5494  001AA2                     i2l2422:
  5495  001AA2  500F               	movf	__tdiv_to_l_@exp1,w,c
  5496  001AA4  A4D8               	btfss	status,2,c
  5497  001AA6  D7F7               	goto	i2l2420
  5498  001AA8                     i2l657:
  5499  001AA8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5500  001AAC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5501  001AB0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5502  001AB4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5503  001AB8  0012               	return		;funcret
  5504  001ABA                     __end_of__tdiv_to_l_:
  5505                           	opt stack 0
  5506                           tosu	equ	0xFFF
  5507                           tosh	equ	0xFFE
  5508                           tosl	equ	0xFFD
  5509                           pclatu	equ	0xFFB
  5510                           pclath	equ	0xFFA
  5511                           tblptru	equ	0xFF8
  5512                           tblptrh	equ	0xFF7
  5513                           tblptrl	equ	0xFF6
  5514                           tablat	equ	0xFF5
  5515                           prodh	equ	0xFF4
  5516                           prodl	equ	0xFF3
  5517                           intcon	equ	0xFF2
  5518                           intcon2	equ	0xFF1
  5519                           fsr0h	equ	0xFEA
  5520                           fsr0l	equ	0xFE9
  5521                           wreg	equ	0xFE8
  5522                           fsr1h	equ	0xFE2
  5523                           fsr1l	equ	0xFE1
  5524                           postinc2	equ	0xFDE
  5525                           postdec2	equ	0xFDD
  5526                           fsr2h	equ	0xFDA
  5527                           fsr2l	equ	0xFD9
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function __div_to_l_ *****************
  5531 ;; Defined at:
  5532 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  f1              3    0[COMRAM] unsigned long 
  5535 ;;  f2              3    3[COMRAM] unsigned long 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  quot            4    6[COMRAM] unsigned long 
  5538 ;;  exp1            1   11[COMRAM] unsigned char 
  5539 ;;  cntr            1   10[COMRAM] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  4    0[COMRAM] unsigned long 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5549 ;;      Params:         6       0       0       0       0       0       0
  5550 ;;      Locals:         6       0       0       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0
  5552 ;;      Totals:        12       0       0       0       0       0       0
  5553 ;;Total ram usage:       12 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_printf
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text27
  5563  001ABA                     __ptext27:
  5564                           	opt stack 0
  5565  001ABA                     __div_to_l_:
  5566                           	opt stack 24
  5567                           
  5568                           ;incstack = 0
  5569  001ABA  3403               	rlcf	__div_to_l_@f1+2,w,c
  5570  001ABC  3404               	rlcf	__div_to_l_@f1+3,w,c
  5571  001ABE  6E0C               	movwf	__div_to_l_@exp1,c
  5572  001AC0  500C               	movf	__div_to_l_@exp1,w,c
  5573  001AC2  A4D8               	btfss	status,2,c
  5574  001AC4  D009               	goto	i2l2430
  5575  001AC6  0E00               	movlw	0
  5576  001AC8  6E01               	movwf	?__div_to_l_,c
  5577  001ACA  0E00               	movlw	0
  5578  001ACC  6E02               	movwf	?__div_to_l_+1,c
  5579  001ACE  0E00               	movlw	0
  5580  001AD0  6E03               	movwf	?__div_to_l_+2,c
  5581  001AD2  0E00               	movlw	0
  5582  001AD4  6E04               	movwf	?__div_to_l_+3,c
  5583  001AD6  0012               	return	
  5584  001AD8                     i2l2430:
  5585  001AD8  3406               	rlcf	__div_to_l_@f2+2,w,c
  5586  001ADA  3407               	rlcf	__div_to_l_@f2+3,w,c
  5587  001ADC  6E0B               	movwf	__div_to_l_@cntr,c
  5588  001ADE  500B               	movf	__div_to_l_@cntr,w,c
  5589  001AE0  A4D8               	btfss	status,2,c
  5590  001AE2  D009               	goto	i2l2436
  5591  001AE4  0E00               	movlw	0
  5592  001AE6  6E01               	movwf	?__div_to_l_,c
  5593  001AE8  0E00               	movlw	0
  5594  001AEA  6E02               	movwf	?__div_to_l_+1,c
  5595  001AEC  0E00               	movlw	0
  5596  001AEE  6E03               	movwf	?__div_to_l_+2,c
  5597  001AF0  0E00               	movlw	0
  5598  001AF2  6E04               	movwf	?__div_to_l_+3,c
  5599  001AF4  0012               	return	
  5600  001AF6                     i2l2436:
  5601  001AF6  8E03               	bsf	__div_to_l_@f1+2,7,c
  5602  001AF8  0EFF               	movlw	255
  5603  001AFA  1601               	andwf	__div_to_l_@f1,f,c
  5604  001AFC  0EFF               	movlw	255
  5605  001AFE  1602               	andwf	__div_to_l_@f1+1,f,c
  5606  001B00  0EFF               	movlw	255
  5607  001B02  1603               	andwf	__div_to_l_@f1+2,f,c
  5608  001B04  0E00               	movlw	0
  5609  001B06  1604               	andwf	__div_to_l_@f1+3,f,c
  5610  001B08  8E06               	bsf	__div_to_l_@f2+2,7,c
  5611  001B0A  0EFF               	movlw	255
  5612  001B0C  1604               	andwf	__div_to_l_@f2,f,c
  5613  001B0E  0EFF               	movlw	255
  5614  001B10  1605               	andwf	__div_to_l_@f2+1,f,c
  5615  001B12  0EFF               	movlw	255
  5616  001B14  1606               	andwf	__div_to_l_@f2+2,f,c
  5617  001B16  0E00               	movlw	0
  5618  001B18  1607               	andwf	__div_to_l_@f2+3,f,c
  5619  001B1A  0E00               	movlw	0
  5620  001B1C  6E07               	movwf	__div_to_l_@quot,c
  5621  001B1E  0E00               	movlw	0
  5622  001B20  6E08               	movwf	__div_to_l_@quot+1,c
  5623  001B22  0E00               	movlw	0
  5624  001B24  6E09               	movwf	__div_to_l_@quot+2,c
  5625  001B26  0E00               	movlw	0
  5626  001B28  6E0A               	movwf	__div_to_l_@quot+3,c
  5627  001B2A  0E7F               	movlw	127
  5628  001B2C  5E0C               	subwf	__div_to_l_@exp1,f,c
  5629  001B2E  500B               	movf	__div_to_l_@cntr,w,c
  5630  001B30  0FA0               	addlw	160
  5631  001B32  5E0C               	subwf	__div_to_l_@exp1,f,c
  5632  001B34  0E20               	movlw	32
  5633  001B36  6E0B               	movwf	__div_to_l_@cntr,c
  5634  001B38                     i2l2450:
  5635  001B38  90D8               	bcf	status,0,c
  5636  001B3A  3607               	rlcf	__div_to_l_@quot,f,c
  5637  001B3C  3608               	rlcf	__div_to_l_@quot+1,f,c
  5638  001B3E  3609               	rlcf	__div_to_l_@quot+2,f,c
  5639  001B40  360A               	rlcf	__div_to_l_@quot+3,f,c
  5640  001B42  5004               	movf	__div_to_l_@f2,w,c
  5641  001B44  5C01               	subwf	__div_to_l_@f1,w,c
  5642  001B46  5005               	movf	__div_to_l_@f2+1,w,c
  5643  001B48  5802               	subwfb	__div_to_l_@f1+1,w,c
  5644  001B4A  5006               	movf	__div_to_l_@f2+2,w,c
  5645  001B4C  5803               	subwfb	__div_to_l_@f1+2,w,c
  5646  001B4E  5007               	movf	__div_to_l_@f2+3,w,c
  5647  001B50  5804               	subwfb	__div_to_l_@f1+3,w,c
  5648  001B52  A0D8               	btfss	status,0,c
  5649  001B54  D009               	goto	i2l2458
  5650  001B56  5004               	movf	__div_to_l_@f2,w,c
  5651  001B58  5E01               	subwf	__div_to_l_@f1,f,c
  5652  001B5A  5005               	movf	__div_to_l_@f2+1,w,c
  5653  001B5C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5654  001B5E  5006               	movf	__div_to_l_@f2+2,w,c
  5655  001B60  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5656  001B62  5007               	movf	__div_to_l_@f2+3,w,c
  5657  001B64  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5658  001B66  8007               	bsf	__div_to_l_@quot,0,c
  5659  001B68                     i2l2458:
  5660  001B68  90D8               	bcf	status,0,c
  5661  001B6A  3601               	rlcf	__div_to_l_@f1,f,c
  5662  001B6C  3602               	rlcf	__div_to_l_@f1+1,f,c
  5663  001B6E  3603               	rlcf	__div_to_l_@f1+2,f,c
  5664  001B70  3604               	rlcf	__div_to_l_@f1+3,f,c
  5665  001B72  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5666  001B74  D7E1               	goto	i2l2450
  5667  001B76  AE0C               	btfss	__div_to_l_@exp1,7,c
  5668  001B78  D016               	goto	i2l2474
  5669  001B7A  500C               	movf	__div_to_l_@exp1,w,c
  5670  001B7C  0A80               	xorlw	128
  5671  001B7E  0F9F               	addlw	159
  5672  001B80  B0D8               	btfsc	status,0,c
  5673  001B82  D009               	goto	i2l2470
  5674  001B84  0E00               	movlw	0
  5675  001B86  6E01               	movwf	?__div_to_l_,c
  5676  001B88  0E00               	movlw	0
  5677  001B8A  6E02               	movwf	?__div_to_l_+1,c
  5678  001B8C  0E00               	movlw	0
  5679  001B8E  6E03               	movwf	?__div_to_l_+2,c
  5680  001B90  0E00               	movlw	0
  5681  001B92  6E04               	movwf	?__div_to_l_+3,c
  5682  001B94  0012               	return	
  5683  001B96                     i2l2470:
  5684  001B96  90D8               	bcf	status,0,c
  5685  001B98  320A               	rrcf	__div_to_l_@quot+3,f,c
  5686  001B9A  3209               	rrcf	__div_to_l_@quot+2,f,c
  5687  001B9C  3208               	rrcf	__div_to_l_@quot+1,f,c
  5688  001B9E  3207               	rrcf	__div_to_l_@quot,f,c
  5689  001BA0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5690  001BA2  D7F9               	goto	i2l2470
  5691  001BA4  D015               	goto	i2l553
  5692  001BA6                     i2l2474:
  5693  001BA6  0E1F               	movlw	31
  5694  001BA8  640C               	cpfsgt	__div_to_l_@exp1,c
  5695  001BAA  D00F               	goto	i2l2482
  5696  001BAC  0E00               	movlw	0
  5697  001BAE  6E01               	movwf	?__div_to_l_,c
  5698  001BB0  0E00               	movlw	0
  5699  001BB2  6E02               	movwf	?__div_to_l_+1,c
  5700  001BB4  0E00               	movlw	0
  5701  001BB6  6E03               	movwf	?__div_to_l_+2,c
  5702  001BB8  0E00               	movlw	0
  5703  001BBA  6E04               	movwf	?__div_to_l_+3,c
  5704  001BBC  0012               	return	
  5705  001BBE                     i2l2480:
  5706  001BBE  90D8               	bcf	status,0,c
  5707  001BC0  3607               	rlcf	__div_to_l_@quot,f,c
  5708  001BC2  3608               	rlcf	__div_to_l_@quot+1,f,c
  5709  001BC4  3609               	rlcf	__div_to_l_@quot+2,f,c
  5710  001BC6  360A               	rlcf	__div_to_l_@quot+3,f,c
  5711  001BC8  060C               	decf	__div_to_l_@exp1,f,c
  5712  001BCA                     i2l2482:
  5713  001BCA  500C               	movf	__div_to_l_@exp1,w,c
  5714  001BCC  A4D8               	btfss	status,2,c
  5715  001BCE  D7F7               	goto	i2l2480
  5716  001BD0                     i2l553:
  5717  001BD0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5718  001BD4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5719  001BD8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5720  001BDC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5721  001BE0  0012               	return		;funcret
  5722  001BE2                     __end_of__div_to_l_:
  5723                           	opt stack 0
  5724                           tosu	equ	0xFFF
  5725                           tosh	equ	0xFFE
  5726                           tosl	equ	0xFFD
  5727                           pclatu	equ	0xFFB
  5728                           pclath	equ	0xFFA
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           intcon	equ	0xFF2
  5736                           intcon2	equ	0xFF1
  5737                           fsr0h	equ	0xFEA
  5738                           fsr0l	equ	0xFE9
  5739                           wreg	equ	0xFE8
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function ___lltoft *****************
  5749 ;; Defined at:
  5750 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  c               4    8[COMRAM] unsigned long 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  exp             1   16[COMRAM] unsigned char 
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  3    8[COMRAM] float 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5764 ;;      Params:         4       0       0       0       0       0       0
  5765 ;;      Locals:         1       0       0       0       0       0       0
  5766 ;;      Temps:          4       0       0       0       0       0       0
  5767 ;;      Totals:         9       0       0       0       0       0       0
  5768 ;;Total ram usage:        9 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    1
  5771 ;; This function calls:
  5772 ;;		___ftpack
  5773 ;; This function is called by:
  5774 ;;		_printf
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text28
  5779  002272                     __ptext28:
  5780                           	opt stack 0
  5781  002272                     ___lltoft:
  5782                           	opt stack 23
  5783                           
  5784                           ;incstack = 0
  5785  002272  0E8E               	movlw	142
  5786  002274  6E11               	movwf	___lltoft@exp,c
  5787  002276  D006               	goto	i2l2602
  5788  002278                     i2l2600:
  5789  002278  90D8               	bcf	status,0,c
  5790  00227A  320C               	rrcf	___lltoft@c+3,f,c
  5791  00227C  320B               	rrcf	___lltoft@c+2,f,c
  5792  00227E  320A               	rrcf	___lltoft@c+1,f,c
  5793  002280  3209               	rrcf	___lltoft@c,f,c
  5794  002282  2A11               	incf	___lltoft@exp,f,c
  5795  002284                     i2l2602:
  5796  002284  0E00               	movlw	0
  5797  002286  1409               	andwf	___lltoft@c,w,c
  5798  002288  6E0D               	movwf	??___lltoft& (0+255),c
  5799  00228A  0E00               	movlw	0
  5800  00228C  140A               	andwf	___lltoft@c+1,w,c
  5801  00228E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5802  002290  0E00               	movlw	0
  5803  002292  140B               	andwf	___lltoft@c+2,w,c
  5804  002294  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5805  002296  0EFF               	movlw	255
  5806  002298  140C               	andwf	___lltoft@c+3,w,c
  5807  00229A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5808  00229C  500D               	movf	??___lltoft,w,c
  5809  00229E  100E               	iorwf	??___lltoft+1,w,c
  5810  0022A0  100F               	iorwf	??___lltoft+2,w,c
  5811  0022A2  1010               	iorwf	??___lltoft+3,w,c
  5812  0022A4  A4D8               	btfss	status,2,c
  5813  0022A6  D7E8               	goto	i2l2600
  5814  0022A8  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5815  0022AC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5816  0022B0  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5817  0022B4  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5818  0022B8  0E00               	movlw	0
  5819  0022BA  6E05               	movwf	___ftpack@sign,c
  5820  0022BC  EC58  F00F         	call	___ftpack	;wreg free
  5821  0022C0  C001  F009         	movff	?___ftpack,?___lltoft
  5822  0022C4  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5823  0022C8  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5824  0022CC  0012               	return	
  5825  0022CE                     __end_of___lltoft:
  5826                           	opt stack 0
  5827                           tosu	equ	0xFFF
  5828                           tosh	equ	0xFFE
  5829                           tosl	equ	0xFFD
  5830                           pclatu	equ	0xFFB
  5831                           pclath	equ	0xFFA
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           intcon	equ	0xFF2
  5839                           intcon2	equ	0xFF1
  5840                           fsr0h	equ	0xFEA
  5841                           fsr0l	equ	0xFE9
  5842                           wreg	equ	0xFE8
  5843                           fsr1h	equ	0xFE2
  5844                           fsr1l	equ	0xFE1
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function ___llmod *****************
  5852 ;; Defined at:
  5853 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  dividend        4   13[COMRAM] unsigned long 
  5856 ;;  divisor         4   17[COMRAM] unsigned long 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  counter         1   21[COMRAM] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  4   13[COMRAM] unsigned long 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5868 ;;      Params:         8       0       0       0       0       0       0
  5869 ;;      Locals:         1       0       0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0
  5871 ;;      Totals:         9       0       0       0       0       0       0
  5872 ;;Total ram usage:        9 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; This function calls:
  5875 ;;		Nothing
  5876 ;; This function is called by:
  5877 ;;		_printf
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text29
  5882  00220C                     __ptext29:
  5883                           	opt stack 0
  5884  00220C                     ___llmod:
  5885                           	opt stack 24
  5886                           
  5887                           ;incstack = 0
  5888  00220C  5012               	movf	___llmod@divisor,w,c
  5889  00220E  1013               	iorwf	___llmod@divisor+1,w,c
  5890  002210  1014               	iorwf	___llmod@divisor+2,w,c
  5891  002212  1015               	iorwf	___llmod@divisor+3,w,c
  5892  002214  B4D8               	btfsc	status,2,c
  5893  002216  D024               	goto	i2l742
  5894  002218  0E01               	movlw	1
  5895  00221A  6E16               	movwf	___llmod@counter,c
  5896  00221C  D006               	goto	i2l2588
  5897  00221E                     i2l2586:
  5898  00221E  90D8               	bcf	status,0,c
  5899  002220  3612               	rlcf	___llmod@divisor,f,c
  5900  002222  3613               	rlcf	___llmod@divisor+1,f,c
  5901  002224  3614               	rlcf	___llmod@divisor+2,f,c
  5902  002226  3615               	rlcf	___llmod@divisor+3,f,c
  5903  002228  2A16               	incf	___llmod@counter,f,c
  5904  00222A                     i2l2588:
  5905  00222A  AE15               	btfss	___llmod@divisor+3,7,c
  5906  00222C  D7F8               	goto	i2l2586
  5907  00222E                     i2l2590:
  5908  00222E  5012               	movf	___llmod@divisor,w,c
  5909  002230  5C0E               	subwf	___llmod@dividend,w,c
  5910  002232  5013               	movf	___llmod@divisor+1,w,c
  5911  002234  580F               	subwfb	___llmod@dividend+1,w,c
  5912  002236  5014               	movf	___llmod@divisor+2,w,c
  5913  002238  5810               	subwfb	___llmod@dividend+2,w,c
  5914  00223A  5015               	movf	___llmod@divisor+3,w,c
  5915  00223C  5811               	subwfb	___llmod@dividend+3,w,c
  5916  00223E  A0D8               	btfss	status,0,c
  5917  002240  D008               	goto	i2l2594
  5918  002242  5012               	movf	___llmod@divisor,w,c
  5919  002244  5E0E               	subwf	___llmod@dividend,f,c
  5920  002246  5013               	movf	___llmod@divisor+1,w,c
  5921  002248  5A0F               	subwfb	___llmod@dividend+1,f,c
  5922  00224A  5014               	movf	___llmod@divisor+2,w,c
  5923  00224C  5A10               	subwfb	___llmod@dividend+2,f,c
  5924  00224E  5015               	movf	___llmod@divisor+3,w,c
  5925  002250  5A11               	subwfb	___llmod@dividend+3,f,c
  5926  002252                     i2l2594:
  5927  002252  90D8               	bcf	status,0,c
  5928  002254  3215               	rrcf	___llmod@divisor+3,f,c
  5929  002256  3214               	rrcf	___llmod@divisor+2,f,c
  5930  002258  3213               	rrcf	___llmod@divisor+1,f,c
  5931  00225A  3212               	rrcf	___llmod@divisor,f,c
  5932  00225C  2E16               	decfsz	___llmod@counter,f,c
  5933  00225E  D7E7               	goto	i2l2590
  5934  002260                     i2l742:
  5935  002260  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5936  002264  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5937  002268  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5938  00226C  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5939  002270  0012               	return		;funcret
  5940  002272                     __end_of___llmod:
  5941                           	opt stack 0
  5942                           tosu	equ	0xFFF
  5943                           tosh	equ	0xFFE
  5944                           tosl	equ	0xFFD
  5945                           pclatu	equ	0xFFB
  5946                           pclath	equ	0xFFA
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           intcon	equ	0xFF2
  5954                           intcon2	equ	0xFF1
  5955                           fsr0h	equ	0xFEA
  5956                           fsr0l	equ	0xFE9
  5957                           wreg	equ	0xFE8
  5958                           fsr1h	equ	0xFE2
  5959                           fsr1l	equ	0xFE1
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function ___lldiv *****************
  5967 ;; Defined at:
  5968 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  dividend        4    0[COMRAM] unsigned long 
  5971 ;;  divisor         4    4[COMRAM] unsigned long 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  quotient        4    8[COMRAM] unsigned long 
  5974 ;;  counter         1   12[COMRAM] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  4    0[COMRAM] unsigned long 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5984 ;;      Params:         8       0       0       0       0       0       0
  5985 ;;      Locals:         5       0       0       0       0       0       0
  5986 ;;      Temps:          0       0       0       0       0       0       0
  5987 ;;      Totals:        13       0       0       0       0       0       0
  5988 ;;Total ram usage:       13 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_printf
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text30
  5998  00211A                     __ptext30:
  5999                           	opt stack 0
  6000  00211A                     ___lldiv:
  6001                           	opt stack 24
  6002                           
  6003                           ;incstack = 0
  6004  00211A  0E00               	movlw	0
  6005  00211C  6E09               	movwf	___lldiv@quotient,c
  6006  00211E  0E00               	movlw	0
  6007  002120  6E0A               	movwf	___lldiv@quotient+1,c
  6008  002122  0E00               	movlw	0
  6009  002124  6E0B               	movwf	___lldiv@quotient+2,c
  6010  002126  0E00               	movlw	0
  6011  002128  6E0C               	movwf	___lldiv@quotient+3,c
  6012  00212A  5005               	movf	___lldiv@divisor,w,c
  6013  00212C  1006               	iorwf	___lldiv@divisor+1,w,c
  6014  00212E  1007               	iorwf	___lldiv@divisor+2,w,c
  6015  002130  1008               	iorwf	___lldiv@divisor+3,w,c
  6016  002132  B4D8               	btfsc	status,2,c
  6017  002134  D02A               	goto	i2l732
  6018  002136  0E01               	movlw	1
  6019  002138  6E0D               	movwf	___lldiv@counter,c
  6020  00213A  D006               	goto	i2l2568
  6021  00213C                     i2l2566:
  6022  00213C  90D8               	bcf	status,0,c
  6023  00213E  3605               	rlcf	___lldiv@divisor,f,c
  6024  002140  3606               	rlcf	___lldiv@divisor+1,f,c
  6025  002142  3607               	rlcf	___lldiv@divisor+2,f,c
  6026  002144  3608               	rlcf	___lldiv@divisor+3,f,c
  6027  002146  2A0D               	incf	___lldiv@counter,f,c
  6028  002148                     i2l2568:
  6029  002148  AE08               	btfss	___lldiv@divisor+3,7,c
  6030  00214A  D7F8               	goto	i2l2566
  6031  00214C                     i2l2570:
  6032  00214C  90D8               	bcf	status,0,c
  6033  00214E  3609               	rlcf	___lldiv@quotient,f,c
  6034  002150  360A               	rlcf	___lldiv@quotient+1,f,c
  6035  002152  360B               	rlcf	___lldiv@quotient+2,f,c
  6036  002154  360C               	rlcf	___lldiv@quotient+3,f,c
  6037  002156  5005               	movf	___lldiv@divisor,w,c
  6038  002158  5C01               	subwf	___lldiv@dividend,w,c
  6039  00215A  5006               	movf	___lldiv@divisor+1,w,c
  6040  00215C  5802               	subwfb	___lldiv@dividend+1,w,c
  6041  00215E  5007               	movf	___lldiv@divisor+2,w,c
  6042  002160  5803               	subwfb	___lldiv@dividend+2,w,c
  6043  002162  5008               	movf	___lldiv@divisor+3,w,c
  6044  002164  5804               	subwfb	___lldiv@dividend+3,w,c
  6045  002166  A0D8               	btfss	status,0,c
  6046  002168  D009               	goto	i2l2578
  6047  00216A  5005               	movf	___lldiv@divisor,w,c
  6048  00216C  5E01               	subwf	___lldiv@dividend,f,c
  6049  00216E  5006               	movf	___lldiv@divisor+1,w,c
  6050  002170  5A02               	subwfb	___lldiv@dividend+1,f,c
  6051  002172  5007               	movf	___lldiv@divisor+2,w,c
  6052  002174  5A03               	subwfb	___lldiv@dividend+2,f,c
  6053  002176  5008               	movf	___lldiv@divisor+3,w,c
  6054  002178  5A04               	subwfb	___lldiv@dividend+3,f,c
  6055  00217A  8009               	bsf	___lldiv@quotient,0,c
  6056  00217C                     i2l2578:
  6057  00217C  90D8               	bcf	status,0,c
  6058  00217E  3208               	rrcf	___lldiv@divisor+3,f,c
  6059  002180  3207               	rrcf	___lldiv@divisor+2,f,c
  6060  002182  3206               	rrcf	___lldiv@divisor+1,f,c
  6061  002184  3205               	rrcf	___lldiv@divisor,f,c
  6062  002186  2E0D               	decfsz	___lldiv@counter,f,c
  6063  002188  D7E1               	goto	i2l2570
  6064  00218A                     i2l732:
  6065  00218A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6066  00218E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6067  002192  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6068  002196  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6069  00219A  0012               	return		;funcret
  6070  00219C                     __end_of___lldiv:
  6071                           	opt stack 0
  6072                           tosu	equ	0xFFF
  6073                           tosh	equ	0xFFE
  6074                           tosl	equ	0xFFD
  6075                           pclatu	equ	0xFFB
  6076                           pclath	equ	0xFFA
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           intcon2	equ	0xFF1
  6085                           fsr0h	equ	0xFEA
  6086                           fsr0l	equ	0xFE9
  6087                           wreg	equ	0xFE8
  6088                           fsr1h	equ	0xFE2
  6089                           fsr1l	equ	0xFE1
  6090                           postinc2	equ	0xFDE
  6091                           postdec2	equ	0xFDD
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function ___fttol *****************
  6097 ;; Defined at:
  6098 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  f1              3   54[COMRAM] float 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  lval            4   64[COMRAM] unsigned long 
  6103 ;;  exp1            1   68[COMRAM] unsigned char 
  6104 ;;  sign1           1   63[COMRAM] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  4   54[COMRAM] long 
  6107 ;; Registers used:
  6108 ;;		wreg, status,2, status,0
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6114 ;;      Params:         4       0       0       0       0       0       0
  6115 ;;      Locals:         6       0       0       0       0       0       0
  6116 ;;      Temps:          5       0       0       0       0       0       0
  6117 ;;      Totals:        15       0       0       0       0       0       0
  6118 ;;Total ram usage:       15 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_printf
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text31
  6128  001CD6                     __ptext31:
  6129                           	opt stack 0
  6130  001CD6                     ___fttol:
  6131                           	opt stack 24
  6132                           
  6133                           ;incstack = 0
  6134  001CD6  C039  F03B         	movff	___fttol@f1+2,??___fttol
  6135  001CDA  6A3C               	clrf	(??___fttol+1)& (0+255),c
  6136  001CDC  6A3D               	clrf	(??___fttol+2)& (0+255),c
  6137  001CDE  3438               	rlcf	___fttol@f1+1,w,c
  6138  001CE0  363B               	rlcf	??___fttol& (0+255),f,c
  6139  001CE2  E301               	bnc	u244_41
  6140  001CE4  803C               	bsf	(??___fttol+1)& (0+255),0,c
  6141  001CE6                     u244_41:
  6142  001CE6  503B               	movf	??___fttol,w,c
  6143  001CE8  6E45               	movwf	___fttol@exp1,c
  6144  001CEA  5045               	movf	___fttol@exp1,w,c
  6145  001CEC  A4D8               	btfss	status,2,c
  6146  001CEE  D009               	goto	i2l2520
  6147  001CF0  0E00               	movlw	0
  6148  001CF2  6E37               	movwf	?___fttol,c
  6149  001CF4  0E00               	movlw	0
  6150  001CF6  6E38               	movwf	?___fttol+1,c
  6151  001CF8  0E00               	movlw	0
  6152  001CFA  6E39               	movwf	?___fttol+2,c
  6153  001CFC  0E00               	movlw	0
  6154  001CFE  6E3A               	movwf	?___fttol+3,c
  6155  001D00  0012               	return	
  6156  001D02                     i2l2520:
  6157  001D02  0E17               	movlw	23
  6158  001D04  6E3B               	movwf	??___fttol& (0+255),c
  6159  001D06  C037  F03C         	movff	___fttol@f1,??___fttol+1
  6160  001D0A  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  6161  001D0E  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  6162  001D12  283B               	incf	??___fttol,w,c
  6163  001D14  6E3F               	movwf	(??___fttol+4)& (0+255),c
  6164  001D16  D004               	goto	i2u246_40
  6165  001D18                     i2u246_45:
  6166  001D18  90D8               	bcf	status,0,c
  6167  001D1A  323E               	rrcf	??___fttol+3,f,c
  6168  001D1C  323D               	rrcf	??___fttol+2,f,c
  6169  001D1E  323C               	rrcf	??___fttol+1,f,c
  6170  001D20                     i2u246_40:
  6171  001D20  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  6172  001D22  D7FA               	goto	i2u246_45
  6173  001D24  503C               	movf	??___fttol+1,w,c
  6174  001D26  6E40               	movwf	___fttol@sign1,c
  6175  001D28  8E38               	bsf	___fttol@f1+1,7,c
  6176  001D2A  0EFF               	movlw	255
  6177  001D2C  1637               	andwf	___fttol@f1,f,c
  6178  001D2E  0EFF               	movlw	255
  6179  001D30  1638               	andwf	___fttol@f1+1,f,c
  6180  001D32  0E00               	movlw	0
  6181  001D34  1639               	andwf	___fttol@f1+2,f,c
  6182  001D36  5037               	movf	___fttol@f1,w,c
  6183  001D38  6E41               	movwf	___fttol@lval,c
  6184  001D3A  5038               	movf	___fttol@f1+1,w,c
  6185  001D3C  6E42               	movwf	___fttol@lval+1,c
  6186  001D3E  5039               	movf	___fttol@f1+2,w,c
  6187  001D40  6E43               	movwf	___fttol@lval+2,c
  6188  001D42  6A44               	clrf	___fttol@lval+3,c
  6189  001D44  0E8E               	movlw	142
  6190  001D46  5E45               	subwf	___fttol@exp1,f,c
  6191  001D48  AE45               	btfss	___fttol@exp1,7,c
  6192  001D4A  D016               	goto	i2l2542
  6193  001D4C  5045               	movf	___fttol@exp1,w,c
  6194  001D4E  0A80               	xorlw	128
  6195  001D50  0F8F               	addlw	143
  6196  001D52  B0D8               	btfsc	status,0,c
  6197  001D54  D009               	goto	i2l2538
  6198  001D56  0E00               	movlw	0
  6199  001D58  6E37               	movwf	?___fttol,c
  6200  001D5A  0E00               	movlw	0
  6201  001D5C  6E38               	movwf	?___fttol+1,c
  6202  001D5E  0E00               	movlw	0
  6203  001D60  6E39               	movwf	?___fttol+2,c
  6204  001D62  0E00               	movlw	0
  6205  001D64  6E3A               	movwf	?___fttol+3,c
  6206  001D66  0012               	return	
  6207  001D68                     i2l2538:
  6208  001D68  90D8               	bcf	status,0,c
  6209  001D6A  3244               	rrcf	___fttol@lval+3,f,c
  6210  001D6C  3243               	rrcf	___fttol@lval+2,f,c
  6211  001D6E  3242               	rrcf	___fttol@lval+1,f,c
  6212  001D70  3241               	rrcf	___fttol@lval,f,c
  6213  001D72  3E45               	incfsz	___fttol@exp1,f,c
  6214  001D74  D7F9               	goto	i2l2538
  6215  001D76  D015               	goto	i2l2552
  6216  001D78                     i2l2542:
  6217  001D78  0E17               	movlw	23
  6218  001D7A  6445               	cpfsgt	___fttol@exp1,c
  6219  001D7C  D00F               	goto	i2l2550
  6220  001D7E  0E00               	movlw	0
  6221  001D80  6E37               	movwf	?___fttol,c
  6222  001D82  0E00               	movlw	0
  6223  001D84  6E38               	movwf	?___fttol+1,c
  6224  001D86  0E00               	movlw	0
  6225  001D88  6E39               	movwf	?___fttol+2,c
  6226  001D8A  0E00               	movlw	0
  6227  001D8C  6E3A               	movwf	?___fttol+3,c
  6228  001D8E  0012               	return	
  6229  001D90                     i2l2548:
  6230  001D90  90D8               	bcf	status,0,c
  6231  001D92  3641               	rlcf	___fttol@lval,f,c
  6232  001D94  3642               	rlcf	___fttol@lval+1,f,c
  6233  001D96  3643               	rlcf	___fttol@lval+2,f,c
  6234  001D98  3644               	rlcf	___fttol@lval+3,f,c
  6235  001D9A  0645               	decf	___fttol@exp1,f,c
  6236  001D9C                     i2l2550:
  6237  001D9C  5045               	movf	___fttol@exp1,w,c
  6238  001D9E  A4D8               	btfss	status,2,c
  6239  001DA0  D7F7               	goto	i2l2548
  6240  001DA2                     i2l2552:
  6241  001DA2  5040               	movf	___fttol@sign1,w,c
  6242  001DA4  B4D8               	btfsc	status,2,c
  6243  001DA6  D008               	goto	i2l2556
  6244  001DA8  1E44               	comf	___fttol@lval+3,f,c
  6245  001DAA  1E43               	comf	___fttol@lval+2,f,c
  6246  001DAC  1E42               	comf	___fttol@lval+1,f,c
  6247  001DAE  6C41               	negf	___fttol@lval,c
  6248  001DB0  0E00               	movlw	0
  6249  001DB2  2242               	addwfc	___fttol@lval+1,f,c
  6250  001DB4  2243               	addwfc	___fttol@lval+2,f,c
  6251  001DB6  2244               	addwfc	___fttol@lval+3,f,c
  6252  001DB8                     i2l2556:
  6253  001DB8  C041  F037         	movff	___fttol@lval,?___fttol
  6254  001DBC  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  6255  001DC0  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  6256  001DC4  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  6257  001DC8  0012               	return	
  6258  001DCA                     __end_of___fttol:
  6259                           	opt stack 0
  6260                           tosu	equ	0xFFF
  6261                           tosh	equ	0xFFE
  6262                           tosl	equ	0xFFD
  6263                           pclatu	equ	0xFFB
  6264                           pclath	equ	0xFFA
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           intcon2	equ	0xFF1
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           fsr1h	equ	0xFE2
  6277                           fsr1l	equ	0xFE1
  6278                           postinc2	equ	0xFDE
  6279                           postdec2	equ	0xFDD
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function ___ftsub *****************
  6285 ;; Defined at:
  6286 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  f1              3   32[COMRAM] float 
  6289 ;;  f2              3   35[COMRAM] float 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  3   32[COMRAM] float 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6301 ;;      Params:         6       0       0       0       0       0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0
  6304 ;;      Totals:         6       0       0       0       0       0       0
  6305 ;;Total ram usage:        6 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    2
  6308 ;; This function calls:
  6309 ;;		___ftadd
  6310 ;; This function is called by:
  6311 ;;		_printf
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text32
  6316  002354                     __ptext32:
  6317                           	opt stack 0
  6318  002354                     ___ftsub:
  6319                           	opt stack 22
  6320                           
  6321                           ;incstack = 0
  6322  002354  5024               	movf	___ftsub@f2,w,c
  6323  002356  1025               	iorwf	___ftsub@f2+1,w,c
  6324  002358  1026               	iorwf	___ftsub@f2+2,w,c
  6325  00235A  B4D8               	btfsc	status,2,c
  6326  00235C  D006               	goto	i2l2488
  6327  00235E  0E00               	movlw	0
  6328  002360  1A24               	xorwf	___ftsub@f2,f,c
  6329  002362  0E00               	movlw	0
  6330  002364  1A25               	xorwf	___ftsub@f2+1,f,c
  6331  002366  0E80               	movlw	128
  6332  002368  1A26               	xorwf	___ftsub@f2+2,f,c
  6333  00236A                     i2l2488:
  6334  00236A  C021  F015         	movff	___ftsub@f1,___ftadd@f1
  6335  00236E  C022  F016         	movff	___ftsub@f1+1,___ftadd@f1+1
  6336  002372  C023  F017         	movff	___ftsub@f1+2,___ftadd@f1+2
  6337  002376  C024  F018         	movff	___ftsub@f2,___ftadd@f2
  6338  00237A  C025  F019         	movff	___ftsub@f2+1,___ftadd@f2+1
  6339  00237E  C026  F01A         	movff	___ftsub@f2+2,___ftadd@f2+2
  6340  002382  ECEE  F00B         	call	___ftadd	;wreg free
  6341  002386  C015  F021         	movff	?___ftadd,?___ftsub
  6342  00238A  C016  F022         	movff	?___ftadd+1,?___ftsub+1
  6343  00238E  C017  F023         	movff	?___ftadd+2,?___ftsub+2
  6344  002392  0012               	return	
  6345  002394                     __end_of___ftsub:
  6346                           	opt stack 0
  6347                           tosu	equ	0xFFF
  6348                           tosh	equ	0xFFE
  6349                           tosl	equ	0xFFD
  6350                           pclatu	equ	0xFFB
  6351                           pclath	equ	0xFFA
  6352                           tblptru	equ	0xFF8
  6353                           tblptrh	equ	0xFF7
  6354                           tblptrl	equ	0xFF6
  6355                           tablat	equ	0xFF5
  6356                           prodh	equ	0xFF4
  6357                           prodl	equ	0xFF3
  6358                           intcon	equ	0xFF2
  6359                           intcon2	equ	0xFF1
  6360                           fsr0h	equ	0xFEA
  6361                           fsr0l	equ	0xFE9
  6362                           wreg	equ	0xFE8
  6363                           fsr1h	equ	0xFE2
  6364                           fsr1l	equ	0xFE1
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function ___ftadd *****************
  6372 ;; Defined at:
  6373 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;  f1              3   20[COMRAM] float 
  6376 ;;  f2              3   23[COMRAM] float 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  exp1            1   31[COMRAM] unsigned char 
  6379 ;;  exp2            1   30[COMRAM] unsigned char 
  6380 ;;  sign            1   29[COMRAM] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  3   20[COMRAM] float 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6390 ;;      Params:         6       0       0       0       0       0       0
  6391 ;;      Locals:         3       0       0       0       0       0       0
  6392 ;;      Temps:          3       0       0       0       0       0       0
  6393 ;;      Totals:        12       0       0       0       0       0       0
  6394 ;;Total ram usage:       12 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    1
  6397 ;; This function calls:
  6398 ;;		___ftpack
  6399 ;; This function is called by:
  6400 ;;		_INT0_ISR
  6401 ;;		_printf
  6402 ;;		___ftsub
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text33
  6407  0017DC                     __ptext33:
  6408                           	opt stack 0
  6409  0017DC                     ___ftadd:
  6410                           	opt stack 22
  6411                           
  6412                           ;incstack = 0
  6413  0017DC  C017  F01B         	movff	___ftadd@f1+2,??___ftadd
  6414  0017E0  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  6415  0017E2  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  6416  0017E4  3416               	rlcf	___ftadd@f1+1,w,c
  6417  0017E6  361B               	rlcf	??___ftadd& (0+255),f,c
  6418  0017E8  E301               	bnc	u175_41
  6419  0017EA  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  6420  0017EC                     u175_41:
  6421  0017EC  501B               	movf	??___ftadd,w,c
  6422  0017EE  6E20               	movwf	___ftadd@exp1,c
  6423  0017F0  C01A  F01B         	movff	___ftadd@f2+2,??___ftadd
  6424  0017F4  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  6425  0017F6  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  6426  0017F8  3419               	rlcf	___ftadd@f2+1,w,c
  6427  0017FA  361B               	rlcf	??___ftadd& (0+255),f,c
  6428  0017FC  E301               	bnc	u176_41
  6429  0017FE  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  6430  001800                     u176_41:
  6431  001800  501B               	movf	??___ftadd,w,c
  6432  001802  6E1F               	movwf	___ftadd@exp2,c
  6433  001804  5020               	movf	___ftadd@exp1,w,c
  6434  001806  B4D8               	btfsc	status,2,c
  6435  001808  D00B               	goto	i2l608
  6436  00180A  501F               	movf	___ftadd@exp2,w,c
  6437  00180C  5C20               	subwf	___ftadd@exp1,w,c
  6438  00180E  B0D8               	btfsc	status,0,c
  6439  001810  D00E               	goto	i2l2098
  6440  001812  5020               	movf	___ftadd@exp1,w,c
  6441  001814  0800               	sublw	0
  6442  001816  241F               	addwf	___ftadd@exp2,w,c
  6443  001818  6E1B               	movwf	??___ftadd& (0+255),c
  6444  00181A  0E18               	movlw	24
  6445  00181C  641B               	cpfsgt	??___ftadd,c
  6446  00181E  D007               	goto	i2l2098
  6447  001820                     i2l608:
  6448  001820  C018  F015         	movff	___ftadd@f2,?___ftadd
  6449  001824  C019  F016         	movff	___ftadd@f2+1,?___ftadd+1
  6450  001828  C01A  F017         	movff	___ftadd@f2+2,?___ftadd+2
  6451  00182C  0012               	return	
  6452  00182E                     i2l2098:
  6453  00182E  501F               	movf	___ftadd@exp2,w,c
  6454  001830  B4D8               	btfsc	status,2,c
  6455  001832  D00B               	goto	i2l612
  6456  001834  5020               	movf	___ftadd@exp1,w,c
  6457  001836  5C1F               	subwf	___ftadd@exp2,w,c
  6458  001838  B0D8               	btfsc	status,0,c
  6459  00183A  D00E               	goto	i2l2104
  6460  00183C  501F               	movf	___ftadd@exp2,w,c
  6461  00183E  0800               	sublw	0
  6462  001840  2420               	addwf	___ftadd@exp1,w,c
  6463  001842  6E1B               	movwf	??___ftadd& (0+255),c
  6464  001844  0E18               	movlw	24
  6465  001846  641B               	cpfsgt	??___ftadd,c
  6466  001848  D007               	goto	i2l2104
  6467  00184A                     i2l612:
  6468  00184A  C015  F015         	movff	___ftadd@f1,?___ftadd
  6469  00184E  C016  F016         	movff	___ftadd@f1+1,?___ftadd+1
  6470  001852  C017  F017         	movff	___ftadd@f1+2,?___ftadd+2
  6471  001856  0012               	return	
  6472  001858                     i2l2104:
  6473  001858  0E06               	movlw	6
  6474  00185A  6E1E               	movwf	___ftadd@sign,c
  6475  00185C  BE17               	btfsc	___ftadd@f1+2,7,c
  6476  00185E  8E1E               	bsf	___ftadd@sign,7,c
  6477  001860  BE1A               	btfsc	___ftadd@f2+2,7,c
  6478  001862  8C1E               	bsf	___ftadd@sign,6,c
  6479  001864  8E16               	bsf	___ftadd@f1+1,7,c
  6480  001866  0EFF               	movlw	255
  6481  001868  1615               	andwf	___ftadd@f1,f,c
  6482  00186A  0EFF               	movlw	255
  6483  00186C  1616               	andwf	___ftadd@f1+1,f,c
  6484  00186E  0E00               	movlw	0
  6485  001870  1617               	andwf	___ftadd@f1+2,f,c
  6486  001872  8E19               	bsf	___ftadd@f2+1,7,c
  6487  001874  0EFF               	movlw	255
  6488  001876  1618               	andwf	___ftadd@f2,f,c
  6489  001878  0EFF               	movlw	255
  6490  00187A  1619               	andwf	___ftadd@f2+1,f,c
  6491  00187C  0E00               	movlw	0
  6492  00187E  161A               	andwf	___ftadd@f2+2,f,c
  6493  001880  501F               	movf	___ftadd@exp2,w,c
  6494  001882  5C20               	subwf	___ftadd@exp1,w,c
  6495  001884  B0D8               	btfsc	status,0,c
  6496  001886  D01B               	goto	i2l2130
  6497  001888                     i2l2120:
  6498  001888  90D8               	bcf	status,0,c
  6499  00188A  3618               	rlcf	___ftadd@f2,f,c
  6500  00188C  3619               	rlcf	___ftadd@f2+1,f,c
  6501  00188E  361A               	rlcf	___ftadd@f2+2,f,c
  6502  001890  061F               	decf	___ftadd@exp2,f,c
  6503  001892  5020               	movf	___ftadd@exp1,w,c
  6504  001894  181F               	xorwf	___ftadd@exp2,w,c
  6505  001896  B4D8               	btfsc	status,2,c
  6506  001898  D00D               	goto	i2l2128
  6507  00189A  061E               	decf	___ftadd@sign,f,c
  6508  00189C  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  6509  0018A0  0E07               	movlw	7
  6510  0018A2  161B               	andwf	??___ftadd,f,c
  6511  0018A4  B4D8               	btfsc	status,2,c
  6512  0018A6  D006               	goto	i2l2128
  6513  0018A8  D7EF               	goto	i2l2120
  6514  0018AA                     i2l2126:
  6515  0018AA  90D8               	bcf	status,0,c
  6516  0018AC  3217               	rrcf	___ftadd@f1+2,f,c
  6517  0018AE  3216               	rrcf	___ftadd@f1+1,f,c
  6518  0018B0  3215               	rrcf	___ftadd@f1,f,c
  6519  0018B2  2A20               	incf	___ftadd@exp1,f,c
  6520  0018B4                     i2l2128:
  6521  0018B4  501F               	movf	___ftadd@exp2,w,c
  6522  0018B6  1820               	xorwf	___ftadd@exp1,w,c
  6523  0018B8  B4D8               	btfsc	status,2,c
  6524  0018BA  D01F               	goto	i2l623
  6525  0018BC  D7F6               	goto	i2l2126
  6526  0018BE                     i2l2130:
  6527  0018BE  5020               	movf	___ftadd@exp1,w,c
  6528  0018C0  5C1F               	subwf	___ftadd@exp2,w,c
  6529  0018C2  B0D8               	btfsc	status,0,c
  6530  0018C4  D01A               	goto	i2l623
  6531  0018C6                     i2l2132:
  6532  0018C6  90D8               	bcf	status,0,c
  6533  0018C8  3615               	rlcf	___ftadd@f1,f,c
  6534  0018CA  3616               	rlcf	___ftadd@f1+1,f,c
  6535  0018CC  3617               	rlcf	___ftadd@f1+2,f,c
  6536  0018CE  0620               	decf	___ftadd@exp1,f,c
  6537  0018D0  5020               	movf	___ftadd@exp1,w,c
  6538  0018D2  181F               	xorwf	___ftadd@exp2,w,c
  6539  0018D4  B4D8               	btfsc	status,2,c
  6540  0018D6  D00D               	goto	i2l2140
  6541  0018D8  061E               	decf	___ftadd@sign,f,c
  6542  0018DA  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  6543  0018DE  0E07               	movlw	7
  6544  0018E0  161B               	andwf	??___ftadd,f,c
  6545  0018E2  B4D8               	btfsc	status,2,c
  6546  0018E4  D006               	goto	i2l2140
  6547  0018E6  D7EF               	goto	i2l2132
  6548  0018E8                     i2l2138:
  6549  0018E8  90D8               	bcf	status,0,c
  6550  0018EA  321A               	rrcf	___ftadd@f2+2,f,c
  6551  0018EC  3219               	rrcf	___ftadd@f2+1,f,c
  6552  0018EE  3218               	rrcf	___ftadd@f2,f,c
  6553  0018F0  2A1F               	incf	___ftadd@exp2,f,c
  6554  0018F2                     i2l2140:
  6555  0018F2  501F               	movf	___ftadd@exp2,w,c
  6556  0018F4  1820               	xorwf	___ftadd@exp1,w,c
  6557  0018F6  A4D8               	btfss	status,2,c
  6558  0018F8  D7F7               	goto	i2l2138
  6559  0018FA                     i2l623:
  6560  0018FA  AE1E               	btfss	___ftadd@sign,7,c
  6561  0018FC  D00C               	goto	i2l632
  6562  0018FE  0EFF               	movlw	255
  6563  001900  1A15               	xorwf	___ftadd@f1,f,c
  6564  001902  0EFF               	movlw	255
  6565  001904  1A16               	xorwf	___ftadd@f1+1,f,c
  6566  001906  0EFF               	movlw	255
  6567  001908  1A17               	xorwf	___ftadd@f1+2,f,c
  6568  00190A  0E01               	movlw	1
  6569  00190C  2615               	addwf	___ftadd@f1,f,c
  6570  00190E  0E00               	movlw	0
  6571  001910  2216               	addwfc	___ftadd@f1+1,f,c
  6572  001912  0E00               	movlw	0
  6573  001914  2217               	addwfc	___ftadd@f1+2,f,c
  6574  001916                     i2l632:
  6575  001916  AC1E               	btfss	___ftadd@sign,6,c
  6576  001918  D00C               	goto	i2l2146
  6577  00191A  0EFF               	movlw	255
  6578  00191C  1A18               	xorwf	___ftadd@f2,f,c
  6579  00191E  0EFF               	movlw	255
  6580  001920  1A19               	xorwf	___ftadd@f2+1,f,c
  6581  001922  0EFF               	movlw	255
  6582  001924  1A1A               	xorwf	___ftadd@f2+2,f,c
  6583  001926  0E01               	movlw	1
  6584  001928  2618               	addwf	___ftadd@f2,f,c
  6585  00192A  0E00               	movlw	0
  6586  00192C  2219               	addwfc	___ftadd@f2+1,f,c
  6587  00192E  0E00               	movlw	0
  6588  001930  221A               	addwfc	___ftadd@f2+2,f,c
  6589  001932                     i2l2146:
  6590  001932  0E00               	movlw	0
  6591  001934  6E1E               	movwf	___ftadd@sign,c
  6592  001936  5015               	movf	___ftadd@f1,w,c
  6593  001938  2618               	addwf	___ftadd@f2,f,c
  6594  00193A  5016               	movf	___ftadd@f1+1,w,c
  6595  00193C  2219               	addwfc	___ftadd@f2+1,f,c
  6596  00193E  5017               	movf	___ftadd@f1+2,w,c
  6597  001940  221A               	addwfc	___ftadd@f2+2,f,c
  6598  001942  AE1A               	btfss	___ftadd@f2+2,7,c
  6599  001944  D00E               	goto	i2l2156
  6600  001946  0EFF               	movlw	255
  6601  001948  1A18               	xorwf	___ftadd@f2,f,c
  6602  00194A  0EFF               	movlw	255
  6603  00194C  1A19               	xorwf	___ftadd@f2+1,f,c
  6604  00194E  0EFF               	movlw	255
  6605  001950  1A1A               	xorwf	___ftadd@f2+2,f,c
  6606  001952  0E01               	movlw	1
  6607  001954  2618               	addwf	___ftadd@f2,f,c
  6608  001956  0E00               	movlw	0
  6609  001958  2219               	addwfc	___ftadd@f2+1,f,c
  6610  00195A  0E00               	movlw	0
  6611  00195C  221A               	addwfc	___ftadd@f2+2,f,c
  6612  00195E  0E01               	movlw	1
  6613  001960  6E1E               	movwf	___ftadd@sign,c
  6614  001962                     i2l2156:
  6615  001962  C018  F001         	movff	___ftadd@f2,___ftpack@arg
  6616  001966  C019  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6617  00196A  C01A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6618  00196E  C020  F004         	movff	___ftadd@exp1,___ftpack@exp
  6619  001972  C01E  F005         	movff	___ftadd@sign,___ftpack@sign
  6620  001976  EC58  F00F         	call	___ftpack	;wreg free
  6621  00197A  C001  F015         	movff	?___ftpack,?___ftadd
  6622  00197E  C002  F016         	movff	?___ftpack+1,?___ftadd+1
  6623  001982  C003  F017         	movff	?___ftpack+2,?___ftadd+2
  6624  001986  0012               	return	
  6625  001988                     __end_of___ftadd:
  6626                           	opt stack 0
  6627                           tosu	equ	0xFFF
  6628                           tosh	equ	0xFFE
  6629                           tosl	equ	0xFFD
  6630                           pclatu	equ	0xFFB
  6631                           pclath	equ	0xFFA
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           intcon2	equ	0xFF1
  6640                           fsr0h	equ	0xFEA
  6641                           fsr0l	equ	0xFE9
  6642                           wreg	equ	0xFE8
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           postinc2	equ	0xFDE
  6646                           postdec2	equ	0xFDD
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function ___ftneg *****************
  6652 ;; Defined at:
  6653 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  f1              3    0[COMRAM] float 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  3    0[COMRAM] float 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6667 ;;      Params:         3       0       0       0       0       0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0
  6670 ;;      Totals:         3       0       0       0       0       0       0
  6671 ;;Total ram usage:        3 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; This function calls:
  6674 ;;		Nothing
  6675 ;; This function is called by:
  6676 ;;		_printf
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text34
  6681  002418                     __ptext34:
  6682                           	opt stack 0
  6683  002418                     ___ftneg:
  6684                           	opt stack 24
  6685                           
  6686                           ;incstack = 0
  6687  002418  5001               	movf	___ftneg@f1,w,c
  6688  00241A  1002               	iorwf	___ftneg@f1+1,w,c
  6689  00241C  1003               	iorwf	___ftneg@f1+2,w,c
  6690  00241E  B4D8               	btfsc	status,2,c
  6691  002420  D006               	goto	i2l682
  6692  002422  0E00               	movlw	0
  6693  002424  1A01               	xorwf	___ftneg@f1,f,c
  6694  002426  0E00               	movlw	0
  6695  002428  1A02               	xorwf	___ftneg@f1+1,f,c
  6696  00242A  0E80               	movlw	128
  6697  00242C  1A03               	xorwf	___ftneg@f1+2,f,c
  6698  00242E                     i2l682:
  6699  00242E  C001  F001         	movff	___ftneg@f1,?___ftneg
  6700  002432  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6701  002436  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6702  00243A  0012               	return		;funcret
  6703  00243C                     __end_of___ftneg:
  6704                           	opt stack 0
  6705                           tosu	equ	0xFFF
  6706                           tosh	equ	0xFFE
  6707                           tosl	equ	0xFFD
  6708                           pclatu	equ	0xFFB
  6709                           pclath	equ	0xFFA
  6710                           tblptru	equ	0xFF8
  6711                           tblptrh	equ	0xFF7
  6712                           tblptrl	equ	0xFF6
  6713                           tablat	equ	0xFF5
  6714                           prodh	equ	0xFF4
  6715                           prodl	equ	0xFF3
  6716                           intcon	equ	0xFF2
  6717                           intcon2	equ	0xFF1
  6718                           fsr0h	equ	0xFEA
  6719                           fsr0l	equ	0xFE9
  6720                           wreg	equ	0xFE8
  6721                           fsr1h	equ	0xFE2
  6722                           fsr1l	equ	0xFE1
  6723                           postinc2	equ	0xFDE
  6724                           postdec2	equ	0xFDD
  6725                           fsr2h	equ	0xFDA
  6726                           fsr2l	equ	0xFD9
  6727                           status	equ	0xFD8
  6728                           
  6729 ;; *************** function ___ftge *****************
  6730 ;; Defined at:
  6731 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;  ff1             3    0[COMRAM] float 
  6734 ;;  ff2             3    3[COMRAM] float 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;		None
  6737 ;; Return value:  Size  Location     Type
  6738 ;;		None               void
  6739 ;; Registers used:
  6740 ;;		wreg, status,2, status,0
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6746 ;;      Params:         6       0       0       0       0       0       0
  6747 ;;      Locals:         0       0       0       0       0       0       0
  6748 ;;      Temps:          3       0       0       0       0       0       0
  6749 ;;      Totals:         9       0       0       0       0       0       0
  6750 ;;Total ram usage:        9 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_printf
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text35
  6760  002006                     __ptext35:
  6761                           	opt stack 0
  6762  002006                     ___ftge:
  6763                           	opt stack 24
  6764                           
  6765                           ;incstack = 0
  6766  002006  AE03               	btfss	___ftge@ff1+2,7,c
  6767  002008  D016               	goto	i2l2496
  6768  00200A  C001  F007         	movff	___ftge@ff1,??___ftge
  6769  00200E  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6770  002012  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6771  002016  1E07               	comf	??___ftge,f,c
  6772  002018  1E08               	comf	??___ftge+1,f,c
  6773  00201A  1E09               	comf	??___ftge+2,f,c
  6774  00201C  2A07               	incf	??___ftge,f,c
  6775  00201E  0E00               	movlw	0
  6776  002020  2208               	addwfc	??___ftge+1,f,c
  6777  002022  2209               	addwfc	??___ftge+2,f,c
  6778  002024  0E00               	movlw	0
  6779  002026  2407               	addwf	??___ftge,w,c
  6780  002028  6E01               	movwf	___ftge@ff1,c
  6781  00202A  0E00               	movlw	0
  6782  00202C  2008               	addwfc	??___ftge+1,w,c
  6783  00202E  6E02               	movwf	___ftge@ff1+1,c
  6784  002030  0E80               	movlw	128
  6785  002032  2009               	addwfc	??___ftge+2,w,c
  6786  002034  6E03               	movwf	___ftge@ff1+2,c
  6787  002036                     i2l2496:
  6788  002036  AE06               	btfss	___ftge@ff2+2,7,c
  6789  002038  D016               	goto	i2l2500
  6790  00203A  C004  F007         	movff	___ftge@ff2,??___ftge
  6791  00203E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6792  002042  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6793  002046  1E07               	comf	??___ftge,f,c
  6794  002048  1E08               	comf	??___ftge+1,f,c
  6795  00204A  1E09               	comf	??___ftge+2,f,c
  6796  00204C  2A07               	incf	??___ftge,f,c
  6797  00204E  0E00               	movlw	0
  6798  002050  2208               	addwfc	??___ftge+1,f,c
  6799  002052  2209               	addwfc	??___ftge+2,f,c
  6800  002054  0E00               	movlw	0
  6801  002056  2407               	addwf	??___ftge,w,c
  6802  002058  6E04               	movwf	___ftge@ff2,c
  6803  00205A  0E00               	movlw	0
  6804  00205C  2008               	addwfc	??___ftge+1,w,c
  6805  00205E  6E05               	movwf	___ftge@ff2+1,c
  6806  002060  0E80               	movlw	128
  6807  002062  2009               	addwfc	??___ftge+2,w,c
  6808  002064  6E06               	movwf	___ftge@ff2+2,c
  6809  002066                     i2l2500:
  6810  002066  0E00               	movlw	0
  6811  002068  1A01               	xorwf	___ftge@ff1,f,c
  6812  00206A  0E00               	movlw	0
  6813  00206C  1A02               	xorwf	___ftge@ff1+1,f,c
  6814  00206E  0E80               	movlw	128
  6815  002070  1A03               	xorwf	___ftge@ff1+2,f,c
  6816  002072  0E00               	movlw	0
  6817  002074  1A04               	xorwf	___ftge@ff2,f,c
  6818  002076  0E00               	movlw	0
  6819  002078  1A05               	xorwf	___ftge@ff2+1,f,c
  6820  00207A  0E80               	movlw	128
  6821  00207C  1A06               	xorwf	___ftge@ff2+2,f,c
  6822  00207E  5004               	movf	___ftge@ff2,w,c
  6823  002080  5C01               	subwf	___ftge@ff1,w,c
  6824  002082  5005               	movf	___ftge@ff2+1,w,c
  6825  002084  5802               	subwfb	___ftge@ff1+1,w,c
  6826  002086  5006               	movf	___ftge@ff2+2,w,c
  6827  002088  5803               	subwfb	___ftge@ff1+2,w,c
  6828  00208A  B0D8               	btfsc	status,0,c
  6829  00208C  D002               	goto	i2l2506
  6830  00208E  90D8               	bcf	status,0,c
  6831  002090  0012               	return	
  6832  002092                     i2l2506:
  6833  002092  80D8               	bsf	status,0,c
  6834  002094  0012               	return	
  6835  002096                     __end_of___ftge:
  6836                           	opt stack 0
  6837                           tosu	equ	0xFFF
  6838                           tosh	equ	0xFFE
  6839                           tosl	equ	0xFFD
  6840                           pclatu	equ	0xFFB
  6841                           pclath	equ	0xFFA
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           intcon2	equ	0xFF1
  6850                           fsr0h	equ	0xFEA
  6851                           fsr0l	equ	0xFE9
  6852                           wreg	equ	0xFE8
  6853                           fsr1h	equ	0xFE2
  6854                           fsr1l	equ	0xFE1
  6855                           postinc2	equ	0xFDE
  6856                           postdec2	equ	0xFDD
  6857                           fsr2h	equ	0xFDA
  6858                           fsr2l	equ	0xFD9
  6859                           status	equ	0xFD8
  6860                           
  6861 ;; *************** function ___lwtoft *****************
  6862 ;; Defined at:
  6863 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;  c               2    8[COMRAM] unsigned int 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;		None
  6868 ;; Return value:  Size  Location     Type
  6869 ;;                  3    8[COMRAM] float 
  6870 ;; Registers used:
  6871 ;;		wreg, status,2, status,0, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6877 ;;      Params:         3       0       0       0       0       0       0
  6878 ;;      Locals:         0       0       0       0       0       0       0
  6879 ;;      Temps:          0       0       0       0       0       0       0
  6880 ;;      Totals:         3       0       0       0       0       0       0
  6881 ;;Total ram usage:        3 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    1
  6884 ;; This function calls:
  6885 ;;		___ftpack
  6886 ;; This function is called by:
  6887 ;;		_INT0_ISR
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           	psect	text36
  6892  00243C                     __ptext36:
  6893                           	opt stack 0
  6894  00243C                     ___lwtoft:
  6895                           	opt stack 24
  6896                           
  6897                           ;incstack = 0
  6898  00243C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6899  002440  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6900  002444  6A03               	clrf	___ftpack@arg+2,c
  6901  002446  0E8E               	movlw	142
  6902  002448  6E04               	movwf	___ftpack@exp,c
  6903  00244A  0E00               	movlw	0
  6904  00244C  6E05               	movwf	___ftpack@sign,c
  6905  00244E  EC58  F00F         	call	___ftpack	;wreg free
  6906  002452  C001  F009         	movff	?___ftpack,?___lwtoft
  6907  002456  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6908  00245A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6909  00245E  0012               	return	
  6910  002460                     __end_of___lwtoft:
  6911                           	opt stack 0
  6912                           tosu	equ	0xFFF
  6913                           tosh	equ	0xFFE
  6914                           tosl	equ	0xFFD
  6915                           pclatu	equ	0xFFB
  6916                           pclath	equ	0xFFA
  6917                           tblptru	equ	0xFF8
  6918                           tblptrh	equ	0xFF7
  6919                           tblptrl	equ	0xFF6
  6920                           tablat	equ	0xFF5
  6921                           prodh	equ	0xFF4
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           intcon2	equ	0xFF1
  6925                           fsr0h	equ	0xFEA
  6926                           fsr0l	equ	0xFE9
  6927                           wreg	equ	0xFE8
  6928                           fsr1h	equ	0xFE2
  6929                           fsr1l	equ	0xFE1
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function ___ftdiv *****************
  6937 ;; Defined at:
  6938 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  f1              3   47[COMRAM] float 
  6941 ;;  f2              3   50[COMRAM] float 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  f3              3   57[COMRAM] float 
  6944 ;;  sign            1   61[COMRAM] unsigned char 
  6945 ;;  exp             1   60[COMRAM] unsigned char 
  6946 ;;  cntr            1   56[COMRAM] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  3   47[COMRAM] float 
  6949 ;; Registers used:
  6950 ;;		wreg, status,2, status,0, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6956 ;;      Params:         6       0       0       0       0       0       0
  6957 ;;      Locals:         6       0       0       0       0       0       0
  6958 ;;      Temps:          3       0       0       0       0       0       0
  6959 ;;      Totals:        15       0       0       0       0       0       0
  6960 ;;Total ram usage:       15 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    1
  6963 ;; This function calls:
  6964 ;;		___ftpack
  6965 ;; This function is called by:
  6966 ;;		_INT0_ISR
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text37
  6971  001DCA                     __ptext37:
  6972                           	opt stack 0
  6973  001DCA                     ___ftdiv:
  6974                           	opt stack 24
  6975                           
  6976                           ;incstack = 0
  6977  001DCA  C032  F036         	movff	___ftdiv@f1+2,??___ftdiv
  6978  001DCE  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  6979  001DD0  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  6980  001DD2  3431               	rlcf	___ftdiv@f1+1,w,c
  6981  001DD4  3636               	rlcf	??___ftdiv& (0+255),f,c
  6982  001DD6  E301               	bnc	u316_41
  6983  001DD8  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  6984  001DDA                     u316_41:
  6985  001DDA  5036               	movf	??___ftdiv,w,c
  6986  001DDC  6E3D               	movwf	___ftdiv@exp,c
  6987  001DDE  503D               	movf	___ftdiv@exp,w,c
  6988  001DE0  A4D8               	btfss	status,2,c
  6989  001DE2  D007               	goto	i2l2948
  6990  001DE4  0E00               	movlw	0
  6991  001DE6  6E30               	movwf	?___ftdiv,c
  6992  001DE8  0E00               	movlw	0
  6993  001DEA  6E31               	movwf	?___ftdiv+1,c
  6994  001DEC  0E00               	movlw	0
  6995  001DEE  6E32               	movwf	?___ftdiv+2,c
  6996  001DF0  0012               	return	
  6997  001DF2                     i2l2948:
  6998  001DF2  C035  F036         	movff	___ftdiv@f2+2,??___ftdiv
  6999  001DF6  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  7000  001DF8  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  7001  001DFA  3434               	rlcf	___ftdiv@f2+1,w,c
  7002  001DFC  3636               	rlcf	??___ftdiv& (0+255),f,c
  7003  001DFE  E301               	bnc	u318_41
  7004  001E00  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  7005  001E02                     u318_41:
  7006  001E02  5036               	movf	??___ftdiv,w,c
  7007  001E04  6E3E               	movwf	___ftdiv@sign,c
  7008  001E06  503E               	movf	___ftdiv@sign,w,c
  7009  001E08  A4D8               	btfss	status,2,c
  7010  001E0A  D007               	goto	i2l2954
  7011  001E0C  0E00               	movlw	0
  7012  001E0E  6E30               	movwf	?___ftdiv,c
  7013  001E10  0E00               	movlw	0
  7014  001E12  6E31               	movwf	?___ftdiv+1,c
  7015  001E14  0E00               	movlw	0
  7016  001E16  6E32               	movwf	?___ftdiv+2,c
  7017  001E18  0012               	return	
  7018  001E1A                     i2l2954:
  7019  001E1A  0E00               	movlw	0
  7020  001E1C  6E3A               	movwf	___ftdiv@f3,c
  7021  001E1E  0E00               	movlw	0
  7022  001E20  6E3B               	movwf	___ftdiv@f3+1,c
  7023  001E22  0E00               	movlw	0
  7024  001E24  6E3C               	movwf	___ftdiv@f3+2,c
  7025  001E26  503E               	movf	___ftdiv@sign,w,c
  7026  001E28  0F89               	addlw	137
  7027  001E2A  5E3D               	subwf	___ftdiv@exp,f,c
  7028  001E2C  C032  F03E         	movff	___ftdiv@f1+2,___ftdiv@sign
  7029  001E30  5035               	movf	___ftdiv@f2+2,w,c
  7030  001E32  1A3E               	xorwf	___ftdiv@sign,f,c
  7031  001E34  0E80               	movlw	128
  7032  001E36  163E               	andwf	___ftdiv@sign,f,c
  7033  001E38  8E31               	bsf	___ftdiv@f1+1,7,c
  7034  001E3A  0EFF               	movlw	255
  7035  001E3C  1630               	andwf	___ftdiv@f1,f,c
  7036  001E3E  0EFF               	movlw	255
  7037  001E40  1631               	andwf	___ftdiv@f1+1,f,c
  7038  001E42  0E00               	movlw	0
  7039  001E44  1632               	andwf	___ftdiv@f1+2,f,c
  7040  001E46  8E34               	bsf	___ftdiv@f2+1,7,c
  7041  001E48  0EFF               	movlw	255
  7042  001E4A  1633               	andwf	___ftdiv@f2,f,c
  7043  001E4C  0EFF               	movlw	255
  7044  001E4E  1634               	andwf	___ftdiv@f2+1,f,c
  7045  001E50  0E00               	movlw	0
  7046  001E52  1635               	andwf	___ftdiv@f2+2,f,c
  7047  001E54  0E18               	movlw	24
  7048  001E56  6E39               	movwf	___ftdiv@cntr,c
  7049  001E58                     i2l2974:
  7050  001E58  90D8               	bcf	status,0,c
  7051  001E5A  363A               	rlcf	___ftdiv@f3,f,c
  7052  001E5C  363B               	rlcf	___ftdiv@f3+1,f,c
  7053  001E5E  363C               	rlcf	___ftdiv@f3+2,f,c
  7054  001E60  5033               	movf	___ftdiv@f2,w,c
  7055  001E62  5C30               	subwf	___ftdiv@f1,w,c
  7056  001E64  5034               	movf	___ftdiv@f2+1,w,c
  7057  001E66  5831               	subwfb	___ftdiv@f1+1,w,c
  7058  001E68  5035               	movf	___ftdiv@f2+2,w,c
  7059  001E6A  5832               	subwfb	___ftdiv@f1+2,w,c
  7060  001E6C  A0D8               	btfss	status,0,c
  7061  001E6E  D007               	goto	i2l643
  7062  001E70  5033               	movf	___ftdiv@f2,w,c
  7063  001E72  5E30               	subwf	___ftdiv@f1,f,c
  7064  001E74  5034               	movf	___ftdiv@f2+1,w,c
  7065  001E76  5A31               	subwfb	___ftdiv@f1+1,f,c
  7066  001E78  5035               	movf	___ftdiv@f2+2,w,c
  7067  001E7A  5A32               	subwfb	___ftdiv@f1+2,f,c
  7068  001E7C  803A               	bsf	___ftdiv@f3,0,c
  7069  001E7E                     i2l643:
  7070  001E7E  90D8               	bcf	status,0,c
  7071  001E80  3630               	rlcf	___ftdiv@f1,f,c
  7072  001E82  3631               	rlcf	___ftdiv@f1+1,f,c
  7073  001E84  3632               	rlcf	___ftdiv@f1+2,f,c
  7074  001E86  2E39               	decfsz	___ftdiv@cntr,f,c
  7075  001E88  D7E7               	goto	i2l2974
  7076  001E8A  C03A  F001         	movff	___ftdiv@f3,___ftpack@arg
  7077  001E8E  C03B  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7078  001E92  C03C  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7079  001E96  C03D  F004         	movff	___ftdiv@exp,___ftpack@exp
  7080  001E9A  C03E  F005         	movff	___ftdiv@sign,___ftpack@sign
  7081  001E9E  EC58  F00F         	call	___ftpack	;wreg free
  7082  001EA2  C001  F030         	movff	?___ftpack,?___ftdiv
  7083  001EA6  C002  F031         	movff	?___ftpack+1,?___ftdiv+1
  7084  001EAA  C003  F032         	movff	?___ftpack+2,?___ftdiv+2
  7085  001EAE  0012               	return	
  7086  001EB0                     __end_of___ftdiv:
  7087                           	opt stack 0
  7088                           tosu	equ	0xFFF
  7089                           tosh	equ	0xFFE
  7090                           tosl	equ	0xFFD
  7091                           pclatu	equ	0xFFB
  7092                           pclath	equ	0xFFA
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           intcon2	equ	0xFF1
  7101                           fsr0h	equ	0xFEA
  7102                           fsr0l	equ	0xFE9
  7103                           wreg	equ	0xFE8
  7104                           fsr1h	equ	0xFE2
  7105                           fsr1l	equ	0xFE1
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           fsr2h	equ	0xFDA
  7109                           fsr2l	equ	0xFD9
  7110                           status	equ	0xFD8
  7111                           
  7112 ;; *************** function ___ftpack *****************
  7113 ;; Defined at:
  7114 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  arg             3    0[COMRAM] unsigned um
  7117 ;;  exp             1    3[COMRAM] unsigned char 
  7118 ;;  sign            1    4[COMRAM] unsigned char 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;		None
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  3    0[COMRAM] float 
  7123 ;; Registers used:
  7124 ;;		wreg, status,2, status,0
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7130 ;;      Params:         5       0       0       0       0       0       0
  7131 ;;      Locals:         0       0       0       0       0       0       0
  7132 ;;      Temps:          3       0       0       0       0       0       0
  7133 ;;      Totals:         8       0       0       0       0       0       0
  7134 ;;Total ram usage:        8 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		___ftadd
  7140 ;;		___ftdiv
  7141 ;;		___ftmul
  7142 ;;		___lltoft
  7143 ;;		___lwtoft
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           	psect	text38
  7148  001EB0                     __ptext38:
  7149                           	opt stack 0
  7150  001EB0                     ___ftpack:
  7151                           	opt stack 22
  7152                           
  7153                           ;incstack = 0
  7154  001EB0  5004               	movf	___ftpack@exp,w,c
  7155  001EB2  B4D8               	btfsc	status,2,c
  7156  001EB4  D005               	goto	i2l2048
  7157  001EB6  5001               	movf	___ftpack@arg,w,c
  7158  001EB8  1002               	iorwf	___ftpack@arg+1,w,c
  7159  001EBA  1003               	iorwf	___ftpack@arg+2,w,c
  7160  001EBC  A4D8               	btfss	status,2,c
  7161  001EBE  D00C               	goto	i2l2054
  7162  001EC0                     i2l2048:
  7163  001EC0  0E00               	movlw	0
  7164  001EC2  6E01               	movwf	?___ftpack,c
  7165  001EC4  0E00               	movlw	0
  7166  001EC6  6E02               	movwf	?___ftpack+1,c
  7167  001EC8  0E00               	movlw	0
  7168  001ECA  6E03               	movwf	?___ftpack+2,c
  7169  001ECC  0012               	return	
  7170  001ECE                     i2l2052:
  7171  001ECE  2A04               	incf	___ftpack@exp,f,c
  7172  001ED0  90D8               	bcf	status,0,c
  7173  001ED2  3203               	rrcf	___ftpack@arg+2,f,c
  7174  001ED4  3202               	rrcf	___ftpack@arg+1,f,c
  7175  001ED6  3201               	rrcf	___ftpack@arg,f,c
  7176  001ED8                     i2l2054:
  7177  001ED8  0E00               	movlw	0
  7178  001EDA  1401               	andwf	___ftpack@arg,w,c
  7179  001EDC  6E06               	movwf	??___ftpack& (0+255),c
  7180  001EDE  0E00               	movlw	0
  7181  001EE0  1402               	andwf	___ftpack@arg+1,w,c
  7182  001EE2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7183  001EE4  0EFE               	movlw	254
  7184  001EE6  1403               	andwf	___ftpack@arg+2,w,c
  7185  001EE8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7186  001EEA  5006               	movf	??___ftpack,w,c
  7187  001EEC  1007               	iorwf	??___ftpack+1,w,c
  7188  001EEE  1008               	iorwf	??___ftpack+2,w,c
  7189  001EF0  B4D8               	btfsc	status,2,c
  7190  001EF2  D00C               	goto	i2l2060
  7191  001EF4  D7EC               	goto	i2l2052
  7192  001EF6                     i2l2056:
  7193  001EF6  2A04               	incf	___ftpack@exp,f,c
  7194  001EF8  0E01               	movlw	1
  7195  001EFA  2601               	addwf	___ftpack@arg,f,c
  7196  001EFC  0E00               	movlw	0
  7197  001EFE  2202               	addwfc	___ftpack@arg+1,f,c
  7198  001F00  0E00               	movlw	0
  7199  001F02  2203               	addwfc	___ftpack@arg+2,f,c
  7200  001F04  90D8               	bcf	status,0,c
  7201  001F06  3203               	rrcf	___ftpack@arg+2,f,c
  7202  001F08  3202               	rrcf	___ftpack@arg+1,f,c
  7203  001F0A  3201               	rrcf	___ftpack@arg,f,c
  7204  001F0C                     i2l2060:
  7205  001F0C  0E00               	movlw	0
  7206  001F0E  1401               	andwf	___ftpack@arg,w,c
  7207  001F10  6E06               	movwf	??___ftpack& (0+255),c
  7208  001F12  0E00               	movlw	0
  7209  001F14  1402               	andwf	___ftpack@arg+1,w,c
  7210  001F16  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7211  001F18  0EFF               	movlw	255
  7212  001F1A  1403               	andwf	___ftpack@arg+2,w,c
  7213  001F1C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7214  001F1E  5006               	movf	??___ftpack,w,c
  7215  001F20  1007               	iorwf	??___ftpack+1,w,c
  7216  001F22  1008               	iorwf	??___ftpack+2,w,c
  7217  001F24  B4D8               	btfsc	status,2,c
  7218  001F26  D006               	goto	i2l2064
  7219  001F28  D7E6               	goto	i2l2056
  7220  001F2A                     i2l2062:
  7221  001F2A  0604               	decf	___ftpack@exp,f,c
  7222  001F2C  90D8               	bcf	status,0,c
  7223  001F2E  3601               	rlcf	___ftpack@arg,f,c
  7224  001F30  3602               	rlcf	___ftpack@arg+1,f,c
  7225  001F32  3603               	rlcf	___ftpack@arg+2,f,c
  7226  001F34                     i2l2064:
  7227  001F34  BE02               	btfsc	___ftpack@arg+1,7,c
  7228  001F36  D003               	goto	i2l585
  7229  001F38  0E02               	movlw	2
  7230  001F3A  6004               	cpfslt	___ftpack@exp,c
  7231  001F3C  D7F6               	goto	i2l2062
  7232  001F3E                     i2l585:
  7233  001F3E  A004               	btfss	___ftpack@exp,0,c
  7234  001F40  9E02               	bcf	___ftpack@arg+1,7,c
  7235  001F42  90D8               	bcf	status,0,c
  7236  001F44  3204               	rrcf	___ftpack@exp,f,c
  7237  001F46  5004               	movf	___ftpack@exp,w,c
  7238  001F48  1203               	iorwf	___ftpack@arg+2,f,c
  7239  001F4A  5005               	movf	___ftpack@sign,w,c
  7240  001F4C  A4D8               	btfss	status,2,c
  7241  001F4E  8E03               	bsf	___ftpack@arg+2,7,c
  7242  001F50  C001  F001         	movff	___ftpack@arg,?___ftpack
  7243  001F54  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7244  001F58  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7245  001F5C  0012               	return	
  7246  001F5E                     __end_of___ftpack:
  7247                           	opt stack 0
  7248                           tosu	equ	0xFFF
  7249                           tosh	equ	0xFFE
  7250                           tosl	equ	0xFFD
  7251                           pclatu	equ	0xFFB
  7252                           pclath	equ	0xFFA
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           intcon	equ	0xFF2
  7260                           intcon2	equ	0xFF1
  7261                           fsr0h	equ	0xFEA
  7262                           fsr0l	equ	0xFE9
  7263                           wreg	equ	0xFE8
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272 ;; *************** function _TMR0_StopTimer *****************
  7273 ;; Defined at:
  7274 ;;		line 49 in file "mcc_generated_files/tmr0.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      void 
  7281 ;; Registers used:
  7282 ;;		None
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7288 ;;      Params:         0       0       0       0       0       0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0
  7291 ;;      Totals:         0       0       0       0       0       0       0
  7292 ;;Total ram usage:        0 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; This function calls:
  7295 ;;		Nothing
  7296 ;; This function is called by:
  7297 ;;		_INT0_ISR
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	text39
  7302  002552                     __ptext39:
  7303                           	opt stack 0
  7304  002552                     _TMR0_StopTimer:
  7305                           	opt stack 25
  7306                           
  7307                           ;tmr0.c: 52: T0CONbits.TMR0ON = 0;
  7308                           
  7309                           ;incstack = 0
  7310  002552  9ED5               	bcf	4053,7,c	;volatile
  7311  002554  0012               	return		;funcret
  7312  002556                     __end_of_TMR0_StopTimer:
  7313                           	opt stack 0
  7314                           tosu	equ	0xFFF
  7315                           tosh	equ	0xFFE
  7316                           tosl	equ	0xFFD
  7317                           pclatu	equ	0xFFB
  7318                           pclath	equ	0xFFA
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           intcon	equ	0xFF2
  7326                           intcon2	equ	0xFF1
  7327                           fsr0h	equ	0xFEA
  7328                           fsr0l	equ	0xFE9
  7329                           wreg	equ	0xFE8
  7330                           fsr1h	equ	0xFE2
  7331                           fsr1l	equ	0xFE1
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function _TMR0_Reload *****************
  7339 ;; Defined at:
  7340 ;;		line 77 in file "mcc_generated_files/tmr0.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, status,2
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7354 ;;      Params:         0       0       0       0       0       0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0
  7356 ;;      Temps:          0       0       0       0       0       0       0
  7357 ;;      Totals:         0       0       0       0       0       0       0
  7358 ;;Total ram usage:        0 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_INT0_ISR
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text40
  7368  00253C                     __ptext40:
  7369                           	opt stack 0
  7370  00253C                     _TMR0_Reload:
  7371                           	opt stack 25
  7372                           
  7373                           ;tmr0.c: 80: TMR0H = timer0ReloadVal >> 8;
  7374                           
  7375                           ;incstack = 0
  7376  00253C  5059               	movf	_timer0ReloadVal+1,w,c	;volatile
  7377  00253E  6ED7               	movwf	4055,c	;volatile
  7378                           
  7379                           ;tmr0.c: 81: TMR0L = (uint8_t) timer0ReloadVal;
  7380  002540  C058  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7381  002544  0012               	return		;funcret
  7382  002546                     __end_of_TMR0_Reload:
  7383                           	opt stack 0
  7384                           tosu	equ	0xFFF
  7385                           tosh	equ	0xFFE
  7386                           tosl	equ	0xFFD
  7387                           pclatu	equ	0xFFB
  7388                           pclath	equ	0xFFA
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           intcon	equ	0xFF2
  7396                           intcon2	equ	0xFF1
  7397                           fsr0h	equ	0xFEA
  7398                           fsr0l	equ	0xFE9
  7399                           wreg	equ	0xFE8
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           postinc2	equ	0xFDE
  7403                           postdec2	equ	0xFDD
  7404                           fsr2h	equ	0xFDA
  7405                           fsr2l	equ	0xFD9
  7406                           status	equ	0xFD8
  7407                           
  7408 ;; *************** function _TMR0_ReadTimer *****************
  7409 ;; Defined at:
  7410 ;;		line 55 in file "mcc_generated_files/tmr0.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  readVal         2    6[COMRAM] unsigned int 
  7415 ;;  readValHigh     1    9[COMRAM] unsigned char 
  7416 ;;  readValLow      1    8[COMRAM] unsigned char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  2    0[COMRAM] unsigned int 
  7419 ;; Registers used:
  7420 ;;		wreg, status,2, status,0
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7426 ;;      Params:         2       0       0       0       0       0       0
  7427 ;;      Locals:         4       0       0       0       0       0       0
  7428 ;;      Temps:          4       0       0       0       0       0       0
  7429 ;;      Totals:        10       0       0       0       0       0       0
  7430 ;;Total ram usage:       10 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; This function calls:
  7433 ;;		Nothing
  7434 ;; This function is called by:
  7435 ;;		_INT0_ISR
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           	psect	text41
  7440  002312                     __ptext41:
  7441                           	opt stack 0
  7442  002312                     _TMR0_ReadTimer:
  7443                           	opt stack 25
  7444                           
  7445                           ;tmr0.c: 57: uint16_t readVal;
  7446                           ;tmr0.c: 58: uint8_t readValLow;
  7447                           ;tmr0.c: 59: uint8_t readValHigh;
  7448                           ;tmr0.c: 61: readValLow = TMR0L;
  7449                           
  7450                           ;incstack = 0
  7451  002312  CFD6 F009          	movff	4054,TMR0_ReadTimer@readValLow	;volatile
  7452                           
  7453                           ;tmr0.c: 62: readValHigh = TMR0H;
  7454  002316  CFD7 F00A          	movff	4055,TMR0_ReadTimer@readValHigh	;volatile
  7455                           
  7456                           ;tmr0.c: 65: readVal = ((uint16_t)readValHigh << 8) + readValLow - (timer0ReloadVal);
  7457  00231A  C058  F003         	movff	_timer0ReloadVal,??_TMR0_ReadTimer	;volatile
  7458  00231E  C059  F004         	movff	_timer0ReloadVal+1,??_TMR0_ReadTimer+1	;volatile
  7459  002322  1E03               	comf	??_TMR0_ReadTimer,f,c
  7460  002324  1E04               	comf	??_TMR0_ReadTimer+1,f,c
  7461  002326  4A03               	infsnz	??_TMR0_ReadTimer,f,c
  7462  002328  2A04               	incf	??_TMR0_ReadTimer+1,f,c
  7463  00232A  5009               	movf	TMR0_ReadTimer@readValLow,w,c
  7464  00232C  C00A  F005         	movff	TMR0_ReadTimer@readValHigh,??_TMR0_ReadTimer+2
  7465  002330  6A06               	clrf	(??_TMR0_ReadTimer+3)& (0+255),c
  7466  002332  C005  F006         	movff	??_TMR0_ReadTimer+2,??_TMR0_ReadTimer+3
  7467  002336  6A05               	clrf	??_TMR0_ReadTimer+2,c
  7468  002338  2605               	addwf	??_TMR0_ReadTimer+2,f,c
  7469  00233A  0E00               	movlw	0
  7470  00233C  2206               	addwfc	??_TMR0_ReadTimer+3,f,c
  7471  00233E  5003               	movf	??_TMR0_ReadTimer,w,c
  7472  002340  2405               	addwf	??_TMR0_ReadTimer+2,w,c
  7473  002342  6E07               	movwf	TMR0_ReadTimer@readVal,c
  7474  002344  5004               	movf	??_TMR0_ReadTimer+1,w,c
  7475  002346  2006               	addwfc	??_TMR0_ReadTimer+3,w,c
  7476  002348  6E08               	movwf	TMR0_ReadTimer@readVal+1,c
  7477                           
  7478                           ;tmr0.c: 67: return readVal;
  7479  00234A  C007  F001         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
  7480  00234E  C008  F002         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
  7481  002352  0012               	return	
  7482  002354                     __end_of_TMR0_ReadTimer:
  7483                           	opt stack 0
  7484                           tosu	equ	0xFFF
  7485                           tosh	equ	0xFFE
  7486                           tosl	equ	0xFFD
  7487                           pclatu	equ	0xFFB
  7488                           pclath	equ	0xFFA
  7489                           tblptru	equ	0xFF8
  7490                           tblptrh	equ	0xFF7
  7491                           tblptrl	equ	0xFF6
  7492                           tablat	equ	0xFF5
  7493                           prodh	equ	0xFF4
  7494                           prodl	equ	0xFF3
  7495                           intcon	equ	0xFF2
  7496                           intcon2	equ	0xFF1
  7497                           fsr0h	equ	0xFEA
  7498                           fsr0l	equ	0xFE9
  7499                           wreg	equ	0xFE8
  7500                           fsr1h	equ	0xFE2
  7501                           fsr1l	equ	0xFE1
  7502                           postinc2	equ	0xFDE
  7503                           postdec2	equ	0xFDD
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8
  7507                           tosu	equ	0xFFF
  7508                           tosh	equ	0xFFE
  7509                           tosl	equ	0xFFD
  7510                           pclatu	equ	0xFFB
  7511                           pclath	equ	0xFFA
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodh	equ	0xFF4
  7517                           prodl	equ	0xFF3
  7518                           intcon	equ	0xFF2
  7519                           intcon2	equ	0xFF1
  7520                           fsr0h	equ	0xFEA
  7521                           fsr0l	equ	0xFE9
  7522                           wreg	equ	0xFE8
  7523                           fsr1h	equ	0xFE2
  7524                           fsr1l	equ	0xFE1
  7525                           postinc2	equ	0xFDE
  7526                           postdec2	equ	0xFDD
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531                           	psect	text42
  7532  000000                     __ptext42:
  7533                           	opt stack 0
  7534                           tosu	equ	0xFFF
  7535                           tosh	equ	0xFFE
  7536                           tosl	equ	0xFFD
  7537                           pclatu	equ	0xFFB
  7538                           pclath	equ	0xFFA
  7539                           tblptru	equ	0xFF8
  7540                           tblptrh	equ	0xFF7
  7541                           tblptrl	equ	0xFF6
  7542                           tablat	equ	0xFF5
  7543                           prodh	equ	0xFF4
  7544                           prodl	equ	0xFF3
  7545                           intcon	equ	0xFF2
  7546                           intcon2	equ	0xFF1
  7547                           fsr0h	equ	0xFEA
  7548                           fsr0l	equ	0xFE9
  7549                           wreg	equ	0xFE8
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           postinc2	equ	0xFDE
  7553                           postdec2	equ	0xFDD
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558                           	psect	rparam
  7559  0000                     tosu	equ	0xFFF
  7560                           tosh	equ	0xFFE
  7561                           tosl	equ	0xFFD
  7562                           pclatu	equ	0xFFB
  7563                           pclath	equ	0xFFA
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           intcon2	equ	0xFF1
  7572                           fsr0h	equ	0xFEA
  7573                           fsr0l	equ	0xFE9
  7574                           wreg	equ	0xFE8
  7575                           fsr1h	equ	0xFE2
  7576                           fsr1l	equ	0xFE1
  7577                           postinc2	equ	0xFDE
  7578                           postdec2	equ	0xFDD
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583                           	psect	temp
  7584  00005A                     btemp:
  7585                           	opt stack 0
  7586  00005A                     	ds	1
  7587  0000                     int$flags	set	btemp
  7588                           tosu	equ	0xFFF
  7589                           tosh	equ	0xFFE
  7590                           tosl	equ	0xFFD
  7591                           pclatu	equ	0xFFB
  7592                           pclath	equ	0xFFA
  7593                           tblptru	equ	0xFF8
  7594                           tblptrh	equ	0xFF7
  7595                           tblptrl	equ	0xFF6
  7596                           tablat	equ	0xFF5
  7597                           prodh	equ	0xFF4
  7598                           prodl	equ	0xFF3
  7599                           intcon	equ	0xFF2
  7600                           intcon2	equ	0xFF1
  7601                           fsr0h	equ	0xFEA
  7602                           fsr0l	equ	0xFE9
  7603                           wreg	equ	0xFE8
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           postinc2	equ	0xFDE
  7607                           postdec2	equ	0xFDD
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8


Data Sizes:
    Strings     36
    Constant    118
    Data        0
    BSS         5
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     82      89
    BANK0           160     43      47
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_1(CODE[36]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _INT0_ISR->_printf
    _printf->___fttol
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftadd
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->___wmul
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INT0_ISR->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     172
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     172
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      86
                                             41 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                             39 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2      86
                                             39 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0   57373
                                             25 BANK0     14    14      0
                           _INT0_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0   57373
                     _TMR0_ReadTimer
                        _TMR0_Reload
                     _TMR0_StopTimer
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             _printf
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (6) i2_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _printf                                              44    37      7   44598
                                             69 COMRAM    13     6      7
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (7) _scale                                               10     7      3   10437
                                             47 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _fround                                              13    10      3   10239
                                             47 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    4457
                                             32 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (7) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     444
                                             54 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    3732
                                             32 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3435
                                             20 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2619
                                             47 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ReadTimer                                      10     8      2      69
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     _TMR0_ReadTimer
     _TMR0_Reload
     _TMR0_StopTimer
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART1_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     i2_TMR0_StartTimer
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2B      2F       4       29.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     52      59       1       94.7%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88       9        0.0%
DATA                 0      0      88      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jan 15 16:02:42 2017

                            ___awdiv@sign 000C                       ___wmul@multiplicand 0011  
                         _timer0ReloadVal 0058                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0020  
                            ___ftadd@exp2 001F                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 001E                                       l163 251C  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
              ??_INT0_SetInterruptHandler 0089                              ___awmod@sign 0006  
                                     tosl 000FFD                                       wreg 000FE8  
                            ___ftdiv@cntr 0039                              ___ftdiv@sign 003E  
                                    STR_1 0677                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                            printf@tmpval 0069                                      i2l74 004E  
                                    i2l78 0058                                      _WPUB 000F61  
                           _EUSART1_Write 2508                                      _main 2514  
                            ___ftpack@arg 0001                              ___ftpack@exp 0004  
                         _TMR0_StartTimer 2546                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 005A  
                           __CFG_BORV$190 000000                                      pclat 000FFA  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0094                             __CFG_IESO$OFF 000000  
                            ___ftmul@cntr 002E                              ___param_bank 000010  
                            ___ftmul@sign 002F                              ___fttol@exp1 0045  
                            ___fttol@lval 0041                   __end_of_TMR0_Initialize 2312  
                        __end_of_INT0_ISR 2006            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 2508  
                                   ?_main 0001                           __end_of___awdiv 211A  
                         __end_of___ftadd 1988                           __end_of___awmod 220C  
               TMR0_ReadTimer@readValHigh 000A                           __end_of___ftdiv 1EB0  
                         __end_of___ftneg 243C                           __end_of___lldiv 219C  
                         __end_of___ftmul 1CD6                                     _T0CON 000FD5  
                         ___awdiv@divisor 0009                           __end_of___llmod 2272  
                         __end_of___ftsub 2394                           __end_of___fttol 1DCA  
                          __CFG_DEBUG$OFF 000000                                     i2l307 0D5C  
                                   i2l612 184A                                     i2l197 250A  
                                   i2l623 18FA                                     i2l632 1916  
                                   i2l608 1820                                     i2l553 1BD0  
                                   i2l650 1A1A                                     i2l643 1E7E  
                                   i2l651 1A42                                     i2l732 218A  
                                   i2l742 2260                                     i2l585 1F3E  
                                   i2l657 1AA8                                     i2l682 242E  
                         ___awdiv@counter 000B                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0087                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0011                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 23C4                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers 0629  
                                   _scale 11A6                           __end_of_isdigit 247E  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   _putch 2532                            ?_EUSART1_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                            __CFG_HFOFST$ON 000000  
                          __CFG_FOSC$HSMP 000000                            __CFG_PBADEN$ON 000000  
                         __initialization 24B4                __end_of_EUSART1_Initialize 24FA  
                            __end_of_main 251E               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 008B                             ___fttol@sign1 0040  
                           __activetblptr 000002                      __size_of__tdiv_to_l_ 0132  
                 __end_of_TMR0_StartTimer 254A                          ___llmod@dividend 000E  
                                  ?_scale 0030                          ___awdiv@dividend 0007  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                        __end_of___ftpack 1F5E                          __end_of___lltoft 22CE  
                                  i2l2120 1888                                    i2l2104 1858  
                                  i2l2200 1C9C                                    i2l2130 18BE  
                                  i2l2060 1F0C                                    i2l2052 1ECE  
                                  i2l2140 18F2                                    i2l2132 18C6  
                                  i2l2062 1F2A                                    i2l2054 1ED8  
                                  i2l2126 18AA                                    i2l2230 20D8  
                                  i2l2222 20BA                                    i2l2064 1F34  
                                  i2l2056 1EF6                                    i2l2048 1EC0  
                                  i2l2128 18B4                                    i2l2240 20F8  
                                  i2l2232 20DC                                    i2l2216 20AA  
                                  i2l2146 1932                                    i2l2138 18E8  
                                  i2l2410 1A6E                                    i2l2314 179C  
                                  i2l2306 16DC                                    i2l2500 2066  
                                  i2l2156 1962                                    i2l2420 1A96  
                                  i2l2228 20D0                                    i2l2244 2102  
                                  i2l2260 21B0                                    i2l2172 1C32  
                                  i2l2430 1AD8                                    i2l2422 1AA2  
                                  i2l2414 1A7E                                    i2l2270 21D2  
                                  i2l2190 1C74                                    i2l2166 1C0A  
                                  i2l2334 137E                                    i2l2520 1D02  
                                  i2l2600 2278                                    i2l2248 2110  
                                  i2l2272 21D6                                    i2l2280 21F4  
                                  i2l2264 21BC                                    i2l2352 1572  
                                  i2l2328 12DA                                    i2l2506 2092  
                                  i2l2098 182E                                    i2l2602 2284  
                                  i2l2450 1B38                                    i2l2186 1C64  
                                  i2l2346 14CE                                    i2l2338 13A2  
                                  i2l2436 1AF6                                    i2l2380 19E0  
                                  i2l2284 2202                                    i2l2276 21EA  
                                  i2l2268 21CA                                    i2l2196 1C8C  
                                  i2l2364 2476                                    i2l2550 1D9C  
                                  i2l2542 1D78                                    i2l2470 1B96  
                                  i2l2374 19B4                                    i2l2710 09C0  
                                  i2l2622 06C2                            __CFG_WDTEN$OFF 000000  
                                  i2l2552 1DA2                                    i2l2480 1BBE  
                                  i2l2712 09D6                                    i2l2624 06D8  
                                  i2l2538 1D68                                    i2l2570 214C  
                                  i2l2482 1BCA                                    i2l2474 1BA6  
                                  i2l2458 1B68                                    i2l2802 0D60  
                                  i2l2722 0A5E                                    i2l2714 0A06  
                                  i2l2706 099A                                    i2l2634 0710  
                                  i2l2642 0770                                    i2l2618 06AC  
                                  i2l2556 1DB8                                    i2l2548 1D90  
                                  i2l2900 10F2                                    i2l2820 0EBE  
                                  i2l2812 0DD6                                    i2l2740 0B48  
                                  i2l2716 0A1C                                    i2l2660 07FC  
                                  i2l2652 07D0                                    i2l2628 06E0  
                                  i2l2566 213C                                    i2l2590 222E  
                                  i2l2742 0B4E                                    i2l2726 0A84  
                                  i2l2654 07E6                                    i2l2496 2036  
                                  i2l2488 236A                                    i2l2568 2148  
                                  i2l2904 1172                                    i2l2824 0ECC  
                                  i2l2808 0D84                                    i2l2736 0AE2  
                                  i2l2672 084A                                    i2l2664 0804  
                                  i2l2648 0796                                    i2l2578 217C  
                                  i2l2594 2252                                    i2l2586 221E  
                                  i2l2850 0F74                                    i2l2818 0EB0  
                                  i2l2762 0BF6                                    i2l2754 0B94  
                                  i2l2682 0890                                    i2l2826 0EDA  
                                  i2l2666 0830                                    i2l2658 07F6  
                                  i2l2906 1188                                    i2l2588 222A  
                                  i2l2836 0F28                                    i2l2780 0C62  
                                  i2l2772 0C2A                                    u223_41 1998  
                                  i2l2870 1024                                    i2l2854 0F98  
                                  i2l2838 0F2E                                    i2l2774 0C40  
                                  i2l2790 0D0E                                    i2l2758 0BD6  
                                  i2l2872 102E                                    i2l2864 0FF0  
                                  i2l2792 0D1C                                    i2l2784 0C82  
                                  i2l2768 0C1C                                    i2l2954 1E1A  
                                  i2l2890 10AC                                    i2l2858 0FC4  
                                  i2l2778 0C4E                                    i2l2698 0932  
                                  i2l2948 1DF2                                    i2l2892 10B8  
                                  i2l2884 1090                                    i2l2876 1062  
                                  i2l2796 0D2A                                    i2l2974 1E58  
                                  i2l2878 106C                                    i2l2798 0D3E  
                                  i2l2896 10D2                                    u225_41 19C4  
                                  u316_41 1DDA                                    u244_41 1CE6  
                                  u318_41 1E02                                    u175_41 17EC  
                                  _RCREG1 000FAE                                    u176_41 1800  
                        __end_of___lwtoft 2460                                    u196_41 1BF2  
                                  u198_41 1C1A                                    _RCSTA1 000FAB  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                          __CFG_XINST$OFF 000000                          __end_of__powers_ 0677  
                            ?_TMR0_Reload 0001                                    ___ftge 2006  
                                  ___wmul 23F2                                 ??___awdiv 000B  
                               ??___ftadd 001B                            __CFG_STVREN$ON 000000  
                               ??___awmod 0005                                 ??___ftdiv 0036  
                               ??___ftneg 0004                                 ??___lldiv 0009  
                               ??___ftmul 0027                                 ??___llmod 0016  
                               ??___ftsub 0027                                 ??___fttol 003B  
                        ?_TMR0_Initialize 0001                                    _fround 1596  
                        ___awdiv@quotient 000D                           ___awmod@divisor 0003  
                                  _result 0053                           ___awmod@counter 0005  
                                  _printf 069C                     ___ftmul@f3_as_product 002B  
                               ??_isdigit 0001                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                           ??_EUSART1_Write 0001  
TMR0_SetInterruptHandler@InterruptHandler 0087  INT0_SetInterruptHandler@InterruptHandler 0087  
           __size_of_INTERRUPT_Initialize 0004                         _SYSTEM_Initialize 249A  
                              __accesstop 0060                   __end_of__initialization 24BE  
                               ?_INT0_ISR 0001                                ___ftadd@f1 0015  
                              ___ftadd@f2 0018                                ___ftge@ff1 0001  
                              ___ftge@ff2 0004                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001                                ___ftdiv@f1 0030  
                              ___ftdiv@f2 0033                                ___ftdiv@f3 003A  
                              ___ftneg@f1 0001                                ___ftmul@f1 0021  
                              ___ftmul@f2 0024                                ___ftsub@f1 0021  
                              ___ftsub@f2 0024                                ___fttol@f1 0037  
                          __pcstackCOMRAM 0001                       ??_SYSTEM_Initialize 008B  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0009  
                           __end_of_scale 1596                             __end_of_putch 253C  
                 __size_of_TMR0_ReadTimer 0042                                ___lwtoft@c 0009  
             __size_of_EXT_INT_Initialize 0018                                __div_to_l_ 1ABA  
                         __div_to_l_@exp1 000C                          ?_TMR0_StartTimer 0001  
                         __div_to_l_@cntr 000B                                   ??_scale 0033  
               __end_of_SYSTEM_Initialize 24B4                           __div_to_l_@quot 0007  
                                 ??_putch 0002                           __CFG_PLLCFG$OFF 000000  
                   _INT0_InterruptHandler 008B                                ??_INT0_ISR 0053  
                              __pnvCOMRAM 0058                             __div_to_l_@f1 0001  
                           __div_to_l_@f2 0004                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0001          __end_of_TMR0_SetInterruptHandler 2528  
                 __size_of_TMR0_StopTimer 0004                                   ?___wmul 000F  
                              ??_TMR0_ISR 0002                        __CFG_CCP3MX$PORTB5 000000  
                                 ?_fround 0030                                 ?___ftpack 0001  
                                 ?_printf 0046                                 ?___lltoft 0009  
                               ?___lwtoft 0009                                   _OSCCON2 000FD2  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
       __size_of_INT0_SetInterruptHandler 000A                 ?_INT0_SetInterruptHandler 0087  
                         __CFG_PWRTEN$OFF 000000                         __end_of__npowers_ 0650  
                                 __Hparam 0000                                _scale$1306 0033  
                                 __Lparam 0000                           __size_of___ftge 0090  
                                 ___awdiv 2096                                   ___ftadd 17DC  
                                 ___awmod 219C                                   ___ftdiv 1DCA  
                                 ___ftneg 2418                                   ___lldiv 211A  
                         __size_of___wmul 0026                                   ___ftmul 1BE2  
                                 ___llmod 220C                                   ___ftsub 2354  
                                 ___fttol 1CD6                              __psmallconst 0600  
                    __size_of_TMR0_Reload 000A                                   __pcinit 24B4  
                              ??___ftpack 0006                           __size_of_fround 0246  
                                 __ramtop 0600                                ??___lltoft 000D  
                                 __ptext0 2514                                   __ptext1 249A  
                                 __ptext2 22CE                                   __ptext3 2546  
                                 __ptext4 251E                                   __ptext5 23C4  
                                 __ptext6 24FA                                   __ptext7 254A  
                                 __ptext8 24CC                                   __ptext9 2528  
                         __size_of_printf 0B0A                                ??___lwtoft 000C  
                               _T0CONbits 000FD5                               ?__div_to_l_ 0001  
                                 _dpowers 0601                     _OSCILLATOR_Initialize 24FA  
                                 _isdigit 2460                                   _reading 0056  
                        ___awmod@dividend 0001                        _EUSART1_Initialize 24E4  
                ??_PIN_MANAGER_Initialize 0087                __size_of_SYSTEM_Initialize 001A  
                    end_of_initialization 24BE                       ?_EUSART1_Initialize 0001  
                           __Lmediumconst 0000                           ___lldiv@divisor 0005  
                         ___lldiv@counter 000D                     TMR0_ReadTimer@readVal 0007  
                                 printf@c 0078                                   printf@f 0046  
                                 postdec2 000FDD                                   postinc2 000FDE  
                          __tdiv_to_l_@f1 0001                            __tdiv_to_l_@f2 0004  
                          _TMR0_ReadTimer 2312                      ??_EUSART1_Initialize 0087  
                           ??__tdiv_to_l_ 0007                  _TMR0_SetInterruptHandler 251E  
                     EUSART1_Write@txData 0001                               ___ftdiv@exp 003D  
                             printf@width 0071                         __size_of_INT0_ISR 00A8  
                     __size_of__div_to_l_ 0128                               ___ftmul@exp 002A  
                          _TMR0_StopTimer 2552                    __end_of_TMR0_ReadTimer 2354  
            __end_of_INTERRUPT_Initialize 254E              _INT0_DefaultInterruptHandler 000000  
                          __end_of___ftge 2096                            __end_of___wmul 2418  
                       __size_of_TMR0_ISR 0030                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_fround 17DC                            __end_of_printf 11A6  
                     start_initialization 24B4                  __size_of_TMR0_Initialize 0044  
         __size_of_PIN_MANAGER_Initialize 002E                       __end_of__tdiv_to_l_ 1ABA  
                             putch@txData 0002                     __end_of_EUSART1_Write 2514  
                         ___llmod@divisor 0012                           ___llmod@counter 0016  
                  __end_of_TMR0_StopTimer 2556                                  ??___ftge 0007  
                         ?_TMR0_ReadTimer 0001                                  ??___wmul 0013  
                                ??_fround 0033                __end_of_EXT_INT_Initialize 24E4  
                                ??_printf 004D                                fround@prec 0039  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0053          __end_of_INT0_SetInterruptHandler 2532  
                       __size_of___lwtoft 0024                             __pcstackBANK0 0060  
                   _TMR0_InterruptHandler 008D                                 __pnvBANK0 008B  
                __size_of_TMR0_StartTimer 0004                           ?_TMR0_StopTimer 0001  
                  _PIN_MANAGER_Initialize 23C4                                 __pintcode 0008  
                                ?___awdiv 0007                                  ?___ftadd 0015  
                                ?___awmod 0001                                  ?___ftdiv 0030  
                                ?___ftneg 0001                                  ?___lldiv 0001  
                                ?___ftmul 0021                                  ?___llmod 000E  
                                ?___ftsub 0021                                 __npowers_ 0629  
                                ?___fttol 0037              ??_INTERRUPT_InterruptManager 0079  
                        __CFG_PRICLKEN$ON 000000                               __tdiv_to_l_ 1988  
                            ??__div_to_l_ 0007                               __smallconst 0600  
                                _BAUDCON1 000FB8                                  ?_isdigit 0001  
                          __size_of_scale 03F0                            __size_of_putch 000A  
                    _INTERRUPT_Initialize 254A                         ??_TMR0_Initialize 0089  
                                _INT0_ISR 1F5E                            ___wmul@product 0013  
                                _LATBbits 000F8A                         i2_TMR0_StartTimer 254E  
     __size_of_INTERRUPT_InterruptManager 008C                                  i2u315_40 2486  
                                i2u322_48 23AE                                  i2u315_46 2488  
              ??_TMR0_SetInterruptHandler 0089                                  i2u246_40 1D20  
                                i2u246_45 1D18                                  _PIR1bits 000F9E  
                      __end_of__div_to_l_ 1BE2                                  i2u290_40 0D54  
                                i2u268_40 08D0                                  i2u268_45 08C6  
                           ??_TMR0_Reload 0001                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                        ?i2_TMR0_StartTimer 0001  
                                _TMR0_ISR 2394                  TMR0_ReadTimer@readValLow 0009  
                     ??i2_TMR0_StartTimer 0001                         ___wmul@multiplier 000F  
                              printf@flag 006F                                printf@fval 0073  
                              printf@prec 0076                               _INTCON2bits 000FF1  
                   ?_INTERRUPT_Initialize 0001                  _INT0_SetInterruptHandler 2528  
               __end_ofi2_TMR0_StartTimer 2552                                  __Hrparam 0000  
                                __Lrparam 0000                        __CFG_BOREN$SBORDIS 000000  
                       __CFG_P2BMX$PORTB5 000000                   ??_OSCILLATOR_Initialize 0087  
                       ??_TMR0_StartTimer 0087                          __size_of___awdiv 0084  
                        __size_of___ftadd 01AC                          __size_of___awmod 0070  
                        __size_of___ftdiv 00E6                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                          __size_of___ftmul 00F4  
                        __size_of___llmod 0066                          __size_of___ftsub 0040  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 0016  
                                ___ftpack 1EB0                               _fround$1304 0036  
                             _fround$1305 0033                                  ___lltoft 2272  
                     __end_of_TMR0_Reload 2546                               _isdigit$955 0002  
                                ___lwtoft 243C                          __size_of_isdigit 001E  
                                __ptext10 24E4                                  __ptext20 2460  
                                __ptext12 2394                                  __ptext21 1596  
                                __ptext13 247E                                  __ptext30 211A  
                                __ptext22 23F2                                  __ptext14 1F5E  
                                __ptext31 1CD6                                  __ptext23 1BE2  
                                __ptext15 254E                                  __ptext40 253C  
                                __ptext32 2354                                  __ptext24 219C  
                                __ptext16 069C                                  __ptext41 2312  
                                __ptext33 17DC                                  __ptext25 2096  
                                __ptext17 11A6                                  __ptext42 0000  
                                __ptext34 2418                                  __ptext26 1988  
                                __ptext18 2532                                  __ptext35 2006  
                                __ptext27 1ABA                                  __ptext19 2508  
                                __ptext36 243C                                  __ptext28 2272  
                                __ptext37 1DCA                                  __ptext29 220C  
                                __ptext38 1EB0                                  __ptext39 2552  
                                __powers_ 0650                             __size_of_main 000A  
                        ??_TMR0_ReadTimer 0003      __end_of_TMR0_DefaultInterruptHandler 249A  
   __size_of_TMR0_DefaultInterruptHandler 001C              _TMR0_DefaultInterruptHandler 247E  
                                int$flags 005A        __end_of_INTERRUPT_InterruptManager 0094  
              _INTERRUPT_InterruptManager 0008                                 printf@exp 006D  
                               printf@val 0065                                _INTCONbits 000FF2  
                                isdigit@c 0003                    ??_INTERRUPT_Initialize 0087  
                                scale@scl 0036                        _EXT_INT_Initialize 24CC  
                                intlevel2 0000                          ??_TMR0_StopTimer 0001  
                        __tdiv_to_l_@exp1 000F                          __tdiv_to_l_@cntr 000E  
                        __tdiv_to_l_@quot 000A                          ___lldiv@dividend 0001  
                 ?_PIN_MANAGER_Initialize 0001                __size_ofi2_TMR0_StartTimer 0004  
                     ?_EXT_INT_Initialize 0001                                _RCSTA1bits 000FAB  
           ?_TMR0_DefaultInterruptHandler 0001                               _TMR0_Reload 253C  
                                printf@ap 0063                    __size_of_EUSART1_Write 000C  
                            ?__tdiv_to_l_ 0001                               _printf$1307 0060  
                    ??_EXT_INT_Initialize 0089                          ___lldiv@quotient 0009  
                         _TMR0_Initialize 22CE                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 23F2  
