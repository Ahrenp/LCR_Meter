

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jan 15 13:42:48 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
    61  0000                     
    62                           	psect	smallconst
    63  000600                     __psmallconst:
    64                           	opt stack 0
    65  000600  00                 	db	0
    66  000601                     _dpowers:
    67                           	opt stack 0
    68  000601  0001               	dw	1
    69  000603  0000               	dw	0
    70  000605  000A               	dw	10
    71  000607  0000               	dw	0
    72  000609  0064               	dw	100
    73  00060B  0000               	dw	0
    74  00060D  03E8               	dw	1000
    75  00060F  0000               	dw	0
    76  000611  2710               	dw	10000
    77  000613  0000               	dw	0
    78  000615  86A0               	dw	34464
    79  000617  0001               	dw	1
    80  000619  4240               	dw	16960
    81  00061B  000F               	dw	15
    82  00061D  9680               	dw	38528
    83  00061F  0098               	dw	152
    84  000621  E100               	dw	57600
    85  000623  05F5               	dw	1525
    86  000625  CA00               	dw	51712
    87  000627  3B9A               	dw	15258
    88  000629                     __end_of_dpowers:
    89                           	opt stack 0
    90  000629                     __npowers_:
    91                           	opt stack 0
    92  000629  00                 	db	0
    93  00062A  80                 	db	128
    94  00062B  3F                 	db	63
    95  00062C  CD                 	db	205
    96  00062D  CC                 	db	204
    97  00062E  3D                 	db	61
    98  00062F  D7                 	db	215
    99  000630  23                 	db	35
   100  000631  3C                 	db	60
   101  000632  12                 	db	18
   102  000633  83                 	db	131
   103  000634  3A                 	db	58
   104  000635  B7                 	db	183
   105  000636  D1                 	db	209
   106  000637  38                 	db	56
   107  000638  C6                 	db	198
   108  000639  27                 	db	39
   109  00063A  37                 	db	55
   110  00063B  38                 	db	56
   111  00063C  86                 	db	134
   112  00063D  35                 	db	53
   113  00063E  C0                 	db	192
   114  00063F  D6                 	db	214
   115  000640  33                 	db	51
   116  000641  CC                 	db	204
   117  000642  2B                 	db	43
   118  000643  32                 	db	50
   119  000644  70                 	db	112
   120  000645  89                 	db	137
   121  000646  30                 	db	48
   122  000647  E7                 	db	231
   123  000648  DB                 	db	219
   124  000649  2E                 	db	46
   125  00064A  E5                 	db	229
   126  00064B  3C                 	db	60
   127  00064C  1E                 	db	30
   128  00064D  42                 	db	66
   129  00064E  A2                 	db	162
   130  00064F  0D                 	db	13
   131  000650                     __end_of__npowers_:
   132                           	opt stack 0
   133  000650                     __powers_:
   134                           	opt stack 0
   135  000650  00                 	db	0
   136  000651  80                 	db	128
   137  000652  3F                 	db	63
   138  000653  00                 	db	0
   139  000654  20                 	db	32
   140  000655  41                 	db	65
   141  000656  00                 	db	0
   142  000657  C8                 	db	200
   143  000658  42                 	db	66
   144  000659  00                 	db	0
   145  00065A  7A                 	db	122
   146  00065B  44                 	db	68
   147  00065C  40                 	db	64
   148  00065D  1C                 	db	28
   149  00065E  46                 	db	70
   150  00065F  50                 	db	80
   151  000660  C3                 	db	195
   152  000661  47                 	db	71
   153  000662  24                 	db	36
   154  000663  74                 	db	116
   155  000664  49                 	db	73
   156  000665  97                 	db	151
   157  000666  18                 	db	24
   158  000667  4B                 	db	75
   159  000668  BC                 	db	188
   160  000669  BE                 	db	190
   161  00066A  4C                 	db	76
   162  00066B  6B                 	db	107
   163  00066C  6E                 	db	110
   164  00066D  4E                 	db	78
   165  00066E  03                 	db	3
   166  00066F  15                 	db	21
   167  000670  50                 	db	80
   168  000671  79                 	db	121
   169  000672  AD                 	db	173
   170  000673  60                 	db	96
   171  000674  F3                 	db	243
   172  000675  49                 	db	73
   173  000676  71                 	db	113
   174  000677                     __end_of__powers_:
   175                           	opt stack 0
   176  000677                     STR_1:
   177  000677  43                 	db	67	;'C'
   178  000678  61                 	db	97	;'a'
   179  000679  70                 	db	112	;'p'
   180  00067A  61                 	db	97	;'a'
   181  00067B  63                 	db	99	;'c'
   182  00067C  69                 	db	105	;'i'
   183  00067D  74                 	db	116	;'t'
   184  00067E  61                 	db	97	;'a'
   185  00067F  6E                 	db	110	;'n'
   186  000680  63                 	db	99	;'c'
   187  000681  65                 	db	101	;'e'
   188  000682  3A                 	db	58	;':'
   189  000683  20                 	db	32
   190  000684  25                 	db	37
   191  000685  30                 	db	48	;'0'
   192  000686  2E                 	db	46
   193  000687  32                 	db	50	;'2'
   194  000688  66                 	db	102	;'f'
   195  000689  20                 	db	32
   196  00068A  70                 	db	112	;'p'
   197  00068B  46                 	db	70	;'F'
   198  00068C  0D                 	db	13
   199  00068D  0A                 	db	10
   200  00068E  00                 	db	0
   201                           
   202                           ; #config settings
   203  00068F  00                 	db	0	; dummy byte at the end
   204  0000                     
   205                           	psect	nvCOMRAM
   206  000059                     __pnvCOMRAM:
   207                           	opt stack 0
   208  000059                     _timer0ReloadVal:
   209                           	opt stack 0
   210  000059                     	ds	2
   211                           
   212                           	psect	nvBANK0
   213  00007D                     __pnvBANK0:
   214                           	opt stack 0
   215  00007D                     _INT0_InterruptHandler:
   216                           	opt stack 0
   217  00007D                     	ds	2
   218  00007F                     _TMR0_InterruptHandler:
   219                           	opt stack 0
   220  00007F                     	ds	2
   221  0000                     _ANSELA	set	3896
   222  0000                     _ANSELB	set	3897
   223  0000                     _ANSELC	set	3898
   224  0000                     _BAUDCON1	set	4024
   225  0000                     _INTCON2bits	set	4081
   226  0000                     _INTCONbits	set	4082
   227  0000                     _LATA	set	3977
   228  0000                     _LATB	set	3978
   229  0000                     _LATBbits	set	3978
   230  0000                     _LATC	set	3979
   231  0000                     _OSCCON	set	4051
   232  0000                     _OSCCON2	set	4050
   233  0000                     _OSCTUNE	set	3995
   234  0000                     _PIR1bits	set	3998
   235  0000                     _RCONbits	set	4048
   236  0000                     _RCREG1	set	4014
   237  0000                     _RCSTA1	set	4011
   238  0000                     _RCSTA1bits	set	4011
   239  0000                     _SPBRG1	set	4015
   240  0000                     _SPBRGH1	set	4016
   241  0000                     _T0CON	set	4053
   242  0000                     _T0CONbits	set	4053
   243  0000                     _TMR0H	set	4055
   244  0000                     _TMR0L	set	4054
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISC	set	3988
   248  0000                     _TXREG1	set	4013
   249  0000                     _TXSTA1	set	4012
   250  0000                     _WPUB	set	3937
   251                           
   252                           	psect	cinit
   253  002350                     __pcinit:
   254                           	opt stack 0
   255  002350                     start_initialization:
   256                           	opt stack 0
   257  002350                     __initialization:
   258                           	opt stack 0
   259                           
   260                           ; Clear objects allocated to BANK0 (3 bytes)
   261  002350  0100               	movlb	0
   262  002352  6B83               	clrf	(__pbssBANK0+2)& (0+255),b
   263  002354  6B82               	clrf	(__pbssBANK0+1)& (0+255),b
   264  002356  6B81               	clrf	__pbssBANK0& (0+255),b
   265                           
   266                           ; Clear objects allocated to COMRAM (2 bytes)
   267  002358  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   268  00235A  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   269  00235C                     end_of_initialization:
   270                           	opt stack 0
   271  00235C                     __end_of__initialization:
   272                           	opt stack 0
   273  00235C  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274  00235E  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275  002360  0E00               	movlw	low (__Lmediumconst shr (0+16))
   276  002362  6EF8               	movwf	tblptru,c
   277  002364  0100               	movlb	0
   278  002366  EFE6  F011         	goto	_main	;jump to C main() function
   279                           tblptru	equ	0xFF8
   280                           
   281                           	psect	bssCOMRAM
   282  00005B                     __pbssCOMRAM:
   283                           	opt stack 0
   284  00005B                     _reading:
   285                           	opt stack 0
   286  00005B                     	ds	2
   287                           tblptru	equ	0xFF8
   288                           
   289                           	psect	bssBANK0
   290  000081                     __pbssBANK0:
   291                           	opt stack 0
   292  000081                     _result:
   293                           	opt stack 0
   294  000081                     	ds	3
   295                           tblptru	equ	0xFF8
   296                           
   297                           	psect	cstackBANK0
   298  000060                     __pcstackBANK0:
   299                           	opt stack 0
   300  000060                     _printf$1307:
   301                           	opt stack 0
   302                           
   303                           ; 3 bytes @ 0x0
   304  000060                     	ds	3
   305  000063                     printf@ap:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x3
   309  000063                     	ds	2
   310  000065                     printf@val:
   311                           	opt stack 0
   312                           
   313                           ; 4 bytes @ 0x5
   314  000065                     	ds	4
   315  000069                     printf@tmpval:
   316                           	opt stack 0
   317                           
   318                           ; 4 bytes @ 0x9
   319  000069                     	ds	4
   320  00006D                     printf@exp:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0xD
   324  00006D                     	ds	2
   325  00006F                     printf@flag:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0xF
   329  00006F                     	ds	2
   330  000071                     printf@width:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x11
   334  000071                     	ds	2
   335  000073                     printf@fval:
   336                           	opt stack 0
   337                           
   338                           ; 3 bytes @ 0x13
   339  000073                     	ds	3
   340  000076                     printf@prec:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x16
   344  000076                     	ds	2
   345  000078                     printf@c:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x18
   349  000078                     	ds	1
   350  000079                     INT0_SetInterruptHandler@InterruptHandler:
   351                           	opt stack 0
   352  000079                     TMR0_SetInterruptHandler@InterruptHandler:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x19
   356  000079                     	ds	2
   357  00007B                     ??_TMR0_Initialize:
   358  00007B                     
   359                           ; 1 bytes @ 0x1B
   360  00007B                     	ds	2
   361  00007D                     tblptru	equ	0xFF8
   362                           
   363                           ; 1 bytes @ 0x1D
   364                           
   365                           	psect	cstackCOMRAM
   366  000001                     __pcstackCOMRAM:
   367                           	opt stack 0
   368  000001                     ??_TMR0_DefaultInterruptHandler:
   369  000001                     ??_isdigit:
   370  000001                     ?_TMR0_ReadTimer:
   371                           	opt stack 0
   372  000001                     ?___awmod:
   373                           	opt stack 0
   374  000001                     ?___ftpack:
   375                           	opt stack 0
   376  000001                     ?___ftneg:
   377                           	opt stack 0
   378  000001                     ?__tdiv_to_l_:
   379                           	opt stack 0
   380  000001                     ?__div_to_l_:
   381                           	opt stack 0
   382  000001                     ?___lldiv:
   383                           	opt stack 0
   384  000001                     ?___llmod:
   385                           	opt stack 0
   386  000001                     EUSART1_Write@txData:
   387                           	opt stack 0
   388  000001                     ___awmod@dividend:
   389                           	opt stack 0
   390  000001                     __div_to_l_@f1:
   391                           	opt stack 0
   392  000001                     ___ftpack@arg:
   393                           	opt stack 0
   394  000001                     __tdiv_to_l_@f1:
   395                           	opt stack 0
   396  000001                     ___ftge@ff1:
   397                           	opt stack 0
   398  000001                     ___ftneg@f1:
   399                           	opt stack 0
   400  000001                     ___lldiv@dividend:
   401                           	opt stack 0
   402  000001                     ___llmod@dividend:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0x0
   406  000001                     	ds	1
   407  000002                     putch@txData:
   408                           	opt stack 0
   409  000002                     _isdigit$955:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x1
   413  000002                     	ds	1
   414  000003                     ??_TMR0_ReadTimer:
   415  000003                     isdigit@c:
   416                           	opt stack 0
   417  000003                     ___awmod@divisor:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421  000003                     	ds	1
   422  000004                     ___ftpack@exp:
   423                           	opt stack 0
   424  000004                     __div_to_l_@f2:
   425                           	opt stack 0
   426  000004                     __tdiv_to_l_@f2:
   427                           	opt stack 0
   428  000004                     ___ftge@ff2:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x3
   432  000004                     	ds	1
   433  000005                     ___awmod@counter:
   434                           	opt stack 0
   435  000005                     ___ftpack@sign:
   436                           	opt stack 0
   437  000005                     ___lldiv@divisor:
   438                           	opt stack 0
   439  000005                     ___llmod@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x4
   443  000005                     	ds	1
   444  000006                     ??___ftpack:
   445  000006                     ___awmod@sign:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x5
   449  000006                     	ds	1
   450  000007                     ??__tdiv_to_l_:
   451  000007                     ??___ftge:
   452  000007                     ?___awdiv:
   453                           	opt stack 0
   454  000007                     TMR0_ReadTimer@readVal:
   455                           	opt stack 0
   456  000007                     ___awdiv@dividend:
   457                           	opt stack 0
   458  000007                     __div_to_l_@quot:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x6
   462  000007                     	ds	2
   463  000009                     ?___lltoft:
   464                           	opt stack 0
   465  000009                     ?___lwtoft:
   466                           	opt stack 0
   467  000009                     TMR0_ReadTimer@readValLow:
   468                           	opt stack 0
   469  000009                     ___llmod@counter:
   470                           	opt stack 0
   471  000009                     ___awdiv@divisor:
   472                           	opt stack 0
   473  000009                     ___lwtoft@c:
   474                           	opt stack 0
   475  000009                     ___lldiv@quotient:
   476                           	opt stack 0
   477  000009                     ___lltoft@c:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x8
   481  000009                     	ds	1
   482  00000A                     TMR0_ReadTimer@readValHigh:
   483                           	opt stack 0
   484  00000A                     __tdiv_to_l_@quot:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x9
   488  00000A                     	ds	1
   489  00000B                     ___awdiv@counter:
   490                           	opt stack 0
   491  00000B                     __div_to_l_@cntr:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0xA
   495  00000B                     	ds	1
   496  00000C                     ___awdiv@sign:
   497                           	opt stack 0
   498  00000C                     __div_to_l_@exp1:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0xB
   502  00000C                     	ds	1
   503  00000D                     ??___lltoft:
   504  00000D                     ___lldiv@counter:
   505                           	opt stack 0
   506  00000D                     ___awdiv@quotient:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0xC
   510  00000D                     	ds	1
   511  00000E                     __tdiv_to_l_@cntr:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0xD
   515  00000E                     	ds	1
   516  00000F                     ?___wmul:
   517                           	opt stack 0
   518  00000F                     __tdiv_to_l_@exp1:
   519                           	opt stack 0
   520  00000F                     ___wmul@multiplier:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0xE
   524  00000F                     	ds	2
   525  000011                     ___lltoft@exp:
   526                           	opt stack 0
   527  000011                     ___wmul@multiplicand:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x10
   531  000011                     	ds	2
   532  000013                     ___wmul@product:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x12
   536  000013                     	ds	2
   537  000015                     ?___ftmul:
   538                           	opt stack 0
   539  000015                     ___ftmul@f1:
   540                           	opt stack 0
   541                           
   542                           ; 3 bytes @ 0x14
   543  000015                     	ds	3
   544  000018                     ___ftmul@f2:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x17
   548  000018                     	ds	3
   549  00001B                     ??___ftmul:
   550                           
   551                           ; 1 bytes @ 0x1A
   552  00001B                     	ds	3
   553  00001E                     ___ftmul@exp:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x1D
   557  00001E                     	ds	1
   558  00001F                     ___ftmul@f3_as_product:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x1E
   562  00001F                     	ds	3
   563  000022                     ___ftmul@cntr:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x21
   567  000022                     	ds	1
   568  000023                     ___ftmul@sign:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x22
   572  000023                     	ds	1
   573  000024                     ?___ftdiv:
   574                           	opt stack 0
   575  000024                     ?_fround:
   576                           	opt stack 0
   577  000024                     ?_scale:
   578                           	opt stack 0
   579  000024                     ___ftdiv@f1:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x23
   583  000024                     	ds	3
   584  000027                     ___ftdiv@f2:
   585                           	opt stack 0
   586  000027                     _fround$1305:
   587                           	opt stack 0
   588  000027                     _scale$1306:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x26
   592  000027                     	ds	3
   593  00002A                     ??___ftdiv:
   594  00002A                     scale@scl:
   595                           	opt stack 0
   596  00002A                     _fround$1304:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x29
   600  00002A                     	ds	1
   601  00002B                     ?___fttol:
   602                           	opt stack 0
   603  00002B                     ___fttol@f1:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x2A
   607  00002B                     	ds	2
   608  00002D                     fround@prec:
   609                           	opt stack 0
   610  00002D                     ___ftdiv@cntr:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x2C
   614  00002D                     	ds	1
   615  00002E                     ?___ftadd:
   616                           	opt stack 0
   617  00002E                     ___ftadd@f1:
   618                           	opt stack 0
   619  00002E                     ___ftdiv@f3:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0x2D
   623  00002E                     	ds	1
   624  00002F                     ??___fttol:
   625                           
   626                           ; 1 bytes @ 0x2E
   627  00002F                     	ds	2
   628  000031                     ___ftdiv@exp:
   629                           	opt stack 0
   630  000031                     ___ftadd@f2:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x30
   634  000031                     	ds	1
   635  000032                     ___ftdiv@sign:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x31
   639  000032                     	ds	2
   640  000034                     ??___ftadd:
   641  000034                     ___fttol@sign1:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x33
   645  000034                     	ds	1
   646  000035                     ___fttol@lval:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x34
   650  000035                     	ds	2
   651  000037                     ___ftadd@sign:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x36
   655  000037                     	ds	1
   656  000038                     ___ftadd@exp2:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x37
   660  000038                     	ds	1
   661  000039                     ___ftadd@exp1:
   662                           	opt stack 0
   663  000039                     ___fttol@exp1:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x38
   667  000039                     	ds	1
   668  00003A                     ?___ftsub:
   669                           	opt stack 0
   670  00003A                     ___ftsub@f1:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x39
   674  00003A                     	ds	3
   675  00003D                     ___ftsub@f2:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x3C
   679  00003D                     	ds	3
   680  000040                     ?_printf:
   681                           	opt stack 0
   682  000040                     printf@f:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x3F
   686  000040                     	ds	5
   687  000045                     ??_printf:
   688                           
   689                           ; 1 bytes @ 0x44
   690  000045                     	ds	6
   691  00004B                     ??_INTERRUPT_InterruptManager:
   692                           
   693                           ; 1 bytes @ 0x4A
   694  00004B                     	ds	14
   695                           tblptru	equ	0xFF8
   696                           
   697 ;;
   698 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   699 ;;
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 3 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   716 ;;      Params:         0       0       0       0       0       0       0
   717 ;;      Locals:         0       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0
   719 ;;      Totals:         0       0       0       0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels required when called:    9
   722 ;; This function calls:
   723 ;;		_SYSTEM_Initialize
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text0
   730  0023CC                     __ptext0:
   731                           	opt stack 0
   732  0023CC                     _main:
   733                           	opt stack 22
   734                           
   735                           ;main.c: 6: SYSTEM_Initialize();
   736                           
   737                           ;incstack = 0
   738  0023CC  ECB5  F011         	call	_SYSTEM_Initialize	;wreg free
   739                           
   740                           ;main.c: 25: (INTCONbits.GIE = 1);
   741  0023D0  8EF2               	bsf	intcon,7,c	;volatile
   742                           
   743                           ;main.c: 28: (INTCONbits.PEIE = 1);
   744  0023D2  8CF2               	bsf	intcon,6,c	;volatile
   745  0023D4                     l163:
   746                           
   747                           ;main.c: 37: {
   748  0023D4  D7FF               	goto	l163
   749  0023D6                     __end_of_main:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           intcon	equ	0xFF2
   753                           
   754 ;; *************** function _SYSTEM_Initialize *****************
   755 ;; Defined at:
   756 ;;		line 111 in file "mcc_generated_files/mcc.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;		None
   759 ;; Auto vars:     Size  Location     Type
   760 ;;		None
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   770 ;;      Params:         0       0       0       0       0       0       0
   771 ;;      Locals:         0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0
   773 ;;      Totals:         0       0       0       0       0       0       0
   774 ;;Total ram usage:        0 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    8
   777 ;; This function calls:
   778 ;;		_EUSART1_Initialize
   779 ;;		_EXT_INT_Initialize
   780 ;;		_INTERRUPT_Initialize
   781 ;;		_OSCILLATOR_Initialize
   782 ;;		_PIN_MANAGER_Initialize
   783 ;;		_TMR0_Initialize
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           	psect	text1
   790  00236A                     __ptext1:
   791                           	opt stack 0
   792  00236A                     _SYSTEM_Initialize:
   793                           	opt stack 22
   794                           
   795                           ;mcc.c: 114: INTERRUPT_Initialize();
   796                           
   797                           ;incstack = 0
   798  00236A  EC01  F012         	call	_INTERRUPT_Initialize	;wreg free
   799                           
   800                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   801  00236E  EC3D  F011         	call	_PIN_MANAGER_Initialize	;wreg free
   802                           
   803                           ;mcc.c: 116: OSCILLATOR_Initialize();
   804  002372  ECD9  F011         	call	_OSCILLATOR_Initialize	;wreg free
   805                           
   806                           ;mcc.c: 117: EXT_INT_Initialize();
   807  002376  ECC2  F011         	call	_EXT_INT_Initialize	;wreg free
   808                           
   809                           ;mcc.c: 118: TMR0_Initialize();
   810  00237A  ECC2  F010         	call	_TMR0_Initialize	;wreg free
   811                           
   812                           ;mcc.c: 119: EUSART1_Initialize();
   813  00237E  ECCE  F011         	call	_EUSART1_Initialize	;wreg free
   814  002382  0012               	return		;funcret
   815  002384                     __end_of_SYSTEM_Initialize:
   816                           	opt stack 0
   817                           tblptru	equ	0xFF8
   818                           intcon	equ	0xFF2
   819                           
   820 ;; *************** function _TMR0_Initialize *****************
   821 ;; Defined at:
   822 ;;		line 14 in file "mcc_generated_files/tmr0.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   836 ;;      Params:         0       0       0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0       0       0
   838 ;;      Temps:          0       2       0       0       0       0       0
   839 ;;      Totals:         0       2       0       0       0       0       0
   840 ;;Total ram usage:        2 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    7
   843 ;; This function calls:
   844 ;;		_TMR0_SetInterruptHandler
   845 ;;		_TMR0_StartTimer
   846 ;; This function is called by:
   847 ;;		_SYSTEM_Initialize
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text2
   852  002184                     __ptext2:
   853                           	opt stack 0
   854  002184                     _TMR0_Initialize:
   855                           	opt stack 22
   856                           
   857                           ;tmr0.c: 19: T0CON = 0x11;
   858                           
   859                           ;incstack = 0
   860  002184  0E11               	movlw	17
   861  002186  6ED5               	movwf	4053,c	;volatile
   862                           
   863                           ;tmr0.c: 22: TMR0H = 0x15;
   864  002188  0E15               	movlw	21
   865  00218A  6ED7               	movwf	4055,c	;volatile
   866                           
   867                           ;tmr0.c: 25: TMR0L = 0x9F;
   868  00218C  0E9F               	movlw	159
   869  00218E  6ED6               	movwf	4054,c	;volatile
   870                           
   871                           ;tmr0.c: 28: timer0ReloadVal = (TMR0H << 8) | TMR0L;
   872  002190  50D6               	movf	4054,w,c	;volatile
   873  002192  CFD7 F07B          	movff	4055,??_TMR0_Initialize	;volatile
   874  002196  0100               	movlb	0	; () banked
   875  002198  6B7C               	clrf	(??_TMR0_Initialize+1)& (0+255),b
   876  00219A  C07B  F07C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
   877  00219E  0100               	movlb	0	; () banked
   878  0021A0  6B7B               	clrf	??_TMR0_Initialize& (0+255),b
   879  0021A2  0100               	movlb	0	; () banked
   880  0021A4  117B               	iorwf	??_TMR0_Initialize& (0+255),w,b
   881  0021A6  6E59               	movwf	_timer0ReloadVal,c	;volatile
   882  0021A8  0100               	movlb	0	; () banked
   883  0021AA  517C               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
   884  0021AC  6E5A               	movwf	_timer0ReloadVal+1,c	;volatile
   885                           
   886                           ; BSR set to: 0
   887                           ;tmr0.c: 31: INTCONbits.TMR0IF = 0;
   888  0021AE  94F2               	bcf	intcon,2,c	;volatile
   889                           
   890                           ; BSR set to: 0
   891                           ;tmr0.c: 34: INTCONbits.TMR0IE = 1;
   892  0021B0  8AF2               	bsf	intcon,5,c	;volatile
   893                           
   894                           ; BSR set to: 0
   895                           ;tmr0.c: 37: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
   896  0021B2  0E34               	movlw	low _TMR0_DefaultInterruptHandler
   897  0021B4  0100               	movlb	0	; () banked
   898  0021B6  6F79               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
   899  0021B8  0E23               	movlw	high _TMR0_DefaultInterruptHandler
   900  0021BA  0100               	movlb	0	; () banked
   901  0021BC  6F7A               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
   902  0021BE  ECEB  F011         	call	_TMR0_SetInterruptHandler	;wreg free
   903                           
   904                           ;tmr0.c: 40: TMR0_StartTimer();
   905  0021C2  ECFF  F011         	call	_TMR0_StartTimer	;wreg free
   906  0021C6  0012               	return		;funcret
   907  0021C8                     __end_of_TMR0_Initialize:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           intcon	equ	0xFF2
   911                           
   912 ;; *************** function _TMR0_StartTimer *****************
   913 ;; Defined at:
   914 ;;		line 43 in file "mcc_generated_files/tmr0.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		None
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   928 ;;      Params:         0       0       0       0       0       0       0
   929 ;;      Locals:         0       0       0       0       0       0       0
   930 ;;      Temps:          0       0       0       0       0       0       0
   931 ;;      Totals:         0       0       0       0       0       0       0
   932 ;;Total ram usage:        0 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    6
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_TMR0_Initialize
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text3
   943  0023FE                     __ptext3:
   944                           	opt stack 0
   945  0023FE                     _TMR0_StartTimer:
   946                           	opt stack 22
   947                           
   948                           ;tmr0.c: 46: T0CONbits.TMR0ON = 1;
   949                           
   950                           ;incstack = 0
   951  0023FE  8ED5               	bsf	4053,7,c	;volatile
   952  002400  0012               	return		;funcret
   953  002402                     __end_of_TMR0_StartTimer:
   954                           	opt stack 0
   955                           tblptru	equ	0xFF8
   956                           intcon	equ	0xFF2
   957                           
   958 ;; *************** function _TMR0_SetInterruptHandler *****************
   959 ;; Defined at:
   960 ;;		line 103 in file "mcc_generated_files/tmr0.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  InterruptHan    2   25[BANK0 ] PTR void 
   963 ;;		 -> TMR0_DefaultInterruptHandler(1), 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;		None
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg, status,2, status,0
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   975 ;;      Params:         0       2       0       0       0       0       0
   976 ;;      Locals:         0       0       0       0       0       0       0
   977 ;;      Temps:          0       0       0       0       0       0       0
   978 ;;      Totals:         0       2       0       0       0       0       0
   979 ;;Total ram usage:        2 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    6
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_TMR0_Initialize
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text4
   990  0023D6                     __ptext4:
   991                           	opt stack 0
   992  0023D6                     _TMR0_SetInterruptHandler:
   993                           	opt stack 22
   994                           
   995                           ;tmr0.c: 104: TMR0_InterruptHandler = InterruptHandler;
   996                           
   997                           ;incstack = 0
   998  0023D6  C079  F07F         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
   999  0023DA  C07A  F080         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1000  0023DE  0012               	return		;funcret
  1001  0023E0                     __end_of_TMR0_SetInterruptHandler:
  1002                           	opt stack 0
  1003                           tblptru	equ	0xFF8
  1004                           intcon	equ	0xFF2
  1005                           
  1006 ;; *************** function _PIN_MANAGER_Initialize *****************
  1007 ;; Defined at:
  1008 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1022 ;;      Params:         0       0       0       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0       0       0
  1025 ;;      Totals:         0       0       0       0       0       0       0
  1026 ;;Total ram usage:        0 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    6
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_SYSTEM_Initialize
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text5
  1037  00227A                     __ptext5:
  1038                           	opt stack 0
  1039  00227A                     _PIN_MANAGER_Initialize:
  1040                           	opt stack 23
  1041                           
  1042                           ;pin_manager.c: 56: LATA = 0x00;
  1043                           
  1044                           ;incstack = 0
  1045  00227A  0E00               	movlw	0
  1046  00227C  6E89               	movwf	3977,c	;volatile
  1047                           
  1048                           ;pin_manager.c: 57: LATB = 0x02;
  1049  00227E  0E02               	movlw	2
  1050  002280  6E8A               	movwf	3978,c	;volatile
  1051                           
  1052                           ;pin_manager.c: 58: LATC = 0x00;
  1053  002282  0E00               	movlw	0
  1054  002284  6E8B               	movwf	3979,c	;volatile
  1055                           
  1056                           ;pin_manager.c: 63: TRISA = 0xFF;
  1057  002286  6892               	setf	3986,c	;volatile
  1058                           
  1059                           ;pin_manager.c: 64: TRISB = 0xFD;
  1060  002288  0EFD               	movlw	253
  1061  00228A  6E93               	movwf	3987,c	;volatile
  1062                           
  1063                           ;pin_manager.c: 65: TRISC = 0xBF;
  1064  00228C  0EBF               	movlw	191
  1065  00228E  6E94               	movwf	3988,c	;volatile
  1066                           
  1067                           ;pin_manager.c: 70: ANSELC = 0xBC;
  1068  002290  0EBC               	movlw	188
  1069  002292  010F               	movlb	15	; () banked
  1070  002294  6F3A               	movwf	58,b	;volatile
  1071                           
  1072                           ;pin_manager.c: 71: ANSELB = 0x3C;
  1073  002296  0E3C               	movlw	60
  1074  002298  010F               	movlb	15	; () banked
  1075  00229A  6F39               	movwf	57,b	;volatile
  1076                           
  1077                           ;pin_manager.c: 72: ANSELA = 0x2F;
  1078  00229C  0E2F               	movlw	47
  1079  00229E  010F               	movlb	15	; () banked
  1080  0022A0  6F38               	movwf	56,b	;volatile
  1081                           
  1082                           ; BSR set to: 15
  1083                           ;pin_manager.c: 77: WPUB = 0xFF;
  1084  0022A2  6861               	setf	3937,c	;volatile
  1085                           
  1086                           ; BSR set to: 15
  1087                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  1088  0022A4  9EF1               	bcf	intcon2,7,c	;volatile
  1089                           
  1090                           ; BSR set to: 15
  1091  0022A6  0012               	return		;funcret
  1092  0022A8                     __end_of_PIN_MANAGER_Initialize:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           intcon	equ	0xFF2
  1096                           intcon2	equ	0xFF1
  1097                           
  1098 ;; *************** function _OSCILLATOR_Initialize *****************
  1099 ;; Defined at:
  1100 ;;		line 122 in file "mcc_generated_files/mcc.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;		None
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1114 ;;      Params:         0       0       0       0       0       0       0
  1115 ;;      Locals:         0       0       0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0
  1117 ;;      Totals:         0       0       0       0       0       0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    6
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_SYSTEM_Initialize
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text6
  1129  0023B2                     __ptext6:
  1130                           	opt stack 0
  1131  0023B2                     _OSCILLATOR_Initialize:
  1132                           	opt stack 23
  1133                           
  1134                           ;mcc.c: 125: OSCCON = 0x70;
  1135                           
  1136                           ; BSR set to: 15
  1137                           ;incstack = 0
  1138  0023B2  0E70               	movlw	112
  1139  0023B4  6ED3               	movwf	4051,c	;volatile
  1140                           
  1141                           ;mcc.c: 127: OSCCON2 = 0x04;
  1142  0023B6  0E04               	movlw	4
  1143  0023B8  6ED2               	movwf	4050,c	;volatile
  1144                           
  1145                           ;mcc.c: 129: OSCTUNE = 0x00;
  1146  0023BA  0E00               	movlw	0
  1147  0023BC  6E9B               	movwf	3995,c	;volatile
  1148  0023BE  0012               	return		;funcret
  1149  0023C0                     __end_of_OSCILLATOR_Initialize:
  1150                           	opt stack 0
  1151                           tblptru	equ	0xFF8
  1152                           intcon	equ	0xFF2
  1153                           intcon2	equ	0xFF1
  1154                           
  1155 ;; *************** function _INTERRUPT_Initialize *****************
  1156 ;; Defined at:
  1157 ;;		line 4 in file "mcc_generated_files/interrupt_manager.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		None
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1171 ;;      Params:         0       0       0       0       0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0
  1174 ;;      Totals:         0       0       0       0       0       0       0
  1175 ;;Total ram usage:        0 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    6
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_SYSTEM_Initialize
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text7
  1186  002402                     __ptext7:
  1187                           	opt stack 0
  1188  002402                     _INTERRUPT_Initialize:
  1189                           	opt stack 23
  1190                           
  1191                           ;interrupt_manager.c: 7: RCONbits.IPEN = 0;
  1192                           
  1193                           ;incstack = 0
  1194  002402  9ED0               	bcf	4048,7,c	;volatile
  1195  002404  0012               	return		;funcret
  1196  002406                     __end_of_INTERRUPT_Initialize:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           intcon	equ	0xFF2
  1200                           intcon2	equ	0xFF1
  1201                           
  1202 ;; *************** function _EXT_INT_Initialize *****************
  1203 ;; Defined at:
  1204 ;;		line 71 in file "mcc_generated_files/ext_int.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1218 ;;      Params:         0       0       0       0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0       0       0
  1220 ;;      Temps:          0       0       0       0       0       0       0
  1221 ;;      Totals:         0       0       0       0       0       0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    7
  1225 ;; This function calls:
  1226 ;;		_INT0_SetInterruptHandler
  1227 ;; This function is called by:
  1228 ;;		_SYSTEM_Initialize
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text8
  1233  002384                     __ptext8:
  1234                           	opt stack 0
  1235  002384                     _EXT_INT_Initialize:
  1236                           	opt stack 22
  1237                           
  1238                           ;ext_int.c: 80: (INTCONbits.INT0IF = 0);
  1239                           
  1240                           ;incstack = 0
  1241  002384  92F2               	bcf	intcon,1,c	;volatile
  1242                           
  1243                           ;ext_int.c: 81: (INTCON2bits.INTEDG0 = 0);
  1244  002386  9CF1               	bcf	intcon2,6,c	;volatile
  1245                           
  1246                           ;ext_int.c: 83: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  1247  002388  0E00               	movlw	0
  1248  00238A  0100               	movlb	0	; () banked
  1249  00238C  6F79               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  1250  00238E  0E00               	movlw	0
  1251  002390  0100               	movlb	0	; () banked
  1252  002392  6F7A               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1253  002394  ECF0  F011         	call	_INT0_SetInterruptHandler	;wreg free
  1254                           
  1255                           ;ext_int.c: 84: (INTCONbits.INT0IE = 1);
  1256  002398  88F2               	bsf	intcon,4,c	;volatile
  1257  00239A  0012               	return		;funcret
  1258  00239C                     __end_of_EXT_INT_Initialize:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           intcon	equ	0xFF2
  1262                           intcon2	equ	0xFF1
  1263                           
  1264 ;; *************** function _INT0_SetInterruptHandler *****************
  1265 ;; Defined at:
  1266 ;;		line 51 in file "mcc_generated_files/ext_int.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  InterruptHan    2   25[BANK0 ] PTR void 
  1269 ;;		 -> INT0_DefaultInterruptHandler(1), 
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1281 ;;      Params:         0       2       0       0       0       0       0
  1282 ;;      Locals:         0       0       0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0
  1284 ;;      Totals:         0       2       0       0       0       0       0
  1285 ;;Total ram usage:        2 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    6
  1288 ;; This function calls:
  1289 ;;		Nothing
  1290 ;; This function is called by:
  1291 ;;		_EXT_INT_Initialize
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text9
  1296  0023E0                     __ptext9:
  1297                           	opt stack 0
  1298  0023E0                     _INT0_SetInterruptHandler:
  1299                           	opt stack 22
  1300                           
  1301                           ;ext_int.c: 52: INT0_InterruptHandler = InterruptHandler;
  1302                           
  1303                           ;incstack = 0
  1304  0023E0  C079  F07D         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  1305  0023E4  C07A  F07E         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  1306  0023E8  0012               	return		;funcret
  1307  0023EA                     __end_of_INT0_SetInterruptHandler:
  1308                           	opt stack 0
  1309                           tblptru	equ	0xFF8
  1310                           intcon	equ	0xFF2
  1311                           intcon2	equ	0xFF1
  1312                           
  1313 ;; *************** function _EUSART1_Initialize *****************
  1314 ;; Defined at:
  1315 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1329 ;;      Params:         0       0       0       0       0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0
  1332 ;;      Totals:         0       0       0       0       0       0       0
  1333 ;;Total ram usage:        0 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    6
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_SYSTEM_Initialize
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text10
  1344  00239C                     __ptext10:
  1345                           	opt stack 0
  1346  00239C                     _EUSART1_Initialize:
  1347                           	opt stack 23
  1348                           
  1349                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  1350                           
  1351                           ;incstack = 0
  1352  00239C  0E08               	movlw	8
  1353  00239E  6EB8               	movwf	4024,c	;volatile
  1354                           
  1355                           ;eusart1.c: 63: RCSTA1 = 0x80;
  1356  0023A0  0E80               	movlw	128
  1357  0023A2  6EAB               	movwf	4011,c	;volatile
  1358                           
  1359                           ;eusart1.c: 66: TXSTA1 = 0x24;
  1360  0023A4  0E24               	movlw	36
  1361  0023A6  6EAC               	movwf	4012,c	;volatile
  1362                           
  1363                           ;eusart1.c: 69: SPBRG1 = 0xA0;
  1364  0023A8  0EA0               	movlw	160
  1365  0023AA  6EAF               	movwf	4015,c	;volatile
  1366                           
  1367                           ;eusart1.c: 72: SPBRGH1 = 0x01;
  1368  0023AC  0E01               	movlw	1
  1369  0023AE  6EB0               	movwf	4016,c	;volatile
  1370  0023B0  0012               	return		;funcret
  1371  0023B2                     __end_of_EUSART1_Initialize:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           intcon	equ	0xFF2
  1375                           intcon2	equ	0xFF1
  1376                           
  1377 ;; *************** function _INTERRUPT_InterruptManager *****************
  1378 ;; Defined at:
  1379 ;;		line 10 in file "mcc_generated_files/interrupt_manager.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;		None
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1393 ;;      Params:         0       0       0       0       0       0       0
  1394 ;;      Locals:         0       0       0       0       0       0       0
  1395 ;;      Temps:         14       0       0       0       0       0       0
  1396 ;;      Totals:        14       0       0       0       0       0       0
  1397 ;;Total ram usage:       14 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    5
  1400 ;; This function calls:
  1401 ;;		_INT0_ISR
  1402 ;;		_TMR0_ISR
  1403 ;; This function is called by:
  1404 ;;		Interrupt level 2
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	intcode
  1409  000008                     __pintcode:
  1410                           	opt stack 0
  1411  000008                     _INTERRUPT_InterruptManager:
  1412                           	opt stack 22
  1413                           
  1414                           ;incstack = 0
  1415  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1416  00000A  CFFA F04B          	movff	pclath,??_INTERRUPT_InterruptManager
  1417  00000E  CFFB F04C          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  1418  000012  CFE9 F04D          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  1419  000016  CFEA F04E          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  1420  00001A  CFE1 F04F          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  1421  00001E  CFE2 F050          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  1422  000022  CFD9 F051          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  1423  000026  CFDA F052          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  1424  00002A  CFF3 F053          	movff	prodl,??_INTERRUPT_InterruptManager+8
  1425  00002E  CFF4 F054          	movff	prodh,??_INTERRUPT_InterruptManager+9
  1426  000032  CFF6 F055          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  1427  000036  CFF7 F056          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  1428  00003A  CFF8 F057          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  1429  00003E  CFF5 F058          	movff	tablat,??_INTERRUPT_InterruptManager+13
  1430                           
  1431                           ;interrupt_manager.c: 13: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  1432  000042  BAF2               	btfsc	intcon,5,c	;volatile
  1433  000044  A4F2               	btfss	intcon,2,c	;volatile
  1434  000046  D003               	goto	i2l74
  1435                           
  1436                           ;interrupt_manager.c: 14: {
  1437                           ;interrupt_manager.c: 15: TMR0_ISR();
  1438  000048  EC25  F011         	call	_TMR0_ISR	;wreg free
  1439                           
  1440                           ;interrupt_manager.c: 16: }
  1441  00004C  D005               	goto	i2l78
  1442  00004E                     i2l74:
  1443                           
  1444                           ;interrupt_manager.c: 17: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  1445  00004E  B8F2               	btfsc	intcon,4,c	;volatile
  1446  000050  A2F2               	btfss	intcon,1,c	;volatile
  1447  000052  D002               	goto	i2l78
  1448                           
  1449                           ;interrupt_manager.c: 18: {
  1450                           ;interrupt_manager.c: 19: INT0_ISR();
  1451  000054  EC64  F00F         	call	_INT0_ISR	;wreg free
  1452  000058                     i2l78:
  1453  000058  C058  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  1454  00005C  C057  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  1455  000060  C056  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  1456  000064  C055  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  1457  000068  C054  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  1458  00006C  C053  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  1459  000070  C052  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  1460  000074  C051  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  1461  000078  C050  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1462  00007C  C04F  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1463  000080  C04E  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1464  000084  C04D  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1465  000088  C04C  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1466  00008C  C04B  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1467  000090  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1468  000092  0011               	retfie		f
  1469  000094                     __end_of_INTERRUPT_InterruptManager:
  1470                           	opt stack 0
  1471                           pclatu	equ	0xFFB
  1472                           pclath	equ	0xFFA
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           prodh	equ	0xFF4
  1478                           prodl	equ	0xFF3
  1479                           intcon	equ	0xFF2
  1480                           intcon2	equ	0xFF1
  1481                           fsr0h	equ	0xFEA
  1482                           fsr0l	equ	0xFE9
  1483                           fsr1h	equ	0xFE2
  1484                           fsr1l	equ	0xFE1
  1485                           fsr2h	equ	0xFDA
  1486                           fsr2l	equ	0xFD9
  1487                           
  1488 ;; *************** function _TMR0_ISR *****************
  1489 ;; Defined at:
  1490 ;;		line 83 in file "mcc_generated_files/tmr0.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, pclat, tosl, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1504 ;;      Params:         0       0       0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		Absolute function
  1513 ;;		_TMR0_DefaultInterruptHandler
  1514 ;; This function is called by:
  1515 ;;		_INTERRUPT_InterruptManager
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text12
  1520  00224A                     __ptext12:
  1521                           	opt stack 0
  1522  00224A                     _TMR0_ISR:
  1523                           	opt stack 25
  1524                           
  1525                           ;tmr0.c: 87: INTCONbits.TMR0IF = 0;
  1526                           
  1527                           ;incstack = 0
  1528  00224A  94F2               	bcf	intcon,2,c	;volatile
  1529                           
  1530                           ;tmr0.c: 91: TMR0H = timer0ReloadVal >> 8;
  1531  00224C  505A               	movf	_timer0ReloadVal+1,w,c	;volatile
  1532  00224E  6ED7               	movwf	4055,c	;volatile
  1533                           
  1534                           ;tmr0.c: 92: TMR0L = (uint8_t) timer0ReloadVal;
  1535  002250  C059  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  1536                           
  1537                           ;tmr0.c: 94: if(TMR0_InterruptHandler)
  1538  002254  0100               	movlb	0	; () banked
  1539  002256  517F               	movf	_TMR0_InterruptHandler& (0+255),w,b
  1540  002258  0100               	movlb	0	; () banked
  1541  00225A  1180               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  1542  00225C  B4D8               	btfsc	status,2,c
  1543  00225E  0012               	return	
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;tmr0.c: 95: {
  1547                           ;tmr0.c: 96: TMR0_InterruptHandler();
  1548  002260  D801               	call	i2u314_48
  1549  002262  0012               	return	
  1550  002264                     i2u314_48:
  1551  002264  0005               	push	
  1552  002266  0100               	movlb	0	; () banked
  1553  002268  6EFA               	movwf	pclath,c
  1554  00226A  517F               	movf	_TMR0_InterruptHandler& (0+255),w,b
  1555  00226C  6EFD               	movwf	tosl,c
  1556  00226E  5180               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  1557  002270  6EFE               	movwf	tosh,c
  1558  002272  50F8               	movf	tblptru,w,c
  1559  002274  6EFF               	movwf	tosu,c
  1560  002276  50FA               	movf	pclath,w,c
  1561  002278  0012               	return		;indir
  1562  00227A                     __end_of_TMR0_ISR:
  1563                           	opt stack 0
  1564                           tosu	equ	0xFFF
  1565                           tosh	equ	0xFFE
  1566                           tosl	equ	0xFFD
  1567                           pclatu	equ	0xFFB
  1568                           pclath	equ	0xFFA
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           prodh	equ	0xFF4
  1574                           prodl	equ	0xFF3
  1575                           intcon	equ	0xFF2
  1576                           intcon2	equ	0xFF1
  1577                           fsr0h	equ	0xFEA
  1578                           fsr0l	equ	0xFE9
  1579                           fsr1h	equ	0xFE2
  1580                           fsr1l	equ	0xFE1
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           status	equ	0xFD8
  1584                           
  1585 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  1586 ;; Defined at:
  1587 ;;		line 107 in file "mcc_generated_files/tmr0.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;		None
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1601 ;;      Params:         0       0       0       0       0       0       0
  1602 ;;      Locals:         0       0       0       0       0       0       0
  1603 ;;      Temps:          1       0       0       0       0       0       0
  1604 ;;      Totals:         1       0       0       0       0       0       0
  1605 ;;Total ram usage:        1 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_TMR0_Initialize
  1611 ;;		_TMR0_ISR
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text13
  1616  002334                     __ptext13:
  1617                           	opt stack 0
  1618  002334                     _TMR0_DefaultInterruptHandler:
  1619                           	opt stack 25
  1620                           
  1621                           ;tmr0.c: 108: LATBbits.LATB1 = ~LATBbits.LATB1;
  1622                           
  1623                           ;incstack = 0
  1624  002334  A28A               	btfss	3978,1,c	;volatile
  1625  002336  D002               	goto	i2u307_40
  1626  002338  0E01               	movlw	1
  1627  00233A  D001               	goto	i2u307_46
  1628  00233C                     i2u307_40:
  1629  00233C  0E00               	movlw	0
  1630  00233E                     i2u307_46:
  1631  00233E  0AFF               	xorlw	255
  1632  002340  6E01               	movwf	??_TMR0_DefaultInterruptHandler& (0+255),c
  1633  002342  4601               	rlncf	??_TMR0_DefaultInterruptHandler,f,c
  1634  002344  508A               	movf	3978,w,c	;volatile
  1635  002346  1801               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  1636  002348  0BFD               	andlw	-3
  1637  00234A  1801               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  1638  00234C  6E8A               	movwf	3978,c	;volatile
  1639  00234E  0012               	return		;funcret
  1640  002350                     __end_of_TMR0_DefaultInterruptHandler:
  1641                           	opt stack 0
  1642                           tosu	equ	0xFFF
  1643                           tosh	equ	0xFFE
  1644                           tosl	equ	0xFFD
  1645                           pclatu	equ	0xFFB
  1646                           pclath	equ	0xFFA
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           prodh	equ	0xFF4
  1652                           prodl	equ	0xFF3
  1653                           intcon	equ	0xFF2
  1654                           intcon2	equ	0xFF1
  1655                           fsr0h	equ	0xFEA
  1656                           fsr0l	equ	0xFE9
  1657                           fsr1h	equ	0xFE2
  1658                           fsr1l	equ	0xFE1
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _INT0_ISR *****************
  1664 ;; Defined at:
  1665 ;;		line 22 in file "mcc_generated_files/ext_int.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1679 ;;      Params:         0       0       0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0
  1682 ;;      Totals:         0       0       0       0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    4
  1686 ;; This function calls:
  1687 ;;		_TMR0_ReadTimer
  1688 ;;		_TMR0_Reload
  1689 ;;		_TMR0_StopTimer
  1690 ;;		___ftdiv
  1691 ;;		___ftmul
  1692 ;;		___lwtoft
  1693 ;;		_printf
  1694 ;;		i2_TMR0_StartTimer
  1695 ;; This function is called by:
  1696 ;;		_INTERRUPT_InterruptManager
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text14
  1701  001EC8                     __ptext14:
  1702                           	opt stack 0
  1703  001EC8                     _INT0_ISR:
  1704                           	opt stack 22
  1705                           
  1706                           ;ext_int.c: 24: TMR0_StopTimer();
  1707                           
  1708                           ;incstack = 0
  1709  001EC8  EC05  F012         	call	_TMR0_StopTimer	;wreg free
  1710                           
  1711                           ;ext_int.c: 25: reading = TMR0_ReadTimer();
  1712  001ECC  ECE4  F010         	call	_TMR0_ReadTimer	;wreg free
  1713  001ED0  C001  F05B         	movff	?_TMR0_ReadTimer,_reading
  1714  001ED4  C002  F05C         	movff	?_TMR0_ReadTimer+1,_reading+1
  1715                           
  1716                           ;ext_int.c: 27: result = 5050.0 * (float)reading / 3.0;
  1717  001ED8  0ED0               	movlw	208
  1718  001EDA  6E18               	movwf	___ftmul@f2,c
  1719  001EDC  0E9D               	movlw	157
  1720  001EDE  6E19               	movwf	___ftmul@f2+1,c
  1721  001EE0  0E45               	movlw	69
  1722  001EE2  6E1A               	movwf	___ftmul@f2+2,c
  1723  001EE4  C05B  F009         	movff	_reading,___lwtoft@c
  1724  001EE8  C05C  F00A         	movff	_reading+1,___lwtoft@c+1
  1725  001EEC  EC79  F011         	call	___lwtoft	;wreg free
  1726  001EF0  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1727  001EF4  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1728  001EF8  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1729  001EFC  EC5E  F00D         	call	___ftmul	;wreg free
  1730  001F00  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1731  001F04  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1732  001F08  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1733  001F0C  0E00               	movlw	0
  1734  001F0E  6E27               	movwf	___ftdiv@f2,c
  1735  001F10  0E40               	movlw	64
  1736  001F12  6E28               	movwf	___ftdiv@f2+1,c
  1737  001F14  0E40               	movlw	64
  1738  001F16  6E29               	movwf	___ftdiv@f2+2,c
  1739  001F18  EC52  F00E         	call	___ftdiv	;wreg free
  1740  001F1C  C024  F081         	movff	?___ftdiv,_result
  1741  001F20  C025  F082         	movff	?___ftdiv+1,_result+1
  1742  001F24  C026  F083         	movff	?___ftdiv+2,_result+2
  1743                           
  1744                           ;ext_int.c: 28: printf("Capacitance: %0.2f pF\r\n", result);
  1745  001F28  0E77               	movlw	low STR_1
  1746  001F2A  6E40               	movwf	printf@f,c
  1747  001F2C  0E06               	movlw	high STR_1
  1748  001F2E  6E41               	movwf	printf@f+1,c
  1749  001F30  C081  F042         	movff	_result,?_printf+2
  1750  001F34  C082  F043         	movff	_result+1,?_printf+3
  1751  001F38  C083  F044         	movff	_result+2,?_printf+4
  1752  001F3C  EC48  F003         	call	_printf	;wreg free
  1753                           
  1754                           ;ext_int.c: 30: TMR0_Reload();
  1755  001F40  ECFA  F011         	call	_TMR0_Reload	;wreg free
  1756                           
  1757                           ;ext_int.c: 31: TMR0_StartTimer();
  1758  001F44  EC03  F012         	call	i2_TMR0_StartTimer	;wreg free
  1759                           
  1760                           ;ext_int.c: 33: (INTCONbits.INT0IF = 0);
  1761  001F48  92F2               	bcf	intcon,1,c	;volatile
  1762  001F4A  0012               	return		;funcret
  1763  001F4C                     __end_of_INT0_ISR:
  1764                           	opt stack 0
  1765                           tosu	equ	0xFFF
  1766                           tosh	equ	0xFFE
  1767                           tosl	equ	0xFFD
  1768                           pclatu	equ	0xFFB
  1769                           pclath	equ	0xFFA
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           prodh	equ	0xFF4
  1775                           prodl	equ	0xFF3
  1776                           intcon	equ	0xFF2
  1777                           intcon2	equ	0xFF1
  1778                           fsr0h	equ	0xFEA
  1779                           fsr0l	equ	0xFE9
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function i2_TMR0_StartTimer *****************
  1787 ;; Defined at:
  1788 ;;		line 43 in file "mcc_generated_files/tmr0.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		None
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1802 ;;      Params:         0       0       0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_INT0_ISR
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text15
  1816  002406                     __ptext15:
  1817                           	opt stack 0
  1818  002406                     i2_TMR0_StartTimer:
  1819                           	opt stack 25
  1820                           
  1821                           ;tmr0.c: 46: T0CONbits.TMR0ON = 1;
  1822                           
  1823                           ;incstack = 0
  1824  002406  8ED5               	bsf	4053,7,c	;volatile
  1825  002408  0012               	return		;funcret
  1826  00240A                     __end_ofi2_TMR0_StartTimer:
  1827                           	opt stack 0
  1828                           tosu	equ	0xFFF
  1829                           tosh	equ	0xFFE
  1830                           tosl	equ	0xFFD
  1831                           pclatu	equ	0xFFB
  1832                           pclath	equ	0xFFA
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           prodh	equ	0xFF4
  1838                           prodl	equ	0xFF3
  1839                           intcon	equ	0xFF2
  1840                           intcon2	equ	0xFF1
  1841                           fsr0h	equ	0xFEA
  1842                           fsr0l	equ	0xFE9
  1843                           fsr1h	equ	0xFE2
  1844                           fsr1l	equ	0xFE1
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _printf *****************
  1850 ;; Defined at:
  1851 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1854 ;;		 -> STR_1(24), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  tmpval          4    9[BANK0 ] struct .
  1857 ;;  val             4    5[BANK0 ] unsigned long 
  1858 ;;  fval            3   19[BANK0 ] unsigned long 
  1859 ;;  cp              3    0        PTR const unsigned char 
  1860 ;;  prec            2   22[BANK0 ] int 
  1861 ;;  width           2   17[BANK0 ] int 
  1862 ;;  flag            2   15[BANK0 ] unsigned short 
  1863 ;;  exp             2   13[BANK0 ] int 
  1864 ;;  ap              2    3[BANK0 ] PTR void [1]
  1865 ;;		 -> ?_printf(2), 
  1866 ;;  len             2    0        unsigned int 
  1867 ;;  c               1   24[BANK0 ] char 
  1868 ;;  d               1    0        unsigned char 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  2   63[COMRAM] int 
  1871 ;; Registers used:
  1872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1878 ;;      Params:         5       0       0       0       0       0       0
  1879 ;;      Locals:         0      25       0       0       0       0       0
  1880 ;;      Temps:          6       0       0       0       0       0       0
  1881 ;;      Totals:        11      25       0       0       0       0       0
  1882 ;;Total ram usage:       36 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    3
  1885 ;; This function calls:
  1886 ;;		___awdiv
  1887 ;;		___ftadd
  1888 ;;		___ftge
  1889 ;;		___ftmul
  1890 ;;		___ftneg
  1891 ;;		___ftsub
  1892 ;;		___fttol
  1893 ;;		___lldiv
  1894 ;;		___llmod
  1895 ;;		___lltoft
  1896 ;;		___wmul
  1897 ;;		__div_to_l_
  1898 ;;		__tdiv_to_l_
  1899 ;;		_fround
  1900 ;;		_isdigit
  1901 ;;		_putch
  1902 ;;		_scale
  1903 ;; This function is called by:
  1904 ;;		_INT0_ISR
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text16
  1909  000690                     __ptext16:
  1910                           	opt stack 0
  1911  000690                     _printf:
  1912                           	opt stack 22
  1913                           
  1914                           ;doprnt.c: 466: va_list ap;
  1915                           ;doprnt.c: 499: signed char c;
  1916                           ;doprnt.c: 501: int width;
  1917                           ;doprnt.c: 504: int prec;
  1918                           ;doprnt.c: 508: unsigned short flag;
  1919                           ;doprnt.c: 515: char d;
  1920                           ;doprnt.c: 516: double fval;
  1921                           ;doprnt.c: 517: int exp;
  1922                           ;doprnt.c: 523: union {
  1923                           ;doprnt.c: 524: unsigned long vd;
  1924                           ;doprnt.c: 525: double integ;
  1925                           ;doprnt.c: 526: } tmpval;
  1926                           ;doprnt.c: 528: unsigned long val;
  1927                           ;doprnt.c: 529: unsigned len;
  1928                           ;doprnt.c: 530: const char * cp;
  1929                           ;doprnt.c: 533: *ap = __va_start();
  1930                           
  1931                           ;incstack = 0
  1932  000690  0E42               	movlw	low (?_printf+2)
  1933  000692  0100               	movlb	0	; () banked
  1934  000694  6F63               	movwf	printf@ap& (0+255),b
  1935  000696  0E00               	movlw	high (?_printf+2)
  1936  000698  0100               	movlb	0	; () banked
  1937  00069A  6F64               	movwf	(printf@ap+1)& (0+255),b
  1938                           
  1939                           ;doprnt.c: 536: while(c = *f++) {
  1940  00069C  EF31  F008         	goto	i2l2849
  1941  0006A0                     i2l2587:
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;doprnt.c: 538: if(c != '%')
  1945  0006A0  0E25               	movlw	37
  1946  0006A2  0100               	movlb	0	; () banked
  1947  0006A4  1978               	xorwf	printf@c& (0+255),w,b
  1948  0006A6  B4D8               	btfsc	status,2,c
  1949  0006A8  D006               	goto	i2l2591
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;doprnt.c: 540: {
  1953                           ;doprnt.c: 541: (putch(c) );
  1954  0006AA  0100               	movlb	0	; () banked
  1955  0006AC  5178               	movf	printf@c& (0+255),w,b
  1956  0006AE  ECF5  F011         	call	_putch
  1957                           
  1958                           ;doprnt.c: 542: continue;
  1959  0006B2  EF31  F008         	goto	i2l2849
  1960  0006B6                     i2l2591:
  1961                           
  1962                           ;doprnt.c: 543: }
  1963                           ;doprnt.c: 546: width = 0;
  1964  0006B6  0E00               	movlw	0
  1965  0006B8  0100               	movlb	0	; () banked
  1966  0006BA  6F72               	movwf	(printf@width+1)& (0+255),b
  1967  0006BC  0E00               	movlw	0
  1968  0006BE  6F71               	movwf	printf@width& (0+255),b
  1969                           
  1970                           ;doprnt.c: 548: flag = 0;
  1971  0006C0  0E00               	movlw	0
  1972  0006C2  0100               	movlb	0	; () banked
  1973  0006C4  6F70               	movwf	(printf@flag+1)& (0+255),b
  1974  0006C6  0E00               	movlw	0
  1975  0006C8  6F6F               	movwf	printf@flag& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 551: switch(*f) {
  1979                           
  1980                           ;doprnt.c: 550: for(;;) {
  1981  0006CA  D004               	goto	i2l2597
  1982  0006CC                     i2l2593:
  1983                           
  1984                           ;doprnt.c: 580: flag |= 0x04;
  1985  0006CC  0100               	movlb	0	; () banked
  1986  0006CE  856F               	bsf	printf@flag& (0+255),2,b
  1987                           
  1988                           ;doprnt.c: 581: f++;
  1989  0006D0  4A40               	infsnz	printf@f,f,c
  1990  0006D2  2A41               	incf	printf@f+1,f,c
  1991  0006D4                     i2l2597:
  1992  0006D4  C040  FFF6         	movff	printf@f,tblptrl
  1993  0006D8  C041  FFF7         	movff	printf@f+1,tblptrh
  1994  0006DC                     	if	0	;tblptru may be non-zero
  1995  0006DC                     	endif
  1996  0006DC                     	if	0	;tblptru may be non-zero
  1997  0006DC                     	endif
  1998  0006DC  0008               	tblrd		*
  1999  0006DE  50F5               	movf	tablat,w,c
  2000                           
  2001                           ; Switch size 1, requested type "space"
  2002                           ; Number of cases is 1, Range of values is 48 to 48
  2003                           ; switch strategies available:
  2004                           ; Name         Instructions Cycles
  2005                           ; simple_byte            4     3 (average)
  2006                           ;	Chosen strategy is simple_byte
  2007  0006E0  0A30               	xorlw	48	; case 48
  2008  0006E2  B4D8               	btfsc	status,2,c
  2009  0006E4  D7F3               	goto	i2l2593
  2010                           
  2011                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2012                           
  2013                           ;doprnt.c: 586: }
  2014                           
  2015                           ;doprnt.c: 585: break;
  2016  0006E6  C040  FFF6         	movff	printf@f,tblptrl
  2017  0006EA  C041  FFF7         	movff	printf@f+1,tblptrh
  2018  0006EE                     	if	0	;tblptru may be non-zero
  2019  0006EE                     	endif
  2020  0006EE                     	if	0	;tblptru may be non-zero
  2021  0006EE                     	endif
  2022  0006EE  0008               	tblrd		*
  2023  0006F0  50F5               	movf	tablat,w,c
  2024  0006F2  EC8B  F011         	call	_isdigit
  2025  0006F6  A0D8               	btfss	status,0,c
  2026  0006F8  D035               	goto	i2l2611
  2027                           
  2028                           ;doprnt.c: 598: width = 0;
  2029  0006FA  0E00               	movlw	0
  2030  0006FC  0100               	movlb	0	; () banked
  2031  0006FE  6F72               	movwf	(printf@width+1)& (0+255),b
  2032  000700  0E00               	movlw	0
  2033  000702  6F71               	movwf	printf@width& (0+255),b
  2034  000704                     i2l2603:
  2035                           
  2036                           ;doprnt.c: 600: width *= 10;
  2037  000704  C071  F00F         	movff	printf@width,___wmul@multiplier
  2038  000708  C072  F010         	movff	printf@width+1,___wmul@multiplier+1
  2039  00070C  0E00               	movlw	0
  2040  00070E  6E12               	movwf	___wmul@multiplicand+1,c
  2041  000710  0E0A               	movlw	10
  2042  000712  6E11               	movwf	___wmul@multiplicand,c
  2043  000714  EC54  F011         	call	___wmul	;wreg free
  2044  000718  C00F  F071         	movff	?___wmul,printf@width
  2045  00071C  C010  F072         	movff	?___wmul+1,printf@width+1
  2046                           
  2047                           ;doprnt.c: 601: width += *f++ - '0';
  2048  000720  0ED0               	movlw	208
  2049  000722  6E45               	movwf	??_printf& (0+255),c
  2050  000724  0EFF               	movlw	255
  2051  000726  6E46               	movwf	(??_printf+1)& (0+255),c
  2052  000728  C040  FFF6         	movff	printf@f,tblptrl
  2053  00072C  C041  FFF7         	movff	printf@f+1,tblptrh
  2054  000730                     	if	0	;tblptru may be non-zero
  2055  000730                     	endif
  2056  000730                     	if	0	;tblptru may be non-zero
  2057  000730                     	endif
  2058  000730  0008               	tblrd		*
  2059  000732  50F5               	movf	tablat,w,c
  2060  000734  6E47               	movwf	(??_printf+2)& (0+255),c
  2061  000736  6A48               	clrf	(??_printf+3)& (0+255),c
  2062  000738  5045               	movf	??_printf,w,c
  2063  00073A  2647               	addwf	??_printf+2,f,c
  2064  00073C  5046               	movf	??_printf+1,w,c
  2065  00073E  2248               	addwfc	??_printf+3,f,c
  2066  000740  5047               	movf	??_printf+2,w,c
  2067  000742  0100               	movlb	0	; () banked
  2068  000744  2771               	addwf	printf@width& (0+255),f,b
  2069  000746  5048               	movf	??_printf+3,w,c
  2070  000748  0100               	movlb	0	; () banked
  2071  00074A  2372               	addwfc	(printf@width+1)& (0+255),f,b
  2072                           
  2073                           ; BSR set to: 0
  2074  00074C  4A40               	infsnz	printf@f,f,c
  2075  00074E  2A41               	incf	printf@f+1,f,c
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2079  000750  C040  FFF6         	movff	printf@f,tblptrl
  2080  000754  C041  FFF7         	movff	printf@f+1,tblptrh
  2081  000758                     	if	0	;tblptru may be non-zero
  2082  000758                     	endif
  2083  000758                     	if	0	;tblptru may be non-zero
  2084  000758                     	endif
  2085  000758  0008               	tblrd		*
  2086  00075A  50F5               	movf	tablat,w,c
  2087  00075C  EC8B  F011         	call	_isdigit
  2088  000760  B0D8               	btfsc	status,0,c
  2089  000762  D7D0               	goto	i2l2603
  2090  000764                     i2l2611:
  2091                           
  2092                           ;doprnt.c: 608: }
  2093                           ;doprnt.c: 611: if(*f == '.') {
  2094  000764  C040  FFF6         	movff	printf@f,tblptrl
  2095  000768  C041  FFF7         	movff	printf@f+1,tblptrh
  2096  00076C                     	if	0	;tblptru may be non-zero
  2097  00076C                     	endif
  2098  00076C                     	if	0	;tblptru may be non-zero
  2099  00076C                     	endif
  2100  00076C  0008               	tblrd		*
  2101  00076E  50F5               	movf	tablat,w,c
  2102  000770  0A2E               	xorlw	46
  2103  000772  A4D8               	btfss	status,2,c
  2104  000774  D032               	goto	i2l2623
  2105                           
  2106                           ;doprnt.c: 612: flag |= 0x4000;
  2107  000776  0100               	movlb	0	; () banked
  2108  000778  8D70               	bsf	(printf@flag+1)& (0+255),6,b
  2109                           
  2110                           ;doprnt.c: 613: f++;
  2111  00077A  4A40               	infsnz	printf@f,f,c
  2112  00077C  2A41               	incf	printf@f+1,f,c
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;doprnt.c: 620: {
  2116                           ;doprnt.c: 621: prec = 0;
  2117  00077E  0E00               	movlw	0
  2118  000780  0100               	movlb	0	; () banked
  2119  000782  6F77               	movwf	(printf@prec+1)& (0+255),b
  2120  000784  0E00               	movlw	0
  2121  000786  6F76               	movwf	printf@prec& (0+255),b
  2122                           
  2123                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2124  000788  D01D               	goto	i2l2621
  2125  00078A                     i2l2617:
  2126                           
  2127                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2128  00078A  C076  F00F         	movff	printf@prec,___wmul@multiplier
  2129  00078E  C077  F010         	movff	printf@prec+1,___wmul@multiplier+1
  2130  000792  0E00               	movlw	0
  2131  000794  6E12               	movwf	___wmul@multiplicand+1,c
  2132  000796  0E0A               	movlw	10
  2133  000798  6E11               	movwf	___wmul@multiplicand,c
  2134  00079A  EC54  F011         	call	___wmul	;wreg free
  2135  00079E  C040  FFF6         	movff	printf@f,tblptrl
  2136  0007A2  C041  FFF7         	movff	printf@f+1,tblptrh
  2137  0007A6                     	if	0	;tblptru may be non-zero
  2138  0007A6                     	endif
  2139  0007A6                     	if	0	;tblptru may be non-zero
  2140  0007A6                     	endif
  2141  0007A6  0008               	tblrd		*
  2142  0007A8  50F5               	movf	tablat,w,c
  2143  0007AA  260F               	addwf	?___wmul,f,c
  2144  0007AC  0E00               	movlw	0
  2145  0007AE  2210               	addwfc	?___wmul+1,f,c
  2146  0007B0  0ED0               	movlw	208
  2147  0007B2  240F               	addwf	?___wmul,w,c
  2148  0007B4  0100               	movlb	0	; () banked
  2149  0007B6  6F76               	movwf	printf@prec& (0+255),b
  2150  0007B8  0EFF               	movlw	255
  2151  0007BA  2010               	addwfc	?___wmul+1,w,c
  2152  0007BC  0100               	movlb	0	; () banked
  2153  0007BE  6F77               	movwf	(printf@prec+1)& (0+255),b
  2154                           
  2155                           ; BSR set to: 0
  2156  0007C0  4A40               	infsnz	printf@f,f,c
  2157  0007C2  2A41               	incf	printf@f+1,f,c
  2158  0007C4                     i2l2621:
  2159                           
  2160                           ; BSR set to: 0
  2161  0007C4  C040  FFF6         	movff	printf@f,tblptrl
  2162  0007C8  C041  FFF7         	movff	printf@f+1,tblptrh
  2163  0007CC                     	if	0	;tblptru may be non-zero
  2164  0007CC                     	endif
  2165  0007CC                     	if	0	;tblptru may be non-zero
  2166  0007CC                     	endif
  2167  0007CC  0008               	tblrd		*
  2168  0007CE  50F5               	movf	tablat,w,c
  2169  0007D0  EC8B  F011         	call	_isdigit
  2170  0007D4  A0D8               	btfss	status,0,c
  2171  0007D6  D00C               	goto	i2l2631
  2172  0007D8  D7D8               	goto	i2l2617
  2173  0007DA                     i2l2623:
  2174                           
  2175                           ;doprnt.c: 626: prec = 0;
  2176  0007DA  0E00               	movlw	0
  2177  0007DC  0100               	movlb	0	; () banked
  2178  0007DE  6F77               	movwf	(printf@prec+1)& (0+255),b
  2179  0007E0  0E00               	movlw	0
  2180  0007E2  6F76               	movwf	printf@prec& (0+255),b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;doprnt.c: 628: flag |= 0x1000;
  2184  0007E4  0100               	movlb	0	; () banked
  2185  0007E6  8970               	bsf	(printf@flag+1)& (0+255),4,b
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;doprnt.c: 630: }
  2189                           ;doprnt.c: 635: switch(c = *f++) {
  2190  0007E8  D003               	goto	i2l2631
  2191  0007EA                     i2l2627:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 663: flag |= 0x400;
  2195  0007EA  0100               	movlb	0	; () banked
  2196  0007EC  8570               	bsf	(printf@flag+1)& (0+255),2,b
  2197                           
  2198                           ;doprnt.c: 664: break;
  2199  0007EE  D013               	goto	i2l2633
  2200  0007F0                     i2l2631:
  2201  0007F0  C040  FFF6         	movff	printf@f,tblptrl
  2202  0007F4  C041  FFF7         	movff	printf@f+1,tblptrh
  2203  0007F8  4A40               	infsnz	printf@f,f,c
  2204  0007FA  2A41               	incf	printf@f+1,f,c
  2205  0007FC                     	if	0	;tblptru may be non-zero
  2206  0007FC                     	endif
  2207  0007FC                     	if	0	;tblptru may be non-zero
  2208  0007FC                     	endif
  2209  0007FC  0008               	tblrd		*
  2210  0007FE  CFF5 F078          	movff	tablat,printf@c
  2211  000802  0100               	movlb	0	; () banked
  2212  000804  5178               	movf	printf@c& (0+255),w,b
  2213                           
  2214                           ; Switch size 1, requested type "space"
  2215                           ; Number of cases is 2, Range of values is 0 to 102
  2216                           ; switch strategies available:
  2217                           ; Name         Instructions Cycles
  2218                           ; simple_byte            7     4 (average)
  2219                           ;	Chosen strategy is simple_byte
  2220  000806  0A00               	xorlw	0	; case 0
  2221  000808  B4D8               	btfsc	status,2,c
  2222  00080A  0012               	return	
  2223  00080C  0A66               	xorlw	102	; case 102
  2224  00080E  B4D8               	btfsc	status,2,c
  2225  000810  D7EC               	goto	i2l2627
  2226  000812  EF31  F008         	goto	i2l2849
  2227  000816                     i2l2633:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 825: if(flag & (0x700)) {
  2231  000816  0E07               	movlw	7
  2232  000818  0100               	movlb	0	; () banked
  2233  00081A  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2234  00081C  B4D8               	btfsc	status,2,c
  2235  00081E  D350               	goto	i2l2793
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;doprnt.c: 827: if(flag & 0x1000)
  2239  000820  0100               	movlb	0	; () banked
  2240  000822  A970               	btfss	(printf@flag+1)& (0+255),4,b
  2241  000824  D005               	goto	i2l2639
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 829: prec = 6;
  2245  000826  0E00               	movlw	0
  2246  000828  0100               	movlb	0	; () banked
  2247  00082A  6F77               	movwf	(printf@prec+1)& (0+255),b
  2248  00082C  0E06               	movlw	6
  2249  00082E  6F76               	movwf	printf@prec& (0+255),b
  2250  000830                     i2l2639:
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2254  000830  C063  FFD9         	movff	printf@ap,fsr2l
  2255  000834  C064  FFDA         	movff	printf@ap+1,fsr2h
  2256  000838  CFDE F073          	movff	postinc2,printf@fval
  2257  00083C  CFDE F074          	movff	postinc2,printf@fval+1
  2258  000840  CFDD F075          	movff	postdec2,printf@fval+2
  2259                           
  2260                           ; BSR set to: 0
  2261  000844  0E03               	movlw	3
  2262  000846  0100               	movlb	0	; () banked
  2263  000848  2763               	addwf	printf@ap& (0+255),f,b
  2264  00084A  0E00               	movlw	0
  2265  00084C  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;doprnt.c: 831: if(fval < 0.0) {
  2269  00084E  0100               	movlb	0	; () banked
  2270  000850  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  2271  000852  D011               	goto	i2l2649
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 832: fval = -fval;
  2275  000854  C073  F001         	movff	printf@fval,___ftneg@f1
  2276  000858  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  2277  00085C  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  2278  000860  EC67  F011         	call	___ftneg	;wreg free
  2279  000864  C001  F073         	movff	?___ftneg,printf@fval
  2280  000868  C002  F074         	movff	?___ftneg+1,printf@fval+1
  2281  00086C  C003  F075         	movff	?___ftneg+2,printf@fval+2
  2282                           
  2283                           ;doprnt.c: 833: flag |= 0x03;
  2284  000870  0E03               	movlw	3
  2285  000872  0100               	movlb	0	; () banked
  2286  000874  136F               	iorwf	printf@flag& (0+255),f,b
  2287  000876                     i2l2649:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;doprnt.c: 834: }
  2291                           ;doprnt.c: 835: exp = 0;
  2292  000876  0E00               	movlw	0
  2293  000878  0100               	movlb	0	; () banked
  2294  00087A  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2295  00087C  0E00               	movlw	0
  2296  00087E  6F6D               	movwf	printf@exp& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;doprnt.c: 836: if( fval!=0) {
  2300  000880  0100               	movlb	0	; () banked
  2301  000882  5173               	movf	printf@fval& (0+255),w,b
  2302  000884  0100               	movlb	0	; () banked
  2303  000886  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2304  000888  0100               	movlb	0	; () banked
  2305  00088A  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2306  00088C  B4D8               	btfsc	status,2,c
  2307  00088E  D08B               	goto	i2l2677
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2311  000890  0E82               	movlw	130
  2312  000892  6E45               	movwf	??_printf& (0+255),c
  2313  000894  0EFF               	movlw	255
  2314  000896  6E46               	movwf	(??_printf+1)& (0+255),c
  2315  000898  C073  F047         	movff	printf@fval,??_printf+2
  2316  00089C  C074  F048         	movff	printf@fval+1,??_printf+3
  2317  0008A0  C075  F049         	movff	printf@fval+2,??_printf+4
  2318  0008A4  C076  F04A         	movff	printf@fval+3,??_printf+5
  2319  0008A8  0E10               	movlw	16
  2320  0008AA  D005               	goto	i2u264_40
  2321  0008AC                     i2u264_45:
  2322  0008AC  90D8               	bcf	status,0,c
  2323  0008AE  324A               	rrcf	??_printf+5,f,c
  2324  0008B0  3249               	rrcf	??_printf+4,f,c
  2325  0008B2  3248               	rrcf	??_printf+3,f,c
  2326  0008B4  3247               	rrcf	??_printf+2,f,c
  2327  0008B6                     i2u264_40:
  2328  0008B6  2EE8               	decfsz	wreg,f,c
  2329  0008B8  D7F9               	goto	i2u264_45
  2330  0008BA  5047               	movf	??_printf+2,w,c
  2331  0008BC  2445               	addwf	??_printf,w,c
  2332  0008BE  0100               	movlb	0	; () banked
  2333  0008C0  6F6D               	movwf	printf@exp& (0+255),b
  2334  0008C2  0E00               	movlw	0
  2335  0008C4  2046               	addwfc	??_printf+1,w,c
  2336  0008C6  0100               	movlb	0	; () banked
  2337  0008C8  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;doprnt.c: 838: exp--;
  2341  0008CA  0100               	movlb	0	; () banked
  2342  0008CC  076D               	decf	printf@exp& (0+255),f,b
  2343  0008CE  A0D8               	btfss	status,0,c
  2344  0008D0  076E               	decf	(printf@exp+1)& (0+255),f,b
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;doprnt.c: 839: exp *= 3;
  2348  0008D2  C06D  F00F         	movff	printf@exp,___wmul@multiplier
  2349  0008D6  C06E  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2350  0008DA  0E00               	movlw	0
  2351  0008DC  6E12               	movwf	___wmul@multiplicand+1,c
  2352  0008DE  0E03               	movlw	3
  2353  0008E0  6E11               	movwf	___wmul@multiplicand,c
  2354  0008E2  EC54  F011         	call	___wmul	;wreg free
  2355  0008E6  C00F  F06D         	movff	?___wmul,printf@exp
  2356  0008EA  C010  F06E         	movff	?___wmul+1,printf@exp+1
  2357                           
  2358                           ;doprnt.c: 840: exp /= 10;
  2359  0008EE  C06D  F007         	movff	printf@exp,___awdiv@dividend
  2360  0008F2  C06E  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2361  0008F6  0E00               	movlw	0
  2362  0008F8  6E0A               	movwf	___awdiv@divisor+1,c
  2363  0008FA  0E0A               	movlw	10
  2364  0008FC  6E09               	movwf	___awdiv@divisor,c
  2365  0008FE  ECA6  F00F         	call	___awdiv	;wreg free
  2366  000902  C007  F06D         	movff	?___awdiv,printf@exp
  2367  000906  C008  F06E         	movff	?___awdiv+1,printf@exp+1
  2368                           
  2369                           ;doprnt.c: 841: if(exp < 0)
  2370  00090A  0100               	movlb	0	; () banked
  2371  00090C  AF6E               	btfss	(printf@exp+1)& (0+255),7,b
  2372  00090E  D004               	goto	i2l2665
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 842: exp--;
  2376  000910  0100               	movlb	0	; () banked
  2377  000912  076D               	decf	printf@exp& (0+255),f,b
  2378  000914  A0D8               	btfss	status,0,c
  2379  000916  076E               	decf	(printf@exp+1)& (0+255),f,b
  2380  000918                     i2l2665:
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2384  000918  0100               	movlb	0	; () banked
  2385  00091A  516D               	movf	printf@exp& (0+255),w,b
  2386  00091C  0800               	sublw	0
  2387  00091E  EC40  F008         	call	_scale
  2388  000922  C024  F069         	movff	?_scale,printf@tmpval
  2389  000926  C025  F06A         	movff	?_scale+1,printf@tmpval+1
  2390  00092A  C026  F06B         	movff	?_scale+2,printf@tmpval+2
  2391                           
  2392                           ;doprnt.c: 847: tmpval.integ *= fval;
  2393  00092E  C069  F015         	movff	printf@tmpval,___ftmul@f1
  2394  000932  C06A  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2395  000936  C06B  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2396  00093A  C073  F018         	movff	printf@fval,___ftmul@f2
  2397  00093E  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  2398  000942  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2399  000946  EC5E  F00D         	call	___ftmul	;wreg free
  2400  00094A  C015  F069         	movff	?___ftmul,printf@tmpval
  2401  00094E  C016  F06A         	movff	?___ftmul+1,printf@tmpval+1
  2402  000952  C017  F06B         	movff	?___ftmul+2,printf@tmpval+2
  2403                           
  2404                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2405  000956  C069  F001         	movff	printf@tmpval,___ftge@ff1
  2406  00095A  C06A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2407  00095E  C06B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2408  000962  0E00               	movlw	0
  2409  000964  6E04               	movwf	___ftge@ff2,c
  2410  000966  0E80               	movlw	128
  2411  000968  6E05               	movwf	___ftge@ff2+1,c
  2412  00096A  0E3F               	movlw	63
  2413  00096C  6E06               	movwf	___ftge@ff2+2,c
  2414  00096E  EC1C  F00F         	call	___ftge	;wreg free
  2415  000972  B0D8               	btfsc	status,0,c
  2416  000974  D005               	goto	i2l2673
  2417                           
  2418                           ;doprnt.c: 849: exp--;
  2419  000976  0100               	movlb	0	; () banked
  2420  000978  076D               	decf	printf@exp& (0+255),f,b
  2421  00097A  A0D8               	btfss	status,0,c
  2422  00097C  076E               	decf	(printf@exp+1)& (0+255),f,b
  2423  00097E  D013               	goto	i2l2677
  2424  000980                     i2l2673:
  2425                           
  2426                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2427  000980  C069  F001         	movff	printf@tmpval,___ftge@ff1
  2428  000984  C06A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2429  000988  C06B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2430  00098C  0E00               	movlw	0
  2431  00098E  6E04               	movwf	___ftge@ff2,c
  2432  000990  0E20               	movlw	32
  2433  000992  6E05               	movwf	___ftge@ff2+1,c
  2434  000994  0E41               	movlw	65
  2435  000996  6E06               	movwf	___ftge@ff2+2,c
  2436  000998  EC1C  F00F         	call	___ftge	;wreg free
  2437  00099C  A0D8               	btfss	status,0,c
  2438  00099E  D003               	goto	i2l2677
  2439                           
  2440                           ;doprnt.c: 851: exp++;
  2441  0009A0  0100               	movlb	0	; () banked
  2442  0009A2  4B6D               	infsnz	printf@exp& (0+255),f,b
  2443  0009A4  2B6E               	incf	(printf@exp+1)& (0+255),f,b
  2444  0009A6                     i2l2677:
  2445                           
  2446                           ;doprnt.c: 852: }
  2447                           ;doprnt.c: 1112: if(prec <= 12)
  2448  0009A6  0100               	movlb	0	; () banked
  2449  0009A8  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  2450  0009AA  D008               	goto	i2l2679
  2451  0009AC  0100               	movlb	0	; () banked
  2452  0009AE  5177               	movf	(printf@prec+1)& (0+255),w,b
  2453  0009B0  E11D               	bnz	i2l2681
  2454  0009B2  0E0D               	movlw	13
  2455  0009B4  0100               	movlb	0	; () banked
  2456  0009B6  5D76               	subwf	printf@prec& (0+255),w,b
  2457  0009B8  B0D8               	btfsc	status,0,c
  2458  0009BA  D018               	goto	i2l2681
  2459  0009BC                     i2l2679:
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;doprnt.c: 1113: fval += fround(prec);
  2463  0009BC  C073  F02E         	movff	printf@fval,___ftadd@f1
  2464  0009C0  C074  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2465  0009C4  C075  F030         	movff	printf@fval+2,___ftadd@f1+2
  2466  0009C8  0100               	movlb	0	; () banked
  2467  0009CA  5176               	movf	printf@prec& (0+255),w,b
  2468  0009CC  EC38  F00A         	call	_fround
  2469  0009D0  C024  F031         	movff	?_fround,___ftadd@f2
  2470  0009D4  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2471  0009D8  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2472  0009DC  EC5B  F00B         	call	___ftadd	;wreg free
  2473  0009E0  C02E  F073         	movff	?___ftadd,printf@fval
  2474  0009E4  C02F  F074         	movff	?___ftadd+1,printf@fval+1
  2475  0009E8  C030  F075         	movff	?___ftadd+2,printf@fval+2
  2476  0009EC                     i2l2681:
  2477                           
  2478                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2479  0009EC  0100               	movlb	0	; () banked
  2480  0009EE  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2481  0009F0  D008               	goto	i2l2683
  2482  0009F2  0100               	movlb	0	; () banked
  2483  0009F4  516E               	movf	(printf@exp+1)& (0+255),w,b
  2484  0009F6  E126               	bnz	i2l2689
  2485  0009F8  0E0A               	movlw	10
  2486  0009FA  0100               	movlb	0	; () banked
  2487  0009FC  5D6D               	subwf	printf@exp& (0+255),w,b
  2488  0009FE  B0D8               	btfsc	status,0,c
  2489  000A00  D021               	goto	i2l2689
  2490  000A02                     i2l2683:
  2491                           
  2492                           ; BSR set to: 0
  2493  000A02  0100               	movlb	0	; () banked
  2494  000A04  5173               	movf	printf@fval& (0+255),w,b
  2495  000A06  0100               	movlb	0	; () banked
  2496  000A08  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2497  000A0A  0100               	movlb	0	; () banked
  2498  000A0C  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2499  000A0E  B4D8               	btfsc	status,2,c
  2500  000A10  D05B               	goto	i2l2703
  2501                           
  2502                           ; BSR set to: 0
  2503  000A12  C073  F02B         	movff	printf@fval,___fttol@f1
  2504  000A16  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  2505  000A1A  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  2506  000A1E  ECD8  F00D         	call	___fttol	;wreg free
  2507  000A22  502B               	movf	?___fttol,w,c
  2508  000A24  102C               	iorwf	?___fttol+1,w,c
  2509  000A26  102D               	iorwf	?___fttol+2,w,c
  2510  000A28  102E               	iorwf	?___fttol+3,w,c
  2511  000A2A  A4D8               	btfss	status,2,c
  2512  000A2C  D04D               	goto	i2l2703
  2513  000A2E  0100               	movlb	0	; () banked
  2514  000A30  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2515  000A32  D04A               	goto	i2l2703
  2516  000A34  0100               	movlb	0	; () banked
  2517  000A36  516E               	movf	(printf@exp+1)& (0+255),w,b
  2518  000A38  E105               	bnz	i2l2689
  2519  000A3A  0E02               	movlw	2
  2520  000A3C  0100               	movlb	0	; () banked
  2521  000A3E  5D6D               	subwf	printf@exp& (0+255),w,b
  2522  000A40  A0D8               	btfss	status,0,c
  2523  000A42  D042               	goto	i2l2703
  2524  000A44                     i2l2689:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2528  000A44  C069  F001         	movff	printf@tmpval,___ftge@ff1
  2529  000A48  C06A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2530  000A4C  C06B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2531  000A50  0E70               	movlw	112
  2532  000A52  6E04               	movwf	___ftge@ff2,c
  2533  000A54  0E89               	movlw	137
  2534  000A56  6E05               	movwf	___ftge@ff2+1,c
  2535  000A58  0E40               	movlw	64
  2536  000A5A  6E06               	movwf	___ftge@ff2+2,c
  2537  000A5C  EC1C  F00F         	call	___ftge	;wreg free
  2538  000A60  B0D8               	btfsc	status,0,c
  2539  000A62  D003               	goto	i2l2693
  2540                           
  2541                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2542  000A64  0100               	movlb	0	; () banked
  2543  000A66  0EF7               	movlw	247
  2544  000A68  D002               	goto	L1
  2545  000A6A                     i2l2693:
  2546                           
  2547                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2548  000A6A  0100               	movlb	0	; () banked
  2549  000A6C  0EF8               	movlw	248
  2550  000A6E                     L1:
  2551  000A6E  276D               	addwf	printf@exp& (0+255),f,b
  2552  000A70  0EFF               	movlw	255
  2553  000A72  236E               	addwfc	(printf@exp+1)& (0+255),f,b
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;doprnt.c: 1124: }
  2557                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2558                           
  2559                           ; BSR set to: 0
  2560  000A74  0100               	movlb	0	; () banked
  2561  000A76  516D               	movf	printf@exp& (0+255),w,b
  2562  000A78  EC40  F008         	call	_scale
  2563  000A7C  C024  F069         	movff	?_scale,printf@tmpval
  2564  000A80  C025  F06A         	movff	?_scale+1,printf@tmpval+1
  2565  000A84  C026  F06B         	movff	?_scale+2,printf@tmpval+2
  2566                           
  2567                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2568  000A88  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2569  000A8C  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2570  000A90  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2571  000A94  C069  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2572  000A98  C06A  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2573  000A9C  C06B  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2574  000AA0  EC31  F00C         	call	__tdiv_to_l_	;wreg free
  2575  000AA4  C001  F065         	movff	?__tdiv_to_l_,printf@val
  2576  000AA8  C002  F066         	movff	?__tdiv_to_l_+1,printf@val+1
  2577  000AAC  C003  F067         	movff	?__tdiv_to_l_+2,printf@val+2
  2578  000AB0  C004  F068         	movff	?__tdiv_to_l_+3,printf@val+3
  2579                           
  2580                           ;doprnt.c: 1129: fval = 0.0;
  2581  000AB4  0E00               	movlw	0
  2582  000AB6  0100               	movlb	0	; () banked
  2583  000AB8  6F73               	movwf	printf@fval& (0+255),b
  2584  000ABA  0E00               	movlw	0
  2585  000ABC  0100               	movlb	0	; () banked
  2586  000ABE  6F74               	movwf	(printf@fval+1)& (0+255),b
  2587  000AC0  0E00               	movlw	0
  2588  000AC2  0100               	movlb	0	; () banked
  2589  000AC4  6F75               	movwf	(printf@fval+2)& (0+255),b
  2590                           
  2591                           ;doprnt.c: 1130: } else {
  2592  000AC6  D033               	goto	i2l2707
  2593  000AC8                     i2l2703:
  2594                           
  2595                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2596  000AC8  C073  F02B         	movff	printf@fval,___fttol@f1
  2597  000ACC  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  2598  000AD0  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  2599  000AD4  ECD8  F00D         	call	___fttol	;wreg free
  2600  000AD8  C02B  F065         	movff	?___fttol,printf@val
  2601  000ADC  C02C  F066         	movff	?___fttol+1,printf@val+1
  2602  000AE0  C02D  F067         	movff	?___fttol+2,printf@val+2
  2603  000AE4  C02E  F068         	movff	?___fttol+3,printf@val+3
  2604                           
  2605                           ;doprnt.c: 1132: fval -= (double)val;
  2606  000AE8  C073  F03A         	movff	printf@fval,___ftsub@f1
  2607  000AEC  C074  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2608  000AF0  C075  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2609  000AF4  C065  F009         	movff	printf@val,___lltoft@c
  2610  000AF8  C066  F00A         	movff	printf@val+1,___lltoft@c+1
  2611  000AFC  C067  F00B         	movff	printf@val+2,___lltoft@c+2
  2612  000B00  C068  F00C         	movff	printf@val+3,___lltoft@c+3
  2613  000B04  EC94  F010         	call	___lltoft	;wreg free
  2614  000B08  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2615  000B0C  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2616  000B10  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2617  000B14  EC05  F011         	call	___ftsub	;wreg free
  2618  000B18  C03A  F073         	movff	?___ftsub,printf@fval
  2619  000B1C  C03B  F074         	movff	?___ftsub+1,printf@fval+1
  2620  000B20  C03C  F075         	movff	?___ftsub+2,printf@fval+2
  2621                           
  2622                           ;doprnt.c: 1133: exp = 0;
  2623  000B24  0E00               	movlw	0
  2624  000B26  0100               	movlb	0	; () banked
  2625  000B28  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2626  000B2A  0E00               	movlw	0
  2627  000B2C  6F6D               	movwf	printf@exp& (0+255),b
  2628  000B2E                     i2l2707:
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;doprnt.c: 1134: }
  2632                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2633  000B2E  0E01               	movlw	1
  2634  000B30  0100               	movlb	0	; () banked
  2635  000B32  6F78               	movwf	printf@c& (0+255),b
  2636  000B34                     i2l2709:
  2637                           
  2638                           ; BSR set to: 0
  2639  000B34  0E0A               	movlw	10
  2640  000B36  0100               	movlb	0	; () banked
  2641  000B38  1978               	xorwf	printf@c& (0+255),w,b
  2642  000B3A  B4D8               	btfsc	status,2,c
  2643  000B3C  D01E               	goto	i2l2721
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 1137: if(val < dpowers[c])
  2647                           
  2648                           ; BSR set to: 0
  2649                           
  2650                           ; BSR set to: 0
  2651  000B3E  0100               	movlb	0	; () banked
  2652  000B40  5178               	movf	printf@c& (0+255),w,b
  2653  000B42  0D04               	mullw	4
  2654  000B44  0E01               	movlw	low _dpowers
  2655  000B46  24F3               	addwf	prodl,w,c
  2656  000B48  6EF6               	movwf	tblptrl,c
  2657  000B4A  0E06               	movlw	high _dpowers
  2658  000B4C  20F4               	addwfc	prodh,w,c
  2659  000B4E  6EF7               	movwf	tblptrh,c
  2660  000B50                     	if	0	;There are less than 3 active tblptr bytes
  2661  000B50                     	endif
  2662  000B50  0009               	tblrd		*+
  2663  000B52  50F5               	movf	tablat,w,c
  2664  000B54  0100               	movlb	0	; () banked
  2665  000B56  5D65               	subwf	printf@val& (0+255),w,b
  2666  000B58  0009               	tblrd		*+
  2667  000B5A  50F5               	movf	tablat,w,c
  2668  000B5C  0100               	movlb	0	; () banked
  2669  000B5E  5966               	subwfb	(printf@val+1)& (0+255),w,b
  2670  000B60  0009               	tblrd		*+
  2671  000B62  50F5               	movf	tablat,w,c
  2672  000B64  0100               	movlb	0	; () banked
  2673  000B66  5967               	subwfb	(printf@val+2)& (0+255),w,b
  2674  000B68  0009               	tblrd		*+
  2675  000B6A  50F5               	movf	tablat,w,c
  2676  000B6C  0100               	movlb	0	; () banked
  2677  000B6E  5968               	subwfb	(printf@val+3)& (0+255),w,b
  2678  000B70  A0D8               	btfss	status,0,c
  2679  000B72  D003               	goto	i2l2721
  2680                           
  2681                           ; BSR set to: 0
  2682                           
  2683                           ; BSR set to: 0
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;doprnt.c: 1138: break;
  2687  000B74  0100               	movlb	0	; () banked
  2688  000B76  2B78               	incf	printf@c& (0+255),f,b
  2689  000B78  D7DD               	goto	i2l2709
  2690  000B7A                     i2l2721:
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;doprnt.c: 1142: width -= prec + c + exp;
  2694  000B7A  C078  F045         	movff	printf@c,??_printf
  2695  000B7E  6A46               	clrf	(??_printf+1)& (0+255),c
  2696  000B80  BE45               	btfsc	??_printf& (0+255),7,c
  2697  000B82  0646               	decf	(??_printf+1)& (0+255),f,c
  2698  000B84  0100               	movlb	0	; () banked
  2699  000B86  5176               	movf	printf@prec& (0+255),w,b
  2700  000B88  2645               	addwf	??_printf,f,c
  2701  000B8A  0100               	movlb	0	; () banked
  2702  000B8C  5177               	movf	(printf@prec+1)& (0+255),w,b
  2703  000B8E  2246               	addwfc	??_printf+1,f,c
  2704  000B90  0100               	movlb	0	; () banked
  2705  000B92  516D               	movf	printf@exp& (0+255),w,b
  2706  000B94  2645               	addwf	??_printf,f,c
  2707  000B96  0100               	movlb	0	; () banked
  2708  000B98  516E               	movf	(printf@exp+1)& (0+255),w,b
  2709  000B9A  2246               	addwfc	??_printf+1,f,c
  2710  000B9C  5045               	movf	??_printf,w,c
  2711  000B9E  0100               	movlb	0	; () banked
  2712  000BA0  5F71               	subwf	printf@width& (0+255),f,b
  2713  000BA2  5046               	movf	??_printf+1,w,c
  2714  000BA4  0100               	movlb	0	; () banked
  2715  000BA6  5B72               	subwfb	(printf@width+1)& (0+255),f,b
  2716                           
  2717                           ;doprnt.c: 1143: if(
  2718                           ;doprnt.c: 1147: prec)
  2719  000BA8  0100               	movlb	0	; () banked
  2720  000BAA  5176               	movf	printf@prec& (0+255),w,b
  2721  000BAC  0100               	movlb	0	; () banked
  2722  000BAE  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2723  000BB0  B4D8               	btfsc	status,2,c
  2724  000BB2  D004               	goto	i2l2725
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1148: width--;
  2728  000BB4  0100               	movlb	0	; () banked
  2729  000BB6  0771               	decf	printf@width& (0+255),f,b
  2730  000BB8  A0D8               	btfss	status,0,c
  2731  000BBA  0772               	decf	(printf@width+1)& (0+255),f,b
  2732  000BBC                     i2l2725:
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;doprnt.c: 1149: if(flag & 0x03)
  2736  000BBC  0E03               	movlw	3
  2737  000BBE  0100               	movlb	0	; () banked
  2738  000BC0  156F               	andwf	printf@flag& (0+255),w,b
  2739  000BC2  6E45               	movwf	??_printf& (0+255),c
  2740  000BC4  0E00               	movlw	0
  2741  000BC6  0100               	movlb	0	; () banked
  2742  000BC8  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2743  000BCA  6E46               	movwf	(??_printf+1)& (0+255),c
  2744  000BCC  5045               	movf	??_printf,w,c
  2745  000BCE  1046               	iorwf	??_printf+1,w,c
  2746  000BD0  B4D8               	btfsc	status,2,c
  2747  000BD2  D004               	goto	i2l2729
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;doprnt.c: 1150: width--;
  2751  000BD4  0100               	movlb	0	; () banked
  2752  000BD6  0771               	decf	printf@width& (0+255),f,b
  2753  000BD8  A0D8               	btfss	status,0,c
  2754  000BDA  0772               	decf	(printf@width+1)& (0+255),f,b
  2755  000BDC                     i2l2729:
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;doprnt.c: 1153: if(flag & 0x04) {
  2759  000BDC  0100               	movlb	0	; () banked
  2760  000BDE  A56F               	btfss	printf@flag& (0+255),2,b
  2761  000BE0  D029               	goto	i2l2745
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;doprnt.c: 1157: if(flag & 0x03)
  2765  000BE2  0E03               	movlw	3
  2766  000BE4  0100               	movlb	0	; () banked
  2767  000BE6  156F               	andwf	printf@flag& (0+255),w,b
  2768  000BE8  6E45               	movwf	??_printf& (0+255),c
  2769  000BEA  0E00               	movlw	0
  2770  000BEC  0100               	movlb	0	; () banked
  2771  000BEE  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2772  000BF0  6E46               	movwf	(??_printf+1)& (0+255),c
  2773  000BF2  5045               	movf	??_printf,w,c
  2774  000BF4  1046               	iorwf	??_printf+1,w,c
  2775  000BF6  B4D8               	btfsc	status,2,c
  2776  000BF8  D00B               	goto	i2l2739
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;doprnt.c: 1159: (putch('-') );
  2780  000BFA  0E2D               	movlw	45
  2781  000BFC  ECF5  F011         	call	_putch
  2782                           
  2783                           ;doprnt.c: 1168: while(width > 0) {
  2784  000C00  D007               	goto	i2l2739
  2785  000C02                     i2l2735:
  2786                           
  2787                           ;doprnt.c: 1169: (putch('0') );
  2788  000C02  0E30               	movlw	48
  2789  000C04  ECF5  F011         	call	_putch
  2790                           
  2791                           ;doprnt.c: 1170: width--;
  2792  000C08  0100               	movlb	0	; () banked
  2793  000C0A  0771               	decf	printf@width& (0+255),f,b
  2794  000C0C  A0D8               	btfss	status,0,c
  2795  000C0E  0772               	decf	(printf@width+1)& (0+255),f,b
  2796  000C10                     i2l2739:
  2797  000C10  0100               	movlb	0	; () banked
  2798  000C12  BF72               	btfsc	(printf@width+1)& (0+255),7,b
  2799  000C14  D06F               	goto	i2l2757
  2800  000C16  0100               	movlb	0	; () banked
  2801  000C18  5172               	movf	(printf@width+1)& (0+255),w,b
  2802  000C1A  E1F3               	bnz	i2l2735
  2803  000C1C  0100               	movlb	0	; () banked
  2804  000C1E  0571               	decf	printf@width& (0+255),w,b
  2805  000C20  A0D8               	btfss	status,0,c
  2806  000C22  D068               	goto	i2l2757
  2807  000C24  D7EE               	goto	i2l2735
  2808  000C26                     i2l2741:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;doprnt.c: 1181: (putch(' ') );
  2812  000C26  0E20               	movlw	32
  2813  000C28  ECF5  F011         	call	_putch
  2814                           
  2815                           ;doprnt.c: 1182: width--;
  2816  000C2C  0100               	movlb	0	; () banked
  2817  000C2E  0771               	decf	printf@width& (0+255),f,b
  2818  000C30  A0D8               	btfss	status,0,c
  2819  000C32  0772               	decf	(printf@width+1)& (0+255),f,b
  2820  000C34                     i2l2745:
  2821                           
  2822                           ; BSR set to: 0
  2823  000C34  0100               	movlb	0	; () banked
  2824  000C36  BF72               	btfsc	(printf@width+1)& (0+255),7,b
  2825  000C38  D007               	goto	i2l2747
  2826  000C3A  0100               	movlb	0	; () banked
  2827  000C3C  5172               	movf	(printf@width+1)& (0+255),w,b
  2828  000C3E  E1F3               	bnz	i2l2741
  2829  000C40  0100               	movlb	0	; () banked
  2830  000C42  0571               	decf	printf@width& (0+255),w,b
  2831  000C44  B0D8               	btfsc	status,0,c
  2832  000C46  D7EF               	goto	i2l2741
  2833  000C48                     i2l2747:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;doprnt.c: 1183: }
  2837                           ;doprnt.c: 1188: if(flag & 0x03)
  2838  000C48  0E03               	movlw	3
  2839  000C4A  0100               	movlb	0	; () banked
  2840  000C4C  156F               	andwf	printf@flag& (0+255),w,b
  2841  000C4E  6E45               	movwf	??_printf& (0+255),c
  2842  000C50  0E00               	movlw	0
  2843  000C52  0100               	movlb	0	; () banked
  2844  000C54  1570               	andwf	(printf@flag+1)& (0+255),w,b
  2845  000C56  6E46               	movwf	(??_printf+1)& (0+255),c
  2846  000C58  5045               	movf	??_printf,w,c
  2847  000C5A  1046               	iorwf	??_printf+1,w,c
  2848  000C5C  B4D8               	btfsc	status,2,c
  2849  000C5E  D04A               	goto	i2l2757
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;doprnt.c: 1190: (putch('-') );
  2853  000C60  0E2D               	movlw	45
  2854  000C62  ECF5  F011         	call	_putch
  2855                           
  2856                           ;doprnt.c: 1195: }
  2857                           ;doprnt.c: 1196: while(c--) {
  2858  000C66  D046               	goto	i2l2757
  2859  000C68                     i2l2751:
  2860                           
  2861                           ;doprnt.c: 1200: {
  2862                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2863  000C68  C065  F001         	movff	printf@val,___lldiv@dividend
  2864  000C6C  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  2865  000C70  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  2866  000C74  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  2867  000C78  0100               	movlb	0	; () banked
  2868  000C7A  5178               	movf	printf@c& (0+255),w,b
  2869  000C7C  0D04               	mullw	4
  2870  000C7E  0E01               	movlw	low _dpowers
  2871  000C80  24F3               	addwf	prodl,w,c
  2872  000C82  6EF6               	movwf	tblptrl,c
  2873  000C84  0E06               	movlw	high _dpowers
  2874  000C86  20F4               	addwfc	prodh,w,c
  2875  000C88  6EF7               	movwf	tblptrh,c
  2876  000C8A                     	if	0	;There are less than 3 active tblptr bytes
  2877  000C8A                     	endif
  2878  000C8A  0009               	tblrd		*+
  2879  000C8C  CFF5 F005          	movff	tablat,___lldiv@divisor
  2880  000C90  0009               	tblrd		*+
  2881  000C92  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2882  000C96  0009               	tblrd		*+
  2883  000C98  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2884  000C9C  000A               	tblrd		*-
  2885  000C9E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2886  000CA2  ECE8  F00F         	call	___lldiv	;wreg free
  2887  000CA6  C001  F069         	movff	?___lldiv,printf@tmpval
  2888  000CAA  C002  F06A         	movff	?___lldiv+1,printf@tmpval+1
  2889  000CAE  C003  F06B         	movff	?___lldiv+2,printf@tmpval+2
  2890  000CB2  C004  F06C         	movff	?___lldiv+3,printf@tmpval+3
  2891                           
  2892                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2893  000CB6  C069  F001         	movff	printf@tmpval,___llmod@dividend
  2894  000CBA  C06A  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2895  000CBE  C06B  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2896  000CC2  C06C  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2897  000CC6  0E0A               	movlw	10
  2898  000CC8  6E05               	movwf	___llmod@divisor,c
  2899  000CCA  0E00               	movlw	0
  2900  000CCC  6E06               	movwf	___llmod@divisor+1,c
  2901  000CCE  0E00               	movlw	0
  2902  000CD0  6E07               	movwf	___llmod@divisor+2,c
  2903  000CD2  0E00               	movlw	0
  2904  000CD4  6E08               	movwf	___llmod@divisor+3,c
  2905  000CD6  EC61  F010         	call	___llmod	;wreg free
  2906  000CDA  C001  F069         	movff	?___llmod,printf@tmpval
  2907  000CDE  C002  F06A         	movff	?___llmod+1,printf@tmpval+1
  2908  000CE2  C003  F06B         	movff	?___llmod+2,printf@tmpval+2
  2909  000CE6  C004  F06C         	movff	?___llmod+3,printf@tmpval+3
  2910                           
  2911                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2912  000CEA  0100               	movlb	0	; () banked
  2913  000CEC  5169               	movf	printf@tmpval& (0+255),w,b
  2914  000CEE  0F30               	addlw	48
  2915  000CF0  ECF5  F011         	call	_putch
  2916  000CF4                     i2l2757:
  2917  000CF4  0100               	movlb	0	; () banked
  2918  000CF6  0778               	decf	printf@c& (0+255),f,b
  2919  000CF8  0100               	movlb	0	; () banked
  2920  000CFA  2978               	incf	printf@c& (0+255),w,b
  2921  000CFC  B4D8               	btfsc	status,2,c
  2922  000CFE  D008               	goto	i2l2763
  2923  000D00  D7B3               	goto	i2l2751
  2924  000D02                     i2l2759:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;doprnt.c: 1208: (putch('0') );
  2928  000D02  0E30               	movlw	48
  2929  000D04  ECF5  F011         	call	_putch
  2930                           
  2931                           ;doprnt.c: 1209: exp--;
  2932  000D08  0100               	movlb	0	; () banked
  2933  000D0A  076D               	decf	printf@exp& (0+255),f,b
  2934  000D0C  A0D8               	btfss	status,0,c
  2935  000D0E  076E               	decf	(printf@exp+1)& (0+255),f,b
  2936  000D10                     i2l2763:
  2937                           
  2938                           ; BSR set to: 0
  2939  000D10  0100               	movlb	0	; () banked
  2940  000D12  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2941  000D14  D007               	goto	i2l2765
  2942  000D16  0100               	movlb	0	; () banked
  2943  000D18  516E               	movf	(printf@exp+1)& (0+255),w,b
  2944  000D1A  E1F3               	bnz	i2l2759
  2945  000D1C  0100               	movlb	0	; () banked
  2946  000D1E  056D               	decf	printf@exp& (0+255),w,b
  2947  000D20  B0D8               	btfsc	status,0,c
  2948  000D22  D7EF               	goto	i2l2759
  2949  000D24                     i2l2765:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;doprnt.c: 1210: }
  2953                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2954  000D24  0100               	movlb	0	; () banked
  2955  000D26  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  2956  000D28  D00C               	goto	i2l306
  2957  000D2A  0100               	movlb	0	; () banked
  2958  000D2C  5177               	movf	(printf@prec+1)& (0+255),w,b
  2959  000D2E  E105               	bnz	i2u286_40
  2960  000D30  0E09               	movlw	9
  2961  000D32  0100               	movlb	0	; () banked
  2962  000D34  5D76               	subwf	printf@prec& (0+255),w,b
  2963  000D36  A0D8               	btfss	status,0,c
  2964  000D38  D004               	goto	i2l306
  2965  000D3A                     i2u286_40:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2969  000D3A  0E08               	movlw	8
  2970  000D3C  0100               	movlb	0	; () banked
  2971  000D3E  6F78               	movwf	printf@c& (0+255),b
  2972  000D40  D002               	goto	i2l2769
  2973  000D42                     i2l306:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;doprnt.c: 1213: else
  2977                           ;doprnt.c: 1214: c = prec;
  2978  000D42  C076  F078         	movff	printf@prec,printf@c
  2979  000D46                     i2l2769:
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;doprnt.c: 1215: prec -= c;
  2983  000D46  0100               	movlb	0	; () banked
  2984  000D48  5178               	movf	printf@c& (0+255),w,b
  2985  000D4A  0100               	movlb	0	; () banked
  2986  000D4C  5F76               	subwf	printf@prec& (0+255),f,b
  2987  000D4E  0E00               	movlw	0
  2988  000D50  0100               	movlb	0	; () banked
  2989  000D52  BF78               	btfsc	printf@c& (0+255),7,b
  2990  000D54  0EFF               	movlw	255
  2991  000D56  0100               	movlb	0	; () banked
  2992  000D58  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;doprnt.c: 1219: if(c)
  2996  000D5A  0100               	movlb	0	; () banked
  2997  000D5C  5178               	movf	printf@c& (0+255),w,b
  2998  000D5E  0100               	movlb	0	; () banked
  2999  000D60  B4D8               	btfsc	status,2,c
  3000  000D62  D003               	goto	i2l2775
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;doprnt.c: 1221: (putch('.') );
  3004  000D64  0E2E               	movlw	46
  3005  000D66  ECF5  F011         	call	_putch
  3006  000D6A                     i2l2775:
  3007                           
  3008                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3009  000D6A  0100               	movlb	0	; () banked
  3010  000D6C  5178               	movf	printf@c& (0+255),w,b
  3011  000D6E  EC40  F008         	call	_scale
  3012  000D72  C024  F060         	movff	?_scale,_printf$1307
  3013  000D76  C025  F061         	movff	?_scale+1,_printf$1307+1
  3014  000D7A  C026  F062         	movff	?_scale+2,_printf$1307+2
  3015                           
  3016                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3017  000D7E  C073  F018         	movff	printf@fval,___ftmul@f2
  3018  000D82  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  3019  000D86  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  3020  000D8A  C060  F015         	movff	_printf$1307,___ftmul@f1
  3021  000D8E  C061  F016         	movff	_printf$1307+1,___ftmul@f1+1
  3022  000D92  C062  F017         	movff	_printf$1307+2,___ftmul@f1+2
  3023  000D96  EC5E  F00D         	call	___ftmul	;wreg free
  3024  000D9A  C015  F02B         	movff	?___ftmul,___fttol@f1
  3025  000D9E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  3026  000DA2  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  3027  000DA6  ECD8  F00D         	call	___fttol	;wreg free
  3028  000DAA  C02B  F065         	movff	?___fttol,printf@val
  3029  000DAE  C02C  F066         	movff	?___fttol+1,printf@val+1
  3030  000DB2  C02D  F067         	movff	?___fttol+2,printf@val+2
  3031  000DB6  C02E  F068         	movff	?___fttol+3,printf@val+3
  3032                           
  3033                           ;doprnt.c: 1228: while(c--) {
  3034  000DBA  D06D               	goto	i2l2785
  3035  000DBC                     i2l2779:
  3036                           
  3037                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3038  000DBC  C065  F001         	movff	printf@val,___lldiv@dividend
  3039  000DC0  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  3040  000DC4  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  3041  000DC8  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  3042  000DCC  0100               	movlb	0	; () banked
  3043  000DCE  5178               	movf	printf@c& (0+255),w,b
  3044  000DD0  0D04               	mullw	4
  3045  000DD2  0E01               	movlw	low _dpowers
  3046  000DD4  24F3               	addwf	prodl,w,c
  3047  000DD6  6EF6               	movwf	tblptrl,c
  3048  000DD8  0E06               	movlw	high _dpowers
  3049  000DDA  20F4               	addwfc	prodh,w,c
  3050  000DDC  6EF7               	movwf	tblptrh,c
  3051  000DDE                     	if	0	;There are less than 3 active tblptr bytes
  3052  000DDE                     	endif
  3053  000DDE  0009               	tblrd		*+
  3054  000DE0  CFF5 F005          	movff	tablat,___lldiv@divisor
  3055  000DE4  0009               	tblrd		*+
  3056  000DE6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3057  000DEA  0009               	tblrd		*+
  3058  000DEC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3059  000DF0  000A               	tblrd		*-
  3060  000DF2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3061  000DF6  ECE8  F00F         	call	___lldiv	;wreg free
  3062  000DFA  C001  F069         	movff	?___lldiv,printf@tmpval
  3063  000DFE  C002  F06A         	movff	?___lldiv+1,printf@tmpval+1
  3064  000E02  C003  F06B         	movff	?___lldiv+2,printf@tmpval+2
  3065  000E06  C004  F06C         	movff	?___lldiv+3,printf@tmpval+3
  3066                           
  3067                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3068  000E0A  C069  F001         	movff	printf@tmpval,___llmod@dividend
  3069  000E0E  C06A  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  3070  000E12  C06B  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  3071  000E16  C06C  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  3072  000E1A  0E0A               	movlw	10
  3073  000E1C  6E05               	movwf	___llmod@divisor,c
  3074  000E1E  0E00               	movlw	0
  3075  000E20  6E06               	movwf	___llmod@divisor+1,c
  3076  000E22  0E00               	movlw	0
  3077  000E24  6E07               	movwf	___llmod@divisor+2,c
  3078  000E26  0E00               	movlw	0
  3079  000E28  6E08               	movwf	___llmod@divisor+3,c
  3080  000E2A  EC61  F010         	call	___llmod	;wreg free
  3081  000E2E  C001  F069         	movff	?___llmod,printf@tmpval
  3082  000E32  C002  F06A         	movff	?___llmod+1,printf@tmpval+1
  3083  000E36  C003  F06B         	movff	?___llmod+2,printf@tmpval+2
  3084  000E3A  C004  F06C         	movff	?___llmod+3,printf@tmpval+3
  3085                           
  3086                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3087  000E3E  0100               	movlb	0	; () banked
  3088  000E40  5169               	movf	printf@tmpval& (0+255),w,b
  3089  000E42  0F30               	addlw	48
  3090  000E44  ECF5  F011         	call	_putch
  3091                           
  3092                           ;doprnt.c: 1232: val %= dpowers[c];
  3093  000E48  C065  F001         	movff	printf@val,___llmod@dividend
  3094  000E4C  C066  F002         	movff	printf@val+1,___llmod@dividend+1
  3095  000E50  C067  F003         	movff	printf@val+2,___llmod@dividend+2
  3096  000E54  C068  F004         	movff	printf@val+3,___llmod@dividend+3
  3097  000E58  0100               	movlb	0	; () banked
  3098  000E5A  5178               	movf	printf@c& (0+255),w,b
  3099  000E5C  0D04               	mullw	4
  3100  000E5E  0E01               	movlw	low _dpowers
  3101  000E60  24F3               	addwf	prodl,w,c
  3102  000E62  6EF6               	movwf	tblptrl,c
  3103  000E64  0E06               	movlw	high _dpowers
  3104  000E66  20F4               	addwfc	prodh,w,c
  3105  000E68  6EF7               	movwf	tblptrh,c
  3106  000E6A                     	if	0	;There are less than 3 active tblptr bytes
  3107  000E6A                     	endif
  3108  000E6A  0009               	tblrd		*+
  3109  000E6C  CFF5 F005          	movff	tablat,___llmod@divisor
  3110  000E70  0009               	tblrd		*+
  3111  000E72  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3112  000E76  0009               	tblrd		*+
  3113  000E78  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3114  000E7C  000A               	tblrd		*-
  3115  000E7E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3116  000E82  EC61  F010         	call	___llmod	;wreg free
  3117  000E86  C001  F065         	movff	?___llmod,printf@val
  3118  000E8A  C002  F066         	movff	?___llmod+1,printf@val+1
  3119  000E8E  C003  F067         	movff	?___llmod+2,printf@val+2
  3120  000E92  C004  F068         	movff	?___llmod+3,printf@val+3
  3121  000E96                     i2l2785:
  3122  000E96  0100               	movlb	0	; () banked
  3123  000E98  0778               	decf	printf@c& (0+255),f,b
  3124  000E9A  0100               	movlb	0	; () banked
  3125  000E9C  2978               	incf	printf@c& (0+255),w,b
  3126  000E9E  B4D8               	btfsc	status,2,c
  3127  000EA0  D008               	goto	i2l2791
  3128  000EA2  D78C               	goto	i2l2779
  3129  000EA4                     i2l2787:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;doprnt.c: 1236: (putch('0') );
  3133  000EA4  0E30               	movlw	48
  3134  000EA6  ECF5  F011         	call	_putch
  3135                           
  3136                           ;doprnt.c: 1237: prec--;
  3137  000EAA  0100               	movlb	0	; () banked
  3138  000EAC  0776               	decf	printf@prec& (0+255),f,b
  3139  000EAE  A0D8               	btfss	status,0,c
  3140  000EB0  0777               	decf	(printf@prec+1)& (0+255),f,b
  3141  000EB2                     i2l2791:
  3142                           
  3143                           ; BSR set to: 0
  3144  000EB2  0100               	movlb	0	; () banked
  3145  000EB4  5176               	movf	printf@prec& (0+255),w,b
  3146  000EB6  0100               	movlb	0	; () banked
  3147  000EB8  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  3148  000EBA  B4D8               	btfsc	status,2,c
  3149  000EBC  D0D2               	goto	i2l2849
  3150  000EBE  D7F2               	goto	i2l2787
  3151  000EC0                     i2l2793:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 1246: }
  3155                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3156  000EC0  0100               	movlb	0	; () banked
  3157  000EC2  5176               	movf	printf@prec& (0+255),w,b
  3158  000EC4  0100               	movlb	0	; () banked
  3159  000EC6  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  3160  000EC8  A4D8               	btfss	status,2,c
  3161  000ECA  D00D               	goto	i2l2799
  3162                           
  3163                           ; BSR set to: 0
  3164  000ECC  0100               	movlb	0	; () banked
  3165  000ECE  5165               	movf	printf@val& (0+255),w,b
  3166  000ED0  0100               	movlb	0	; () banked
  3167  000ED2  1166               	iorwf	(printf@val+1)& (0+255),w,b
  3168  000ED4  0100               	movlb	0	; () banked
  3169  000ED6  1167               	iorwf	(printf@val+2)& (0+255),w,b
  3170  000ED8  0100               	movlb	0	; () banked
  3171  000EDA  1168               	iorwf	(printf@val+3)& (0+255),w,b
  3172  000EDC  A4D8               	btfss	status,2,c
  3173  000EDE  D003               	goto	i2l2799
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;doprnt.c: 1291: prec++;
  3177  000EE0  0100               	movlb	0	; () banked
  3178  000EE2  4B76               	infsnz	printf@prec& (0+255),f,b
  3179  000EE4  2B77               	incf	(printf@prec+1)& (0+255),f,b
  3180  000EE6                     i2l2799:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;doprnt.c: 1339: if(c < prec)
  3184  000EE6  0E80               	movlw	128
  3185  000EE8  0100               	movlb	0	; () banked
  3186  000EEA  BF78               	btfsc	printf@c& (0+255),7,b
  3187  000EEC  0E7F               	movlw	127
  3188  000EEE  6E45               	movwf	??_printf& (0+255),c
  3189  000EF0  0100               	movlb	0	; () banked
  3190  000EF2  5176               	movf	printf@prec& (0+255),w,b
  3191  000EF4  0100               	movlb	0	; () banked
  3192  000EF6  5D78               	subwf	printf@c& (0+255),w,b
  3193  000EF8  0100               	movlb	0	; () banked
  3194  000EFA  5177               	movf	(printf@prec+1)& (0+255),w,b
  3195  000EFC  0A80               	xorlw	128
  3196  000EFE  5845               	subwfb	??_printf& (0+255),w,c
  3197  000F00  B0D8               	btfsc	status,0,c
  3198  000F02  D003               	goto	i2l2803
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1340: c = prec;
  3202  000F04  C076  F078         	movff	printf@prec,printf@c
  3203  000F08  D016               	goto	i2l2807
  3204  000F0A                     i2l2803:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;doprnt.c: 1341: else if(prec < c)
  3208  000F0A  0100               	movlb	0	; () banked
  3209  000F0C  5177               	movf	(printf@prec+1)& (0+255),w,b
  3210  000F0E  0A80               	xorlw	128
  3211  000F10  6E45               	movwf	??_printf& (0+255),c
  3212  000F12  0100               	movlb	0	; () banked
  3213  000F14  5178               	movf	printf@c& (0+255),w,b
  3214  000F16  0100               	movlb	0	; () banked
  3215  000F18  5D76               	subwf	printf@prec& (0+255),w,b
  3216  000F1A  0E80               	movlw	128
  3217  000F1C  0100               	movlb	0	; () banked
  3218  000F1E  BF78               	btfsc	printf@c& (0+255),7,b
  3219  000F20  0E7F               	movlw	127
  3220  000F22  5845               	subwfb	??_printf& (0+255),w,c
  3221  000F24  B0D8               	btfsc	status,0,c
  3222  000F26  D007               	goto	i2l2807
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;doprnt.c: 1342: prec = c;
  3226  000F28  0100               	movlb	0	; () banked
  3227  000F2A  5178               	movf	printf@c& (0+255),w,b
  3228  000F2C  0100               	movlb	0	; () banked
  3229  000F2E  6F76               	movwf	printf@prec& (0+255),b
  3230  000F30  6B77               	clrf	(printf@prec+1)& (0+255),b
  3231  000F32  BF76               	btfsc	printf@prec& (0+255),7,b
  3232  000F34  0777               	decf	(printf@prec+1)& (0+255),f,b
  3233  000F36                     i2l2807:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3237  000F36  0100               	movlb	0	; () banked
  3238  000F38  5171               	movf	printf@width& (0+255),w,b
  3239  000F3A  0100               	movlb	0	; () banked
  3240  000F3C  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3241  000F3E  B4D8               	btfsc	status,2,c
  3242  000F40  D010               	goto	i2l2813
  3243                           
  3244                           ; BSR set to: 0
  3245  000F42  0E03               	movlw	3
  3246  000F44  0100               	movlb	0	; () banked
  3247  000F46  156F               	andwf	printf@flag& (0+255),w,b
  3248  000F48  6E45               	movwf	??_printf& (0+255),c
  3249  000F4A  0E00               	movlw	0
  3250  000F4C  0100               	movlb	0	; () banked
  3251  000F4E  1570               	andwf	(printf@flag+1)& (0+255),w,b
  3252  000F50  6E46               	movwf	(??_printf+1)& (0+255),c
  3253  000F52  5045               	movf	??_printf,w,c
  3254  000F54  1046               	iorwf	??_printf+1,w,c
  3255  000F56  B4D8               	btfsc	status,2,c
  3256  000F58  D004               	goto	i2l2813
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;doprnt.c: 1346: width--;
  3260  000F5A  0100               	movlb	0	; () banked
  3261  000F5C  0771               	decf	printf@width& (0+255),f,b
  3262  000F5E  A0D8               	btfss	status,0,c
  3263  000F60  0772               	decf	(printf@width+1)& (0+255),f,b
  3264  000F62                     i2l2813:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3268  000F62  0100               	movlb	0	; () banked
  3269  000F64  AD70               	btfss	(printf@flag+1)& (0+255),6,b
  3270  000F66  D01C               	goto	i2l2821
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;doprnt.c: 1349: if(width > prec)
  3274  000F68  0100               	movlb	0	; () banked
  3275  000F6A  5171               	movf	printf@width& (0+255),w,b
  3276  000F6C  0100               	movlb	0	; () banked
  3277  000F6E  5D76               	subwf	printf@prec& (0+255),w,b
  3278  000F70  0100               	movlb	0	; () banked
  3279  000F72  5177               	movf	(printf@prec+1)& (0+255),w,b
  3280  000F74  0A80               	xorlw	128
  3281  000F76  6E45               	movwf	??_printf& (0+255),c
  3282  000F78  0100               	movlb	0	; () banked
  3283  000F7A  5172               	movf	(printf@width+1)& (0+255),w,b
  3284  000F7C  0A80               	xorlw	128
  3285  000F7E  5845               	subwfb	??_printf& (0+255),w,c
  3286  000F80  B0D8               	btfsc	status,0,c
  3287  000F82  D009               	goto	i2l2819
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;doprnt.c: 1350: width -= prec;
  3291  000F84  0100               	movlb	0	; () banked
  3292  000F86  5176               	movf	printf@prec& (0+255),w,b
  3293  000F88  0100               	movlb	0	; () banked
  3294  000F8A  5F71               	subwf	printf@width& (0+255),f,b
  3295  000F8C  0100               	movlb	0	; () banked
  3296  000F8E  5177               	movf	(printf@prec+1)& (0+255),w,b
  3297  000F90  0100               	movlb	0	; () banked
  3298  000F92  5B72               	subwfb	(printf@width+1)& (0+255),f,b
  3299  000F94  D005               	goto	i2l2821
  3300  000F96                     i2l2819:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;doprnt.c: 1351: else
  3304                           ;doprnt.c: 1352: width = 0;
  3305  000F96  0E00               	movlw	0
  3306  000F98  0100               	movlb	0	; () banked
  3307  000F9A  6F72               	movwf	(printf@width+1)& (0+255),b
  3308  000F9C  0E00               	movlw	0
  3309  000F9E  6F71               	movwf	printf@width& (0+255),b
  3310  000FA0                     i2l2821:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;doprnt.c: 1353: }
  3314                           ;doprnt.c: 1381: if(width > c)
  3315  000FA0  0E80               	movlw	128
  3316  000FA2  0100               	movlb	0	; () banked
  3317  000FA4  BF78               	btfsc	printf@c& (0+255),7,b
  3318  000FA6  0E7F               	movlw	127
  3319  000FA8  6E45               	movwf	??_printf& (0+255),c
  3320  000FAA  0100               	movlb	0	; () banked
  3321  000FAC  5171               	movf	printf@width& (0+255),w,b
  3322  000FAE  0100               	movlb	0	; () banked
  3323  000FB0  5D78               	subwf	printf@c& (0+255),w,b
  3324  000FB2  0100               	movlb	0	; () banked
  3325  000FB4  5172               	movf	(printf@width+1)& (0+255),w,b
  3326  000FB6  0A80               	xorlw	128
  3327  000FB8  5845               	subwfb	??_printf& (0+255),w,c
  3328  000FBA  B0D8               	btfsc	status,0,c
  3329  000FBC  D00B               	goto	i2l2825
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;doprnt.c: 1382: width -= c;
  3333  000FBE  0100               	movlb	0	; () banked
  3334  000FC0  5178               	movf	printf@c& (0+255),w,b
  3335  000FC2  0100               	movlb	0	; () banked
  3336  000FC4  5F71               	subwf	printf@width& (0+255),f,b
  3337  000FC6  0E00               	movlw	0
  3338  000FC8  0100               	movlb	0	; () banked
  3339  000FCA  BF78               	btfsc	printf@c& (0+255),7,b
  3340  000FCC  0EFF               	movlw	255
  3341  000FCE  0100               	movlb	0	; () banked
  3342  000FD0  5B72               	subwfb	(printf@width+1)& (0+255),f,b
  3343  000FD2  D005               	goto	i2l2827
  3344  000FD4                     i2l2825:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;doprnt.c: 1383: else
  3348                           ;doprnt.c: 1384: width = 0;
  3349  000FD4  0E00               	movlw	0
  3350  000FD6  0100               	movlb	0	; () banked
  3351  000FD8  6F72               	movwf	(printf@width+1)& (0+255),b
  3352  000FDA  0E00               	movlw	0
  3353  000FDC  6F71               	movwf	printf@width& (0+255),b
  3354  000FDE                     i2l2827:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;doprnt.c: 1387: if(flag & 0x04) {
  3358  000FDE  0100               	movlb	0	; () banked
  3359  000FE0  A56F               	btfss	printf@flag& (0+255),2,b
  3360  000FE2  D01D               	goto	i2l2839
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;doprnt.c: 1392: if(flag & 0x03)
  3364  000FE4  0E03               	movlw	3
  3365  000FE6  0100               	movlb	0	; () banked
  3366  000FE8  156F               	andwf	printf@flag& (0+255),w,b
  3367  000FEA  6E45               	movwf	??_printf& (0+255),c
  3368  000FEC  0E00               	movlw	0
  3369  000FEE  0100               	movlb	0	; () banked
  3370  000FF0  1570               	andwf	(printf@flag+1)& (0+255),w,b
  3371  000FF2  6E46               	movwf	(??_printf+1)& (0+255),c
  3372  000FF4  5045               	movf	??_printf,w,c
  3373  000FF6  1046               	iorwf	??_printf+1,w,c
  3374  000FF8  B4D8               	btfsc	status,2,c
  3375  000FFA  D003               	goto	i2l2833
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;doprnt.c: 1393: (putch('-') );
  3379  000FFC  0E2D               	movlw	45
  3380  000FFE  ECF5  F011         	call	_putch
  3381  001002                     i2l2833:
  3382                           
  3383                           ;doprnt.c: 1415: if(width)
  3384  001002  0100               	movlb	0	; () banked
  3385  001004  5171               	movf	printf@width& (0+255),w,b
  3386  001006  0100               	movlb	0	; () banked
  3387  001008  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3388  00100A  B4D8               	btfsc	status,2,c
  3389  00100C  D02A               	goto	i2l2849
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;doprnt.c: 1417: (putch('0') );
  3393                           
  3394                           ; BSR set to: 0
  3395                           
  3396                           ;doprnt.c: 1416: do
  3397  00100E  0E30               	movlw	48
  3398  001010  ECF5  F011         	call	_putch
  3399                           
  3400                           ;doprnt.c: 1418: while(--width);
  3401  001014  0100               	movlb	0	; () banked
  3402  001016  0771               	decf	printf@width& (0+255),f,b
  3403  001018  A0D8               	btfss	status,0,c
  3404  00101A  0772               	decf	(printf@width+1)& (0+255),f,b
  3405  00101C  D7F2               	goto	i2l2833
  3406  00101E                     i2l2839:
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;doprnt.c: 1422: {
  3410                           ;doprnt.c: 1424: if(width
  3411                           ;doprnt.c: 1428: )
  3412  00101E  0100               	movlb	0	; () banked
  3413  001020  5171               	movf	printf@width& (0+255),w,b
  3414  001022  0100               	movlb	0	; () banked
  3415  001024  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3416  001026  B4D8               	btfsc	status,2,c
  3417  001028  D00D               	goto	i2l2845
  3418  00102A                     i2l2841:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;doprnt.c: 1430: (putch(' ') );
  3422  00102A  0E20               	movlw	32
  3423  00102C  ECF5  F011         	call	_putch
  3424                           
  3425                           ;doprnt.c: 1431: while(--width);
  3426  001030  0100               	movlb	0	; () banked
  3427  001032  0771               	decf	printf@width& (0+255),f,b
  3428  001034  A0D8               	btfss	status,0,c
  3429  001036  0772               	decf	(printf@width+1)& (0+255),f,b
  3430  001038  0100               	movlb	0	; () banked
  3431  00103A  5171               	movf	printf@width& (0+255),w,b
  3432  00103C  0100               	movlb	0	; () banked
  3433  00103E  1172               	iorwf	(printf@width+1)& (0+255),w,b
  3434  001040  A4D8               	btfss	status,2,c
  3435  001042  D7F3               	goto	i2l2841
  3436  001044                     i2l2845:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;doprnt.c: 1438: if(flag & 0x03)
  3440  001044  0E03               	movlw	3
  3441  001046  0100               	movlb	0	; () banked
  3442  001048  156F               	andwf	printf@flag& (0+255),w,b
  3443  00104A  6E45               	movwf	??_printf& (0+255),c
  3444  00104C  0E00               	movlw	0
  3445  00104E  0100               	movlb	0	; () banked
  3446  001050  1570               	andwf	(printf@flag+1)& (0+255),w,b
  3447  001052  6E46               	movwf	(??_printf+1)& (0+255),c
  3448  001054  5045               	movf	??_printf,w,c
  3449  001056  1046               	iorwf	??_printf+1,w,c
  3450  001058  B4D8               	btfsc	status,2,c
  3451  00105A  D003               	goto	i2l2849
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;doprnt.c: 1439: (putch('-') );
  3455  00105C  0E2D               	movlw	45
  3456  00105E  ECF5  F011         	call	_putch
  3457  001062                     i2l2849:
  3458  001062  C040  FFF6         	movff	printf@f,tblptrl
  3459  001066  C041  FFF7         	movff	printf@f+1,tblptrh
  3460  00106A  4A40               	infsnz	printf@f,f,c
  3461  00106C  2A41               	incf	printf@f+1,f,c
  3462  00106E                     	if	0	;tblptru may be non-zero
  3463  00106E                     	endif
  3464  00106E                     	if	0	;tblptru may be non-zero
  3465  00106E                     	endif
  3466  00106E  0008               	tblrd		*
  3467  001070  CFF5 F078          	movff	tablat,printf@c
  3468  001074  0100               	movlb	0	; () banked
  3469  001076  5178               	movf	printf@c& (0+255),w,b
  3470  001078  B4D8               	btfsc	status,2,c
  3471  00107A  0012               	return	
  3472  00107C  EF50  F003         	goto	i2l2587
  3473  001080                     __end_of_printf:
  3474                           	opt stack 0
  3475                           tosu	equ	0xFFF
  3476                           tosh	equ	0xFFE
  3477                           tosl	equ	0xFFD
  3478                           pclatu	equ	0xFFB
  3479                           pclath	equ	0xFFA
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon	equ	0xFF2
  3487                           intcon2	equ	0xFF1
  3488                           fsr0h	equ	0xFEA
  3489                           fsr0l	equ	0xFE9
  3490                           wreg	equ	0xFE8
  3491                           fsr1h	equ	0xFE2
  3492                           fsr1l	equ	0xFE1
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _scale *****************
  3500 ;; Defined at:
  3501 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  scl             1    wreg     char 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  scl             1   41[COMRAM] char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  3   35[COMRAM] char 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3515 ;;      Params:         3       0       0       0       0       0       0
  3516 ;;      Locals:         4       0       0       0       0       0       0
  3517 ;;      Temps:          0       0       0       0       0       0       0
  3518 ;;      Totals:         7       0       0       0       0       0       0
  3519 ;;Total ram usage:        7 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    2
  3522 ;; This function calls:
  3523 ;;		___awdiv
  3524 ;;		___awmod
  3525 ;;		___ftmul
  3526 ;;		___wmul
  3527 ;; This function is called by:
  3528 ;;		_printf
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text17
  3533  001080                     __ptext17:
  3534                           	opt stack 0
  3535  001080                     _scale:
  3536                           	opt stack 22
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;incstack = 0
  3540                           ;scale@scl stored from wreg
  3541  001080  6E2A               	movwf	scale@scl,c
  3542                           
  3543                           ;doprnt.c: 428: if(scl < 0) {
  3544  001082  AE2A               	btfss	scale@scl,7,c
  3545  001084  D0FB               	goto	i2l2305
  3546                           
  3547                           ;doprnt.c: 429: scl = -scl;
  3548  001086  6C2A               	negf	scale@scl,c
  3549                           
  3550                           ;doprnt.c: 430: if(scl>=110)
  3551  001088  502A               	movf	scale@scl,w,c
  3552  00108A  0A80               	xorlw	128
  3553  00108C  0F12               	addlw	-238
  3554  00108E  A0D8               	btfss	status,0,c
  3555  001090  D091               	goto	i2l2295
  3556                           
  3557                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3558  001092  0E00               	movlw	0
  3559  001094  6E12               	movwf	___wmul@multiplicand+1,c
  3560  001096  0E03               	movlw	3
  3561  001098  6E11               	movwf	___wmul@multiplicand,c
  3562  00109A  0E00               	movlw	0
  3563  00109C  6E0A               	movwf	___awdiv@divisor+1,c
  3564  00109E  0E0A               	movlw	10
  3565  0010A0  6E09               	movwf	___awdiv@divisor,c
  3566  0010A2  0E00               	movlw	0
  3567  0010A4  6E04               	movwf	___awmod@divisor+1,c
  3568  0010A6  0E64               	movlw	100
  3569  0010A8  6E03               	movwf	___awmod@divisor,c
  3570  0010AA  502A               	movf	scale@scl,w,c
  3571  0010AC  6E01               	movwf	___awmod@dividend,c
  3572  0010AE  6A02               	clrf	___awmod@dividend+1,c
  3573  0010B0  BE01               	btfsc	___awmod@dividend,7,c
  3574  0010B2  0602               	decf	___awmod@dividend+1,f,c
  3575  0010B4  EC29  F010         	call	___awmod	;wreg free
  3576  0010B8  C001  F007         	movff	?___awmod,___awdiv@dividend
  3577  0010BC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3578  0010C0  ECA6  F00F         	call	___awdiv	;wreg free
  3579  0010C4  0E09               	movlw	9
  3580  0010C6  2407               	addwf	?___awdiv,w,c
  3581  0010C8  6E0F               	movwf	___wmul@multiplier,c
  3582  0010CA  0E00               	movlw	0
  3583  0010CC  2008               	addwfc	?___awdiv+1,w,c
  3584  0010CE  6E10               	movwf	___wmul@multiplier+1,c
  3585  0010D0  EC54  F011         	call	___wmul	;wreg free
  3586  0010D4  0E29               	movlw	low __npowers_
  3587  0010D6  240F               	addwf	?___wmul,w,c
  3588  0010D8  6EF6               	movwf	tblptrl,c
  3589  0010DA  0E06               	movlw	high __npowers_
  3590  0010DC  2010               	addwfc	?___wmul+1,w,c
  3591  0010DE  6EF7               	movwf	tblptrh,c
  3592  0010E0                     	if	0	;There are less than 3 active tblptr bytes
  3593  0010E0                     	endif
  3594  0010E0  0009               	tblrd		*+
  3595  0010E2  CFF5 F018          	movff	tablat,___ftmul@f2
  3596  0010E6  0009               	tblrd		*+
  3597  0010E8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3598  0010EC  000A               	tblrd		*-
  3599  0010EE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3600  0010F2  0E00               	movlw	0
  3601  0010F4  6E0A               	movwf	___awdiv@divisor+1,c
  3602  0010F6  0E64               	movlw	100
  3603  0010F8  6E09               	movwf	___awdiv@divisor,c
  3604  0010FA  502A               	movf	scale@scl,w,c
  3605  0010FC  6E07               	movwf	___awdiv@dividend,c
  3606  0010FE  6A08               	clrf	___awdiv@dividend+1,c
  3607  001100  BE07               	btfsc	___awdiv@dividend,7,c
  3608  001102  0608               	decf	___awdiv@dividend+1,f,c
  3609  001104  ECA6  F00F         	call	___awdiv	;wreg free
  3610  001108  0E12               	movlw	18
  3611  00110A  2407               	addwf	?___awdiv,w,c
  3612  00110C  6E0F               	movwf	___wmul@multiplier,c
  3613  00110E  0E00               	movlw	0
  3614  001110  2008               	addwfc	?___awdiv+1,w,c
  3615  001112  6E10               	movwf	___wmul@multiplier+1,c
  3616  001114  0E00               	movlw	0
  3617  001116  6E12               	movwf	___wmul@multiplicand+1,c
  3618  001118  0E03               	movlw	3
  3619  00111A  6E11               	movwf	___wmul@multiplicand,c
  3620  00111C  EC54  F011         	call	___wmul	;wreg free
  3621  001120  0E29               	movlw	low __npowers_
  3622  001122  240F               	addwf	?___wmul,w,c
  3623  001124  6EF6               	movwf	tblptrl,c
  3624  001126  0E06               	movlw	high __npowers_
  3625  001128  2010               	addwfc	?___wmul+1,w,c
  3626  00112A  6EF7               	movwf	tblptrh,c
  3627  00112C                     	if	0	;There are less than 3 active tblptr bytes
  3628  00112C                     	endif
  3629  00112C  0009               	tblrd		*+
  3630  00112E  CFF5 F015          	movff	tablat,___ftmul@f1
  3631  001132  0009               	tblrd		*+
  3632  001134  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3633  001138  000A               	tblrd		*-
  3634  00113A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3635  00113E  EC5E  F00D         	call	___ftmul	;wreg free
  3636  001142  C015  F027         	movff	?___ftmul,_scale$1306
  3637  001146  C016  F028         	movff	?___ftmul+1,_scale$1306+1
  3638  00114A  C017  F029         	movff	?___ftmul+2,_scale$1306+2
  3639                           
  3640                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3641  00114E  C027  F015         	movff	_scale$1306,___ftmul@f1
  3642  001152  C028  F016         	movff	_scale$1306+1,___ftmul@f1+1
  3643  001156  C029  F017         	movff	_scale$1306+2,___ftmul@f1+2
  3644  00115A  0E00               	movlw	0
  3645  00115C  6E12               	movwf	___wmul@multiplicand+1,c
  3646  00115E  0E03               	movlw	3
  3647  001160  6E11               	movwf	___wmul@multiplicand,c
  3648  001162  0E00               	movlw	0
  3649  001164  6E04               	movwf	___awmod@divisor+1,c
  3650  001166  0E0A               	movlw	10
  3651  001168  6E03               	movwf	___awmod@divisor,c
  3652  00116A  502A               	movf	scale@scl,w,c
  3653  00116C  6E01               	movwf	___awmod@dividend,c
  3654  00116E  6A02               	clrf	___awmod@dividend+1,c
  3655  001170  BE01               	btfsc	___awmod@dividend,7,c
  3656  001172  0602               	decf	___awmod@dividend+1,f,c
  3657  001174  EC29  F010         	call	___awmod	;wreg free
  3658  001178  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3659  00117C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3660  001180  EC54  F011         	call	___wmul	;wreg free
  3661  001184  0E29               	movlw	low __npowers_
  3662  001186  240F               	addwf	?___wmul,w,c
  3663  001188  6EF6               	movwf	tblptrl,c
  3664  00118A  0E06               	movlw	high __npowers_
  3665  00118C  2010               	addwfc	?___wmul+1,w,c
  3666  00118E  6EF7               	movwf	tblptrh,c
  3667  001190                     	if	0	;There are less than 3 active tblptr bytes
  3668  001190                     	endif
  3669  001190  0009               	tblrd		*+
  3670  001192  CFF5 F018          	movff	tablat,___ftmul@f2
  3671  001196  0009               	tblrd		*+
  3672  001198  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3673  00119C  000A               	tblrd		*-
  3674  00119E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3675  0011A2  EC5E  F00D         	call	___ftmul	;wreg free
  3676  0011A6  C015  F024         	movff	?___ftmul,?_scale
  3677  0011AA  C016  F025         	movff	?___ftmul+1,?_scale+1
  3678  0011AE  C017  F026         	movff	?___ftmul+2,?_scale+2
  3679  0011B2  0012               	return	
  3680  0011B4                     i2l2295:
  3681                           
  3682                           ;doprnt.c: 432: else if(scl > 10)
  3683  0011B4  502A               	movf	scale@scl,w,c
  3684  0011B6  0A80               	xorlw	128
  3685  0011B8  0F75               	addlw	-139
  3686  0011BA  A0D8               	btfss	status,0,c
  3687  0011BC  D04D               	goto	i2l2301
  3688                           
  3689                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3690  0011BE  0E00               	movlw	0
  3691  0011C0  6E0A               	movwf	___awdiv@divisor+1,c
  3692  0011C2  0E0A               	movlw	10
  3693  0011C4  6E09               	movwf	___awdiv@divisor,c
  3694  0011C6  502A               	movf	scale@scl,w,c
  3695  0011C8  6E07               	movwf	___awdiv@dividend,c
  3696  0011CA  6A08               	clrf	___awdiv@dividend+1,c
  3697  0011CC  BE07               	btfsc	___awdiv@dividend,7,c
  3698  0011CE  0608               	decf	___awdiv@dividend+1,f,c
  3699  0011D0  ECA6  F00F         	call	___awdiv	;wreg free
  3700  0011D4  0E09               	movlw	9
  3701  0011D6  2407               	addwf	?___awdiv,w,c
  3702  0011D8  6E0F               	movwf	___wmul@multiplier,c
  3703  0011DA  0E00               	movlw	0
  3704  0011DC  2008               	addwfc	?___awdiv+1,w,c
  3705  0011DE  6E10               	movwf	___wmul@multiplier+1,c
  3706  0011E0  0E00               	movlw	0
  3707  0011E2  6E12               	movwf	___wmul@multiplicand+1,c
  3708  0011E4  0E03               	movlw	3
  3709  0011E6  6E11               	movwf	___wmul@multiplicand,c
  3710  0011E8  EC54  F011         	call	___wmul	;wreg free
  3711  0011EC  0E29               	movlw	low __npowers_
  3712  0011EE  240F               	addwf	?___wmul,w,c
  3713  0011F0  6EF6               	movwf	tblptrl,c
  3714  0011F2  0E06               	movlw	high __npowers_
  3715  0011F4  2010               	addwfc	?___wmul+1,w,c
  3716  0011F6  6EF7               	movwf	tblptrh,c
  3717  0011F8                     	if	0	;There are less than 3 active tblptr bytes
  3718  0011F8                     	endif
  3719  0011F8  0009               	tblrd		*+
  3720  0011FA  CFF5 F015          	movff	tablat,___ftmul@f1
  3721  0011FE  0009               	tblrd		*+
  3722  001200  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3723  001204  000A               	tblrd		*-
  3724  001206  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3725  00120A  0E00               	movlw	0
  3726  00120C  6E12               	movwf	___wmul@multiplicand+1,c
  3727  00120E  0E03               	movlw	3
  3728  001210  6E11               	movwf	___wmul@multiplicand,c
  3729  001212  0E00               	movlw	0
  3730  001214  6E04               	movwf	___awmod@divisor+1,c
  3731  001216  0E0A               	movlw	10
  3732  001218  6E03               	movwf	___awmod@divisor,c
  3733  00121A  502A               	movf	scale@scl,w,c
  3734  00121C  6E01               	movwf	___awmod@dividend,c
  3735  00121E  6A02               	clrf	___awmod@dividend+1,c
  3736  001220  BE01               	btfsc	___awmod@dividend,7,c
  3737  001222  0602               	decf	___awmod@dividend+1,f,c
  3738  001224  EC29  F010         	call	___awmod	;wreg free
  3739  001228  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3740  00122C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3741  001230  EC54  F011         	call	___wmul	;wreg free
  3742  001234  0E29               	movlw	low __npowers_
  3743  001236  240F               	addwf	?___wmul,w,c
  3744  001238  6EF6               	movwf	tblptrl,c
  3745  00123A  0E06               	movlw	high __npowers_
  3746  00123C  2010               	addwfc	?___wmul+1,w,c
  3747  00123E  6EF7               	movwf	tblptrh,c
  3748  001240                     	if	0	;There are less than 3 active tblptr bytes
  3749  001240                     	endif
  3750  001240  0009               	tblrd		*+
  3751  001242  CFF5 F018          	movff	tablat,___ftmul@f2
  3752  001246  0009               	tblrd		*+
  3753  001248  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3754  00124C  000A               	tblrd		*-
  3755  00124E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3756  001252  EC5E  F00D         	call	___ftmul	;wreg free
  3757  001256  D7A7               	goto	L2
  3758  001258                     i2l2301:
  3759                           
  3760                           ;doprnt.c: 434: return _npowers_[scl];
  3761  001258  502A               	movf	scale@scl,w,c
  3762  00125A  0D03               	mullw	3
  3763  00125C  0E29               	movlw	low __npowers_
  3764  00125E  24F3               	addwf	prodl,w,c
  3765  001260  6EF6               	movwf	tblptrl,c
  3766  001262  0E06               	movlw	high __npowers_
  3767  001264  20F4               	addwfc	prodh,w,c
  3768  001266  6EF7               	movwf	tblptrh,c
  3769  001268                     	if	0	;There are less than 3 active tblptr bytes
  3770  001268                     	endif
  3771  001268  0009               	tblrd		*+
  3772  00126A  CFF5 F024          	movff	tablat,?_scale
  3773  00126E  0009               	tblrd		*+
  3774  001270  CFF5 F025          	movff	tablat,?_scale+1
  3775  001274  000A               	tblrd		*-
  3776  001276  CFF5 F026          	movff	tablat,?_scale+2
  3777  00127A  0012               	return	
  3778  00127C                     i2l2305:
  3779                           
  3780                           ;doprnt.c: 435: }
  3781                           ;doprnt.c: 436: if(scl>=110)
  3782  00127C  502A               	movf	scale@scl,w,c
  3783  00127E  0A80               	xorlw	128
  3784  001280  0F12               	addlw	-238
  3785  001282  A0D8               	btfss	status,0,c
  3786  001284  D091               	goto	i2l2313
  3787                           
  3788                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3789  001286  0E00               	movlw	0
  3790  001288  6E12               	movwf	___wmul@multiplicand+1,c
  3791  00128A  0E03               	movlw	3
  3792  00128C  6E11               	movwf	___wmul@multiplicand,c
  3793  00128E  0E00               	movlw	0
  3794  001290  6E0A               	movwf	___awdiv@divisor+1,c
  3795  001292  0E0A               	movlw	10
  3796  001294  6E09               	movwf	___awdiv@divisor,c
  3797  001296  0E00               	movlw	0
  3798  001298  6E04               	movwf	___awmod@divisor+1,c
  3799  00129A  0E64               	movlw	100
  3800  00129C  6E03               	movwf	___awmod@divisor,c
  3801  00129E  502A               	movf	scale@scl,w,c
  3802  0012A0  6E01               	movwf	___awmod@dividend,c
  3803  0012A2  6A02               	clrf	___awmod@dividend+1,c
  3804  0012A4  BE01               	btfsc	___awmod@dividend,7,c
  3805  0012A6  0602               	decf	___awmod@dividend+1,f,c
  3806  0012A8  EC29  F010         	call	___awmod	;wreg free
  3807  0012AC  C001  F007         	movff	?___awmod,___awdiv@dividend
  3808  0012B0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3809  0012B4  ECA6  F00F         	call	___awdiv	;wreg free
  3810  0012B8  0E09               	movlw	9
  3811  0012BA  2407               	addwf	?___awdiv,w,c
  3812  0012BC  6E0F               	movwf	___wmul@multiplier,c
  3813  0012BE  0E00               	movlw	0
  3814  0012C0  2008               	addwfc	?___awdiv+1,w,c
  3815  0012C2  6E10               	movwf	___wmul@multiplier+1,c
  3816  0012C4  EC54  F011         	call	___wmul	;wreg free
  3817  0012C8  0E50               	movlw	low __powers_
  3818  0012CA  240F               	addwf	?___wmul,w,c
  3819  0012CC  6EF6               	movwf	tblptrl,c
  3820  0012CE  0E06               	movlw	high __powers_
  3821  0012D0  2010               	addwfc	?___wmul+1,w,c
  3822  0012D2  6EF7               	movwf	tblptrh,c
  3823  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  3824  0012D4                     	endif
  3825  0012D4  0009               	tblrd		*+
  3826  0012D6  CFF5 F018          	movff	tablat,___ftmul@f2
  3827  0012DA  0009               	tblrd		*+
  3828  0012DC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3829  0012E0  000A               	tblrd		*-
  3830  0012E2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3831  0012E6  0E00               	movlw	0
  3832  0012E8  6E0A               	movwf	___awdiv@divisor+1,c
  3833  0012EA  0E64               	movlw	100
  3834  0012EC  6E09               	movwf	___awdiv@divisor,c
  3835  0012EE  502A               	movf	scale@scl,w,c
  3836  0012F0  6E07               	movwf	___awdiv@dividend,c
  3837  0012F2  6A08               	clrf	___awdiv@dividend+1,c
  3838  0012F4  BE07               	btfsc	___awdiv@dividend,7,c
  3839  0012F6  0608               	decf	___awdiv@dividend+1,f,c
  3840  0012F8  ECA6  F00F         	call	___awdiv	;wreg free
  3841  0012FC  0E12               	movlw	18
  3842  0012FE  2407               	addwf	?___awdiv,w,c
  3843  001300  6E0F               	movwf	___wmul@multiplier,c
  3844  001302  0E00               	movlw	0
  3845  001304  2008               	addwfc	?___awdiv+1,w,c
  3846  001306  6E10               	movwf	___wmul@multiplier+1,c
  3847  001308  0E00               	movlw	0
  3848  00130A  6E12               	movwf	___wmul@multiplicand+1,c
  3849  00130C  0E03               	movlw	3
  3850  00130E  6E11               	movwf	___wmul@multiplicand,c
  3851  001310  EC54  F011         	call	___wmul	;wreg free
  3852  001314  0E50               	movlw	low __powers_
  3853  001316  240F               	addwf	?___wmul,w,c
  3854  001318  6EF6               	movwf	tblptrl,c
  3855  00131A  0E06               	movlw	high __powers_
  3856  00131C  2010               	addwfc	?___wmul+1,w,c
  3857  00131E  6EF7               	movwf	tblptrh,c
  3858  001320                     	if	0	;There are less than 3 active tblptr bytes
  3859  001320                     	endif
  3860  001320  0009               	tblrd		*+
  3861  001322  CFF5 F015          	movff	tablat,___ftmul@f1
  3862  001326  0009               	tblrd		*+
  3863  001328  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3864  00132C  000A               	tblrd		*-
  3865  00132E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3866  001332  EC5E  F00D         	call	___ftmul	;wreg free
  3867  001336  C015  F027         	movff	?___ftmul,_scale$1306
  3868  00133A  C016  F028         	movff	?___ftmul+1,_scale$1306+1
  3869  00133E  C017  F029         	movff	?___ftmul+2,_scale$1306+2
  3870                           
  3871                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3872  001342  C027  F015         	movff	_scale$1306,___ftmul@f1
  3873  001346  C028  F016         	movff	_scale$1306+1,___ftmul@f1+1
  3874  00134A  C029  F017         	movff	_scale$1306+2,___ftmul@f1+2
  3875  00134E  0E00               	movlw	0
  3876  001350  6E12               	movwf	___wmul@multiplicand+1,c
  3877  001352  0E03               	movlw	3
  3878  001354  6E11               	movwf	___wmul@multiplicand,c
  3879  001356  0E00               	movlw	0
  3880  001358  6E04               	movwf	___awmod@divisor+1,c
  3881  00135A  0E0A               	movlw	10
  3882  00135C  6E03               	movwf	___awmod@divisor,c
  3883  00135E  502A               	movf	scale@scl,w,c
  3884  001360  6E01               	movwf	___awmod@dividend,c
  3885  001362  6A02               	clrf	___awmod@dividend+1,c
  3886  001364  BE01               	btfsc	___awmod@dividend,7,c
  3887  001366  0602               	decf	___awmod@dividend+1,f,c
  3888  001368  EC29  F010         	call	___awmod	;wreg free
  3889  00136C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3890  001370  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3891  001374  EC54  F011         	call	___wmul	;wreg free
  3892  001378  0E50               	movlw	low __powers_
  3893  00137A  240F               	addwf	?___wmul,w,c
  3894  00137C  6EF6               	movwf	tblptrl,c
  3895  00137E  0E06               	movlw	high __powers_
  3896  001380  2010               	addwfc	?___wmul+1,w,c
  3897  001382  6EF7               	movwf	tblptrh,c
  3898  001384                     	if	0	;There are less than 3 active tblptr bytes
  3899  001384                     	endif
  3900  001384  0009               	tblrd		*+
  3901  001386  CFF5 F018          	movff	tablat,___ftmul@f2
  3902  00138A  0009               	tblrd		*+
  3903  00138C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3904  001390  000A               	tblrd		*-
  3905  001392  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3906  001396  EC5E  F00D         	call	___ftmul	;wreg free
  3907  00139A  C015  F024         	movff	?___ftmul,?_scale
  3908  00139E  C016  F025         	movff	?___ftmul+1,?_scale+1
  3909  0013A2  C017  F026         	movff	?___ftmul+2,?_scale+2
  3910  0013A6  0012               	return	
  3911  0013A8                     i2l2313:
  3912                           
  3913                           ;doprnt.c: 438: else if(scl > 10)
  3914  0013A8  502A               	movf	scale@scl,w,c
  3915  0013AA  0A80               	xorlw	128
  3916  0013AC  0F75               	addlw	-139
  3917  0013AE  A0D8               	btfss	status,0,c
  3918  0013B0  D04D               	goto	i2l2319
  3919                           
  3920                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3921  0013B2  0E00               	movlw	0
  3922  0013B4  6E0A               	movwf	___awdiv@divisor+1,c
  3923  0013B6  0E0A               	movlw	10
  3924  0013B8  6E09               	movwf	___awdiv@divisor,c
  3925  0013BA  502A               	movf	scale@scl,w,c
  3926  0013BC  6E07               	movwf	___awdiv@dividend,c
  3927  0013BE  6A08               	clrf	___awdiv@dividend+1,c
  3928  0013C0  BE07               	btfsc	___awdiv@dividend,7,c
  3929  0013C2  0608               	decf	___awdiv@dividend+1,f,c
  3930  0013C4  ECA6  F00F         	call	___awdiv	;wreg free
  3931  0013C8  0E09               	movlw	9
  3932  0013CA  2407               	addwf	?___awdiv,w,c
  3933  0013CC  6E0F               	movwf	___wmul@multiplier,c
  3934  0013CE  0E00               	movlw	0
  3935  0013D0  2008               	addwfc	?___awdiv+1,w,c
  3936  0013D2  6E10               	movwf	___wmul@multiplier+1,c
  3937  0013D4  0E00               	movlw	0
  3938  0013D6  6E12               	movwf	___wmul@multiplicand+1,c
  3939  0013D8  0E03               	movlw	3
  3940  0013DA  6E11               	movwf	___wmul@multiplicand,c
  3941  0013DC  EC54  F011         	call	___wmul	;wreg free
  3942  0013E0  0E50               	movlw	low __powers_
  3943  0013E2  240F               	addwf	?___wmul,w,c
  3944  0013E4  6EF6               	movwf	tblptrl,c
  3945  0013E6  0E06               	movlw	high __powers_
  3946  0013E8  2010               	addwfc	?___wmul+1,w,c
  3947  0013EA  6EF7               	movwf	tblptrh,c
  3948  0013EC                     	if	0	;There are less than 3 active tblptr bytes
  3949  0013EC                     	endif
  3950  0013EC  0009               	tblrd		*+
  3951  0013EE  CFF5 F015          	movff	tablat,___ftmul@f1
  3952  0013F2  0009               	tblrd		*+
  3953  0013F4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3954  0013F8  000A               	tblrd		*-
  3955  0013FA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3956  0013FE  0E00               	movlw	0
  3957  001400  6E12               	movwf	___wmul@multiplicand+1,c
  3958  001402  0E03               	movlw	3
  3959  001404  6E11               	movwf	___wmul@multiplicand,c
  3960  001406  0E00               	movlw	0
  3961  001408  6E04               	movwf	___awmod@divisor+1,c
  3962  00140A  0E0A               	movlw	10
  3963  00140C  6E03               	movwf	___awmod@divisor,c
  3964  00140E  502A               	movf	scale@scl,w,c
  3965  001410  6E01               	movwf	___awmod@dividend,c
  3966  001412  6A02               	clrf	___awmod@dividend+1,c
  3967  001414  BE01               	btfsc	___awmod@dividend,7,c
  3968  001416  0602               	decf	___awmod@dividend+1,f,c
  3969  001418  EC29  F010         	call	___awmod	;wreg free
  3970  00141C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3971  001420  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3972  001424  EC54  F011         	call	___wmul	;wreg free
  3973  001428  0E50               	movlw	low __powers_
  3974  00142A  240F               	addwf	?___wmul,w,c
  3975  00142C  6EF6               	movwf	tblptrl,c
  3976  00142E  0E06               	movlw	high __powers_
  3977  001430  2010               	addwfc	?___wmul+1,w,c
  3978  001432  6EF7               	movwf	tblptrh,c
  3979  001434                     	if	0	;There are less than 3 active tblptr bytes
  3980  001434                     	endif
  3981  001434  0009               	tblrd		*+
  3982  001436  CFF5 F018          	movff	tablat,___ftmul@f2
  3983  00143A  0009               	tblrd		*+
  3984  00143C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3985  001440  000A               	tblrd		*-
  3986  001442  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3987  001446  EC5E  F00D         	call	___ftmul	;wreg free
  3988  00144A  D7A7               	goto	L3
  3989  00144C                     i2l2319:
  3990                           
  3991                           ;doprnt.c: 440: return _powers_[scl];
  3992  00144C  502A               	movf	scale@scl,w,c
  3993  00144E  0D03               	mullw	3
  3994  001450  0E50               	movlw	low __powers_
  3995  001452  24F3               	addwf	prodl,w,c
  3996  001454  6EF6               	movwf	tblptrl,c
  3997  001456  0E06               	movlw	high __powers_
  3998  001458  20F4               	addwfc	prodh,w,c
  3999  00145A  6EF7               	movwf	tblptrh,c
  4000  00145C                     	if	0	;There are less than 3 active tblptr bytes
  4001  00145C                     	endif
  4002  00145C  0009               	tblrd		*+
  4003  00145E  CFF5 F024          	movff	tablat,?_scale
  4004  001462  0009               	tblrd		*+
  4005  001464  CFF5 F025          	movff	tablat,?_scale+1
  4006  001468  000A               	tblrd		*-
  4007  00146A  CFF5 F026          	movff	tablat,?_scale+2
  4008  00146E  0012               	return	
  4009  001470                     __end_of_scale:
  4010                           	opt stack 0
  4011                           tosu	equ	0xFFF
  4012                           tosh	equ	0xFFE
  4013                           tosl	equ	0xFFD
  4014                           pclatu	equ	0xFFB
  4015                           pclath	equ	0xFFA
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           intcon2	equ	0xFF1
  4024                           fsr0h	equ	0xFEA
  4025                           fsr0l	equ	0xFE9
  4026                           wreg	equ	0xFE8
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           postinc2	equ	0xFDE
  4030                           postdec2	equ	0xFDD
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _putch *****************
  4036 ;; Defined at:
  4037 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  txData          1    wreg     unsigned char 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  txData          1    1[COMRAM] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4051 ;;      Params:         0       0       0       0       0       0       0
  4052 ;;      Locals:         1       0       0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0
  4054 ;;      Totals:         1       0       0       0       0       0       0
  4055 ;;Total ram usage:        1 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    1
  4058 ;; This function calls:
  4059 ;;		_EUSART1_Write
  4060 ;; This function is called by:
  4061 ;;		_printf
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text18
  4066  0023EA                     __ptext18:
  4067                           	opt stack 0
  4068  0023EA                     _putch:
  4069                           	opt stack 23
  4070                           
  4071                           ;incstack = 0
  4072                           ;putch@txData stored from wreg
  4073  0023EA  6E02               	movwf	putch@txData,c
  4074                           
  4075                           ;eusart1.c: 113: EUSART1_Write(txData);
  4076  0023EC  5002               	movf	putch@txData,w,c
  4077  0023EE  ECE0  F011         	call	_EUSART1_Write
  4078  0023F2  0012               	return		;funcret
  4079  0023F4                     __end_of_putch:
  4080                           	opt stack 0
  4081                           tosu	equ	0xFFF
  4082                           tosh	equ	0xFFE
  4083                           tosl	equ	0xFFD
  4084                           pclatu	equ	0xFFB
  4085                           pclath	equ	0xFFA
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           intcon	equ	0xFF2
  4093                           intcon2	equ	0xFF1
  4094                           fsr0h	equ	0xFEA
  4095                           fsr0l	equ	0xFE9
  4096                           wreg	equ	0xFE8
  4097                           fsr1h	equ	0xFE2
  4098                           fsr1l	equ	0xFE1
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function _EUSART1_Write *****************
  4106 ;; Defined at:
  4107 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  txData          1    wreg     unsigned char 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  txData          1    0[COMRAM] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4121 ;;      Params:         0       0       0       0       0       0       0
  4122 ;;      Locals:         1       0       0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0
  4124 ;;      Totals:         1       0       0       0       0       0       0
  4125 ;;Total ram usage:        1 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_putch
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text19
  4135  0023C0                     __ptext19:
  4136                           	opt stack 0
  4137  0023C0                     _EUSART1_Write:
  4138                           	opt stack 23
  4139                           
  4140                           ;incstack = 0
  4141                           ;EUSART1_Write@txData stored from wreg
  4142  0023C0  6E01               	movwf	EUSART1_Write@txData,c
  4143  0023C2                     i2l197:
  4144  0023C2  A89E               	btfss	3998,4,c	;volatile
  4145  0023C4  D7FE               	goto	i2l197
  4146                           
  4147                           ;eusart1.c: 101: }
  4148                           ;eusart1.c: 103: TXREG1 = txData;
  4149  0023C6  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  4150  0023CA  0012               	return		;funcret
  4151  0023CC                     __end_of_EUSART1_Write:
  4152                           	opt stack 0
  4153                           tosu	equ	0xFFF
  4154                           tosh	equ	0xFFE
  4155                           tosl	equ	0xFFD
  4156                           pclatu	equ	0xFFB
  4157                           pclath	equ	0xFFA
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           intcon2	equ	0xFF1
  4166                           fsr0h	equ	0xFEA
  4167                           fsr0l	equ	0xFE9
  4168                           wreg	equ	0xFE8
  4169                           fsr1h	equ	0xFE2
  4170                           fsr1l	equ	0xFE1
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _isdigit *****************
  4178 ;; Defined at:
  4179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  c               1    wreg     unsigned char 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  c               1    2[COMRAM] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;		None               void
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4193 ;;      Params:         0       0       0       0       0       0       0
  4194 ;;      Locals:         2       0       0       0       0       0       0
  4195 ;;      Temps:          1       0       0       0       0       0       0
  4196 ;;      Totals:         3       0       0       0       0       0       0
  4197 ;;Total ram usage:        3 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_printf
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text20
  4207  002316                     __ptext20:
  4208                           	opt stack 0
  4209  002316                     _isdigit:
  4210                           	opt stack 24
  4211                           
  4212                           ;incstack = 0
  4213                           ;isdigit@c stored from wreg
  4214  002316  6E03               	movwf	isdigit@c,c
  4215  002318  0E00               	movlw	0
  4216  00231A  6E02               	movwf	_isdigit$955,c
  4217  00231C  0E3A               	movlw	58
  4218  00231E  6003               	cpfslt	isdigit@c,c
  4219  002320  D005               	goto	i2l2331
  4220  002322  0E2F               	movlw	47
  4221  002324  6403               	cpfsgt	isdigit@c,c
  4222  002326  D002               	goto	i2l2331
  4223  002328  0E01               	movlw	1
  4224  00232A  6E02               	movwf	_isdigit$955,c
  4225  00232C                     i2l2331:
  4226  00232C  C002  F001         	movff	_isdigit$955,??_isdigit
  4227  002330  3001               	rrcf	??_isdigit,w,c
  4228  002332  0012               	return	
  4229  002334                     __end_of_isdigit:
  4230                           	opt stack 0
  4231                           tosu	equ	0xFFF
  4232                           tosh	equ	0xFFE
  4233                           tosl	equ	0xFFD
  4234                           pclatu	equ	0xFFB
  4235                           pclath	equ	0xFFA
  4236                           tblptru	equ	0xFF8
  4237                           tblptrh	equ	0xFF7
  4238                           tblptrl	equ	0xFF6
  4239                           tablat	equ	0xFF5
  4240                           prodh	equ	0xFF4
  4241                           prodl	equ	0xFF3
  4242                           intcon	equ	0xFF2
  4243                           intcon2	equ	0xFF1
  4244                           fsr0h	equ	0xFEA
  4245                           fsr0l	equ	0xFE9
  4246                           wreg	equ	0xFE8
  4247                           fsr1h	equ	0xFE2
  4248                           fsr1l	equ	0xFE1
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _fround *****************
  4256 ;; Defined at:
  4257 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  prec            1    wreg     unsigned char 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  prec            1   44[COMRAM] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  3   35[COMRAM] unsigned char 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4271 ;;      Params:         3       0       0       0       0       0       0
  4272 ;;      Locals:         7       0       0       0       0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0
  4274 ;;      Totals:        10       0       0       0       0       0       0
  4275 ;;Total ram usage:       10 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    2
  4278 ;; This function calls:
  4279 ;;		___awdiv
  4280 ;;		___awmod
  4281 ;;		___ftmul
  4282 ;;		___wmul
  4283 ;; This function is called by:
  4284 ;;		_printf
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text21
  4289  001470                     __ptext21:
  4290                           	opt stack 0
  4291  001470                     _fround:
  4292                           	opt stack 22
  4293                           
  4294                           ;incstack = 0
  4295                           ;fround@prec stored from wreg
  4296  001470  6E2D               	movwf	fround@prec,c
  4297                           
  4298                           ;doprnt.c: 413: if(prec>=110)
  4299  001472  0E6D               	movlw	109
  4300  001474  642D               	cpfsgt	fround@prec,c
  4301  001476  D09F               	goto	i2l2273
  4302                           
  4303                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4304  001478  0E00               	movlw	0
  4305  00147A  6E12               	movwf	___wmul@multiplicand+1,c
  4306  00147C  0E03               	movlw	3
  4307  00147E  6E11               	movwf	___wmul@multiplicand,c
  4308  001480  0E00               	movlw	0
  4309  001482  6E0A               	movwf	___awdiv@divisor+1,c
  4310  001484  0E0A               	movlw	10
  4311  001486  6E09               	movwf	___awdiv@divisor,c
  4312  001488  0E00               	movlw	0
  4313  00148A  6E04               	movwf	___awmod@divisor+1,c
  4314  00148C  0E64               	movlw	100
  4315  00148E  6E03               	movwf	___awmod@divisor,c
  4316  001490  C02D  F001         	movff	fround@prec,___awmod@dividend
  4317  001494  6A02               	clrf	___awmod@dividend+1,c
  4318  001496  EC29  F010         	call	___awmod	;wreg free
  4319  00149A  C001  F007         	movff	?___awmod,___awdiv@dividend
  4320  00149E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4321  0014A2  ECA6  F00F         	call	___awdiv	;wreg free
  4322  0014A6  0E09               	movlw	9
  4323  0014A8  2407               	addwf	?___awdiv,w,c
  4324  0014AA  6E0F               	movwf	___wmul@multiplier,c
  4325  0014AC  0E00               	movlw	0
  4326  0014AE  2008               	addwfc	?___awdiv+1,w,c
  4327  0014B0  6E10               	movwf	___wmul@multiplier+1,c
  4328  0014B2  EC54  F011         	call	___wmul	;wreg free
  4329  0014B6  0E29               	movlw	low __npowers_
  4330  0014B8  240F               	addwf	?___wmul,w,c
  4331  0014BA  6EF6               	movwf	tblptrl,c
  4332  0014BC  0E06               	movlw	high __npowers_
  4333  0014BE  2010               	addwfc	?___wmul+1,w,c
  4334  0014C0  6EF7               	movwf	tblptrh,c
  4335  0014C2                     	if	0	;There are less than 3 active tblptr bytes
  4336  0014C2                     	endif
  4337  0014C2  0009               	tblrd		*+
  4338  0014C4  CFF5 F018          	movff	tablat,___ftmul@f2
  4339  0014C8  0009               	tblrd		*+
  4340  0014CA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4341  0014CE  000A               	tblrd		*-
  4342  0014D0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4343  0014D4  0E00               	movlw	0
  4344  0014D6  6E0A               	movwf	___awdiv@divisor+1,c
  4345  0014D8  0E64               	movlw	100
  4346  0014DA  6E09               	movwf	___awdiv@divisor,c
  4347  0014DC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4348  0014E0  6A08               	clrf	___awdiv@dividend+1,c
  4349  0014E2  ECA6  F00F         	call	___awdiv	;wreg free
  4350  0014E6  0E12               	movlw	18
  4351  0014E8  2407               	addwf	?___awdiv,w,c
  4352  0014EA  6E0F               	movwf	___wmul@multiplier,c
  4353  0014EC  0E00               	movlw	0
  4354  0014EE  2008               	addwfc	?___awdiv+1,w,c
  4355  0014F0  6E10               	movwf	___wmul@multiplier+1,c
  4356  0014F2  0E00               	movlw	0
  4357  0014F4  6E12               	movwf	___wmul@multiplicand+1,c
  4358  0014F6  0E03               	movlw	3
  4359  0014F8  6E11               	movwf	___wmul@multiplicand,c
  4360  0014FA  EC54  F011         	call	___wmul	;wreg free
  4361  0014FE  0E29               	movlw	low __npowers_
  4362  001500  240F               	addwf	?___wmul,w,c
  4363  001502  6EF6               	movwf	tblptrl,c
  4364  001504  0E06               	movlw	high __npowers_
  4365  001506  2010               	addwfc	?___wmul+1,w,c
  4366  001508  6EF7               	movwf	tblptrh,c
  4367  00150A                     	if	0	;There are less than 3 active tblptr bytes
  4368  00150A                     	endif
  4369  00150A  0009               	tblrd		*+
  4370  00150C  CFF5 F015          	movff	tablat,___ftmul@f1
  4371  001510  0009               	tblrd		*+
  4372  001512  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4373  001516  000A               	tblrd		*-
  4374  001518  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4375  00151C  EC5E  F00D         	call	___ftmul	;wreg free
  4376  001520  C015  F02A         	movff	?___ftmul,_fround$1304
  4377  001524  C016  F02B         	movff	?___ftmul+1,_fround$1304+1
  4378  001528  C017  F02C         	movff	?___ftmul+2,_fround$1304+2
  4379                           
  4380                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4381  00152C  0E00               	movlw	0
  4382  00152E  6E12               	movwf	___wmul@multiplicand+1,c
  4383  001530  0E03               	movlw	3
  4384  001532  6E11               	movwf	___wmul@multiplicand,c
  4385  001534  0E00               	movlw	0
  4386  001536  6E04               	movwf	___awmod@divisor+1,c
  4387  001538  0E0A               	movlw	10
  4388  00153A  6E03               	movwf	___awmod@divisor,c
  4389  00153C  C02D  F001         	movff	fround@prec,___awmod@dividend
  4390  001540  6A02               	clrf	___awmod@dividend+1,c
  4391  001542  EC29  F010         	call	___awmod	;wreg free
  4392  001546  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4393  00154A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4394  00154E  EC54  F011         	call	___wmul	;wreg free
  4395  001552  0E29               	movlw	low __npowers_
  4396  001554  240F               	addwf	?___wmul,w,c
  4397  001556  6EF6               	movwf	tblptrl,c
  4398  001558  0E06               	movlw	high __npowers_
  4399  00155A  2010               	addwfc	?___wmul+1,w,c
  4400  00155C  6EF7               	movwf	tblptrh,c
  4401  00155E                     	if	0	;There are less than 3 active tblptr bytes
  4402  00155E                     	endif
  4403  00155E  0009               	tblrd		*+
  4404  001560  CFF5 F018          	movff	tablat,___ftmul@f2
  4405  001564  0009               	tblrd		*+
  4406  001566  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4407  00156A  000A               	tblrd		*-
  4408  00156C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4409  001570  C02A  F015         	movff	_fround$1304,___ftmul@f1
  4410  001574  C02B  F016         	movff	_fround$1304+1,___ftmul@f1+1
  4411  001578  C02C  F017         	movff	_fround$1304+2,___ftmul@f1+2
  4412  00157C  EC5E  F00D         	call	___ftmul	;wreg free
  4413  001580  C015  F027         	movff	?___ftmul,_fround$1305
  4414  001584  C016  F028         	movff	?___ftmul+1,_fround$1305+1
  4415  001588  C017  F029         	movff	?___ftmul+2,_fround$1305+2
  4416                           
  4417                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4418  00158C  C027  F015         	movff	_fround$1305,___ftmul@f1
  4419  001590  C028  F016         	movff	_fround$1305+1,___ftmul@f1+1
  4420  001594  C029  F017         	movff	_fround$1305+2,___ftmul@f1+2
  4421  001598  0E00               	movlw	0
  4422  00159A  6E18               	movwf	___ftmul@f2,c
  4423  00159C  0E00               	movlw	0
  4424  00159E  6E19               	movwf	___ftmul@f2+1,c
  4425  0015A0  0E3F               	movlw	63
  4426  0015A2  6E1A               	movwf	___ftmul@f2+2,c
  4427  0015A4  EC5E  F00D         	call	___ftmul	;wreg free
  4428  0015A8  C015  F024         	movff	?___ftmul,?_fround
  4429  0015AC  C016  F025         	movff	?___ftmul+1,?_fround+1
  4430  0015B0  C017  F026         	movff	?___ftmul+2,?_fround+2
  4431  0015B4  0012               	return	
  4432  0015B6                     i2l2273:
  4433                           
  4434                           ;doprnt.c: 415: else if(prec > 10)
  4435  0015B6  0E0A               	movlw	10
  4436  0015B8  642D               	cpfsgt	fround@prec,c
  4437  0015BA  D05D               	goto	i2l2281
  4438                           
  4439                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4440  0015BC  0E00               	movlw	0
  4441  0015BE  6E12               	movwf	___wmul@multiplicand+1,c
  4442  0015C0  0E03               	movlw	3
  4443  0015C2  6E11               	movwf	___wmul@multiplicand,c
  4444  0015C4  0E00               	movlw	0
  4445  0015C6  6E04               	movwf	___awmod@divisor+1,c
  4446  0015C8  0E0A               	movlw	10
  4447  0015CA  6E03               	movwf	___awmod@divisor,c
  4448  0015CC  C02D  F001         	movff	fround@prec,___awmod@dividend
  4449  0015D0  6A02               	clrf	___awmod@dividend+1,c
  4450  0015D2  EC29  F010         	call	___awmod	;wreg free
  4451  0015D6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4452  0015DA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4453  0015DE  EC54  F011         	call	___wmul	;wreg free
  4454  0015E2  0E29               	movlw	low __npowers_
  4455  0015E4  240F               	addwf	?___wmul,w,c
  4456  0015E6  6EF6               	movwf	tblptrl,c
  4457  0015E8  0E06               	movlw	high __npowers_
  4458  0015EA  2010               	addwfc	?___wmul+1,w,c
  4459  0015EC  6EF7               	movwf	tblptrh,c
  4460  0015EE                     	if	0	;There are less than 3 active tblptr bytes
  4461  0015EE                     	endif
  4462  0015EE  0009               	tblrd		*+
  4463  0015F0  CFF5 F018          	movff	tablat,___ftmul@f2
  4464  0015F4  0009               	tblrd		*+
  4465  0015F6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4466  0015FA  000A               	tblrd		*-
  4467  0015FC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4468  001600  0E00               	movlw	0
  4469  001602  6E0A               	movwf	___awdiv@divisor+1,c
  4470  001604  0E0A               	movlw	10
  4471  001606  6E09               	movwf	___awdiv@divisor,c
  4472  001608  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4473  00160C  6A08               	clrf	___awdiv@dividend+1,c
  4474  00160E  ECA6  F00F         	call	___awdiv	;wreg free
  4475  001612  0E09               	movlw	9
  4476  001614  2407               	addwf	?___awdiv,w,c
  4477  001616  6E0F               	movwf	___wmul@multiplier,c
  4478  001618  0E00               	movlw	0
  4479  00161A  2008               	addwfc	?___awdiv+1,w,c
  4480  00161C  6E10               	movwf	___wmul@multiplier+1,c
  4481  00161E  0E00               	movlw	0
  4482  001620  6E12               	movwf	___wmul@multiplicand+1,c
  4483  001622  0E03               	movlw	3
  4484  001624  6E11               	movwf	___wmul@multiplicand,c
  4485  001626  EC54  F011         	call	___wmul	;wreg free
  4486  00162A  0E29               	movlw	low __npowers_
  4487  00162C  240F               	addwf	?___wmul,w,c
  4488  00162E  6EF6               	movwf	tblptrl,c
  4489  001630  0E06               	movlw	high __npowers_
  4490  001632  2010               	addwfc	?___wmul+1,w,c
  4491  001634  6EF7               	movwf	tblptrh,c
  4492  001636                     	if	0	;There are less than 3 active tblptr bytes
  4493  001636                     	endif
  4494  001636  0009               	tblrd		*+
  4495  001638  CFF5 F015          	movff	tablat,___ftmul@f1
  4496  00163C  0009               	tblrd		*+
  4497  00163E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4498  001642  000A               	tblrd		*-
  4499  001644  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4500  001648  EC5E  F00D         	call	___ftmul	;wreg free
  4501  00164C  C015  F02A         	movff	?___ftmul,_fround$1304
  4502  001650  C016  F02B         	movff	?___ftmul+1,_fround$1304+1
  4503  001654  C017  F02C         	movff	?___ftmul+2,_fround$1304+2
  4504                           
  4505                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4506  001658  C02A  F015         	movff	_fround$1304,___ftmul@f1
  4507  00165C  C02B  F016         	movff	_fround$1304+1,___ftmul@f1+1
  4508  001660  C02C  F017         	movff	_fround$1304+2,___ftmul@f1+2
  4509  001664  0E00               	movlw	0
  4510  001666  6E18               	movwf	___ftmul@f2,c
  4511  001668  0E00               	movlw	0
  4512  00166A  6E19               	movwf	___ftmul@f2+1,c
  4513  00166C  0E3F               	movlw	63
  4514  00166E  6E1A               	movwf	___ftmul@f2+2,c
  4515  001670  EC5E  F00D         	call	___ftmul	;wreg free
  4516  001674  D799               	goto	L4
  4517  001676                     i2l2281:
  4518                           
  4519                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4520  001676  502D               	movf	fround@prec,w,c
  4521  001678  0D03               	mullw	3
  4522  00167A  0E29               	movlw	low __npowers_
  4523  00167C  24F3               	addwf	prodl,w,c
  4524  00167E  6EF6               	movwf	tblptrl,c
  4525  001680  0E06               	movlw	high __npowers_
  4526  001682  20F4               	addwfc	prodh,w,c
  4527  001684  6EF7               	movwf	tblptrh,c
  4528  001686                     	if	0	;There are less than 3 active tblptr bytes
  4529  001686                     	endif
  4530  001686  0009               	tblrd		*+
  4531  001688  CFF5 F015          	movff	tablat,___ftmul@f1
  4532  00168C  0009               	tblrd		*+
  4533  00168E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4534  001692  000A               	tblrd		*-
  4535  001694  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4536  001698  0E00               	movlw	0
  4537  00169A  6E18               	movwf	___ftmul@f2,c
  4538  00169C  0E00               	movlw	0
  4539  00169E  6E19               	movwf	___ftmul@f2+1,c
  4540  0016A0  0E3F               	movlw	63
  4541  0016A2  6E1A               	movwf	___ftmul@f2+2,c
  4542  0016A4  EC5E  F00D         	call	___ftmul	;wreg free
  4543  0016A8  C015  F024         	movff	?___ftmul,?_fround
  4544  0016AC  C016  F025         	movff	?___ftmul+1,?_fround+1
  4545  0016B0  C017  F026         	movff	?___ftmul+2,?_fround+2
  4546  0016B4  0012               	return	
  4547  0016B6                     __end_of_fround:
  4548                           	opt stack 0
  4549                           tosu	equ	0xFFF
  4550                           tosh	equ	0xFFE
  4551                           tosl	equ	0xFFD
  4552                           pclatu	equ	0xFFB
  4553                           pclath	equ	0xFFA
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           intcon	equ	0xFF2
  4561                           intcon2	equ	0xFF1
  4562                           fsr0h	equ	0xFEA
  4563                           fsr0l	equ	0xFE9
  4564                           wreg	equ	0xFE8
  4565                           fsr1h	equ	0xFE2
  4566                           fsr1l	equ	0xFE1
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function ___wmul *****************
  4574 ;; Defined at:
  4575 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  multiplier      2   14[COMRAM] unsigned int 
  4578 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  product         2   18[COMRAM] unsigned int 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  2   14[COMRAM] unsigned int 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0, prodl, prodh
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4590 ;;      Params:         4       0       0       0       0       0       0
  4591 ;;      Locals:         2       0       0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0
  4593 ;;      Totals:         6       0       0       0       0       0       0
  4594 ;;Total ram usage:        6 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_fround
  4600 ;;		_scale
  4601 ;;		_printf
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text22
  4606  0022A8                     __ptext22:
  4607                           	opt stack 0
  4608  0022A8                     ___wmul:
  4609                           	opt stack 23
  4610                           
  4611                           ;incstack = 0
  4612  0022A8  500F               	movf	___wmul@multiplier,w,c
  4613  0022AA  0211               	mulwf	___wmul@multiplicand,c
  4614  0022AC  CFF3 F013          	movff	prodl,___wmul@product
  4615  0022B0  CFF4 F014          	movff	prodh,___wmul@product+1
  4616  0022B4  500F               	movf	___wmul@multiplier,w,c
  4617  0022B6  0212               	mulwf	___wmul@multiplicand+1,c
  4618  0022B8  50F3               	movf	prodl,w,c
  4619  0022BA  2614               	addwf	___wmul@product+1,f,c
  4620  0022BC  5010               	movf	___wmul@multiplier+1,w,c
  4621  0022BE  0211               	mulwf	___wmul@multiplicand,c
  4622  0022C0  50F3               	movf	prodl,w,c
  4623  0022C2  2614               	addwf	___wmul@product+1,f,c
  4624  0022C4  C013  F00F         	movff	___wmul@product,?___wmul
  4625  0022C8  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4626  0022CC  0012               	return	
  4627  0022CE                     __end_of___wmul:
  4628                           	opt stack 0
  4629                           tosu	equ	0xFFF
  4630                           tosh	equ	0xFFE
  4631                           tosl	equ	0xFFD
  4632                           pclatu	equ	0xFFB
  4633                           pclath	equ	0xFFA
  4634                           tblptru	equ	0xFF8
  4635                           tblptrh	equ	0xFF7
  4636                           tblptrl	equ	0xFF6
  4637                           tablat	equ	0xFF5
  4638                           prodh	equ	0xFF4
  4639                           prodl	equ	0xFF3
  4640                           intcon	equ	0xFF2
  4641                           intcon2	equ	0xFF1
  4642                           fsr0h	equ	0xFEA
  4643                           fsr0l	equ	0xFE9
  4644                           wreg	equ	0xFE8
  4645                           fsr1h	equ	0xFE2
  4646                           fsr1l	equ	0xFE1
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function ___ftmul *****************
  4654 ;; Defined at:
  4655 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  f1              3   20[COMRAM] float 
  4658 ;;  f2              3   23[COMRAM] float 
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  4661 ;;  sign            1   34[COMRAM] unsigned char 
  4662 ;;  cntr            1   33[COMRAM] unsigned char 
  4663 ;;  exp             1   29[COMRAM] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  3   20[COMRAM] float 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4673 ;;      Params:         6       0       0       0       0       0       0
  4674 ;;      Locals:         6       0       0       0       0       0       0
  4675 ;;      Temps:          3       0       0       0       0       0       0
  4676 ;;      Totals:        15       0       0       0       0       0       0
  4677 ;;Total ram usage:       15 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    1
  4680 ;; This function calls:
  4681 ;;		___ftpack
  4682 ;; This function is called by:
  4683 ;;		_INT0_ISR
  4684 ;;		_fround
  4685 ;;		_scale
  4686 ;;		_printf
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           	psect	text23
  4691  001ABC                     __ptext23:
  4692                           	opt stack 0
  4693  001ABC                     ___ftmul:
  4694                           	opt stack 22
  4695                           
  4696                           ;incstack = 0
  4697  001ABC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4698  001AC0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4699  001AC2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4700  001AC4  3416               	rlcf	___ftmul@f1+1,w,c
  4701  001AC6  361B               	rlcf	??___ftmul& (0+255),f,c
  4702  001AC8  E301               	bnc	u192_41
  4703  001ACA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4704  001ACC                     u192_41:
  4705  001ACC  501B               	movf	??___ftmul,w,c
  4706  001ACE  6E1E               	movwf	___ftmul@exp,c
  4707  001AD0  501E               	movf	___ftmul@exp,w,c
  4708  001AD2  A4D8               	btfss	status,2,c
  4709  001AD4  D007               	goto	i2l2133
  4710  001AD6  0E00               	movlw	0
  4711  001AD8  6E15               	movwf	?___ftmul,c
  4712  001ADA  0E00               	movlw	0
  4713  001ADC  6E16               	movwf	?___ftmul+1,c
  4714  001ADE  0E00               	movlw	0
  4715  001AE0  6E17               	movwf	?___ftmul+2,c
  4716  001AE2  0012               	return	
  4717  001AE4                     i2l2133:
  4718  001AE4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4719  001AE8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4720  001AEA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4721  001AEC  3419               	rlcf	___ftmul@f2+1,w,c
  4722  001AEE  361B               	rlcf	??___ftmul& (0+255),f,c
  4723  001AF0  E301               	bnc	u194_41
  4724  001AF2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4725  001AF4                     u194_41:
  4726  001AF4  501B               	movf	??___ftmul,w,c
  4727  001AF6  6E23               	movwf	___ftmul@sign,c
  4728  001AF8  5023               	movf	___ftmul@sign,w,c
  4729  001AFA  A4D8               	btfss	status,2,c
  4730  001AFC  D007               	goto	i2l2139
  4731  001AFE  0E00               	movlw	0
  4732  001B00  6E15               	movwf	?___ftmul,c
  4733  001B02  0E00               	movlw	0
  4734  001B04  6E16               	movwf	?___ftmul+1,c
  4735  001B06  0E00               	movlw	0
  4736  001B08  6E17               	movwf	?___ftmul+2,c
  4737  001B0A  0012               	return	
  4738  001B0C                     i2l2139:
  4739  001B0C  5023               	movf	___ftmul@sign,w,c
  4740  001B0E  0F7B               	addlw	123
  4741  001B10  261E               	addwf	___ftmul@exp,f,c
  4742  001B12  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4743  001B16  501A               	movf	___ftmul@f2+2,w,c
  4744  001B18  1A23               	xorwf	___ftmul@sign,f,c
  4745  001B1A  0E80               	movlw	128
  4746  001B1C  1623               	andwf	___ftmul@sign,f,c
  4747  001B1E  8E16               	bsf	___ftmul@f1+1,7,c
  4748  001B20  8E19               	bsf	___ftmul@f2+1,7,c
  4749  001B22  0EFF               	movlw	255
  4750  001B24  1618               	andwf	___ftmul@f2,f,c
  4751  001B26  0EFF               	movlw	255
  4752  001B28  1619               	andwf	___ftmul@f2+1,f,c
  4753  001B2A  0E00               	movlw	0
  4754  001B2C  161A               	andwf	___ftmul@f2+2,f,c
  4755  001B2E  0E00               	movlw	0
  4756  001B30  6E1F               	movwf	___ftmul@f3_as_product,c
  4757  001B32  0E00               	movlw	0
  4758  001B34  6E20               	movwf	___ftmul@f3_as_product+1,c
  4759  001B36  0E00               	movlw	0
  4760  001B38  6E21               	movwf	___ftmul@f3_as_product+2,c
  4761  001B3A  0E07               	movlw	7
  4762  001B3C  6E22               	movwf	___ftmul@cntr,c
  4763  001B3E                     i2l2153:
  4764  001B3E  A015               	btfss	___ftmul@f1,0,c
  4765  001B40  D006               	goto	i2l2157
  4766  001B42  5018               	movf	___ftmul@f2,w,c
  4767  001B44  261F               	addwf	___ftmul@f3_as_product,f,c
  4768  001B46  5019               	movf	___ftmul@f2+1,w,c
  4769  001B48  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4770  001B4A  501A               	movf	___ftmul@f2+2,w,c
  4771  001B4C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4772  001B4E                     i2l2157:
  4773  001B4E  90D8               	bcf	status,0,c
  4774  001B50  3217               	rrcf	___ftmul@f1+2,f,c
  4775  001B52  3216               	rrcf	___ftmul@f1+1,f,c
  4776  001B54  3215               	rrcf	___ftmul@f1,f,c
  4777  001B56  90D8               	bcf	status,0,c
  4778  001B58  3618               	rlcf	___ftmul@f2,f,c
  4779  001B5A  3619               	rlcf	___ftmul@f2+1,f,c
  4780  001B5C  361A               	rlcf	___ftmul@f2+2,f,c
  4781  001B5E  2E22               	decfsz	___ftmul@cntr,f,c
  4782  001B60  D7EE               	goto	i2l2153
  4783  001B62  0E09               	movlw	9
  4784  001B64  6E22               	movwf	___ftmul@cntr,c
  4785  001B66                     i2l2163:
  4786  001B66  A015               	btfss	___ftmul@f1,0,c
  4787  001B68  D006               	goto	i2l2167
  4788  001B6A  5018               	movf	___ftmul@f2,w,c
  4789  001B6C  261F               	addwf	___ftmul@f3_as_product,f,c
  4790  001B6E  5019               	movf	___ftmul@f2+1,w,c
  4791  001B70  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4792  001B72  501A               	movf	___ftmul@f2+2,w,c
  4793  001B74  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4794  001B76                     i2l2167:
  4795  001B76  90D8               	bcf	status,0,c
  4796  001B78  3217               	rrcf	___ftmul@f1+2,f,c
  4797  001B7A  3216               	rrcf	___ftmul@f1+1,f,c
  4798  001B7C  3215               	rrcf	___ftmul@f1,f,c
  4799  001B7E  90D8               	bcf	status,0,c
  4800  001B80  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4801  001B82  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4802  001B84  321F               	rrcf	___ftmul@f3_as_product,f,c
  4803  001B86  2E22               	decfsz	___ftmul@cntr,f,c
  4804  001B88  D7EE               	goto	i2l2163
  4805  001B8A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4806  001B8E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4807  001B92  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4808  001B96  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4809  001B9A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4810  001B9E  ECC5  F00E         	call	___ftpack	;wreg free
  4811  001BA2  C001  F015         	movff	?___ftpack,?___ftmul
  4812  001BA6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4813  001BAA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4814  001BAE  0012               	return	
  4815  001BB0                     __end_of___ftmul:
  4816                           	opt stack 0
  4817                           tosu	equ	0xFFF
  4818                           tosh	equ	0xFFE
  4819                           tosl	equ	0xFFD
  4820                           pclatu	equ	0xFFB
  4821                           pclath	equ	0xFFA
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           intcon2	equ	0xFF1
  4830                           fsr0h	equ	0xFEA
  4831                           fsr0l	equ	0xFE9
  4832                           wreg	equ	0xFE8
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function ___awmod *****************
  4842 ;; Defined at:
  4843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  dividend        2    0[COMRAM] int 
  4846 ;;  divisor         2    2[COMRAM] int 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  sign            1    5[COMRAM] unsigned char 
  4849 ;;  counter         1    4[COMRAM] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  2    0[COMRAM] int 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4859 ;;      Params:         4       0       0       0       0       0       0
  4860 ;;      Locals:         2       0       0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0
  4862 ;;      Totals:         6       0       0       0       0       0       0
  4863 ;;Total ram usage:        6 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		_fround
  4869 ;;		_scale
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text24
  4874  002052                     __ptext24:
  4875                           	opt stack 0
  4876  002052                     ___awmod:
  4877                           	opt stack 23
  4878                           
  4879                           ;incstack = 0
  4880  002052  0E00               	movlw	0
  4881  002054  6E06               	movwf	___awmod@sign,c
  4882  002056  AE02               	btfss	___awmod@dividend+1,7,c
  4883  002058  D006               	goto	i2l2227
  4884  00205A  6C01               	negf	___awmod@dividend,c
  4885  00205C  1E02               	comf	___awmod@dividend+1,f,c
  4886  00205E  B0D8               	btfsc	status,0,c
  4887  002060  2A02               	incf	___awmod@dividend+1,f,c
  4888  002062  0E01               	movlw	1
  4889  002064  6E06               	movwf	___awmod@sign,c
  4890  002066                     i2l2227:
  4891  002066  AE04               	btfss	___awmod@divisor+1,7,c
  4892  002068  D004               	goto	i2l2231
  4893  00206A  6C03               	negf	___awmod@divisor,c
  4894  00206C  1E04               	comf	___awmod@divisor+1,f,c
  4895  00206E  B0D8               	btfsc	status,0,c
  4896  002070  2A04               	incf	___awmod@divisor+1,f,c
  4897  002072                     i2l2231:
  4898  002072  5003               	movf	___awmod@divisor,w,c
  4899  002074  1004               	iorwf	___awmod@divisor+1,w,c
  4900  002076  B4D8               	btfsc	status,2,c
  4901  002078  D018               	goto	i2l2247
  4902  00207A  0E01               	movlw	1
  4903  00207C  6E05               	movwf	___awmod@counter,c
  4904  00207E  D004               	goto	i2l2237
  4905  002080                     i2l2235:
  4906  002080  90D8               	bcf	status,0,c
  4907  002082  3603               	rlcf	___awmod@divisor,f,c
  4908  002084  3604               	rlcf	___awmod@divisor+1,f,c
  4909  002086  2A05               	incf	___awmod@counter,f,c
  4910  002088                     i2l2237:
  4911  002088  AE04               	btfss	___awmod@divisor+1,7,c
  4912  00208A  D7FA               	goto	i2l2235
  4913  00208C                     i2l2239:
  4914  00208C  5003               	movf	___awmod@divisor,w,c
  4915  00208E  5C01               	subwf	___awmod@dividend,w,c
  4916  002090  5004               	movf	___awmod@divisor+1,w,c
  4917  002092  5802               	subwfb	___awmod@dividend+1,w,c
  4918  002094  A0D8               	btfss	status,0,c
  4919  002096  D004               	goto	i2l2243
  4920  002098  5003               	movf	___awmod@divisor,w,c
  4921  00209A  5E01               	subwf	___awmod@dividend,f,c
  4922  00209C  5004               	movf	___awmod@divisor+1,w,c
  4923  00209E  5A02               	subwfb	___awmod@dividend+1,f,c
  4924  0020A0                     i2l2243:
  4925  0020A0  90D8               	bcf	status,0,c
  4926  0020A2  3204               	rrcf	___awmod@divisor+1,f,c
  4927  0020A4  3203               	rrcf	___awmod@divisor,f,c
  4928  0020A6  2E05               	decfsz	___awmod@counter,f,c
  4929  0020A8  D7F1               	goto	i2l2239
  4930  0020AA                     i2l2247:
  4931  0020AA  5006               	movf	___awmod@sign,w,c
  4932  0020AC  B4D8               	btfsc	status,2,c
  4933  0020AE  D004               	goto	i2l2251
  4934  0020B0  6C01               	negf	___awmod@dividend,c
  4935  0020B2  1E02               	comf	___awmod@dividend+1,f,c
  4936  0020B4  B0D8               	btfsc	status,0,c
  4937  0020B6  2A02               	incf	___awmod@dividend+1,f,c
  4938  0020B8                     i2l2251:
  4939  0020B8  C001  F001         	movff	___awmod@dividend,?___awmod
  4940  0020BC  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4941  0020C0  0012               	return	
  4942  0020C2                     __end_of___awmod:
  4943                           	opt stack 0
  4944                           tosu	equ	0xFFF
  4945                           tosh	equ	0xFFE
  4946                           tosl	equ	0xFFD
  4947                           pclatu	equ	0xFFB
  4948                           pclath	equ	0xFFA
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           intcon2	equ	0xFF1
  4957                           fsr0h	equ	0xFEA
  4958                           fsr0l	equ	0xFE9
  4959                           wreg	equ	0xFE8
  4960                           fsr1h	equ	0xFE2
  4961                           fsr1l	equ	0xFE1
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function ___awdiv *****************
  4969 ;; Defined at:
  4970 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  dividend        2    6[COMRAM] int 
  4973 ;;  divisor         2    8[COMRAM] int 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  quotient        2   12[COMRAM] int 
  4976 ;;  sign            1   11[COMRAM] unsigned char 
  4977 ;;  counter         1   10[COMRAM] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  2    6[COMRAM] int 
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4987 ;;      Params:         4       0       0       0       0       0       0
  4988 ;;      Locals:         4       0       0       0       0       0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0
  4990 ;;      Totals:         8       0       0       0       0       0       0
  4991 ;;Total ram usage:        8 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_fround
  4997 ;;		_scale
  4998 ;;		_printf
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text25
  5003  001F4C                     __ptext25:
  5004                           	opt stack 0
  5005  001F4C                     ___awdiv:
  5006                           	opt stack 23
  5007                           
  5008                           ;incstack = 0
  5009  001F4C  0E00               	movlw	0
  5010  001F4E  6E0C               	movwf	___awdiv@sign,c
  5011  001F50  AE0A               	btfss	___awdiv@divisor+1,7,c
  5012  001F52  D006               	goto	i2l2183
  5013  001F54  6C09               	negf	___awdiv@divisor,c
  5014  001F56  1E0A               	comf	___awdiv@divisor+1,f,c
  5015  001F58  B0D8               	btfsc	status,0,c
  5016  001F5A  2A0A               	incf	___awdiv@divisor+1,f,c
  5017  001F5C  0E01               	movlw	1
  5018  001F5E  6E0C               	movwf	___awdiv@sign,c
  5019  001F60                     i2l2183:
  5020  001F60  AE08               	btfss	___awdiv@dividend+1,7,c
  5021  001F62  D006               	goto	i2l2189
  5022  001F64  6C07               	negf	___awdiv@dividend,c
  5023  001F66  1E08               	comf	___awdiv@dividend+1,f,c
  5024  001F68  B0D8               	btfsc	status,0,c
  5025  001F6A  2A08               	incf	___awdiv@dividend+1,f,c
  5026  001F6C  0E01               	movlw	1
  5027  001F6E  1A0C               	xorwf	___awdiv@sign,f,c
  5028  001F70                     i2l2189:
  5029  001F70  0E00               	movlw	0
  5030  001F72  6E0E               	movwf	___awdiv@quotient+1,c
  5031  001F74  0E00               	movlw	0
  5032  001F76  6E0D               	movwf	___awdiv@quotient,c
  5033  001F78  5009               	movf	___awdiv@divisor,w,c
  5034  001F7A  100A               	iorwf	___awdiv@divisor+1,w,c
  5035  001F7C  B4D8               	btfsc	status,2,c
  5036  001F7E  D01C               	goto	i2l2211
  5037  001F80  0E01               	movlw	1
  5038  001F82  6E0B               	movwf	___awdiv@counter,c
  5039  001F84  D004               	goto	i2l2197
  5040  001F86                     i2l2195:
  5041  001F86  90D8               	bcf	status,0,c
  5042  001F88  3609               	rlcf	___awdiv@divisor,f,c
  5043  001F8A  360A               	rlcf	___awdiv@divisor+1,f,c
  5044  001F8C  2A0B               	incf	___awdiv@counter,f,c
  5045  001F8E                     i2l2197:
  5046  001F8E  AE0A               	btfss	___awdiv@divisor+1,7,c
  5047  001F90  D7FA               	goto	i2l2195
  5048  001F92                     i2l2199:
  5049  001F92  90D8               	bcf	status,0,c
  5050  001F94  360D               	rlcf	___awdiv@quotient,f,c
  5051  001F96  360E               	rlcf	___awdiv@quotient+1,f,c
  5052  001F98  5009               	movf	___awdiv@divisor,w,c
  5053  001F9A  5C07               	subwf	___awdiv@dividend,w,c
  5054  001F9C  500A               	movf	___awdiv@divisor+1,w,c
  5055  001F9E  5808               	subwfb	___awdiv@dividend+1,w,c
  5056  001FA0  A0D8               	btfss	status,0,c
  5057  001FA2  D005               	goto	i2l2207
  5058  001FA4  5009               	movf	___awdiv@divisor,w,c
  5059  001FA6  5E07               	subwf	___awdiv@dividend,f,c
  5060  001FA8  500A               	movf	___awdiv@divisor+1,w,c
  5061  001FAA  5A08               	subwfb	___awdiv@dividend+1,f,c
  5062  001FAC  800D               	bsf	___awdiv@quotient,0,c
  5063  001FAE                     i2l2207:
  5064  001FAE  90D8               	bcf	status,0,c
  5065  001FB0  320A               	rrcf	___awdiv@divisor+1,f,c
  5066  001FB2  3209               	rrcf	___awdiv@divisor,f,c
  5067  001FB4  2E0B               	decfsz	___awdiv@counter,f,c
  5068  001FB6  D7ED               	goto	i2l2199
  5069  001FB8                     i2l2211:
  5070  001FB8  500C               	movf	___awdiv@sign,w,c
  5071  001FBA  B4D8               	btfsc	status,2,c
  5072  001FBC  D004               	goto	i2l2215
  5073  001FBE  6C0D               	negf	___awdiv@quotient,c
  5074  001FC0  1E0E               	comf	___awdiv@quotient+1,f,c
  5075  001FC2  B0D8               	btfsc	status,0,c
  5076  001FC4  2A0E               	incf	___awdiv@quotient+1,f,c
  5077  001FC6                     i2l2215:
  5078  001FC6  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5079  001FCA  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5080  001FCE  0012               	return	
  5081  001FD0                     __end_of___awdiv:
  5082                           	opt stack 0
  5083                           tosu	equ	0xFFF
  5084                           tosh	equ	0xFFE
  5085                           tosl	equ	0xFFD
  5086                           pclatu	equ	0xFFB
  5087                           pclath	equ	0xFFA
  5088                           tblptru	equ	0xFF8
  5089                           tblptrh	equ	0xFF7
  5090                           tblptrl	equ	0xFF6
  5091                           tablat	equ	0xFF5
  5092                           prodh	equ	0xFF4
  5093                           prodl	equ	0xFF3
  5094                           intcon	equ	0xFF2
  5095                           intcon2	equ	0xFF1
  5096                           fsr0h	equ	0xFEA
  5097                           fsr0l	equ	0xFE9
  5098                           wreg	equ	0xFE8
  5099                           fsr1h	equ	0xFE2
  5100                           fsr1l	equ	0xFE1
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function __tdiv_to_l_ *****************
  5108 ;; Defined at:
  5109 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  f1              3    0[COMRAM] float 
  5112 ;;  f2              3    3[COMRAM] float 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  quot            4    9[COMRAM] unsigned long 
  5115 ;;  exp1            1   14[COMRAM] unsigned char 
  5116 ;;  cntr            1   13[COMRAM] unsigned char 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  4    0[COMRAM] unsigned long 
  5119 ;; Registers used:
  5120 ;;		wreg, status,2, status,0
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5126 ;;      Params:         6       0       0       0       0       0       0
  5127 ;;      Locals:         6       0       0       0       0       0       0
  5128 ;;      Temps:          3       0       0       0       0       0       0
  5129 ;;      Totals:        15       0       0       0       0       0       0
  5130 ;;Total ram usage:       15 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_printf
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text26
  5140  001862                     __ptext26:
  5141                           	opt stack 0
  5142  001862                     __tdiv_to_l_:
  5143                           	opt stack 24
  5144                           
  5145                           ;incstack = 0
  5146  001862  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5147  001866  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5148  001868  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5149  00186A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5150  00186C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5151  00186E  E301               	bnc	u219_41
  5152  001870  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5153  001872                     u219_41:
  5154  001872  5007               	movf	??__tdiv_to_l_,w,c
  5155  001874  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5156  001876  500F               	movf	__tdiv_to_l_@exp1,w,c
  5157  001878  A4D8               	btfss	status,2,c
  5158  00187A  D009               	goto	i2l2341
  5159  00187C  0E00               	movlw	0
  5160  00187E  6E01               	movwf	?__tdiv_to_l_,c
  5161  001880  0E00               	movlw	0
  5162  001882  6E02               	movwf	?__tdiv_to_l_+1,c
  5163  001884  0E00               	movlw	0
  5164  001886  6E03               	movwf	?__tdiv_to_l_+2,c
  5165  001888  0E00               	movlw	0
  5166  00188A  6E04               	movwf	?__tdiv_to_l_+3,c
  5167  00188C  0012               	return	
  5168  00188E                     i2l2341:
  5169  00188E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5170  001892  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5171  001894  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5172  001896  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5173  001898  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5174  00189A  E301               	bnc	u221_41
  5175  00189C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5176  00189E                     u221_41:
  5177  00189E  5007               	movf	??__tdiv_to_l_,w,c
  5178  0018A0  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5179  0018A2  500E               	movf	__tdiv_to_l_@cntr,w,c
  5180  0018A4  A4D8               	btfss	status,2,c
  5181  0018A6  D009               	goto	i2l2347
  5182  0018A8  0E00               	movlw	0
  5183  0018AA  6E01               	movwf	?__tdiv_to_l_,c
  5184  0018AC  0E00               	movlw	0
  5185  0018AE  6E02               	movwf	?__tdiv_to_l_+1,c
  5186  0018B0  0E00               	movlw	0
  5187  0018B2  6E03               	movwf	?__tdiv_to_l_+2,c
  5188  0018B4  0E00               	movlw	0
  5189  0018B6  6E04               	movwf	?__tdiv_to_l_+3,c
  5190  0018B8  0012               	return	
  5191  0018BA                     i2l2347:
  5192  0018BA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5193  0018BC  0EFF               	movlw	255
  5194  0018BE  1601               	andwf	__tdiv_to_l_@f1,f,c
  5195  0018C0  0EFF               	movlw	255
  5196  0018C2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5197  0018C4  0E00               	movlw	0
  5198  0018C6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5199  0018C8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5200  0018CA  0EFF               	movlw	255
  5201  0018CC  1604               	andwf	__tdiv_to_l_@f2,f,c
  5202  0018CE  0EFF               	movlw	255
  5203  0018D0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5204  0018D2  0E00               	movlw	0
  5205  0018D4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5206  0018D6  0E00               	movlw	0
  5207  0018D8  6E0A               	movwf	__tdiv_to_l_@quot,c
  5208  0018DA  0E00               	movlw	0
  5209  0018DC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5210  0018DE  0E00               	movlw	0
  5211  0018E0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5212  0018E2  0E00               	movlw	0
  5213  0018E4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5214  0018E6  0E7F               	movlw	127
  5215  0018E8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5216  0018EA  500E               	movf	__tdiv_to_l_@cntr,w,c
  5217  0018EC  0F98               	addlw	152
  5218  0018EE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5219  0018F0  0E18               	movlw	24
  5220  0018F2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5221  0018F4                     i2l643:
  5222  0018F4  90D8               	bcf	status,0,c
  5223  0018F6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5224  0018F8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5225  0018FA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5226  0018FC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5227  0018FE  5004               	movf	__tdiv_to_l_@f2,w,c
  5228  001900  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5229  001902  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5230  001904  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5231  001906  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5232  001908  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5233  00190A  A0D8               	btfss	status,0,c
  5234  00190C  D007               	goto	i2l644
  5235  00190E  5004               	movf	__tdiv_to_l_@f2,w,c
  5236  001910  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5237  001912  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5238  001914  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5239  001916  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5240  001918  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5241  00191A  800A               	bsf	__tdiv_to_l_@quot,0,c
  5242  00191C                     i2l644:
  5243  00191C  90D8               	bcf	status,0,c
  5244  00191E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5245  001920  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5246  001922  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5247  001924  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5248  001926  D7E6               	goto	i2l643
  5249  001928  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5250  00192A  D016               	goto	i2l2381
  5251  00192C  500F               	movf	__tdiv_to_l_@exp1,w,c
  5252  00192E  0A80               	xorlw	128
  5253  001930  0F97               	addlw	151
  5254  001932  B0D8               	btfsc	status,0,c
  5255  001934  D009               	goto	i2l2377
  5256  001936  0E00               	movlw	0
  5257  001938  6E01               	movwf	?__tdiv_to_l_,c
  5258  00193A  0E00               	movlw	0
  5259  00193C  6E02               	movwf	?__tdiv_to_l_+1,c
  5260  00193E  0E00               	movlw	0
  5261  001940  6E03               	movwf	?__tdiv_to_l_+2,c
  5262  001942  0E00               	movlw	0
  5263  001944  6E04               	movwf	?__tdiv_to_l_+3,c
  5264  001946  0012               	return	
  5265  001948                     i2l2377:
  5266  001948  90D8               	bcf	status,0,c
  5267  00194A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5268  00194C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5269  00194E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5270  001950  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5271  001952  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5272  001954  D7F9               	goto	i2l2377
  5273  001956  D015               	goto	i2l650
  5274  001958                     i2l2381:
  5275  001958  0E17               	movlw	23
  5276  00195A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5277  00195C  D00F               	goto	i2l2389
  5278  00195E  0E00               	movlw	0
  5279  001960  6E01               	movwf	?__tdiv_to_l_,c
  5280  001962  0E00               	movlw	0
  5281  001964  6E02               	movwf	?__tdiv_to_l_+1,c
  5282  001966  0E00               	movlw	0
  5283  001968  6E03               	movwf	?__tdiv_to_l_+2,c
  5284  00196A  0E00               	movlw	0
  5285  00196C  6E04               	movwf	?__tdiv_to_l_+3,c
  5286  00196E  0012               	return	
  5287  001970                     i2l2387:
  5288  001970  90D8               	bcf	status,0,c
  5289  001972  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5290  001974  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5291  001976  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5292  001978  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5293  00197A  060F               	decf	__tdiv_to_l_@exp1,f,c
  5294  00197C                     i2l2389:
  5295  00197C  500F               	movf	__tdiv_to_l_@exp1,w,c
  5296  00197E  A4D8               	btfss	status,2,c
  5297  001980  D7F7               	goto	i2l2387
  5298  001982                     i2l650:
  5299  001982  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5300  001986  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5301  00198A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5302  00198E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5303  001992  0012               	return		;funcret
  5304  001994                     __end_of__tdiv_to_l_:
  5305                           	opt stack 0
  5306                           tosu	equ	0xFFF
  5307                           tosh	equ	0xFFE
  5308                           tosl	equ	0xFFD
  5309                           pclatu	equ	0xFFB
  5310                           pclath	equ	0xFFA
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           intcon2	equ	0xFF1
  5319                           fsr0h	equ	0xFEA
  5320                           fsr0l	equ	0xFE9
  5321                           wreg	equ	0xFE8
  5322                           fsr1h	equ	0xFE2
  5323                           fsr1l	equ	0xFE1
  5324                           postinc2	equ	0xFDE
  5325                           postdec2	equ	0xFDD
  5326                           fsr2h	equ	0xFDA
  5327                           fsr2l	equ	0xFD9
  5328                           status	equ	0xFD8
  5329                           
  5330 ;; *************** function __div_to_l_ *****************
  5331 ;; Defined at:
  5332 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  f1              3    0[COMRAM] unsigned long 
  5335 ;;  f2              3    3[COMRAM] unsigned long 
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;  quot            4    6[COMRAM] unsigned long 
  5338 ;;  exp1            1   11[COMRAM] unsigned char 
  5339 ;;  cntr            1   10[COMRAM] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  4    0[COMRAM] unsigned long 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5349 ;;      Params:         6       0       0       0       0       0       0
  5350 ;;      Locals:         6       0       0       0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0
  5352 ;;      Totals:        12       0       0       0       0       0       0
  5353 ;;Total ram usage:       12 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_printf
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text27
  5363  001994                     __ptext27:
  5364                           	opt stack 0
  5365  001994                     __div_to_l_:
  5366                           	opt stack 24
  5367                           
  5368                           ;incstack = 0
  5369  001994  3403               	rlcf	__div_to_l_@f1+2,w,c
  5370  001996  3404               	rlcf	__div_to_l_@f1+3,w,c
  5371  001998  6E0C               	movwf	__div_to_l_@exp1,c
  5372  00199A  500C               	movf	__div_to_l_@exp1,w,c
  5373  00199C  A4D8               	btfss	status,2,c
  5374  00199E  D009               	goto	i2l2397
  5375  0019A0  0E00               	movlw	0
  5376  0019A2  6E01               	movwf	?__div_to_l_,c
  5377  0019A4  0E00               	movlw	0
  5378  0019A6  6E02               	movwf	?__div_to_l_+1,c
  5379  0019A8  0E00               	movlw	0
  5380  0019AA  6E03               	movwf	?__div_to_l_+2,c
  5381  0019AC  0E00               	movlw	0
  5382  0019AE  6E04               	movwf	?__div_to_l_+3,c
  5383  0019B0  0012               	return	
  5384  0019B2                     i2l2397:
  5385  0019B2  3406               	rlcf	__div_to_l_@f2+2,w,c
  5386  0019B4  3407               	rlcf	__div_to_l_@f2+3,w,c
  5387  0019B6  6E0B               	movwf	__div_to_l_@cntr,c
  5388  0019B8  500B               	movf	__div_to_l_@cntr,w,c
  5389  0019BA  A4D8               	btfss	status,2,c
  5390  0019BC  D009               	goto	i2l2403
  5391  0019BE  0E00               	movlw	0
  5392  0019C0  6E01               	movwf	?__div_to_l_,c
  5393  0019C2  0E00               	movlw	0
  5394  0019C4  6E02               	movwf	?__div_to_l_+1,c
  5395  0019C6  0E00               	movlw	0
  5396  0019C8  6E03               	movwf	?__div_to_l_+2,c
  5397  0019CA  0E00               	movlw	0
  5398  0019CC  6E04               	movwf	?__div_to_l_+3,c
  5399  0019CE  0012               	return	
  5400  0019D0                     i2l2403:
  5401  0019D0  8E03               	bsf	__div_to_l_@f1+2,7,c
  5402  0019D2  0EFF               	movlw	255
  5403  0019D4  1601               	andwf	__div_to_l_@f1,f,c
  5404  0019D6  0EFF               	movlw	255
  5405  0019D8  1602               	andwf	__div_to_l_@f1+1,f,c
  5406  0019DA  0EFF               	movlw	255
  5407  0019DC  1603               	andwf	__div_to_l_@f1+2,f,c
  5408  0019DE  0E00               	movlw	0
  5409  0019E0  1604               	andwf	__div_to_l_@f1+3,f,c
  5410  0019E2  8E06               	bsf	__div_to_l_@f2+2,7,c
  5411  0019E4  0EFF               	movlw	255
  5412  0019E6  1604               	andwf	__div_to_l_@f2,f,c
  5413  0019E8  0EFF               	movlw	255
  5414  0019EA  1605               	andwf	__div_to_l_@f2+1,f,c
  5415  0019EC  0EFF               	movlw	255
  5416  0019EE  1606               	andwf	__div_to_l_@f2+2,f,c
  5417  0019F0  0E00               	movlw	0
  5418  0019F2  1607               	andwf	__div_to_l_@f2+3,f,c
  5419  0019F4  0E00               	movlw	0
  5420  0019F6  6E07               	movwf	__div_to_l_@quot,c
  5421  0019F8  0E00               	movlw	0
  5422  0019FA  6E08               	movwf	__div_to_l_@quot+1,c
  5423  0019FC  0E00               	movlw	0
  5424  0019FE  6E09               	movwf	__div_to_l_@quot+2,c
  5425  001A00  0E00               	movlw	0
  5426  001A02  6E0A               	movwf	__div_to_l_@quot+3,c
  5427  001A04  0E7F               	movlw	127
  5428  001A06  5E0C               	subwf	__div_to_l_@exp1,f,c
  5429  001A08  500B               	movf	__div_to_l_@cntr,w,c
  5430  001A0A  0FA0               	addlw	160
  5431  001A0C  5E0C               	subwf	__div_to_l_@exp1,f,c
  5432  001A0E  0E20               	movlw	32
  5433  001A10  6E0B               	movwf	__div_to_l_@cntr,c
  5434  001A12                     i2l2417:
  5435  001A12  90D8               	bcf	status,0,c
  5436  001A14  3607               	rlcf	__div_to_l_@quot,f,c
  5437  001A16  3608               	rlcf	__div_to_l_@quot+1,f,c
  5438  001A18  3609               	rlcf	__div_to_l_@quot+2,f,c
  5439  001A1A  360A               	rlcf	__div_to_l_@quot+3,f,c
  5440  001A1C  5004               	movf	__div_to_l_@f2,w,c
  5441  001A1E  5C01               	subwf	__div_to_l_@f1,w,c
  5442  001A20  5005               	movf	__div_to_l_@f2+1,w,c
  5443  001A22  5802               	subwfb	__div_to_l_@f1+1,w,c
  5444  001A24  5006               	movf	__div_to_l_@f2+2,w,c
  5445  001A26  5803               	subwfb	__div_to_l_@f1+2,w,c
  5446  001A28  5007               	movf	__div_to_l_@f2+3,w,c
  5447  001A2A  5804               	subwfb	__div_to_l_@f1+3,w,c
  5448  001A2C  A0D8               	btfss	status,0,c
  5449  001A2E  D009               	goto	i2l2425
  5450  001A30  5004               	movf	__div_to_l_@f2,w,c
  5451  001A32  5E01               	subwf	__div_to_l_@f1,f,c
  5452  001A34  5005               	movf	__div_to_l_@f2+1,w,c
  5453  001A36  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5454  001A38  5006               	movf	__div_to_l_@f2+2,w,c
  5455  001A3A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5456  001A3C  5007               	movf	__div_to_l_@f2+3,w,c
  5457  001A3E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5458  001A40  8007               	bsf	__div_to_l_@quot,0,c
  5459  001A42                     i2l2425:
  5460  001A42  90D8               	bcf	status,0,c
  5461  001A44  3601               	rlcf	__div_to_l_@f1,f,c
  5462  001A46  3602               	rlcf	__div_to_l_@f1+1,f,c
  5463  001A48  3603               	rlcf	__div_to_l_@f1+2,f,c
  5464  001A4A  3604               	rlcf	__div_to_l_@f1+3,f,c
  5465  001A4C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5466  001A4E  D7E1               	goto	i2l2417
  5467  001A50  AE0C               	btfss	__div_to_l_@exp1,7,c
  5468  001A52  D016               	goto	i2l2441
  5469  001A54  500C               	movf	__div_to_l_@exp1,w,c
  5470  001A56  0A80               	xorlw	128
  5471  001A58  0F9F               	addlw	159
  5472  001A5A  B0D8               	btfsc	status,0,c
  5473  001A5C  D009               	goto	i2l2437
  5474  001A5E  0E00               	movlw	0
  5475  001A60  6E01               	movwf	?__div_to_l_,c
  5476  001A62  0E00               	movlw	0
  5477  001A64  6E02               	movwf	?__div_to_l_+1,c
  5478  001A66  0E00               	movlw	0
  5479  001A68  6E03               	movwf	?__div_to_l_+2,c
  5480  001A6A  0E00               	movlw	0
  5481  001A6C  6E04               	movwf	?__div_to_l_+3,c
  5482  001A6E  0012               	return	
  5483  001A70                     i2l2437:
  5484  001A70  90D8               	bcf	status,0,c
  5485  001A72  320A               	rrcf	__div_to_l_@quot+3,f,c
  5486  001A74  3209               	rrcf	__div_to_l_@quot+2,f,c
  5487  001A76  3208               	rrcf	__div_to_l_@quot+1,f,c
  5488  001A78  3207               	rrcf	__div_to_l_@quot,f,c
  5489  001A7A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5490  001A7C  D7F9               	goto	i2l2437
  5491  001A7E  D015               	goto	i2l546
  5492  001A80                     i2l2441:
  5493  001A80  0E1F               	movlw	31
  5494  001A82  640C               	cpfsgt	__div_to_l_@exp1,c
  5495  001A84  D00F               	goto	i2l2449
  5496  001A86  0E00               	movlw	0
  5497  001A88  6E01               	movwf	?__div_to_l_,c
  5498  001A8A  0E00               	movlw	0
  5499  001A8C  6E02               	movwf	?__div_to_l_+1,c
  5500  001A8E  0E00               	movlw	0
  5501  001A90  6E03               	movwf	?__div_to_l_+2,c
  5502  001A92  0E00               	movlw	0
  5503  001A94  6E04               	movwf	?__div_to_l_+3,c
  5504  001A96  0012               	return	
  5505  001A98                     i2l2447:
  5506  001A98  90D8               	bcf	status,0,c
  5507  001A9A  3607               	rlcf	__div_to_l_@quot,f,c
  5508  001A9C  3608               	rlcf	__div_to_l_@quot+1,f,c
  5509  001A9E  3609               	rlcf	__div_to_l_@quot+2,f,c
  5510  001AA0  360A               	rlcf	__div_to_l_@quot+3,f,c
  5511  001AA2  060C               	decf	__div_to_l_@exp1,f,c
  5512  001AA4                     i2l2449:
  5513  001AA4  500C               	movf	__div_to_l_@exp1,w,c
  5514  001AA6  A4D8               	btfss	status,2,c
  5515  001AA8  D7F7               	goto	i2l2447
  5516  001AAA                     i2l546:
  5517  001AAA  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5518  001AAE  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5519  001AB2  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5520  001AB6  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5521  001ABA  0012               	return		;funcret
  5522  001ABC                     __end_of__div_to_l_:
  5523                           	opt stack 0
  5524                           tosu	equ	0xFFF
  5525                           tosh	equ	0xFFE
  5526                           tosl	equ	0xFFD
  5527                           pclatu	equ	0xFFB
  5528                           pclath	equ	0xFFA
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           intcon2	equ	0xFF1
  5537                           fsr0h	equ	0xFEA
  5538                           fsr0l	equ	0xFE9
  5539                           wreg	equ	0xFE8
  5540                           fsr1h	equ	0xFE2
  5541                           fsr1l	equ	0xFE1
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function ___lltoft *****************
  5549 ;; Defined at:
  5550 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  c               4    8[COMRAM] unsigned long 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  exp             1   16[COMRAM] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  3    8[COMRAM] float 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5564 ;;      Params:         4       0       0       0       0       0       0
  5565 ;;      Locals:         1       0       0       0       0       0       0
  5566 ;;      Temps:          4       0       0       0       0       0       0
  5567 ;;      Totals:         9       0       0       0       0       0       0
  5568 ;;Total ram usage:        9 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    1
  5571 ;; This function calls:
  5572 ;;		___ftpack
  5573 ;; This function is called by:
  5574 ;;		_printf
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text28
  5579  002128                     __ptext28:
  5580                           	opt stack 0
  5581  002128                     ___lltoft:
  5582                           	opt stack 23
  5583                           
  5584                           ;incstack = 0
  5585  002128  0E8E               	movlw	142
  5586  00212A  6E11               	movwf	___lltoft@exp,c
  5587  00212C  D006               	goto	i2l2569
  5588  00212E                     i2l2567:
  5589  00212E  90D8               	bcf	status,0,c
  5590  002130  320C               	rrcf	___lltoft@c+3,f,c
  5591  002132  320B               	rrcf	___lltoft@c+2,f,c
  5592  002134  320A               	rrcf	___lltoft@c+1,f,c
  5593  002136  3209               	rrcf	___lltoft@c,f,c
  5594  002138  2A11               	incf	___lltoft@exp,f,c
  5595  00213A                     i2l2569:
  5596  00213A  0E00               	movlw	0
  5597  00213C  1409               	andwf	___lltoft@c,w,c
  5598  00213E  6E0D               	movwf	??___lltoft& (0+255),c
  5599  002140  0E00               	movlw	0
  5600  002142  140A               	andwf	___lltoft@c+1,w,c
  5601  002144  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5602  002146  0E00               	movlw	0
  5603  002148  140B               	andwf	___lltoft@c+2,w,c
  5604  00214A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5605  00214C  0EFF               	movlw	255
  5606  00214E  140C               	andwf	___lltoft@c+3,w,c
  5607  002150  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5608  002152  500D               	movf	??___lltoft,w,c
  5609  002154  100E               	iorwf	??___lltoft+1,w,c
  5610  002156  100F               	iorwf	??___lltoft+2,w,c
  5611  002158  1010               	iorwf	??___lltoft+3,w,c
  5612  00215A  A4D8               	btfss	status,2,c
  5613  00215C  D7E8               	goto	i2l2567
  5614  00215E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5615  002162  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5616  002166  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5617  00216A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5618  00216E  0E00               	movlw	0
  5619  002170  6E05               	movwf	___ftpack@sign,c
  5620  002172  ECC5  F00E         	call	___ftpack	;wreg free
  5621  002176  C001  F009         	movff	?___ftpack,?___lltoft
  5622  00217A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5623  00217E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5624  002182  0012               	return	
  5625  002184                     __end_of___lltoft:
  5626                           	opt stack 0
  5627                           tosu	equ	0xFFF
  5628                           tosh	equ	0xFFE
  5629                           tosl	equ	0xFFD
  5630                           pclatu	equ	0xFFB
  5631                           pclath	equ	0xFFA
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           intcon	equ	0xFF2
  5639                           intcon2	equ	0xFF1
  5640                           fsr0h	equ	0xFEA
  5641                           fsr0l	equ	0xFE9
  5642                           wreg	equ	0xFE8
  5643                           fsr1h	equ	0xFE2
  5644                           fsr1l	equ	0xFE1
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function ___llmod *****************
  5652 ;; Defined at:
  5653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  dividend        4    0[COMRAM] unsigned long 
  5656 ;;  divisor         4    4[COMRAM] unsigned long 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  counter         1    8[COMRAM] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  4    0[COMRAM] unsigned long 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5668 ;;      Params:         8       0       0       0       0       0       0
  5669 ;;      Locals:         1       0       0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0
  5671 ;;      Totals:         9       0       0       0       0       0       0
  5672 ;;Total ram usage:        9 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_printf
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text29
  5682  0020C2                     __ptext29:
  5683                           	opt stack 0
  5684  0020C2                     ___llmod:
  5685                           	opt stack 24
  5686                           
  5687                           ;incstack = 0
  5688  0020C2  5005               	movf	___llmod@divisor,w,c
  5689  0020C4  1006               	iorwf	___llmod@divisor+1,w,c
  5690  0020C6  1007               	iorwf	___llmod@divisor+2,w,c
  5691  0020C8  1008               	iorwf	___llmod@divisor+3,w,c
  5692  0020CA  B4D8               	btfsc	status,2,c
  5693  0020CC  D024               	goto	i2l735
  5694  0020CE  0E01               	movlw	1
  5695  0020D0  6E09               	movwf	___llmod@counter,c
  5696  0020D2  D006               	goto	i2l2555
  5697  0020D4                     i2l2553:
  5698  0020D4  90D8               	bcf	status,0,c
  5699  0020D6  3605               	rlcf	___llmod@divisor,f,c
  5700  0020D8  3606               	rlcf	___llmod@divisor+1,f,c
  5701  0020DA  3607               	rlcf	___llmod@divisor+2,f,c
  5702  0020DC  3608               	rlcf	___llmod@divisor+3,f,c
  5703  0020DE  2A09               	incf	___llmod@counter,f,c
  5704  0020E0                     i2l2555:
  5705  0020E0  AE08               	btfss	___llmod@divisor+3,7,c
  5706  0020E2  D7F8               	goto	i2l2553
  5707  0020E4                     i2l2557:
  5708  0020E4  5005               	movf	___llmod@divisor,w,c
  5709  0020E6  5C01               	subwf	___llmod@dividend,w,c
  5710  0020E8  5006               	movf	___llmod@divisor+1,w,c
  5711  0020EA  5802               	subwfb	___llmod@dividend+1,w,c
  5712  0020EC  5007               	movf	___llmod@divisor+2,w,c
  5713  0020EE  5803               	subwfb	___llmod@dividend+2,w,c
  5714  0020F0  5008               	movf	___llmod@divisor+3,w,c
  5715  0020F2  5804               	subwfb	___llmod@dividend+3,w,c
  5716  0020F4  A0D8               	btfss	status,0,c
  5717  0020F6  D008               	goto	i2l2561
  5718  0020F8  5005               	movf	___llmod@divisor,w,c
  5719  0020FA  5E01               	subwf	___llmod@dividend,f,c
  5720  0020FC  5006               	movf	___llmod@divisor+1,w,c
  5721  0020FE  5A02               	subwfb	___llmod@dividend+1,f,c
  5722  002100  5007               	movf	___llmod@divisor+2,w,c
  5723  002102  5A03               	subwfb	___llmod@dividend+2,f,c
  5724  002104  5008               	movf	___llmod@divisor+3,w,c
  5725  002106  5A04               	subwfb	___llmod@dividend+3,f,c
  5726  002108                     i2l2561:
  5727  002108  90D8               	bcf	status,0,c
  5728  00210A  3208               	rrcf	___llmod@divisor+3,f,c
  5729  00210C  3207               	rrcf	___llmod@divisor+2,f,c
  5730  00210E  3206               	rrcf	___llmod@divisor+1,f,c
  5731  002110  3205               	rrcf	___llmod@divisor,f,c
  5732  002112  2E09               	decfsz	___llmod@counter,f,c
  5733  002114  D7E7               	goto	i2l2557
  5734  002116                     i2l735:
  5735  002116  C001  F001         	movff	___llmod@dividend,?___llmod
  5736  00211A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5737  00211E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5738  002122  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5739  002126  0012               	return		;funcret
  5740  002128                     __end_of___llmod:
  5741                           	opt stack 0
  5742                           tosu	equ	0xFFF
  5743                           tosh	equ	0xFFE
  5744                           tosl	equ	0xFFD
  5745                           pclatu	equ	0xFFB
  5746                           pclath	equ	0xFFA
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           intcon	equ	0xFF2
  5754                           intcon2	equ	0xFF1
  5755                           fsr0h	equ	0xFEA
  5756                           fsr0l	equ	0xFE9
  5757                           wreg	equ	0xFE8
  5758                           fsr1h	equ	0xFE2
  5759                           fsr1l	equ	0xFE1
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function ___lldiv *****************
  5767 ;; Defined at:
  5768 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  dividend        4    0[COMRAM] unsigned long 
  5771 ;;  divisor         4    4[COMRAM] unsigned long 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  quotient        4    8[COMRAM] unsigned long 
  5774 ;;  counter         1   12[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  4    0[COMRAM] unsigned long 
  5777 ;; Registers used:
  5778 ;;		wreg, status,2, status,0
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5784 ;;      Params:         8       0       0       0       0       0       0
  5785 ;;      Locals:         5       0       0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0
  5787 ;;      Totals:        13       0       0       0       0       0       0
  5788 ;;Total ram usage:       13 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_printf
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text30
  5798  001FD0                     __ptext30:
  5799                           	opt stack 0
  5800  001FD0                     ___lldiv:
  5801                           	opt stack 24
  5802                           
  5803                           ;incstack = 0
  5804  001FD0  0E00               	movlw	0
  5805  001FD2  6E09               	movwf	___lldiv@quotient,c
  5806  001FD4  0E00               	movlw	0
  5807  001FD6  6E0A               	movwf	___lldiv@quotient+1,c
  5808  001FD8  0E00               	movlw	0
  5809  001FDA  6E0B               	movwf	___lldiv@quotient+2,c
  5810  001FDC  0E00               	movlw	0
  5811  001FDE  6E0C               	movwf	___lldiv@quotient+3,c
  5812  001FE0  5005               	movf	___lldiv@divisor,w,c
  5813  001FE2  1006               	iorwf	___lldiv@divisor+1,w,c
  5814  001FE4  1007               	iorwf	___lldiv@divisor+2,w,c
  5815  001FE6  1008               	iorwf	___lldiv@divisor+3,w,c
  5816  001FE8  B4D8               	btfsc	status,2,c
  5817  001FEA  D02A               	goto	i2l725
  5818  001FEC  0E01               	movlw	1
  5819  001FEE  6E0D               	movwf	___lldiv@counter,c
  5820  001FF0  D006               	goto	i2l2535
  5821  001FF2                     i2l2533:
  5822  001FF2  90D8               	bcf	status,0,c
  5823  001FF4  3605               	rlcf	___lldiv@divisor,f,c
  5824  001FF6  3606               	rlcf	___lldiv@divisor+1,f,c
  5825  001FF8  3607               	rlcf	___lldiv@divisor+2,f,c
  5826  001FFA  3608               	rlcf	___lldiv@divisor+3,f,c
  5827  001FFC  2A0D               	incf	___lldiv@counter,f,c
  5828  001FFE                     i2l2535:
  5829  001FFE  AE08               	btfss	___lldiv@divisor+3,7,c
  5830  002000  D7F8               	goto	i2l2533
  5831  002002                     i2l2537:
  5832  002002  90D8               	bcf	status,0,c
  5833  002004  3609               	rlcf	___lldiv@quotient,f,c
  5834  002006  360A               	rlcf	___lldiv@quotient+1,f,c
  5835  002008  360B               	rlcf	___lldiv@quotient+2,f,c
  5836  00200A  360C               	rlcf	___lldiv@quotient+3,f,c
  5837  00200C  5005               	movf	___lldiv@divisor,w,c
  5838  00200E  5C01               	subwf	___lldiv@dividend,w,c
  5839  002010  5006               	movf	___lldiv@divisor+1,w,c
  5840  002012  5802               	subwfb	___lldiv@dividend+1,w,c
  5841  002014  5007               	movf	___lldiv@divisor+2,w,c
  5842  002016  5803               	subwfb	___lldiv@dividend+2,w,c
  5843  002018  5008               	movf	___lldiv@divisor+3,w,c
  5844  00201A  5804               	subwfb	___lldiv@dividend+3,w,c
  5845  00201C  A0D8               	btfss	status,0,c
  5846  00201E  D009               	goto	i2l2545
  5847  002020  5005               	movf	___lldiv@divisor,w,c
  5848  002022  5E01               	subwf	___lldiv@dividend,f,c
  5849  002024  5006               	movf	___lldiv@divisor+1,w,c
  5850  002026  5A02               	subwfb	___lldiv@dividend+1,f,c
  5851  002028  5007               	movf	___lldiv@divisor+2,w,c
  5852  00202A  5A03               	subwfb	___lldiv@dividend+2,f,c
  5853  00202C  5008               	movf	___lldiv@divisor+3,w,c
  5854  00202E  5A04               	subwfb	___lldiv@dividend+3,f,c
  5855  002030  8009               	bsf	___lldiv@quotient,0,c
  5856  002032                     i2l2545:
  5857  002032  90D8               	bcf	status,0,c
  5858  002034  3208               	rrcf	___lldiv@divisor+3,f,c
  5859  002036  3207               	rrcf	___lldiv@divisor+2,f,c
  5860  002038  3206               	rrcf	___lldiv@divisor+1,f,c
  5861  00203A  3205               	rrcf	___lldiv@divisor,f,c
  5862  00203C  2E0D               	decfsz	___lldiv@counter,f,c
  5863  00203E  D7E1               	goto	i2l2537
  5864  002040                     i2l725:
  5865  002040  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5866  002044  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5867  002048  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5868  00204C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5869  002050  0012               	return		;funcret
  5870  002052                     __end_of___lldiv:
  5871                           	opt stack 0
  5872                           tosu	equ	0xFFF
  5873                           tosh	equ	0xFFE
  5874                           tosl	equ	0xFFD
  5875                           pclatu	equ	0xFFB
  5876                           pclath	equ	0xFFA
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           intcon2	equ	0xFF1
  5885                           fsr0h	equ	0xFEA
  5886                           fsr0l	equ	0xFE9
  5887                           wreg	equ	0xFE8
  5888                           fsr1h	equ	0xFE2
  5889                           fsr1l	equ	0xFE1
  5890                           postinc2	equ	0xFDE
  5891                           postdec2	equ	0xFDD
  5892                           fsr2h	equ	0xFDA
  5893                           fsr2l	equ	0xFD9
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function ___fttol *****************
  5897 ;; Defined at:
  5898 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  f1              3   42[COMRAM] float 
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;  lval            4   52[COMRAM] unsigned long 
  5903 ;;  exp1            1   56[COMRAM] unsigned char 
  5904 ;;  sign1           1   51[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  4   42[COMRAM] long 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5914 ;;      Params:         4       0       0       0       0       0       0
  5915 ;;      Locals:         6       0       0       0       0       0       0
  5916 ;;      Temps:          5       0       0       0       0       0       0
  5917 ;;      Totals:        15       0       0       0       0       0       0
  5918 ;;Total ram usage:       15 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_printf
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text31
  5928  001BB0                     __ptext31:
  5929                           	opt stack 0
  5930  001BB0                     ___fttol:
  5931                           	opt stack 24
  5932                           
  5933                           ;incstack = 0
  5934  001BB0  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5935  001BB4  6A30               	clrf	(??___fttol+1)& (0+255),c
  5936  001BB6  6A31               	clrf	(??___fttol+2)& (0+255),c
  5937  001BB8  342C               	rlcf	___fttol@f1+1,w,c
  5938  001BBA  362F               	rlcf	??___fttol& (0+255),f,c
  5939  001BBC  E301               	bnc	u240_41
  5940  001BBE  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5941  001BC0                     u240_41:
  5942  001BC0  502F               	movf	??___fttol,w,c
  5943  001BC2  6E39               	movwf	___fttol@exp1,c
  5944  001BC4  5039               	movf	___fttol@exp1,w,c
  5945  001BC6  A4D8               	btfss	status,2,c
  5946  001BC8  D009               	goto	i2l2487
  5947  001BCA  0E00               	movlw	0
  5948  001BCC  6E2B               	movwf	?___fttol,c
  5949  001BCE  0E00               	movlw	0
  5950  001BD0  6E2C               	movwf	?___fttol+1,c
  5951  001BD2  0E00               	movlw	0
  5952  001BD4  6E2D               	movwf	?___fttol+2,c
  5953  001BD6  0E00               	movlw	0
  5954  001BD8  6E2E               	movwf	?___fttol+3,c
  5955  001BDA  0012               	return	
  5956  001BDC                     i2l2487:
  5957  001BDC  0E17               	movlw	23
  5958  001BDE  6E2F               	movwf	??___fttol& (0+255),c
  5959  001BE0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5960  001BE4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5961  001BE8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5962  001BEC  282F               	incf	??___fttol,w,c
  5963  001BEE  6E33               	movwf	(??___fttol+4)& (0+255),c
  5964  001BF0  D004               	goto	i2u242_40
  5965  001BF2                     i2u242_45:
  5966  001BF2  90D8               	bcf	status,0,c
  5967  001BF4  3232               	rrcf	??___fttol+3,f,c
  5968  001BF6  3231               	rrcf	??___fttol+2,f,c
  5969  001BF8  3230               	rrcf	??___fttol+1,f,c
  5970  001BFA                     i2u242_40:
  5971  001BFA  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5972  001BFC  D7FA               	goto	i2u242_45
  5973  001BFE  5030               	movf	??___fttol+1,w,c
  5974  001C00  6E34               	movwf	___fttol@sign1,c
  5975  001C02  8E2C               	bsf	___fttol@f1+1,7,c
  5976  001C04  0EFF               	movlw	255
  5977  001C06  162B               	andwf	___fttol@f1,f,c
  5978  001C08  0EFF               	movlw	255
  5979  001C0A  162C               	andwf	___fttol@f1+1,f,c
  5980  001C0C  0E00               	movlw	0
  5981  001C0E  162D               	andwf	___fttol@f1+2,f,c
  5982  001C10  502B               	movf	___fttol@f1,w,c
  5983  001C12  6E35               	movwf	___fttol@lval,c
  5984  001C14  502C               	movf	___fttol@f1+1,w,c
  5985  001C16  6E36               	movwf	___fttol@lval+1,c
  5986  001C18  502D               	movf	___fttol@f1+2,w,c
  5987  001C1A  6E37               	movwf	___fttol@lval+2,c
  5988  001C1C  6A38               	clrf	___fttol@lval+3,c
  5989  001C1E  0E8E               	movlw	142
  5990  001C20  5E39               	subwf	___fttol@exp1,f,c
  5991  001C22  AE39               	btfss	___fttol@exp1,7,c
  5992  001C24  D016               	goto	i2l2509
  5993  001C26  5039               	movf	___fttol@exp1,w,c
  5994  001C28  0A80               	xorlw	128
  5995  001C2A  0F8F               	addlw	143
  5996  001C2C  B0D8               	btfsc	status,0,c
  5997  001C2E  D009               	goto	i2l2505
  5998  001C30  0E00               	movlw	0
  5999  001C32  6E2B               	movwf	?___fttol,c
  6000  001C34  0E00               	movlw	0
  6001  001C36  6E2C               	movwf	?___fttol+1,c
  6002  001C38  0E00               	movlw	0
  6003  001C3A  6E2D               	movwf	?___fttol+2,c
  6004  001C3C  0E00               	movlw	0
  6005  001C3E  6E2E               	movwf	?___fttol+3,c
  6006  001C40  0012               	return	
  6007  001C42                     i2l2505:
  6008  001C42  90D8               	bcf	status,0,c
  6009  001C44  3238               	rrcf	___fttol@lval+3,f,c
  6010  001C46  3237               	rrcf	___fttol@lval+2,f,c
  6011  001C48  3236               	rrcf	___fttol@lval+1,f,c
  6012  001C4A  3235               	rrcf	___fttol@lval,f,c
  6013  001C4C  3E39               	incfsz	___fttol@exp1,f,c
  6014  001C4E  D7F9               	goto	i2l2505
  6015  001C50  D015               	goto	i2l2519
  6016  001C52                     i2l2509:
  6017  001C52  0E17               	movlw	23
  6018  001C54  6439               	cpfsgt	___fttol@exp1,c
  6019  001C56  D00F               	goto	i2l2517
  6020  001C58  0E00               	movlw	0
  6021  001C5A  6E2B               	movwf	?___fttol,c
  6022  001C5C  0E00               	movlw	0
  6023  001C5E  6E2C               	movwf	?___fttol+1,c
  6024  001C60  0E00               	movlw	0
  6025  001C62  6E2D               	movwf	?___fttol+2,c
  6026  001C64  0E00               	movlw	0
  6027  001C66  6E2E               	movwf	?___fttol+3,c
  6028  001C68  0012               	return	
  6029  001C6A                     i2l2515:
  6030  001C6A  90D8               	bcf	status,0,c
  6031  001C6C  3635               	rlcf	___fttol@lval,f,c
  6032  001C6E  3636               	rlcf	___fttol@lval+1,f,c
  6033  001C70  3637               	rlcf	___fttol@lval+2,f,c
  6034  001C72  3638               	rlcf	___fttol@lval+3,f,c
  6035  001C74  0639               	decf	___fttol@exp1,f,c
  6036  001C76                     i2l2517:
  6037  001C76  5039               	movf	___fttol@exp1,w,c
  6038  001C78  A4D8               	btfss	status,2,c
  6039  001C7A  D7F7               	goto	i2l2515
  6040  001C7C                     i2l2519:
  6041  001C7C  5034               	movf	___fttol@sign1,w,c
  6042  001C7E  B4D8               	btfsc	status,2,c
  6043  001C80  D008               	goto	i2l2523
  6044  001C82  1E38               	comf	___fttol@lval+3,f,c
  6045  001C84  1E37               	comf	___fttol@lval+2,f,c
  6046  001C86  1E36               	comf	___fttol@lval+1,f,c
  6047  001C88  6C35               	negf	___fttol@lval,c
  6048  001C8A  0E00               	movlw	0
  6049  001C8C  2236               	addwfc	___fttol@lval+1,f,c
  6050  001C8E  2237               	addwfc	___fttol@lval+2,f,c
  6051  001C90  2238               	addwfc	___fttol@lval+3,f,c
  6052  001C92                     i2l2523:
  6053  001C92  C035  F02B         	movff	___fttol@lval,?___fttol
  6054  001C96  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  6055  001C9A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  6056  001C9E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  6057  001CA2  0012               	return	
  6058  001CA4                     __end_of___fttol:
  6059                           	opt stack 0
  6060                           tosu	equ	0xFFF
  6061                           tosh	equ	0xFFE
  6062                           tosl	equ	0xFFD
  6063                           pclatu	equ	0xFFB
  6064                           pclath	equ	0xFFA
  6065                           tblptru	equ	0xFF8
  6066                           tblptrh	equ	0xFF7
  6067                           tblptrl	equ	0xFF6
  6068                           tablat	equ	0xFF5
  6069                           prodh	equ	0xFF4
  6070                           prodl	equ	0xFF3
  6071                           intcon	equ	0xFF2
  6072                           intcon2	equ	0xFF1
  6073                           fsr0h	equ	0xFEA
  6074                           fsr0l	equ	0xFE9
  6075                           wreg	equ	0xFE8
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function ___ftsub *****************
  6085 ;; Defined at:
  6086 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  f1              3   57[COMRAM] float 
  6089 ;;  f2              3   60[COMRAM] float 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;		None
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  3   57[COMRAM] float 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6101 ;;      Params:         6       0       0       0       0       0       0
  6102 ;;      Locals:         0       0       0       0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0
  6104 ;;      Totals:         6       0       0       0       0       0       0
  6105 ;;Total ram usage:        6 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    2
  6108 ;; This function calls:
  6109 ;;		___ftadd
  6110 ;; This function is called by:
  6111 ;;		_printf
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text32
  6116  00220A                     __ptext32:
  6117                           	opt stack 0
  6118  00220A                     ___ftsub:
  6119                           	opt stack 22
  6120                           
  6121                           ;incstack = 0
  6122  00220A  503D               	movf	___ftsub@f2,w,c
  6123  00220C  103E               	iorwf	___ftsub@f2+1,w,c
  6124  00220E  103F               	iorwf	___ftsub@f2+2,w,c
  6125  002210  B4D8               	btfsc	status,2,c
  6126  002212  D006               	goto	i2l2455
  6127  002214  0E00               	movlw	0
  6128  002216  1A3D               	xorwf	___ftsub@f2,f,c
  6129  002218  0E00               	movlw	0
  6130  00221A  1A3E               	xorwf	___ftsub@f2+1,f,c
  6131  00221C  0E80               	movlw	128
  6132  00221E  1A3F               	xorwf	___ftsub@f2+2,f,c
  6133  002220                     i2l2455:
  6134  002220  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  6135  002224  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  6136  002228  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  6137  00222C  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  6138  002230  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  6139  002234  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  6140  002238  EC5B  F00B         	call	___ftadd	;wreg free
  6141  00223C  C02E  F03A         	movff	?___ftadd,?___ftsub
  6142  002240  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  6143  002244  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  6144  002248  0012               	return	
  6145  00224A                     __end_of___ftsub:
  6146                           	opt stack 0
  6147                           tosu	equ	0xFFF
  6148                           tosh	equ	0xFFE
  6149                           tosl	equ	0xFFD
  6150                           pclatu	equ	0xFFB
  6151                           pclath	equ	0xFFA
  6152                           tblptru	equ	0xFF8
  6153                           tblptrh	equ	0xFF7
  6154                           tblptrl	equ	0xFF6
  6155                           tablat	equ	0xFF5
  6156                           prodh	equ	0xFF4
  6157                           prodl	equ	0xFF3
  6158                           intcon	equ	0xFF2
  6159                           intcon2	equ	0xFF1
  6160                           fsr0h	equ	0xFEA
  6161                           fsr0l	equ	0xFE9
  6162                           wreg	equ	0xFE8
  6163                           fsr1h	equ	0xFE2
  6164                           fsr1l	equ	0xFE1
  6165                           postinc2	equ	0xFDE
  6166                           postdec2	equ	0xFDD
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8
  6170                           
  6171 ;; *************** function ___ftadd *****************
  6172 ;; Defined at:
  6173 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  f1              3   45[COMRAM] float 
  6176 ;;  f2              3   48[COMRAM] float 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  exp1            1   56[COMRAM] unsigned char 
  6179 ;;  exp2            1   55[COMRAM] unsigned char 
  6180 ;;  sign            1   54[COMRAM] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  3   45[COMRAM] float 
  6183 ;; Registers used:
  6184 ;;		wreg, status,2, status,0, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6190 ;;      Params:         6       0       0       0       0       0       0
  6191 ;;      Locals:         3       0       0       0       0       0       0
  6192 ;;      Temps:          3       0       0       0       0       0       0
  6193 ;;      Totals:        12       0       0       0       0       0       0
  6194 ;;Total ram usage:       12 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    1
  6197 ;; This function calls:
  6198 ;;		___ftpack
  6199 ;; This function is called by:
  6200 ;;		_printf
  6201 ;;		___ftsub
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           	psect	text33
  6206  0016B6                     __ptext33:
  6207                           	opt stack 0
  6208  0016B6                     ___ftadd:
  6209                           	opt stack 22
  6210                           
  6211                           ;incstack = 0
  6212  0016B6  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  6213  0016BA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6214  0016BC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6215  0016BE  342F               	rlcf	___ftadd@f1+1,w,c
  6216  0016C0  3634               	rlcf	??___ftadd& (0+255),f,c
  6217  0016C2  E301               	bnc	u171_41
  6218  0016C4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6219  0016C6                     u171_41:
  6220  0016C6  5034               	movf	??___ftadd,w,c
  6221  0016C8  6E39               	movwf	___ftadd@exp1,c
  6222  0016CA  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  6223  0016CE  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6224  0016D0  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6225  0016D2  3432               	rlcf	___ftadd@f2+1,w,c
  6226  0016D4  3634               	rlcf	??___ftadd& (0+255),f,c
  6227  0016D6  E301               	bnc	u172_41
  6228  0016D8  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6229  0016DA                     u172_41:
  6230  0016DA  5034               	movf	??___ftadd,w,c
  6231  0016DC  6E38               	movwf	___ftadd@exp2,c
  6232  0016DE  5039               	movf	___ftadd@exp1,w,c
  6233  0016E0  B4D8               	btfsc	status,2,c
  6234  0016E2  D00B               	goto	i2l601
  6235  0016E4  5038               	movf	___ftadd@exp2,w,c
  6236  0016E6  5C39               	subwf	___ftadd@exp1,w,c
  6237  0016E8  B0D8               	btfsc	status,0,c
  6238  0016EA  D00E               	goto	i2l2065
  6239  0016EC  5039               	movf	___ftadd@exp1,w,c
  6240  0016EE  0800               	sublw	0
  6241  0016F0  2438               	addwf	___ftadd@exp2,w,c
  6242  0016F2  6E34               	movwf	??___ftadd& (0+255),c
  6243  0016F4  0E18               	movlw	24
  6244  0016F6  6434               	cpfsgt	??___ftadd,c
  6245  0016F8  D007               	goto	i2l2065
  6246  0016FA                     i2l601:
  6247  0016FA  C031  F02E         	movff	___ftadd@f2,?___ftadd
  6248  0016FE  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  6249  001702  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  6250  001706  0012               	return	
  6251  001708                     i2l2065:
  6252  001708  5038               	movf	___ftadd@exp2,w,c
  6253  00170A  B4D8               	btfsc	status,2,c
  6254  00170C  D00B               	goto	i2l605
  6255  00170E  5039               	movf	___ftadd@exp1,w,c
  6256  001710  5C38               	subwf	___ftadd@exp2,w,c
  6257  001712  B0D8               	btfsc	status,0,c
  6258  001714  D00E               	goto	i2l2071
  6259  001716  5038               	movf	___ftadd@exp2,w,c
  6260  001718  0800               	sublw	0
  6261  00171A  2439               	addwf	___ftadd@exp1,w,c
  6262  00171C  6E34               	movwf	??___ftadd& (0+255),c
  6263  00171E  0E18               	movlw	24
  6264  001720  6434               	cpfsgt	??___ftadd,c
  6265  001722  D007               	goto	i2l2071
  6266  001724                     i2l605:
  6267  001724  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  6268  001728  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  6269  00172C  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  6270  001730  0012               	return	
  6271  001732                     i2l2071:
  6272  001732  0E06               	movlw	6
  6273  001734  6E37               	movwf	___ftadd@sign,c
  6274  001736  BE30               	btfsc	___ftadd@f1+2,7,c
  6275  001738  8E37               	bsf	___ftadd@sign,7,c
  6276  00173A  BE33               	btfsc	___ftadd@f2+2,7,c
  6277  00173C  8C37               	bsf	___ftadd@sign,6,c
  6278  00173E  8E2F               	bsf	___ftadd@f1+1,7,c
  6279  001740  0EFF               	movlw	255
  6280  001742  162E               	andwf	___ftadd@f1,f,c
  6281  001744  0EFF               	movlw	255
  6282  001746  162F               	andwf	___ftadd@f1+1,f,c
  6283  001748  0E00               	movlw	0
  6284  00174A  1630               	andwf	___ftadd@f1+2,f,c
  6285  00174C  8E32               	bsf	___ftadd@f2+1,7,c
  6286  00174E  0EFF               	movlw	255
  6287  001750  1631               	andwf	___ftadd@f2,f,c
  6288  001752  0EFF               	movlw	255
  6289  001754  1632               	andwf	___ftadd@f2+1,f,c
  6290  001756  0E00               	movlw	0
  6291  001758  1633               	andwf	___ftadd@f2+2,f,c
  6292  00175A  5038               	movf	___ftadd@exp2,w,c
  6293  00175C  5C39               	subwf	___ftadd@exp1,w,c
  6294  00175E  B0D8               	btfsc	status,0,c
  6295  001760  D01B               	goto	i2l2097
  6296  001762                     i2l2087:
  6297  001762  90D8               	bcf	status,0,c
  6298  001764  3631               	rlcf	___ftadd@f2,f,c
  6299  001766  3632               	rlcf	___ftadd@f2+1,f,c
  6300  001768  3633               	rlcf	___ftadd@f2+2,f,c
  6301  00176A  0638               	decf	___ftadd@exp2,f,c
  6302  00176C  5039               	movf	___ftadd@exp1,w,c
  6303  00176E  1838               	xorwf	___ftadd@exp2,w,c
  6304  001770  B4D8               	btfsc	status,2,c
  6305  001772  D00D               	goto	i2l2095
  6306  001774  0637               	decf	___ftadd@sign,f,c
  6307  001776  C037  F034         	movff	___ftadd@sign,??___ftadd
  6308  00177A  0E07               	movlw	7
  6309  00177C  1634               	andwf	??___ftadd,f,c
  6310  00177E  B4D8               	btfsc	status,2,c
  6311  001780  D006               	goto	i2l2095
  6312  001782  D7EF               	goto	i2l2087
  6313  001784                     i2l2093:
  6314  001784  90D8               	bcf	status,0,c
  6315  001786  3230               	rrcf	___ftadd@f1+2,f,c
  6316  001788  322F               	rrcf	___ftadd@f1+1,f,c
  6317  00178A  322E               	rrcf	___ftadd@f1,f,c
  6318  00178C  2A39               	incf	___ftadd@exp1,f,c
  6319  00178E                     i2l2095:
  6320  00178E  5038               	movf	___ftadd@exp2,w,c
  6321  001790  1839               	xorwf	___ftadd@exp1,w,c
  6322  001792  B4D8               	btfsc	status,2,c
  6323  001794  D01F               	goto	i2l616
  6324  001796  D7F6               	goto	i2l2093
  6325  001798                     i2l2097:
  6326  001798  5039               	movf	___ftadd@exp1,w,c
  6327  00179A  5C38               	subwf	___ftadd@exp2,w,c
  6328  00179C  B0D8               	btfsc	status,0,c
  6329  00179E  D01A               	goto	i2l616
  6330  0017A0                     i2l2099:
  6331  0017A0  90D8               	bcf	status,0,c
  6332  0017A2  362E               	rlcf	___ftadd@f1,f,c
  6333  0017A4  362F               	rlcf	___ftadd@f1+1,f,c
  6334  0017A6  3630               	rlcf	___ftadd@f1+2,f,c
  6335  0017A8  0639               	decf	___ftadd@exp1,f,c
  6336  0017AA  5039               	movf	___ftadd@exp1,w,c
  6337  0017AC  1838               	xorwf	___ftadd@exp2,w,c
  6338  0017AE  B4D8               	btfsc	status,2,c
  6339  0017B0  D00D               	goto	i2l2107
  6340  0017B2  0637               	decf	___ftadd@sign,f,c
  6341  0017B4  C037  F034         	movff	___ftadd@sign,??___ftadd
  6342  0017B8  0E07               	movlw	7
  6343  0017BA  1634               	andwf	??___ftadd,f,c
  6344  0017BC  B4D8               	btfsc	status,2,c
  6345  0017BE  D006               	goto	i2l2107
  6346  0017C0  D7EF               	goto	i2l2099
  6347  0017C2                     i2l2105:
  6348  0017C2  90D8               	bcf	status,0,c
  6349  0017C4  3233               	rrcf	___ftadd@f2+2,f,c
  6350  0017C6  3232               	rrcf	___ftadd@f2+1,f,c
  6351  0017C8  3231               	rrcf	___ftadd@f2,f,c
  6352  0017CA  2A38               	incf	___ftadd@exp2,f,c
  6353  0017CC                     i2l2107:
  6354  0017CC  5038               	movf	___ftadd@exp2,w,c
  6355  0017CE  1839               	xorwf	___ftadd@exp1,w,c
  6356  0017D0  A4D8               	btfss	status,2,c
  6357  0017D2  D7F7               	goto	i2l2105
  6358  0017D4                     i2l616:
  6359  0017D4  AE37               	btfss	___ftadd@sign,7,c
  6360  0017D6  D00C               	goto	i2l625
  6361  0017D8  0EFF               	movlw	255
  6362  0017DA  1A2E               	xorwf	___ftadd@f1,f,c
  6363  0017DC  0EFF               	movlw	255
  6364  0017DE  1A2F               	xorwf	___ftadd@f1+1,f,c
  6365  0017E0  0EFF               	movlw	255
  6366  0017E2  1A30               	xorwf	___ftadd@f1+2,f,c
  6367  0017E4  0E01               	movlw	1
  6368  0017E6  262E               	addwf	___ftadd@f1,f,c
  6369  0017E8  0E00               	movlw	0
  6370  0017EA  222F               	addwfc	___ftadd@f1+1,f,c
  6371  0017EC  0E00               	movlw	0
  6372  0017EE  2230               	addwfc	___ftadd@f1+2,f,c
  6373  0017F0                     i2l625:
  6374  0017F0  AC37               	btfss	___ftadd@sign,6,c
  6375  0017F2  D00C               	goto	i2l2113
  6376  0017F4  0EFF               	movlw	255
  6377  0017F6  1A31               	xorwf	___ftadd@f2,f,c
  6378  0017F8  0EFF               	movlw	255
  6379  0017FA  1A32               	xorwf	___ftadd@f2+1,f,c
  6380  0017FC  0EFF               	movlw	255
  6381  0017FE  1A33               	xorwf	___ftadd@f2+2,f,c
  6382  001800  0E01               	movlw	1
  6383  001802  2631               	addwf	___ftadd@f2,f,c
  6384  001804  0E00               	movlw	0
  6385  001806  2232               	addwfc	___ftadd@f2+1,f,c
  6386  001808  0E00               	movlw	0
  6387  00180A  2233               	addwfc	___ftadd@f2+2,f,c
  6388  00180C                     i2l2113:
  6389  00180C  0E00               	movlw	0
  6390  00180E  6E37               	movwf	___ftadd@sign,c
  6391  001810  502E               	movf	___ftadd@f1,w,c
  6392  001812  2631               	addwf	___ftadd@f2,f,c
  6393  001814  502F               	movf	___ftadd@f1+1,w,c
  6394  001816  2232               	addwfc	___ftadd@f2+1,f,c
  6395  001818  5030               	movf	___ftadd@f1+2,w,c
  6396  00181A  2233               	addwfc	___ftadd@f2+2,f,c
  6397  00181C  AE33               	btfss	___ftadd@f2+2,7,c
  6398  00181E  D00E               	goto	i2l2123
  6399  001820  0EFF               	movlw	255
  6400  001822  1A31               	xorwf	___ftadd@f2,f,c
  6401  001824  0EFF               	movlw	255
  6402  001826  1A32               	xorwf	___ftadd@f2+1,f,c
  6403  001828  0EFF               	movlw	255
  6404  00182A  1A33               	xorwf	___ftadd@f2+2,f,c
  6405  00182C  0E01               	movlw	1
  6406  00182E  2631               	addwf	___ftadd@f2,f,c
  6407  001830  0E00               	movlw	0
  6408  001832  2232               	addwfc	___ftadd@f2+1,f,c
  6409  001834  0E00               	movlw	0
  6410  001836  2233               	addwfc	___ftadd@f2+2,f,c
  6411  001838  0E01               	movlw	1
  6412  00183A  6E37               	movwf	___ftadd@sign,c
  6413  00183C                     i2l2123:
  6414  00183C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6415  001840  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6416  001844  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6417  001848  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6418  00184C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6419  001850  ECC5  F00E         	call	___ftpack	;wreg free
  6420  001854  C001  F02E         	movff	?___ftpack,?___ftadd
  6421  001858  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6422  00185C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6423  001860  0012               	return	
  6424  001862                     __end_of___ftadd:
  6425                           	opt stack 0
  6426                           tosu	equ	0xFFF
  6427                           tosh	equ	0xFFE
  6428                           tosl	equ	0xFFD
  6429                           pclatu	equ	0xFFB
  6430                           pclath	equ	0xFFA
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           intcon	equ	0xFF2
  6438                           intcon2	equ	0xFF1
  6439                           fsr0h	equ	0xFEA
  6440                           fsr0l	equ	0xFE9
  6441                           wreg	equ	0xFE8
  6442                           fsr1h	equ	0xFE2
  6443                           fsr1l	equ	0xFE1
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           fsr2h	equ	0xFDA
  6447                           fsr2l	equ	0xFD9
  6448                           status	equ	0xFD8
  6449                           
  6450 ;; *************** function ___ftneg *****************
  6451 ;; Defined at:
  6452 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  f1              3    0[COMRAM] float 
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;		None
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  3    0[COMRAM] float 
  6459 ;; Registers used:
  6460 ;;		wreg, status,2, status,0
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6466 ;;      Params:         3       0       0       0       0       0       0
  6467 ;;      Locals:         0       0       0       0       0       0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0
  6469 ;;      Totals:         3       0       0       0       0       0       0
  6470 ;;Total ram usage:        3 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; This function calls:
  6473 ;;		Nothing
  6474 ;; This function is called by:
  6475 ;;		_printf
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text34
  6480  0022CE                     __ptext34:
  6481                           	opt stack 0
  6482  0022CE                     ___ftneg:
  6483                           	opt stack 24
  6484                           
  6485                           ;incstack = 0
  6486  0022CE  5001               	movf	___ftneg@f1,w,c
  6487  0022D0  1002               	iorwf	___ftneg@f1+1,w,c
  6488  0022D2  1003               	iorwf	___ftneg@f1+2,w,c
  6489  0022D4  B4D8               	btfsc	status,2,c
  6490  0022D6  D006               	goto	i2l675
  6491  0022D8  0E00               	movlw	0
  6492  0022DA  1A01               	xorwf	___ftneg@f1,f,c
  6493  0022DC  0E00               	movlw	0
  6494  0022DE  1A02               	xorwf	___ftneg@f1+1,f,c
  6495  0022E0  0E80               	movlw	128
  6496  0022E2  1A03               	xorwf	___ftneg@f1+2,f,c
  6497  0022E4                     i2l675:
  6498  0022E4  C001  F001         	movff	___ftneg@f1,?___ftneg
  6499  0022E8  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6500  0022EC  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6501  0022F0  0012               	return		;funcret
  6502  0022F2                     __end_of___ftneg:
  6503                           	opt stack 0
  6504                           tosu	equ	0xFFF
  6505                           tosh	equ	0xFFE
  6506                           tosl	equ	0xFFD
  6507                           pclatu	equ	0xFFB
  6508                           pclath	equ	0xFFA
  6509                           tblptru	equ	0xFF8
  6510                           tblptrh	equ	0xFF7
  6511                           tblptrl	equ	0xFF6
  6512                           tablat	equ	0xFF5
  6513                           prodh	equ	0xFF4
  6514                           prodl	equ	0xFF3
  6515                           intcon	equ	0xFF2
  6516                           intcon2	equ	0xFF1
  6517                           fsr0h	equ	0xFEA
  6518                           fsr0l	equ	0xFE9
  6519                           wreg	equ	0xFE8
  6520                           fsr1h	equ	0xFE2
  6521                           fsr1l	equ	0xFE1
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           fsr2h	equ	0xFDA
  6525                           fsr2l	equ	0xFD9
  6526                           status	equ	0xFD8
  6527                           
  6528 ;; *************** function ___ftge *****************
  6529 ;; Defined at:
  6530 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  ff1             3    0[COMRAM] float 
  6533 ;;  ff2             3    3[COMRAM] float 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, status,0
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6545 ;;      Params:         6       0       0       0       0       0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0
  6547 ;;      Temps:          3       0       0       0       0       0       0
  6548 ;;      Totals:         9       0       0       0       0       0       0
  6549 ;;Total ram usage:        9 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_printf
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           	psect	text35
  6559  001E38                     __ptext35:
  6560                           	opt stack 0
  6561  001E38                     ___ftge:
  6562                           	opt stack 24
  6563                           
  6564                           ;incstack = 0
  6565  001E38  AE03               	btfss	___ftge@ff1+2,7,c
  6566  001E3A  D016               	goto	i2l2463
  6567  001E3C  C001  F007         	movff	___ftge@ff1,??___ftge
  6568  001E40  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6569  001E44  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6570  001E48  1E07               	comf	??___ftge,f,c
  6571  001E4A  1E08               	comf	??___ftge+1,f,c
  6572  001E4C  1E09               	comf	??___ftge+2,f,c
  6573  001E4E  2A07               	incf	??___ftge,f,c
  6574  001E50  0E00               	movlw	0
  6575  001E52  2208               	addwfc	??___ftge+1,f,c
  6576  001E54  2209               	addwfc	??___ftge+2,f,c
  6577  001E56  0E00               	movlw	0
  6578  001E58  2407               	addwf	??___ftge,w,c
  6579  001E5A  6E01               	movwf	___ftge@ff1,c
  6580  001E5C  0E00               	movlw	0
  6581  001E5E  2008               	addwfc	??___ftge+1,w,c
  6582  001E60  6E02               	movwf	___ftge@ff1+1,c
  6583  001E62  0E80               	movlw	128
  6584  001E64  2009               	addwfc	??___ftge+2,w,c
  6585  001E66  6E03               	movwf	___ftge@ff1+2,c
  6586  001E68                     i2l2463:
  6587  001E68  AE06               	btfss	___ftge@ff2+2,7,c
  6588  001E6A  D016               	goto	i2l2467
  6589  001E6C  C004  F007         	movff	___ftge@ff2,??___ftge
  6590  001E70  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6591  001E74  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6592  001E78  1E07               	comf	??___ftge,f,c
  6593  001E7A  1E08               	comf	??___ftge+1,f,c
  6594  001E7C  1E09               	comf	??___ftge+2,f,c
  6595  001E7E  2A07               	incf	??___ftge,f,c
  6596  001E80  0E00               	movlw	0
  6597  001E82  2208               	addwfc	??___ftge+1,f,c
  6598  001E84  2209               	addwfc	??___ftge+2,f,c
  6599  001E86  0E00               	movlw	0
  6600  001E88  2407               	addwf	??___ftge,w,c
  6601  001E8A  6E04               	movwf	___ftge@ff2,c
  6602  001E8C  0E00               	movlw	0
  6603  001E8E  2008               	addwfc	??___ftge+1,w,c
  6604  001E90  6E05               	movwf	___ftge@ff2+1,c
  6605  001E92  0E80               	movlw	128
  6606  001E94  2009               	addwfc	??___ftge+2,w,c
  6607  001E96  6E06               	movwf	___ftge@ff2+2,c
  6608  001E98                     i2l2467:
  6609  001E98  0E00               	movlw	0
  6610  001E9A  1A01               	xorwf	___ftge@ff1,f,c
  6611  001E9C  0E00               	movlw	0
  6612  001E9E  1A02               	xorwf	___ftge@ff1+1,f,c
  6613  001EA0  0E80               	movlw	128
  6614  001EA2  1A03               	xorwf	___ftge@ff1+2,f,c
  6615  001EA4  0E00               	movlw	0
  6616  001EA6  1A04               	xorwf	___ftge@ff2,f,c
  6617  001EA8  0E00               	movlw	0
  6618  001EAA  1A05               	xorwf	___ftge@ff2+1,f,c
  6619  001EAC  0E80               	movlw	128
  6620  001EAE  1A06               	xorwf	___ftge@ff2+2,f,c
  6621  001EB0  5004               	movf	___ftge@ff2,w,c
  6622  001EB2  5C01               	subwf	___ftge@ff1,w,c
  6623  001EB4  5005               	movf	___ftge@ff2+1,w,c
  6624  001EB6  5802               	subwfb	___ftge@ff1+1,w,c
  6625  001EB8  5006               	movf	___ftge@ff2+2,w,c
  6626  001EBA  5803               	subwfb	___ftge@ff1+2,w,c
  6627  001EBC  B0D8               	btfsc	status,0,c
  6628  001EBE  D002               	goto	i2l2473
  6629  001EC0  90D8               	bcf	status,0,c
  6630  001EC2  0012               	return	
  6631  001EC4                     i2l2473:
  6632  001EC4  80D8               	bsf	status,0,c
  6633  001EC6  0012               	return	
  6634  001EC8                     __end_of___ftge:
  6635                           	opt stack 0
  6636                           tosu	equ	0xFFF
  6637                           tosh	equ	0xFFE
  6638                           tosl	equ	0xFFD
  6639                           pclatu	equ	0xFFB
  6640                           pclath	equ	0xFFA
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           intcon	equ	0xFF2
  6648                           intcon2	equ	0xFF1
  6649                           fsr0h	equ	0xFEA
  6650                           fsr0l	equ	0xFE9
  6651                           wreg	equ	0xFE8
  6652                           fsr1h	equ	0xFE2
  6653                           fsr1l	equ	0xFE1
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function ___lwtoft *****************
  6661 ;; Defined at:
  6662 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  c               2    8[COMRAM] unsigned int 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  3    8[COMRAM] float 
  6669 ;; Registers used:
  6670 ;;		wreg, status,2, status,0, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6676 ;;      Params:         3       0       0       0       0       0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0
  6679 ;;      Totals:         3       0       0       0       0       0       0
  6680 ;;Total ram usage:        3 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    1
  6683 ;; This function calls:
  6684 ;;		___ftpack
  6685 ;; This function is called by:
  6686 ;;		_INT0_ISR
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text36
  6691  0022F2                     __ptext36:
  6692                           	opt stack 0
  6693  0022F2                     ___lwtoft:
  6694                           	opt stack 24
  6695                           
  6696                           ;incstack = 0
  6697  0022F2  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6698  0022F6  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6699  0022FA  6A03               	clrf	___ftpack@arg+2,c
  6700  0022FC  0E8E               	movlw	142
  6701  0022FE  6E04               	movwf	___ftpack@exp,c
  6702  002300  0E00               	movlw	0
  6703  002302  6E05               	movwf	___ftpack@sign,c
  6704  002304  ECC5  F00E         	call	___ftpack	;wreg free
  6705  002308  C001  F009         	movff	?___ftpack,?___lwtoft
  6706  00230C  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6707  002310  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6708  002314  0012               	return	
  6709  002316                     __end_of___lwtoft:
  6710                           	opt stack 0
  6711                           tosu	equ	0xFFF
  6712                           tosh	equ	0xFFE
  6713                           tosl	equ	0xFFD
  6714                           pclatu	equ	0xFFB
  6715                           pclath	equ	0xFFA
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           intcon2	equ	0xFF1
  6724                           fsr0h	equ	0xFEA
  6725                           fsr0l	equ	0xFE9
  6726                           wreg	equ	0xFE8
  6727                           fsr1h	equ	0xFE2
  6728                           fsr1l	equ	0xFE1
  6729                           postinc2	equ	0xFDE
  6730                           postdec2	equ	0xFDD
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function ___ftdiv *****************
  6736 ;; Defined at:
  6737 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  f1              3   35[COMRAM] float 
  6740 ;;  f2              3   38[COMRAM] float 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  f3              3   45[COMRAM] float 
  6743 ;;  sign            1   49[COMRAM] unsigned char 
  6744 ;;  exp             1   48[COMRAM] unsigned char 
  6745 ;;  cntr            1   44[COMRAM] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  3   35[COMRAM] float 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6755 ;;      Params:         6       0       0       0       0       0       0
  6756 ;;      Locals:         6       0       0       0       0       0       0
  6757 ;;      Temps:          3       0       0       0       0       0       0
  6758 ;;      Totals:        15       0       0       0       0       0       0
  6759 ;;Total ram usage:       15 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    1
  6762 ;; This function calls:
  6763 ;;		___ftpack
  6764 ;; This function is called by:
  6765 ;;		_INT0_ISR
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text37
  6770  001CA4                     __ptext37:
  6771                           	opt stack 0
  6772  001CA4                     ___ftdiv:
  6773                           	opt stack 24
  6774                           
  6775                           ;incstack = 0
  6776  001CA4  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  6777  001CA8  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6778  001CAA  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6779  001CAC  3425               	rlcf	___ftdiv@f1+1,w,c
  6780  001CAE  362A               	rlcf	??___ftdiv& (0+255),f,c
  6781  001CB0  E301               	bnc	u308_41
  6782  001CB2  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6783  001CB4                     u308_41:
  6784  001CB4  502A               	movf	??___ftdiv,w,c
  6785  001CB6  6E31               	movwf	___ftdiv@exp,c
  6786  001CB8  5031               	movf	___ftdiv@exp,w,c
  6787  001CBA  A4D8               	btfss	status,2,c
  6788  001CBC  D007               	goto	i2l2895
  6789  001CBE  0E00               	movlw	0
  6790  001CC0  6E24               	movwf	?___ftdiv,c
  6791  001CC2  0E00               	movlw	0
  6792  001CC4  6E25               	movwf	?___ftdiv+1,c
  6793  001CC6  0E00               	movlw	0
  6794  001CC8  6E26               	movwf	?___ftdiv+2,c
  6795  001CCA  0012               	return	
  6796  001CCC                     i2l2895:
  6797  001CCC  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  6798  001CD0  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6799  001CD2  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6800  001CD4  3428               	rlcf	___ftdiv@f2+1,w,c
  6801  001CD6  362A               	rlcf	??___ftdiv& (0+255),f,c
  6802  001CD8  E301               	bnc	u310_41
  6803  001CDA  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6804  001CDC                     u310_41:
  6805  001CDC  502A               	movf	??___ftdiv,w,c
  6806  001CDE  6E32               	movwf	___ftdiv@sign,c
  6807  001CE0  5032               	movf	___ftdiv@sign,w,c
  6808  001CE2  A4D8               	btfss	status,2,c
  6809  001CE4  D007               	goto	i2l2901
  6810  001CE6  0E00               	movlw	0
  6811  001CE8  6E24               	movwf	?___ftdiv,c
  6812  001CEA  0E00               	movlw	0
  6813  001CEC  6E25               	movwf	?___ftdiv+1,c
  6814  001CEE  0E00               	movlw	0
  6815  001CF0  6E26               	movwf	?___ftdiv+2,c
  6816  001CF2  0012               	return	
  6817  001CF4                     i2l2901:
  6818  001CF4  0E00               	movlw	0
  6819  001CF6  6E2E               	movwf	___ftdiv@f3,c
  6820  001CF8  0E00               	movlw	0
  6821  001CFA  6E2F               	movwf	___ftdiv@f3+1,c
  6822  001CFC  0E00               	movlw	0
  6823  001CFE  6E30               	movwf	___ftdiv@f3+2,c
  6824  001D00  5032               	movf	___ftdiv@sign,w,c
  6825  001D02  0F89               	addlw	137
  6826  001D04  5E31               	subwf	___ftdiv@exp,f,c
  6827  001D06  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  6828  001D0A  5029               	movf	___ftdiv@f2+2,w,c
  6829  001D0C  1A32               	xorwf	___ftdiv@sign,f,c
  6830  001D0E  0E80               	movlw	128
  6831  001D10  1632               	andwf	___ftdiv@sign,f,c
  6832  001D12  8E25               	bsf	___ftdiv@f1+1,7,c
  6833  001D14  0EFF               	movlw	255
  6834  001D16  1624               	andwf	___ftdiv@f1,f,c
  6835  001D18  0EFF               	movlw	255
  6836  001D1A  1625               	andwf	___ftdiv@f1+1,f,c
  6837  001D1C  0E00               	movlw	0
  6838  001D1E  1626               	andwf	___ftdiv@f1+2,f,c
  6839  001D20  8E28               	bsf	___ftdiv@f2+1,7,c
  6840  001D22  0EFF               	movlw	255
  6841  001D24  1627               	andwf	___ftdiv@f2,f,c
  6842  001D26  0EFF               	movlw	255
  6843  001D28  1628               	andwf	___ftdiv@f2+1,f,c
  6844  001D2A  0E00               	movlw	0
  6845  001D2C  1629               	andwf	___ftdiv@f2+2,f,c
  6846  001D2E  0E18               	movlw	24
  6847  001D30  6E2D               	movwf	___ftdiv@cntr,c
  6848  001D32                     i2l2921:
  6849  001D32  90D8               	bcf	status,0,c
  6850  001D34  362E               	rlcf	___ftdiv@f3,f,c
  6851  001D36  362F               	rlcf	___ftdiv@f3+1,f,c
  6852  001D38  3630               	rlcf	___ftdiv@f3+2,f,c
  6853  001D3A  5027               	movf	___ftdiv@f2,w,c
  6854  001D3C  5C24               	subwf	___ftdiv@f1,w,c
  6855  001D3E  5028               	movf	___ftdiv@f2+1,w,c
  6856  001D40  5825               	subwfb	___ftdiv@f1+1,w,c
  6857  001D42  5029               	movf	___ftdiv@f2+2,w,c
  6858  001D44  5826               	subwfb	___ftdiv@f1+2,w,c
  6859  001D46  A0D8               	btfss	status,0,c
  6860  001D48  D007               	goto	i2l636
  6861  001D4A  5027               	movf	___ftdiv@f2,w,c
  6862  001D4C  5E24               	subwf	___ftdiv@f1,f,c
  6863  001D4E  5028               	movf	___ftdiv@f2+1,w,c
  6864  001D50  5A25               	subwfb	___ftdiv@f1+1,f,c
  6865  001D52  5029               	movf	___ftdiv@f2+2,w,c
  6866  001D54  5A26               	subwfb	___ftdiv@f1+2,f,c
  6867  001D56  802E               	bsf	___ftdiv@f3,0,c
  6868  001D58                     i2l636:
  6869  001D58  90D8               	bcf	status,0,c
  6870  001D5A  3624               	rlcf	___ftdiv@f1,f,c
  6871  001D5C  3625               	rlcf	___ftdiv@f1+1,f,c
  6872  001D5E  3626               	rlcf	___ftdiv@f1+2,f,c
  6873  001D60  2E2D               	decfsz	___ftdiv@cntr,f,c
  6874  001D62  D7E7               	goto	i2l2921
  6875  001D64  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6876  001D68  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6877  001D6C  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6878  001D70  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6879  001D74  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6880  001D78  ECC5  F00E         	call	___ftpack	;wreg free
  6881  001D7C  C001  F024         	movff	?___ftpack,?___ftdiv
  6882  001D80  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6883  001D84  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6884  001D88  0012               	return	
  6885  001D8A                     __end_of___ftdiv:
  6886                           	opt stack 0
  6887                           tosu	equ	0xFFF
  6888                           tosh	equ	0xFFE
  6889                           tosl	equ	0xFFD
  6890                           pclatu	equ	0xFFB
  6891                           pclath	equ	0xFFA
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           prodh	equ	0xFF4
  6897                           prodl	equ	0xFF3
  6898                           intcon	equ	0xFF2
  6899                           intcon2	equ	0xFF1
  6900                           fsr0h	equ	0xFEA
  6901                           fsr0l	equ	0xFE9
  6902                           wreg	equ	0xFE8
  6903                           fsr1h	equ	0xFE2
  6904                           fsr1l	equ	0xFE1
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function ___ftpack *****************
  6912 ;; Defined at:
  6913 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  arg             3    0[COMRAM] unsigned um
  6916 ;;  exp             1    3[COMRAM] unsigned char 
  6917 ;;  sign            1    4[COMRAM] unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  3    0[COMRAM] float 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6929 ;;      Params:         5       0       0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0
  6931 ;;      Temps:          3       0       0       0       0       0       0
  6932 ;;      Totals:         8       0       0       0       0       0       0
  6933 ;;Total ram usage:        8 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; This function calls:
  6936 ;;		Nothing
  6937 ;; This function is called by:
  6938 ;;		___ftadd
  6939 ;;		___ftdiv
  6940 ;;		___ftmul
  6941 ;;		___lltoft
  6942 ;;		___lwtoft
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text38
  6947  001D8A                     __ptext38:
  6948                           	opt stack 0
  6949  001D8A                     ___ftpack:
  6950                           	opt stack 22
  6951                           
  6952                           ;incstack = 0
  6953  001D8A  5004               	movf	___ftpack@exp,w,c
  6954  001D8C  B4D8               	btfsc	status,2,c
  6955  001D8E  D005               	goto	i2l2015
  6956  001D90  5001               	movf	___ftpack@arg,w,c
  6957  001D92  1002               	iorwf	___ftpack@arg+1,w,c
  6958  001D94  1003               	iorwf	___ftpack@arg+2,w,c
  6959  001D96  A4D8               	btfss	status,2,c
  6960  001D98  D00C               	goto	i2l2021
  6961  001D9A                     i2l2015:
  6962  001D9A  0E00               	movlw	0
  6963  001D9C  6E01               	movwf	?___ftpack,c
  6964  001D9E  0E00               	movlw	0
  6965  001DA0  6E02               	movwf	?___ftpack+1,c
  6966  001DA2  0E00               	movlw	0
  6967  001DA4  6E03               	movwf	?___ftpack+2,c
  6968  001DA6  0012               	return	
  6969  001DA8                     i2l2019:
  6970  001DA8  2A04               	incf	___ftpack@exp,f,c
  6971  001DAA  90D8               	bcf	status,0,c
  6972  001DAC  3203               	rrcf	___ftpack@arg+2,f,c
  6973  001DAE  3202               	rrcf	___ftpack@arg+1,f,c
  6974  001DB0  3201               	rrcf	___ftpack@arg,f,c
  6975  001DB2                     i2l2021:
  6976  001DB2  0E00               	movlw	0
  6977  001DB4  1401               	andwf	___ftpack@arg,w,c
  6978  001DB6  6E06               	movwf	??___ftpack& (0+255),c
  6979  001DB8  0E00               	movlw	0
  6980  001DBA  1402               	andwf	___ftpack@arg+1,w,c
  6981  001DBC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6982  001DBE  0EFE               	movlw	254
  6983  001DC0  1403               	andwf	___ftpack@arg+2,w,c
  6984  001DC2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6985  001DC4  5006               	movf	??___ftpack,w,c
  6986  001DC6  1007               	iorwf	??___ftpack+1,w,c
  6987  001DC8  1008               	iorwf	??___ftpack+2,w,c
  6988  001DCA  B4D8               	btfsc	status,2,c
  6989  001DCC  D00C               	goto	i2l2027
  6990  001DCE  D7EC               	goto	i2l2019
  6991  001DD0                     i2l2023:
  6992  001DD0  2A04               	incf	___ftpack@exp,f,c
  6993  001DD2  0E01               	movlw	1
  6994  001DD4  2601               	addwf	___ftpack@arg,f,c
  6995  001DD6  0E00               	movlw	0
  6996  001DD8  2202               	addwfc	___ftpack@arg+1,f,c
  6997  001DDA  0E00               	movlw	0
  6998  001DDC  2203               	addwfc	___ftpack@arg+2,f,c
  6999  001DDE  90D8               	bcf	status,0,c
  7000  001DE0  3203               	rrcf	___ftpack@arg+2,f,c
  7001  001DE2  3202               	rrcf	___ftpack@arg+1,f,c
  7002  001DE4  3201               	rrcf	___ftpack@arg,f,c
  7003  001DE6                     i2l2027:
  7004  001DE6  0E00               	movlw	0
  7005  001DE8  1401               	andwf	___ftpack@arg,w,c
  7006  001DEA  6E06               	movwf	??___ftpack& (0+255),c
  7007  001DEC  0E00               	movlw	0
  7008  001DEE  1402               	andwf	___ftpack@arg+1,w,c
  7009  001DF0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7010  001DF2  0EFF               	movlw	255
  7011  001DF4  1403               	andwf	___ftpack@arg+2,w,c
  7012  001DF6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7013  001DF8  5006               	movf	??___ftpack,w,c
  7014  001DFA  1007               	iorwf	??___ftpack+1,w,c
  7015  001DFC  1008               	iorwf	??___ftpack+2,w,c
  7016  001DFE  B4D8               	btfsc	status,2,c
  7017  001E00  D006               	goto	i2l2031
  7018  001E02  D7E6               	goto	i2l2023
  7019  001E04                     i2l2029:
  7020  001E04  0604               	decf	___ftpack@exp,f,c
  7021  001E06  90D8               	bcf	status,0,c
  7022  001E08  3601               	rlcf	___ftpack@arg,f,c
  7023  001E0A  3602               	rlcf	___ftpack@arg+1,f,c
  7024  001E0C  3603               	rlcf	___ftpack@arg+2,f,c
  7025  001E0E                     i2l2031:
  7026  001E0E  BE02               	btfsc	___ftpack@arg+1,7,c
  7027  001E10  D003               	goto	i2l578
  7028  001E12  0E02               	movlw	2
  7029  001E14  6004               	cpfslt	___ftpack@exp,c
  7030  001E16  D7F6               	goto	i2l2029
  7031  001E18                     i2l578:
  7032  001E18  A004               	btfss	___ftpack@exp,0,c
  7033  001E1A  9E02               	bcf	___ftpack@arg+1,7,c
  7034  001E1C  90D8               	bcf	status,0,c
  7035  001E1E  3204               	rrcf	___ftpack@exp,f,c
  7036  001E20  5004               	movf	___ftpack@exp,w,c
  7037  001E22  1203               	iorwf	___ftpack@arg+2,f,c
  7038  001E24  5005               	movf	___ftpack@sign,w,c
  7039  001E26  A4D8               	btfss	status,2,c
  7040  001E28  8E03               	bsf	___ftpack@arg+2,7,c
  7041  001E2A  C001  F001         	movff	___ftpack@arg,?___ftpack
  7042  001E2E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7043  001E32  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7044  001E36  0012               	return	
  7045  001E38                     __end_of___ftpack:
  7046                           	opt stack 0
  7047                           tosu	equ	0xFFF
  7048                           tosh	equ	0xFFE
  7049                           tosl	equ	0xFFD
  7050                           pclatu	equ	0xFFB
  7051                           pclath	equ	0xFFA
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           intcon	equ	0xFF2
  7059                           intcon2	equ	0xFF1
  7060                           fsr0h	equ	0xFEA
  7061                           fsr0l	equ	0xFE9
  7062                           wreg	equ	0xFE8
  7063                           fsr1h	equ	0xFE2
  7064                           fsr1l	equ	0xFE1
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           fsr2h	equ	0xFDA
  7068                           fsr2l	equ	0xFD9
  7069                           status	equ	0xFD8
  7070                           
  7071 ;; *************** function _TMR0_StopTimer *****************
  7072 ;; Defined at:
  7073 ;;		line 49 in file "mcc_generated_files/tmr0.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;		None
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		None
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7087 ;;      Params:         0       0       0       0       0       0       0
  7088 ;;      Locals:         0       0       0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0       0
  7090 ;;      Totals:         0       0       0       0       0       0       0
  7091 ;;Total ram usage:        0 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; This function calls:
  7094 ;;		Nothing
  7095 ;; This function is called by:
  7096 ;;		_INT0_ISR
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text39
  7101  00240A                     __ptext39:
  7102                           	opt stack 0
  7103  00240A                     _TMR0_StopTimer:
  7104                           	opt stack 25
  7105                           
  7106                           ;tmr0.c: 52: T0CONbits.TMR0ON = 0;
  7107                           
  7108                           ;incstack = 0
  7109  00240A  9ED5               	bcf	4053,7,c	;volatile
  7110  00240C  0012               	return		;funcret
  7111  00240E                     __end_of_TMR0_StopTimer:
  7112                           	opt stack 0
  7113                           tosu	equ	0xFFF
  7114                           tosh	equ	0xFFE
  7115                           tosl	equ	0xFFD
  7116                           pclatu	equ	0xFFB
  7117                           pclath	equ	0xFFA
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           intcon	equ	0xFF2
  7125                           intcon2	equ	0xFF1
  7126                           fsr0h	equ	0xFEA
  7127                           fsr0l	equ	0xFE9
  7128                           wreg	equ	0xFE8
  7129                           fsr1h	equ	0xFE2
  7130                           fsr1l	equ	0xFE1
  7131                           postinc2	equ	0xFDE
  7132                           postdec2	equ	0xFDD
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function _TMR0_Reload *****************
  7138 ;; Defined at:
  7139 ;;		line 76 in file "mcc_generated_files/tmr0.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      void 
  7146 ;; Registers used:
  7147 ;;		wreg, status,2
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7153 ;;      Params:         0       0       0       0       0       0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0
  7156 ;;      Totals:         0       0       0       0       0       0       0
  7157 ;;Total ram usage:        0 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_INT0_ISR
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text40
  7167  0023F4                     __ptext40:
  7168                           	opt stack 0
  7169  0023F4                     _TMR0_Reload:
  7170                           	opt stack 25
  7171                           
  7172                           ;tmr0.c: 79: TMR0H = timer0ReloadVal >> 8;
  7173                           
  7174                           ;incstack = 0
  7175  0023F4  505A               	movf	_timer0ReloadVal+1,w,c	;volatile
  7176  0023F6  6ED7               	movwf	4055,c	;volatile
  7177                           
  7178                           ;tmr0.c: 80: TMR0L = (uint8_t) timer0ReloadVal;
  7179  0023F8  C059  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7180  0023FC  0012               	return		;funcret
  7181  0023FE                     __end_of_TMR0_Reload:
  7182                           	opt stack 0
  7183                           tosu	equ	0xFFF
  7184                           tosh	equ	0xFFE
  7185                           tosl	equ	0xFFD
  7186                           pclatu	equ	0xFFB
  7187                           pclath	equ	0xFFA
  7188                           tblptru	equ	0xFF8
  7189                           tblptrh	equ	0xFF7
  7190                           tblptrl	equ	0xFF6
  7191                           tablat	equ	0xFF5
  7192                           prodh	equ	0xFF4
  7193                           prodl	equ	0xFF3
  7194                           intcon	equ	0xFF2
  7195                           intcon2	equ	0xFF1
  7196                           fsr0h	equ	0xFEA
  7197                           fsr0l	equ	0xFE9
  7198                           wreg	equ	0xFE8
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _TMR0_ReadTimer *****************
  7208 ;; Defined at:
  7209 ;;		line 55 in file "mcc_generated_files/tmr0.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;		None
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  readVal         2    6[COMRAM] unsigned int 
  7214 ;;  readValHigh     1    9[COMRAM] unsigned char 
  7215 ;;  readValLow      1    8[COMRAM] unsigned char 
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  2    0[COMRAM] unsigned int 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2, status,0
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7225 ;;      Params:         2       0       0       0       0       0       0
  7226 ;;      Locals:         4       0       0       0       0       0       0
  7227 ;;      Temps:          4       0       0       0       0       0       0
  7228 ;;      Totals:        10       0       0       0       0       0       0
  7229 ;;Total ram usage:       10 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_INT0_ISR
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text41
  7239  0021C8                     __ptext41:
  7240                           	opt stack 0
  7241  0021C8                     _TMR0_ReadTimer:
  7242                           	opt stack 25
  7243                           
  7244                           ;tmr0.c: 57: uint16_t readVal;
  7245                           ;tmr0.c: 58: uint8_t readValLow;
  7246                           ;tmr0.c: 59: uint8_t readValHigh;
  7247                           ;tmr0.c: 61: readValLow = TMR0L;
  7248                           
  7249                           ;incstack = 0
  7250  0021C8  CFD6 F009          	movff	4054,TMR0_ReadTimer@readValLow	;volatile
  7251                           
  7252                           ;tmr0.c: 62: readValHigh = TMR0H;
  7253  0021CC  CFD7 F00A          	movff	4055,TMR0_ReadTimer@readValHigh	;volatile
  7254                           
  7255                           ;tmr0.c: 64: readVal = ((uint16_t)readValHigh << 8) + readValLow - (timer0ReloadVal);
  7256  0021D0  C059  F003         	movff	_timer0ReloadVal,??_TMR0_ReadTimer	;volatile
  7257  0021D4  C05A  F004         	movff	_timer0ReloadVal+1,??_TMR0_ReadTimer+1	;volatile
  7258  0021D8  1E03               	comf	??_TMR0_ReadTimer,f,c
  7259  0021DA  1E04               	comf	??_TMR0_ReadTimer+1,f,c
  7260  0021DC  4A03               	infsnz	??_TMR0_ReadTimer,f,c
  7261  0021DE  2A04               	incf	??_TMR0_ReadTimer+1,f,c
  7262  0021E0  5009               	movf	TMR0_ReadTimer@readValLow,w,c
  7263  0021E2  C00A  F005         	movff	TMR0_ReadTimer@readValHigh,??_TMR0_ReadTimer+2
  7264  0021E6  6A06               	clrf	(??_TMR0_ReadTimer+3)& (0+255),c
  7265  0021E8  C005  F006         	movff	??_TMR0_ReadTimer+2,??_TMR0_ReadTimer+3
  7266  0021EC  6A05               	clrf	??_TMR0_ReadTimer+2,c
  7267  0021EE  2605               	addwf	??_TMR0_ReadTimer+2,f,c
  7268  0021F0  0E00               	movlw	0
  7269  0021F2  2206               	addwfc	??_TMR0_ReadTimer+3,f,c
  7270  0021F4  5003               	movf	??_TMR0_ReadTimer,w,c
  7271  0021F6  2405               	addwf	??_TMR0_ReadTimer+2,w,c
  7272  0021F8  6E07               	movwf	TMR0_ReadTimer@readVal,c
  7273  0021FA  5004               	movf	??_TMR0_ReadTimer+1,w,c
  7274  0021FC  2006               	addwfc	??_TMR0_ReadTimer+3,w,c
  7275  0021FE  6E08               	movwf	TMR0_ReadTimer@readVal+1,c
  7276                           
  7277                           ;tmr0.c: 66: return readVal;
  7278  002200  C007  F001         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
  7279  002204  C008  F002         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
  7280  002208  0012               	return	
  7281  00220A                     __end_of_TMR0_ReadTimer:
  7282                           	opt stack 0
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           fsr0h	equ	0xFEA
  7297                           fsr0l	equ	0xFE9
  7298                           wreg	equ	0xFE8
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           postinc2	equ	0xFDE
  7302                           postdec2	equ	0xFDD
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           tosu	equ	0xFFF
  7307                           tosh	equ	0xFFE
  7308                           tosl	equ	0xFFD
  7309                           pclatu	equ	0xFFB
  7310                           pclath	equ	0xFFA
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           intcon	equ	0xFF2
  7318                           intcon2	equ	0xFF1
  7319                           fsr0h	equ	0xFEA
  7320                           fsr0l	equ	0xFE9
  7321                           wreg	equ	0xFE8
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330                           	psect	text42
  7331  000000                     __ptext42:
  7332                           	opt stack 0
  7333                           tosu	equ	0xFFF
  7334                           tosh	equ	0xFFE
  7335                           tosl	equ	0xFFD
  7336                           pclatu	equ	0xFFB
  7337                           pclath	equ	0xFFA
  7338                           tblptru	equ	0xFF8
  7339                           tblptrh	equ	0xFF7
  7340                           tblptrl	equ	0xFF6
  7341                           tablat	equ	0xFF5
  7342                           prodh	equ	0xFF4
  7343                           prodl	equ	0xFF3
  7344                           intcon	equ	0xFF2
  7345                           intcon2	equ	0xFF1
  7346                           fsr0h	equ	0xFEA
  7347                           fsr0l	equ	0xFE9
  7348                           wreg	equ	0xFE8
  7349                           fsr1h	equ	0xFE2
  7350                           fsr1l	equ	0xFE1
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357                           	psect	rparam
  7358  0000                     tosu	equ	0xFFF
  7359                           tosh	equ	0xFFE
  7360                           tosl	equ	0xFFD
  7361                           pclatu	equ	0xFFB
  7362                           pclath	equ	0xFFA
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           prodh	equ	0xFF4
  7368                           prodl	equ	0xFF3
  7369                           intcon	equ	0xFF2
  7370                           intcon2	equ	0xFF1
  7371                           fsr0h	equ	0xFEA
  7372                           fsr0l	equ	0xFE9
  7373                           wreg	equ	0xFE8
  7374                           fsr1h	equ	0xFE2
  7375                           fsr1l	equ	0xFE1
  7376                           postinc2	equ	0xFDE
  7377                           postdec2	equ	0xFDD
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8
  7381                           
  7382                           	psect	temp
  7383  00005D                     btemp:
  7384                           	opt stack 0
  7385  00005D                     	ds	1
  7386  0000                     int$flags	set	btemp
  7387                           tosu	equ	0xFFF
  7388                           tosh	equ	0xFFE
  7389                           tosl	equ	0xFFD
  7390                           pclatu	equ	0xFFB
  7391                           pclath	equ	0xFFA
  7392                           tblptru	equ	0xFF8
  7393                           tblptrh	equ	0xFF7
  7394                           tblptrl	equ	0xFF6
  7395                           tablat	equ	0xFF5
  7396                           prodh	equ	0xFF4
  7397                           prodl	equ	0xFF3
  7398                           intcon	equ	0xFF2
  7399                           intcon2	equ	0xFF1
  7400                           fsr0h	equ	0xFEA
  7401                           fsr0l	equ	0xFE9
  7402                           wreg	equ	0xFE8
  7403                           fsr1h	equ	0xFE2
  7404                           fsr1l	equ	0xFE1
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    118
    Data        0
    BSS         5
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     88      92
    BANK0           160     29      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _INT0_ISR->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INT0_ISR->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     172
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     172
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      86
                                             27 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                             25 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2      86
                                             25 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0   53222
                                             74 COMRAM    14    14      0
                           _INT0_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0   53222
                     _TMR0_ReadTimer
                        _TMR0_Reload
                     _TMR0_StopTimer
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             _printf
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (6) i2_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _printf                                              42    37      5   43882
                                             63 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (7) _scale                                               10     7      3   10437
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _fround                                              13    10      3   10239
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    4457
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (7) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    3604
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3307
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2619
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ReadTimer                                      10     8      2      69
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     _TMR0_ReadTimer
     _TMR0_Reload
     _TMR0_StopTimer
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART1_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     i2_TMR0_StartTimer
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1D      24       4       22.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     58      5C       1       97.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      80       9        0.0%
DATA                 0      0      80      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jan 15 13:42:48 2017

                            ___awdiv@sign 000C                       ___wmul@multiplicand 0011  
                         _timer0ReloadVal 0059                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0039  
                            ___ftadd@exp2 0038                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 0037                                       l163 23D4  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
              ??_INT0_SetInterruptHandler 007B                              ___awmod@sign 0006  
                                     tosl 000FFD                                       wreg 000FE8  
                            ___ftdiv@cntr 002D                              ___ftdiv@sign 0032  
                                    STR_1 0677                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                            printf@tmpval 0069                                      i2l74 004E  
                                    i2l78 0058                                      _WPUB 000F61  
                           _EUSART1_Write 23C0                                      _main 23CC  
                            ___ftpack@arg 0001                              ___ftpack@exp 0004  
                         _TMR0_StartTimer 23FE                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 005D  
                           __CFG_BORV$190 000000                                      pclat 000FFA  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0094                             __CFG_IESO$OFF 000000  
                            ___ftmul@cntr 0022                              ___param_bank 000010  
                            ___ftmul@sign 0023                              ___fttol@exp1 0039  
                            ___fttol@lval 0035                   __end_of_TMR0_Initialize 21C8  
                        __end_of_INT0_ISR 1F4C            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 23C0  
                                   ?_main 0001                           __end_of___awdiv 1FD0  
                         __end_of___ftadd 1862                           __end_of___awmod 20C2  
               TMR0_ReadTimer@readValHigh 000A                           __end_of___ftdiv 1D8A  
                         __end_of___ftneg 22F2                           __end_of___lldiv 2052  
                         __end_of___ftmul 1BB0                                     _T0CON 000FD5  
                         ___awdiv@divisor 0009                           __end_of___llmod 2128  
                         __end_of___ftsub 224A                           __end_of___fttol 1CA4  
                          __CFG_DEBUG$OFF 000000                                     i2l306 0D42  
                                   i2l601 16FA                                     i2l605 1724  
                                   i2l197 23C2                                     i2l616 17D4  
                                   i2l625 17F0                                     i2l546 1AAA  
                                   i2l650 1982                                     i2l643 18F4  
                                   i2l636 1D58                                     i2l644 191C  
                                   i2l725 2040                                     i2l735 2116  
                                   i2l578 1E18                                     i2l675 22E4  
                         ___awdiv@counter 000B                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0079                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0011                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 227A                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers 0629  
                                   _scale 1080                           __end_of_isdigit 2334  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   _putch 23EA                            ?_EUSART1_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                            __CFG_HFOFST$ON 000000  
                          __CFG_FOSC$HSMP 000000                            __CFG_PBADEN$ON 000000  
                         __initialization 2350                __end_of_EUSART1_Initialize 23B2  
                            __end_of_main 23D6               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 007D                             ___fttol@sign1 0034  
                           __activetblptr 000002                      __size_of__tdiv_to_l_ 0132  
                 __end_of_TMR0_StartTimer 2402                          ___llmod@dividend 0001  
                                  ?_scale 0024                          ___awdiv@dividend 0007  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                        __end_of___ftpack 1E38                          __end_of___lltoft 2184  
                                  i2l2021 1DB2                                    i2l2031 1E0E  
                                  i2l2023 1DD0                                    i2l2015 1D9A  
                                  i2l2113 180C                                    i2l2105 17C2  
                                  i2l2027 1DE6                                    i2l2019 1DA8  
                                  i2l2123 183C                                    i2l2107 17CC  
                                  i2l2211 1FB8                                    i2l2029 1E04  
                                  i2l2133 1AE4                                    i2l2301 1258  
                                  i2l2071 1732                                    i2l2215 1FC6  
                                  i2l2207 1FAE                                    i2l2231 2072  
                                  i2l2065 1708                                    i2l2153 1B3E  
                                  i2l2313 13A8                                    i2l2305 127C  
                                  i2l2403 19D0                                    i2l2251 20B8  
                                  i2l2243 20A0                                    i2l2235 2080  
                                  i2l2227 2066                                    i2l2163 1B66  
                                  i2l2139 1B0C                                    i2l2331 232C  
                                  i2l2093 1784                                    i2l2341 188E  
                                  i2l2237 2088                                    i2l2157 1B4E  
                                  i2l2095 178E                                    i2l2087 1762  
                                  i2l2183 1F60                                    i2l2239 208C  
                                  i2l2247 20AA                                    i2l2167 1B76  
                                  i2l2319 144C                                    i2l2097 1798  
                                  i2l2505 1C42                                    i2l2441 1A80  
                                  i2l2425 1A42                                    i2l2417 1A12  
                                  i2l2281 1676                                    i2l2273 15B6  
                                  i2l2099 17A0                                    i2l2523 1C92  
                                  i2l2515 1C6A                                    i2l2347 18BA  
                                  i2l2195 1F86                                    i2l2603 0704  
                                  i2l2611 0764                                    i2l2517 1C76  
                                  i2l2509 1C52                                    i2l2533 1FF2  
                                  i2l2437 1A70                                    i2l2381 1958  
                                  u221_41 189E                                    i2l2197 1F8E  
                                  i2l2189 1F70                                    i2l2621 07C4  
                          __CFG_WDTEN$OFF 000000                                    i2l2463 1E68  
                                  i2l2455 2220                                    i2l2519 1C7C  
                                  i2l2535 1FFE                                    i2l2447 1A98  
                                  i2l2199 1F92                                    i2l2295 11B4  
                                  i2l2703 0AC8                                    i2l2631 07F0  
                                  i2l2623 07DA                                    i2l2473 1EC4  
                                  i2l2545 2032                                    i2l2537 2002  
                                  i2l2561 2108                                    i2l2553 20D4  
                                  i2l2449 1AA4                                    i2l2377 1948  
                                  i2l2721 0B7A                                    i2l2633 0816  
                                  i2l2617 078A                                    i2l2467 1E98  
                                  i2l2555 20E0                                    i2l2387 1970  
                                  i2l2803 0F0A                                    i2l2707 0B2E  
                                  i2l2627 07EA                                    i2l2901 1CF4  
                                  u310_41 1CDC                                    i2l2557 20E4  
                                  i2l2397 19B2                                    i2l2389 197C  
                                  i2l2821 0FA0                                    i2l2813 0F62  
                                  i2l2741 0C26                                    i2l2725 0BBC  
                                  i2l2709 0B34                                    i2l2487 1BDC  
                                  i2l2567 212E                                    i2l2807 0F36  
                                  i2l2751 0C68                                    i2l2735 0C02  
                                  i2l2639 0830                                    i2l2591 06B6  
                                  i2l2921 1D32                                    i2l2569 213A  
                                  i2l2841 102A                                    i2l2833 1002  
                                  i2l2825 0FD4                                    i2l2745 0C34  
                                  i2l2729 0BDC                                    i2l2681 09EC  
                                  i2l2673 0980                                    i2l2665 0918  
                                  i2l2649 0876                                    i2l2593 06CC  
                                  i2l2827 0FDE                                    i2l2819 0F96  
                                  i2l2763 0D10                                    i2l2747 0C48  
                                  i2l2739 0C10                                    i2l2683 0A02  
                                  i2l2587 06A0                                    i2l2845 1044  
                                  i2l2765 0D24                                    i2l2757 0CF4  
                                  i2l2693 0A6A                                    i2l2677 09A6  
                                  i2l2597 06D4                                    i2l2839 101E  
                                  i2l2791 0EB2                                    i2l2775 0D6A  
                                  i2l2759 0D02                                    i2l2679 09BC  
                                  i2l2785 0E96                                    i2l2769 0D46  
                                  i2l2689 0A44                                    i2l2793 0EC0  
                                  i2l2849 1062                                    i2l2787 0EA4  
                                  i2l2779 0DBC                                    u240_41 1BC0  
                                  i2l2895 1CCC                                    i2l2799 0EE6  
                                  u171_41 16C6                                    u219_41 1872  
                                  u308_41 1CB4                                    u172_41 16DA  
                                  _RCREG1 000FAE                                    u192_41 1ACC  
                        __end_of___lwtoft 2316                                    u194_41 1AF4  
                                  _RCSTA1 000FAB                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                            __CFG_XINST$OFF 000000  
                        __end_of__powers_ 0677                              ?_TMR0_Reload 0001  
                                  ___ftge 1E38                                    ___wmul 22A8  
                               ??___awdiv 000B                                 ??___ftadd 0034  
                          __CFG_STVREN$ON 000000                                 ??___awmod 0005  
                               ??___ftdiv 002A                                 ??___ftneg 0004  
                               ??___lldiv 0009                                 ??___ftmul 001B  
                               ??___llmod 0009                                 ??___ftsub 0040  
                               ??___fttol 002F                          ?_TMR0_Initialize 0001  
                                  _fround 1470                          ___awdiv@quotient 000D  
                         ___awmod@divisor 0003                                    _result 0081  
                         ___awmod@counter 0005                                    _printf 0690  
                   ___ftmul@f3_as_product 001F                                 ??_isdigit 0001  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                         ??_EUSART1_Write 0001  TMR0_SetInterruptHandler@InterruptHandler 0079  
INT0_SetInterruptHandler@InterruptHandler 0079             __size_of_INTERRUPT_Initialize 0004  
                       _SYSTEM_Initialize 236A                                __accesstop 0060  
                 __end_of__initialization 235C                                 ?_INT0_ISR 0001  
                              ___ftadd@f1 002E                                ___ftadd@f2 0031  
                              ___ftge@ff1 0001                                ___ftge@ff2 0004  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                              ___ftdiv@f1 0024                                ___ftdiv@f2 0027  
                              ___ftdiv@f3 002E                                ___ftneg@f1 0001  
                              ___ftmul@f1 0015                                ___ftmul@f2 0018  
                              ___ftsub@f1 003A                                ___ftsub@f2 003D  
                              ___fttol@f1 002B                            __pcstackCOMRAM 0001  
                     ??_SYSTEM_Initialize 007D                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0009                             __end_of_scale 1470  
                           __end_of_putch 23F4                   __size_of_TMR0_ReadTimer 0042  
                              ___lwtoft@c 0009               __size_of_EXT_INT_Initialize 0018  
                              __div_to_l_ 1994                           __div_to_l_@exp1 000C  
                        ?_TMR0_StartTimer 0001                           __div_to_l_@cntr 000B  
                                 ??_scale 0027                 __end_of_SYSTEM_Initialize 2384  
                         __div_to_l_@quot 0007                                   ??_putch 0002  
                              __pbssBANK0 0081                           __CFG_PLLCFG$OFF 000000  
                   _INT0_InterruptHandler 007D                                ??_INT0_ISR 004B  
                              __pnvCOMRAM 0059                             __div_to_l_@f1 0001  
                           __div_to_l_@f2 0004                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0001          __end_of_TMR0_SetInterruptHandler 23E0  
                 __size_of_TMR0_StopTimer 0004                                   ?___wmul 000F  
                              ??_TMR0_ISR 0002                        __CFG_CCP3MX$PORTB5 000000  
                                 ?_fround 0024                                 ?___ftpack 0001  
                                 ?_printf 0040                                 ?___lltoft 0009  
                               ?___lwtoft 0009                                   _OSCCON2 000FD2  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
       __size_of_INT0_SetInterruptHandler 000A                 ?_INT0_SetInterruptHandler 0079  
                         __CFG_PWRTEN$OFF 000000                         __end_of__npowers_ 0650  
                                 __Hparam 0000                                _scale$1306 0027  
                                 __Lparam 0000                           __size_of___ftge 0090  
                                 ___awdiv 1F4C                                   ___ftadd 16B6  
                                 ___awmod 2052                                   ___ftdiv 1CA4  
                                 ___ftneg 22CE                                   ___lldiv 1FD0  
                         __size_of___wmul 0026                                   ___ftmul 1ABC  
                                 ___llmod 20C2                                   ___ftsub 220A  
                                 ___fttol 1BB0                              __psmallconst 0600  
                    __size_of_TMR0_Reload 000A                                   __pcinit 2350  
                              ??___ftpack 0006                           __size_of_fround 0246  
                                 __ramtop 0600                                ??___lltoft 000D  
                                 __ptext0 23CC                                   __ptext1 236A  
                                 __ptext2 2184                                   __ptext3 23FE  
                                 __ptext4 23D6                                   __ptext5 227A  
                                 __ptext6 23B2                                   __ptext7 2402  
                                 __ptext8 2384                                   __ptext9 23E0  
                         __size_of_printf 09F0                                ??___lwtoft 000C  
                               _T0CONbits 000FD5                               ?__div_to_l_ 0001  
                                 _dpowers 0601                     _OSCILLATOR_Initialize 23B2  
                                 _isdigit 2316                                   _reading 005B  
                        ___awmod@dividend 0001                        _EUSART1_Initialize 239C  
                ??_PIN_MANAGER_Initialize 0079                __size_of_SYSTEM_Initialize 001A  
                    end_of_initialization 235C                       ?_EUSART1_Initialize 0001  
                           __Lmediumconst 0000                           ___lldiv@divisor 0005  
                         ___lldiv@counter 000D                     TMR0_ReadTimer@readVal 0007  
                                 printf@c 0078                                   printf@f 0040  
                                 postdec2 000FDD                                   postinc2 000FDE  
                          __tdiv_to_l_@f1 0001                            __tdiv_to_l_@f2 0004  
                          _TMR0_ReadTimer 21C8                      ??_EUSART1_Initialize 0079  
                           ??__tdiv_to_l_ 0007                  _TMR0_SetInterruptHandler 23D6  
                     EUSART1_Write@txData 0001                               ___ftdiv@exp 0031  
                             printf@width 0071                         __size_of_INT0_ISR 0084  
                     __size_of__div_to_l_ 0128                               ___ftmul@exp 001E  
                          _TMR0_StopTimer 240A                    __end_of_TMR0_ReadTimer 220A  
            __end_of_INTERRUPT_Initialize 2406              _INT0_DefaultInterruptHandler 000000  
                          __end_of___ftge 1EC8                            __end_of___wmul 22CE  
                       __size_of_TMR0_ISR 0030                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_fround 16B6                            __end_of_printf 1080  
                     start_initialization 2350                  __size_of_TMR0_Initialize 0044  
         __size_of_PIN_MANAGER_Initialize 002E                       __end_of__tdiv_to_l_ 1994  
                             putch@txData 0002                     __end_of_EUSART1_Write 23CC  
                         ___llmod@divisor 0005                           ___llmod@counter 0009  
                  __end_of_TMR0_StopTimer 240E                                  ??___ftge 0007  
                         ?_TMR0_ReadTimer 0001                                  ??___wmul 0013  
                                ??_fround 0027                __end_of_EXT_INT_Initialize 239C  
                                ??_printf 0045                                fround@prec 002D  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 005B          __end_of_INT0_SetInterruptHandler 23EA  
                       __size_of___lwtoft 0024                             __pcstackBANK0 0060  
                   _TMR0_InterruptHandler 007F                                 __pnvBANK0 007D  
                __size_of_TMR0_StartTimer 0004                           ?_TMR0_StopTimer 0001  
                  _PIN_MANAGER_Initialize 227A                                 __pintcode 0008  
                                ?___awdiv 0007                                  ?___ftadd 002E  
                                ?___awmod 0001                                  ?___ftdiv 0024  
                                ?___ftneg 0001                                  ?___lldiv 0001  
                                ?___ftmul 0015                                  ?___llmod 0001  
                                ?___ftsub 003A                                 __npowers_ 0629  
                                ?___fttol 002B              ??_INTERRUPT_InterruptManager 004B  
                        __CFG_PRICLKEN$ON 000000                               __tdiv_to_l_ 1862  
                            ??__div_to_l_ 0007                               __smallconst 0600  
                                _BAUDCON1 000FB8                                  ?_isdigit 0001  
                          __size_of_scale 03F0                            __size_of_putch 000A  
                    _INTERRUPT_Initialize 2402                         ??_TMR0_Initialize 007B  
                                _INT0_ISR 1EC8                            ___wmul@product 0013  
                                _LATBbits 000F8A                         i2_TMR0_StartTimer 2406  
     __size_of_INTERRUPT_InterruptManager 008C                                  i2u242_40 1BFA  
                                i2u242_45 1BF2                                  i2u307_40 233C  
                                i2u314_48 2264                                  i2u307_46 233E  
              ??_TMR0_SetInterruptHandler 007B                                  i2u264_40 08B6  
                                i2u264_45 08AC                                  _PIR1bits 000F9E  
                      __end_of__div_to_l_ 1ABC                                  i2u286_40 0D3A  
                           ??_TMR0_Reload 0001                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                        ?i2_TMR0_StartTimer 0001  
                                _TMR0_ISR 224A                  TMR0_ReadTimer@readValLow 0009  
                     ??i2_TMR0_StartTimer 0001                         ___wmul@multiplier 000F  
                              printf@flag 006F                                printf@fval 0073  
                              printf@prec 0076                               _INTCON2bits 000FF1  
                   ?_INTERRUPT_Initialize 0001                  _INT0_SetInterruptHandler 23E0  
               __end_ofi2_TMR0_StartTimer 240A                                  __Hrparam 0000  
                                __Lrparam 0000                        __CFG_BOREN$SBORDIS 000000  
                       __CFG_P2BMX$PORTB5 000000                   ??_OSCILLATOR_Initialize 0079  
                       ??_TMR0_StartTimer 0079                          __size_of___awdiv 0084  
                        __size_of___ftadd 01AC                          __size_of___awmod 0070  
                        __size_of___ftdiv 00E6                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                          __size_of___ftmul 00F4  
                        __size_of___llmod 0066                          __size_of___ftsub 0040  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 0016  
                                ___ftpack 1D8A                               _fround$1304 002A  
                             _fround$1305 0027                                  ___lltoft 2128  
                     __end_of_TMR0_Reload 23FE                               _isdigit$955 0002  
                                ___lwtoft 22F2                          __size_of_isdigit 001E  
                                __ptext10 239C                                  __ptext20 2316  
                                __ptext12 224A                                  __ptext21 1470  
                                __ptext13 2334                                  __ptext30 1FD0  
                                __ptext22 22A8                                  __ptext14 1EC8  
                                __ptext31 1BB0                                  __ptext23 1ABC  
                                __ptext15 2406                                  __ptext40 23F4  
                                __ptext32 220A                                  __ptext24 2052  
                                __ptext16 0690                                  __ptext41 21C8  
                                __ptext33 16B6                                  __ptext25 1F4C  
                                __ptext17 1080                                  __ptext42 0000  
                                __ptext34 22CE                                  __ptext26 1862  
                                __ptext18 23EA                                  __ptext35 1E38  
                                __ptext27 1994                                  __ptext19 23C0  
                                __ptext36 22F2                                  __ptext28 2128  
                                __ptext37 1CA4                                  __ptext29 20C2  
                                __ptext38 1D8A                                  __ptext39 240A  
                                __powers_ 0650                             __size_of_main 000A  
                        ??_TMR0_ReadTimer 0003      __end_of_TMR0_DefaultInterruptHandler 2350  
   __size_of_TMR0_DefaultInterruptHandler 001C              _TMR0_DefaultInterruptHandler 2334  
                                int$flags 005D        __end_of_INTERRUPT_InterruptManager 0094  
              _INTERRUPT_InterruptManager 0008                                 printf@exp 006D  
                               printf@val 0065                                _INTCONbits 000FF2  
                                isdigit@c 0003                    ??_INTERRUPT_Initialize 0079  
                                scale@scl 002A                        _EXT_INT_Initialize 2384  
                                intlevel2 0000                          ??_TMR0_StopTimer 0001  
                        __tdiv_to_l_@exp1 000F                          __tdiv_to_l_@cntr 000E  
                        __tdiv_to_l_@quot 000A                          ___lldiv@dividend 0001  
                 ?_PIN_MANAGER_Initialize 0001                __size_ofi2_TMR0_StartTimer 0004  
                     ?_EXT_INT_Initialize 0001                                _RCSTA1bits 000FAB  
           ?_TMR0_DefaultInterruptHandler 0001                               _TMR0_Reload 23F4  
                                printf@ap 0063                    __size_of_EUSART1_Write 000C  
                            ?__tdiv_to_l_ 0001                               _printf$1307 0060  
                    ??_EXT_INT_Initialize 007B                          ___lldiv@quotient 0009  
                         _TMR0_Initialize 2184                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 22A8  
