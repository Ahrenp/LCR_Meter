

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Jan 23 23:16:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           ; Version 1.40
    78                           ; Generated 01/12/2016 GMT
    79                           ; 
    80                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F25K22 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     
   112                           	psect	idataBANK0
   113  00310E                     __pidataBANK0:
   114                           	opt stack 0
   115                           
   116                           ;initializer for _auto_range
   117  00310E  01                 	db	1
   118                           
   119                           ;initializer for _range
   120  00310F  02                 	db	2
   121                           
   122                           	psect	smallconst
   123  000600                     __psmallconst:
   124                           	opt stack 0
   125  000600  00                 	db	0
   126  000601                     _dpowers:
   127                           	opt stack 0
   128  000601  0001               	dw	1
   129  000603  0000               	dw	0
   130  000605  000A               	dw	10
   131  000607  0000               	dw	0
   132  000609  0064               	dw	100
   133  00060B  0000               	dw	0
   134  00060D  03E8               	dw	1000
   135  00060F  0000               	dw	0
   136  000611  2710               	dw	10000
   137  000613  0000               	dw	0
   138  000615  86A0               	dw	34464
   139  000617  0001               	dw	1
   140  000619  4240               	dw	16960
   141  00061B  000F               	dw	15
   142  00061D  9680               	dw	38528
   143  00061F  0098               	dw	152
   144  000621  E100               	dw	57600
   145  000623  05F5               	dw	1525
   146  000625  CA00               	dw	51712
   147  000627  3B9A               	dw	15258
   148  000629                     __end_of_dpowers:
   149                           	opt stack 0
   150  000629                     __npowers_:
   151                           	opt stack 0
   152  000629  00                 	db	0
   153  00062A  80                 	db	128
   154  00062B  3F                 	db	63
   155  00062C  CD                 	db	205
   156  00062D  CC                 	db	204
   157  00062E  3D                 	db	61
   158  00062F  D7                 	db	215
   159  000630  23                 	db	35
   160  000631  3C                 	db	60
   161  000632  12                 	db	18
   162  000633  83                 	db	131
   163  000634  3A                 	db	58
   164  000635  B7                 	db	183
   165  000636  D1                 	db	209
   166  000637  38                 	db	56
   167  000638  C6                 	db	198
   168  000639  27                 	db	39
   169  00063A  37                 	db	55
   170  00063B  38                 	db	56
   171  00063C  86                 	db	134
   172  00063D  35                 	db	53
   173  00063E  C0                 	db	192
   174  00063F  D6                 	db	214
   175  000640  33                 	db	51
   176  000641  CC                 	db	204
   177  000642  2B                 	db	43
   178  000643  32                 	db	50
   179  000644  70                 	db	112
   180  000645  89                 	db	137
   181  000646  30                 	db	48
   182  000647  E7                 	db	231
   183  000648  DB                 	db	219
   184  000649  2E                 	db	46
   185  00064A  E5                 	db	229
   186  00064B  3C                 	db	60
   187  00064C  1E                 	db	30
   188  00064D  42                 	db	66
   189  00064E  A2                 	db	162
   190  00064F  0D                 	db	13
   191  000650                     __end_of__npowers_:
   192                           	opt stack 0
   193  000650                     __powers_:
   194                           	opt stack 0
   195  000650  00                 	db	0
   196  000651  80                 	db	128
   197  000652  3F                 	db	63
   198  000653  00                 	db	0
   199  000654  20                 	db	32
   200  000655  41                 	db	65
   201  000656  00                 	db	0
   202  000657  C8                 	db	200
   203  000658  42                 	db	66
   204  000659  00                 	db	0
   205  00065A  7A                 	db	122
   206  00065B  44                 	db	68
   207  00065C  40                 	db	64
   208  00065D  1C                 	db	28
   209  00065E  46                 	db	70
   210  00065F  50                 	db	80
   211  000660  C3                 	db	195
   212  000661  47                 	db	71
   213  000662  24                 	db	36
   214  000663  74                 	db	116
   215  000664  49                 	db	73
   216  000665  97                 	db	151
   217  000666  18                 	db	24
   218  000667  4B                 	db	75
   219  000668  BC                 	db	188
   220  000669  BE                 	db	190
   221  00066A  4C                 	db	76
   222  00066B  6B                 	db	107
   223  00066C  6E                 	db	110
   224  00066D  4E                 	db	78
   225  00066E  03                 	db	3
   226  00066F  15                 	db	21
   227  000670  50                 	db	80
   228  000671  79                 	db	121
   229  000672  AD                 	db	173
   230  000673  60                 	db	96
   231  000674  F3                 	db	243
   232  000675  49                 	db	73
   233  000676  71                 	db	113
   234  000677                     __end_of__powers_:
   235                           	opt stack 0
   236  000677                     _cal_current:
   237                           	opt stack 0
   238  000677  00                 	db	0
   239  000678  00                 	db	0
   240  000679  3F                 	db	63
   241  00067A  9A                 	db	154
   242  00067B  F9                 	db	249
   243  00067C  40                 	db	64
   244  00067D  DC                 	db	220
   245  00067E  D8                 	db	216
   246  00067F  42                 	db	66
   247  000680  70                 	db	112
   248  000681  8A                 	db	138
   249  000682  45                 	db	69
   250  000683  C0                 	db	192
   251  000684  DA                 	db	218
   252  000685  47                 	db	71
   253  000686                     __end_of_cal_current:
   254                           	opt stack 0
   255  000686                     _R1_BIT:
   256                           	opt stack 0
   257  000686  00                 	db	0
   258  000687  01                 	db	1
   259  000688  02                 	db	2
   260  000689  03                 	db	3
   261  00068A  04                 	db	4
   262  00068B                     __end_of_R1_BIT:
   263                           	opt stack 0
   264  00068B                     _RSET_BIT:
   265                           	opt stack 0
   266  00068B  02                 	db	2
   267  00068C  03                 	db	3
   268  00068D  03                 	db	3
   269  00068E  04                 	db	4
   270  00068F  05                 	db	5
   271  000690                     __end_of_RSET_BIT:
   272                           	opt stack 0
   273  000690                     STR_6:
   274  000690  0D                 	db	13
   275  000691  0A                 	db	10
   276  000692  53                 	db	83	;'S'
   277  000693  65                 	db	101	;'e'
   278  000694  74                 	db	116	;'t'
   279  000695  74                 	db	116	;'t'
   280  000696  69                 	db	105	;'i'
   281  000697  6E                 	db	110	;'n'
   282  000698  67                 	db	103	;'g'
   283  000699  20                 	db	32
   284  00069A  72                 	db	114	;'r'
   285  00069B  61                 	db	97	;'a'
   286  00069C  6E                 	db	110	;'n'
   287  00069D  67                 	db	103	;'g'
   288  00069E  65                 	db	101	;'e'
   289  00069F  20                 	db	32
   290  0006A0  3D                 	db	61	;'='
   291  0006A1  20                 	db	32
   292  0006A2  25                 	db	37
   293  0006A3  64                 	db	100	;'d'
   294  0006A4  0D                 	db	13
   295  0006A5  0A                 	db	10
   296  0006A6  00                 	db	0
   297  0006A7                     STR_3:
   298  0006A7  43                 	db	67	;'C'
   299  0006A8  3D                 	db	61	;'='
   300  0006A9  45                 	db	69	;'E'
   301  0006AA  52                 	db	82	;'R'
   302  0006AB  52                 	db	82	;'R'
   303  0006AC  4F                 	db	79	;'O'
   304  0006AD  52                 	db	82	;'R'
   305  0006AE  20                 	db	32
   306  0006AF  20                 	db	32
   307  0006B0  20                 	db	32
   308  0006B1  20                 	db	32
   309  0006B2  20                 	db	32
   310  0006B3  20                 	db	32
   311  0006B4  20                 	db	32
   312  0006B5  20                 	db	32
   313  0006B6  20                 	db	32
   314  0006B7  00                 	db	0
   315  0006B8                     STR_5:
   316  0006B8  52                 	db	82	;'R'
   317  0006B9  61                 	db	97	;'a'
   318  0006BA  6E                 	db	110	;'n'
   319  0006BB  67                 	db	103	;'g'
   320  0006BC  65                 	db	101	;'e'
   321  0006BD  20                 	db	32
   322  0006BE  25                 	db	37
   323  0006BF  64                 	db	100	;'d'
   324  0006C0  20                 	db	32
   325  0006C1  28                 	db	40
   326  0006C2  25                 	db	37
   327  0006C3  64                 	db	100	;'d'
   328  0006C4  29                 	db	41
   329  0006C5  25                 	db	37
   330  0006C6  64                 	db	100	;'d'
   331  0006C7  00                 	db	0
   332  0006C8  25                 	db	37
   333  0006C9  6C                 	db	108	;'l'
   334  0006CA  75                 	db	117	;'u'
   335  0006CB  2E                 	db	46
   336  0006CC  25                 	db	37
   337  0006CD  36                 	db	54	;'6'
   338  0006CE  2E                 	db	46
   339  0006CF  36                 	db	54	;'6'
   340  0006D0  6C                 	db	108	;'l'
   341  0006D1  75                 	db	117	;'u'
   342  0006D2  00                 	db	0
   343  0006D3                     STR_2:
   344  0006D3  43                 	db	67	;'C'
   345  0006D4  3D                 	db	61	;'='
   346  0006D5  25                 	db	37
   347  0006D6  31                 	db	49	;'1'
   348  0006D7  32                 	db	50	;'2'
   349  0006D8  2E                 	db	46
   350  0006D9  33                 	db	51	;'3'
   351  0006DA  66                 	db	102	;'f'
   352  0006DB  6E                 	db	110	;'n'
   353  0006DC  46                 	db	70	;'F'
   354  0006DD  00                 	db	0
   355  0006DE                     STR_4:
   356  0006DE  43                 	db	67	;'C'
   357  0006DF  3D                 	db	61	;'='
   358  0006E0  25                 	db	37
   359  0006E1  31                 	db	49	;'1'
   360  0006E2  32                 	db	50	;'2'
   361  0006E3  2E                 	db	46
   362  0006E4  30                 	db	48	;'0'
   363  0006E5  66                 	db	102	;'f'
   364  0006E6  70                 	db	112	;'p'
   365  0006E7  46                 	db	70	;'F'
   366  0006E8  00                 	db	0
   367  0006E9                     STR_1:
   368  0006E9  43                 	db	67	;'C'
   369  0006EA  3D                 	db	61	;'='
   370  0006EB  25                 	db	37
   371  0006EC  31                 	db	49	;'1'
   372  0006ED  32                 	db	50	;'2'
   373  0006EE  2E                 	db	46
   374  0006EF  36                 	db	54	;'6'
   375  0006F0  66                 	db	102	;'f'
   376  0006F1  75                 	db	117	;'u'
   377  0006F2  46                 	db	70	;'F'
   378  0006F3  00                 	db	0
   379                           
   380                           ; #config settings
   381  0006F4  00                 	db	0	; dummy byte at the end
   382  0000                     
   383                           	psect	nvCOMRAM
   384  000055                     __pnvCOMRAM:
   385                           	opt stack 0
   386  000055                     _timer0ReloadVal:
   387                           	opt stack 0
   388  000055                     	ds	2
   389                           
   390                           	psect	nvBANK0
   391  0000C7                     __pnvBANK0:
   392                           	opt stack 0
   393  0000C7                     _TMR0_InterruptHandler:
   394                           	opt stack 0
   395  0000C7                     	ds	2
   396  0000                     _ANSELA	set	3896
   397  0000                     _ANSELB	set	3897
   398  0000                     _ANSELC	set	3898
   399  0000                     _BAUDCON1	set	4024
   400  0000                     _INTCON2bits	set	4081
   401  0000                     _INTCON3bits	set	4080
   402  0000                     _INTCONbits	set	4082
   403  0000                     _LATA	set	3977
   404  0000                     _LATAbits	set	3977
   405  0000                     _LATB	set	3978
   406  0000                     _LATC	set	3979
   407  0000                     _LATCbits	set	3979
   408  0000                     _OSCCON	set	4051
   409  0000                     _OSCCON2	set	4050
   410  0000                     _OSCTUNE	set	3995
   411  0000                     _PIR1bits	set	3998
   412  0000                     _RCONbits	set	4048
   413  0000                     _RCREG1	set	4014
   414  0000                     _RCSTA1	set	4011
   415  0000                     _RCSTA1bits	set	4011
   416  0000                     _SPBRG1	set	4015
   417  0000                     _SPBRGH1	set	4016
   418  0000                     _T0CON	set	4053
   419  0000                     _T0CONbits	set	4053
   420  0000                     _TMR0H	set	4055
   421  0000                     _TMR0L	set	4054
   422  0000                     _TRISA	set	3986
   423  0000                     _TRISB	set	3987
   424  0000                     _TRISC	set	3988
   425  0000                     _TXREG1	set	4013
   426  0000                     _TXSTA1	set	4012
   427  0000                     _WPUB	set	3937
   428                           
   429                           	psect	cinit
   430  002E7C                     __pcinit:
   431                           	opt stack 0
   432  002E7C                     start_initialization:
   433                           	opt stack 0
   434  002E7C                     __initialization:
   435                           	opt stack 0
   436                           
   437                           ; Initialize objects allocated to BANK0 (2 bytes)
   438                           ; load TBLPTR registers with __pidataBANK0
   439  002E7C  0E0E               	movlw	low __pidataBANK0
   440  002E7E  6EF6               	movwf	tblptrl,c
   441  002E80  0E31               	movlw	high __pidataBANK0
   442  002E82  6EF7               	movwf	tblptrh,c
   443  002E84  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   444  002E86  6EF8               	movwf	tblptru,c
   445  002E88  0009               	tblrd		*+	;fetch initializer
   446  002E8A  CFF5 F0C9          	movff	tablat,__pdataBANK0
   447  002E8E  0009               	tblrd		*+	;fetch initializer
   448  002E90  CFF5 F0CA          	movff	tablat,__pdataBANK0+1
   449                           
   450                           ; Clear objects allocated to BANK0 (24 bytes)
   451  002E94  EE00  F0AF         	lfsr	0,__pbssBANK0
   452  002E98  0E18               	movlw	24
   453  002E9A                     clear_0:
   454  002E9A  6AEE               	clrf	postinc0,c
   455  002E9C  06E8               	decf	wreg,f,c
   456  002E9E  E1FD               	bnz	clear_0
   457                           
   458                           ; Clear objects allocated to COMRAM (1 bytes)
   459  002EA0  6A57               	clrf	__pbssCOMRAM& (0+255),c
   460  002EA2                     end_of_initialization:
   461                           	opt stack 0
   462  002EA2                     __end_of__initialization:
   463                           	opt stack 0
   464  002EA2  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   465  002EA4  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   466  002EA6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   467  002EA8  6EF8               	movwf	tblptru,c
   468  002EAA  0100               	movlb	0
   469  002EAC  EF12  F018         	goto	_main	;jump to C main() function
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           
   477                           	psect	bssCOMRAM
   478  000057                     __pbssCOMRAM:
   479                           	opt stack 0
   480  000057                     _cal_mode:
   481                           	opt stack 0
   482  000057                     	ds	1
   483                           tblptru	equ	0xFF8
   484                           tblptrh	equ	0xFF7
   485                           tblptrl	equ	0xFF6
   486                           tablat	equ	0xFF5
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           
   490                           	psect	bssBANK0
   491  0000AF                     __pbssBANK0:
   492                           	opt stack 0
   493  0000AF                     _result:
   494                           	opt stack 0
   495  0000AF                     	ds	3
   496  0000B2                     _reading:
   497                           	opt stack 0
   498  0000B2                     	ds	2
   499  0000B4                     _av_count:
   500                           	opt stack 0
   501  0000B4                     	ds	1
   502  0000B5                     _stored_range:
   503                           	opt stack 0
   504  0000B5                     	ds	1
   505  0000B6                     ftoa@buf:
   506                           	opt stack 0
   507  0000B6                     	ds	17
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           
   515                           	psect	dataBANK0
   516  0000C9                     __pdataBANK0:
   517                           	opt stack 0
   518  0000C9                     _auto_range:
   519                           	opt stack 0
   520  0000C9                     	ds	1
   521  0000CA                     _range:
   522                           	opt stack 0
   523  0000CA                     	ds	1
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           
   531                           	psect	cstackBANK1
   532  000100                     __pcstackBANK1:
   533                           	opt stack 0
   534  000100                     __lcd_Port@a:
   535                           	opt stack 0
   536  000100                     TMR0_SetInterruptHandler@InterruptHandler:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x0
   540  000100                     	ds	1
   541  000101                     ??_lcd_sendCommand:
   542                           
   543                           ; 1 bytes @ 0x1
   544  000101                     	ds	1
   545  000102                     ??_TMR0_Initialize:
   546  000102                     lcd_sendCommand@a:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x2
   550  000102                     	ds	1
   551  000103                     ??_lcd_init:
   552  000103                     
   553                           ; 1 bytes @ 0x3
   554  000103                     	ds	1
   555  000104                     tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           
   562                           ; 1 bytes @ 0x4
   563                           
   564                           	psect	cstackBANK0
   565  000060                     __pcstackBANK0:
   566                           	opt stack 0
   567  000060                     __doprnt$1658:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x0
   571  000060                     	ds	3
   572  000063                     __doprnt@width:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x3
   576  000063                     	ds	2
   577  000065                     __doprnt@flag:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x5
   581  000065                     	ds	2
   582  000067                     __doprnt@exp:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x7
   586  000067                     	ds	2
   587  000069                     __doprnt@val:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x9
   591  000069                     	ds	4
   592  00006D                     __doprnt@tmpval:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0xD
   596  00006D                     	ds	4
   597  000071                     __doprnt@fval:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x11
   601  000071                     	ds	3
   602  000074                     __doprnt@prec:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x14
   606  000074                     	ds	2
   607  000076                     __doprnt@c:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x16
   611  000076                     	ds	1
   612  000077                     ?_sprintf:
   613                           	opt stack 0
   614  000077                     sprintf@wh:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x17
   618  000077                     	ds	2
   619  000079                     sprintf@f:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x19
   623  000079                     	ds	8
   624  000081                     UpdateDisplay@range_string:
   625                           	opt stack 0
   626                           
   627                           ; 16 bytes @ 0x21
   628  000081                     	ds	16
   629  000091                     UpdateDisplay@cap_string:
   630                           	opt stack 0
   631                           
   632                           ; 16 bytes @ 0x31
   633  000091                     	ds	16
   634  0000A1                     ??_INTERRUPT_InterruptManager:
   635                           
   636                           ; 1 bytes @ 0x41
   637  0000A1                     	ds	14
   638                           tblptru	equ	0xFF8
   639                           tblptrh	equ	0xFF7
   640                           tblptrl	equ	0xFF6
   641                           tablat	equ	0xFF5
   642                           postinc0	equ	0xFEE
   643                           wreg	equ	0xFE8
   644                           
   645                           	psect	cstackCOMRAM
   646  000001                     __pcstackCOMRAM:
   647                           	opt stack 0
   648  000001                     ??_isdigit:
   649  000001                     ??_SetRange:
   650  000001                     ?_TMR0_ReadTimer:
   651                           	opt stack 0
   652  000001                     ?___awmod:
   653                           	opt stack 0
   654  000001                     ?___ftpack:
   655                           	opt stack 0
   656  000001                     ?___ftneg:
   657                           	opt stack 0
   658  000001                     ?__tdiv_to_l_:
   659                           	opt stack 0
   660  000001                     ?__div_to_l_:
   661                           	opt stack 0
   662  000001                     ?___lldiv:
   663                           	opt stack 0
   664  000001                     EUSART1_Write@txData:
   665                           	opt stack 0
   666  000001                     i2__lcd_Port@a:
   667                           	opt stack 0
   668  000001                     ___awmod@dividend:
   669                           	opt stack 0
   670  000001                     __div_to_l_@f1:
   671                           	opt stack 0
   672  000001                     ___ftpack@arg:
   673                           	opt stack 0
   674  000001                     __tdiv_to_l_@f1:
   675                           	opt stack 0
   676  000001                     ___ftge@ff1:
   677                           	opt stack 0
   678  000001                     ___ftneg@f1:
   679                           	opt stack 0
   680  000001                     ___lldiv@dividend:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x0
   684  000001                     	ds	1
   685  000002                     ??i2_lcd_sendCommand:
   686  000002                     putch@txData:
   687                           	opt stack 0
   688  000002                     lcd_sendChar@temp:
   689                           	opt stack 0
   690  000002                     _isdigit$1202:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x1
   694  000002                     	ds	1
   695  000003                     ??_TMR0_ReadTimer:
   696  000003                     lcd_sendChar@y:
   697                           	opt stack 0
   698  000003                     isdigit@c:
   699                           	opt stack 0
   700  000003                     i2lcd_sendCommand@a:
   701                           	opt stack 0
   702  000003                     ___awmod@divisor:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x2
   706  000003                     	ds	1
   707  000004                     lcd_setPosition@y:
   708                           	opt stack 0
   709  000004                     lcd_sendChar@a:
   710                           	opt stack 0
   711  000004                     ___ftpack@exp:
   712                           	opt stack 0
   713  000004                     __div_to_l_@f2:
   714                           	opt stack 0
   715  000004                     __tdiv_to_l_@f2:
   716                           	opt stack 0
   717  000004                     ___ftge@ff2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000004                     	ds	1
   722  000005                     lcd_setPosition@x:
   723                           	opt stack 0
   724  000005                     ___awmod@counter:
   725                           	opt stack 0
   726  000005                     ___ftpack@sign:
   727                           	opt stack 0
   728  000005                     lcd_sendString@a:
   729                           	opt stack 0
   730  000005                     ___lldiv@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x4
   734  000005                     	ds	1
   735  000006                     ??___ftpack:
   736  000006                     lcd_setPosition@i:
   737                           	opt stack 0
   738  000006                     ___awmod@sign:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x5
   742  000006                     	ds	1
   743  000007                     ??__tdiv_to_l_:
   744  000007                     ??___ftge:
   745  000007                     ?___awdiv:
   746                           	opt stack 0
   747  000007                     lcd_setPosition@j:
   748                           	opt stack 0
   749  000007                     TMR0_ReadTimer@readVal:
   750                           	opt stack 0
   751  000007                     lcd_sendString@i:
   752                           	opt stack 0
   753  000007                     ___awdiv@dividend:
   754                           	opt stack 0
   755  000007                     __div_to_l_@quot:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x6
   759  000007                     	ds	1
   760  000008                     lcd_setPosition@temp:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x7
   764  000008                     	ds	1
   765  000009                     ?___lltoft:
   766                           	opt stack 0
   767  000009                     ?___lwtoft:
   768                           	opt stack 0
   769  000009                     TMR0_ReadTimer@readValLow:
   770                           	opt stack 0
   771  000009                     lcd_sendStringToPos@y:
   772                           	opt stack 0
   773  000009                     ___awdiv@divisor:
   774                           	opt stack 0
   775  000009                     ___lwtoft@c:
   776                           	opt stack 0
   777  000009                     ___lldiv@quotient:
   778                           	opt stack 0
   779  000009                     ___lltoft@c:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x8
   783  000009                     	ds	1
   784  00000A                     TMR0_ReadTimer@readValHigh:
   785                           	opt stack 0
   786  00000A                     lcd_sendStringToPos@charString:
   787                           	opt stack 0
   788  00000A                     __tdiv_to_l_@quot:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x9
   792  00000A                     	ds	1
   793  00000B                     SetRange@new_range:
   794                           	opt stack 0
   795  00000B                     ___awdiv@counter:
   796                           	opt stack 0
   797  00000B                     __div_to_l_@cntr:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0xA
   801  00000B                     	ds	1
   802  00000C                     ??_TMR0_DefaultInterruptHandler:
   803  00000C                     lcd_sendStringToPos@x:
   804                           	opt stack 0
   805  00000C                     ___awdiv@sign:
   806                           	opt stack 0
   807  00000C                     __div_to_l_@exp1:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0xB
   811  00000C                     	ds	1
   812  00000D                     ??___lltoft:
   813  00000D                     ___lldiv@counter:
   814                           	opt stack 0
   815  00000D                     ___awdiv@quotient:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0xC
   819  00000D                     	ds	1
   820  00000E                     ?___llmod:
   821                           	opt stack 0
   822  00000E                     __tdiv_to_l_@cntr:
   823                           	opt stack 0
   824  00000E                     ___llmod@dividend:
   825                           	opt stack 0
   826                           
   827                           ; 4 bytes @ 0xD
   828  00000E                     	ds	1
   829  00000F                     ?___wmul:
   830                           	opt stack 0
   831  00000F                     __tdiv_to_l_@exp1:
   832                           	opt stack 0
   833  00000F                     ___wmul@multiplier:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0xE
   837  00000F                     	ds	2
   838  000011                     ___lltoft@exp:
   839                           	opt stack 0
   840  000011                     ___wmul@multiplicand:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x10
   844  000011                     	ds	1
   845  000012                     ___llmod@divisor:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ___wmul@product:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x12
   854  000013                     	ds	2
   855  000015                     ?___ftadd:
   856                           	opt stack 0
   857  000015                     ___ftadd@f1:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x14
   861  000015                     	ds	1
   862  000016                     ___llmod@counter:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x15
   866  000016                     	ds	2
   867  000018                     ___ftadd@f2:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x17
   871  000018                     	ds	3
   872  00001B                     ??___ftadd:
   873                           
   874                           ; 1 bytes @ 0x1A
   875  00001B                     	ds	3
   876  00001E                     ___ftadd@sign:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x1D
   880  00001E                     	ds	1
   881  00001F                     ___ftadd@exp2:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x1E
   885  00001F                     	ds	1
   886  000020                     ___ftadd@exp1:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x1F
   890  000020                     	ds	1
   891  000021                     ?___ftmul:
   892                           	opt stack 0
   893  000021                     ?___ftsub:
   894                           	opt stack 0
   895  000021                     ___ftmul@f1:
   896                           	opt stack 0
   897  000021                     ___ftsub@f1:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x20
   901  000021                     	ds	3
   902  000024                     ___ftmul@f2:
   903                           	opt stack 0
   904  000024                     ___ftsub@f2:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x23
   908  000024                     	ds	3
   909  000027                     ??___ftmul:
   910  000027                     
   911                           ; 1 bytes @ 0x26
   912  000027                     	ds	3
   913  00002A                     ___ftmul@exp:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x29
   917  00002A                     	ds	1
   918  00002B                     ___ftmul@f3_as_product:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x2A
   922  00002B                     	ds	3
   923  00002E                     ___ftmul@cntr:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x2D
   927  00002E                     	ds	1
   928  00002F                     ___ftmul@sign:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x2E
   932  00002F                     	ds	1
   933  000030                     ?___ftdiv:
   934                           	opt stack 0
   935  000030                     ?_fround:
   936                           	opt stack 0
   937  000030                     ?_scale:
   938                           	opt stack 0
   939  000030                     ?___fttol:
   940                           	opt stack 0
   941  000030                     ___ftdiv@f1:
   942                           	opt stack 0
   943  000030                     ___fttol@f1:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x2F
   947  000030                     	ds	3
   948  000033                     ___ftdiv@f2:
   949                           	opt stack 0
   950  000033                     _fround$1656:
   951                           	opt stack 0
   952  000033                     _scale$1657:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x32
   956  000033                     	ds	1
   957  000034                     ??___fttol:
   958                           
   959                           ; 1 bytes @ 0x33
   960  000034                     	ds	2
   961  000036                     ??___ftdiv:
   962  000036                     scale@scl:
   963                           	opt stack 0
   964  000036                     _fround$1655:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x35
   968  000036                     	ds	3
   969  000039                     fround@prec:
   970                           	opt stack 0
   971  000039                     ___ftdiv@cntr:
   972                           	opt stack 0
   973  000039                     ___fttol@sign1:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x38
   977  000039                     	ds	1
   978  00003A                     ___ftdiv@f3:
   979                           	opt stack 0
   980  00003A                     ___fttol@lval:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x39
   984  00003A                     	ds	3
   985  00003D                     ___ftdiv@exp:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x3C
   989  00003D                     	ds	1
   990  00003E                     ___ftdiv@sign:
   991                           	opt stack 0
   992  00003E                     ___fttol@exp1:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x3D
   996  00003E                     	ds	1
   997  00003F                     ?__doprnt:
   998                           	opt stack 0
   999  00003F                     __doprnt@pb:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x3E
  1003  00003F                     	ds	2
  1004  000041                     __doprnt@f:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x40
  1008  000041                     	ds	2
  1009  000043                     __doprnt@ap:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x42
  1013  000043                     	ds	2
  1014  000045                     ??__doprnt:
  1015                           
  1016                           ; 1 bytes @ 0x44
  1017  000045                     	ds	6
  1018  00004B                     ?_printf:
  1019                           	opt stack 0
  1020  00004B                     printf@f:
  1021                           	opt stack 0
  1022  00004B                     sprintf@ap:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x4A
  1026  00004B                     	ds	2
  1027  00004D                     sprintf@pb:
  1028                           	opt stack 0
  1029                           
  1030                           ; 4 bytes @ 0x4C
  1031  00004D                     	ds	2
  1032  00004F                     printf@ap:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x4E
  1036  00004F                     	ds	2
  1037  000051                     ??_INT0_ISR:
  1038  000051                     printf@pb:
  1039                           	opt stack 0
  1040                           
  1041                           ; 4 bytes @ 0x50
  1042  000051                     	ds	1
  1043  000052                     _INT0_ISR$1654:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x51
  1047  000052                     	ds	3
  1048  000055                     tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           
  1055                           ; 1 bytes @ 0x54
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 4 in file "main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         0       0       0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called:   11
  1081 ;; This function calls:
  1082 ;;		_SYSTEM_Initialize
  1083 ;;		_lcd_clear
  1084 ;;		_lcd_init
  1085 ;; This function is called by:
  1086 ;;		Startup code after reset
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text0
  1091  003024                     __ptext0:
  1092                           	opt stack 0
  1093  003024                     _main:
  1094                           	opt stack 20
  1095                           
  1096                           ;main.c: 7: SYSTEM_Initialize();
  1097                           
  1098                           ;incstack = 0
  1099  003024  EC30  F018         	call	_SYSTEM_Initialize	;wreg free
  1100                           
  1101                           ;main.c: 26: (INTCONbits.GIE = 1);
  1102  003028  8EF2               	bsf	intcon,7,c	;volatile
  1103                           
  1104                           ;main.c: 29: (INTCONbits.PEIE = 1);
  1105  00302A  8CF2               	bsf	intcon,6,c	;volatile
  1106                           
  1107                           ;main.c: 37: lcd_init();
  1108  00302C  EC1A  F015         	call	_lcd_init	;wreg free
  1109                           
  1110                           ;main.c: 38: lcd_clear();
  1111  003030  EC55  F018         	call	_lcd_clear	;wreg free
  1112                           
  1113                           ;main.c: 42: LATC |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4);
  1114  003034  0E1F               	movlw	31
  1115  003036  128B               	iorwf	3979,f,c	;volatile
  1116                           
  1117                           ;main.c: 43: LATB |= (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5);
  1118  003038  0E3C               	movlw	60
  1119  00303A  128A               	iorwf	3978,f,c	;volatile
  1120                           
  1121                           ;main.c: 46: LATC &= ~(1 << 1);
  1122  00303C  928B               	bcf	3979,1,c	;volatile
  1123                           
  1124                           ;main.c: 47: LATB &= ~(1 << 3);
  1125  00303E  968A               	bcf	3978,3,c	;volatile
  1126  003040                     l280:
  1127                           
  1128                           ;main.c: 50: {
  1129  003040  D7FF               	goto	l280
  1130  003042                     __end_of_main:
  1131                           	opt stack 0
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           intcon	equ	0xFF2
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           
  1140 ;; *************** function _lcd_init *****************
  1141 ;; Defined at:
  1142 ;;		line 39 in file "lcd.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;		None
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;		None
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1156 ;;      Params:         0       0       0       0       0       0       0
  1157 ;;      Locals:         0       0       0       0       0       0       0
  1158 ;;      Temps:          0       0       1       0       0       0       0
  1159 ;;      Totals:         0       0       1       0       0       0       0
  1160 ;;Total ram usage:        1 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:   10
  1163 ;; This function calls:
  1164 ;;		__lcd_Port
  1165 ;;		_lcd_sendCommand
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text1
  1172  002A34                     __ptext1:
  1173                           	opt stack 0
  1174  002A34                     _lcd_init:
  1175                           	opt stack 20
  1176                           
  1177                           ;lcd.c: 41: _lcd_Port(0x00);
  1178                           
  1179                           ;incstack = 0
  1180  002A34  0E00               	movlw	0
  1181  002A36  EC08  F017         	call	__lcd_Port
  1182                           
  1183                           ;lcd.c: 42: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1184  002A3A  0E68               	movlw	104
  1185  002A3C  0101               	movlb	1	; () banked
  1186  002A3E  6F03               	movwf	??_lcd_init& (0+255),b
  1187  002A40  0EE4               	movlw	228
  1188  002A42                     u4477:
  1189  002A42  2EE8               	decfsz	wreg,f,c
  1190  002A44  D7FE               	bra	u4477
  1191  002A46  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1192  002A48  D7FC               	bra	u4477
  1193  002A4A  F000               	nop	
  1194                           
  1195                           ;lcd.c: 43: lcd_sendCommand(0x03);
  1196  002A4C  0E03               	movlw	3
  1197  002A4E  ECB8  F017         	call	_lcd_sendCommand
  1198                           
  1199                           ;lcd.c: 44: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  1200  002A52  0E1A               	movlw	26
  1201  002A54  0101               	movlb	1	; () banked
  1202  002A56  6F03               	movwf	??_lcd_init& (0+255),b
  1203  002A58  0EF8               	movlw	248
  1204  002A5A                     u4487:
  1205  002A5A  2EE8               	decfsz	wreg,f,c
  1206  002A5C  D7FE               	bra	u4487
  1207  002A5E  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1208  002A60  D7FC               	bra	u4487
  1209  002A62  F000               	nop	
  1210                           
  1211                           ;lcd.c: 45: lcd_sendCommand(0x03);
  1212  002A64  0E03               	movlw	3
  1213  002A66  ECB8  F017         	call	_lcd_sendCommand
  1214                           
  1215                           ;lcd.c: 46: _delay((unsigned long)((11)*(16000000UL/4000.0)));
  1216  002A6A  0E3A               	movlw	58
  1217  002A6C  0101               	movlb	1	; () banked
  1218  002A6E  6F03               	movwf	??_lcd_init& (0+255),b
  1219  002A70  0E23               	movlw	35
  1220  002A72                     u4497:
  1221  002A72  2EE8               	decfsz	wreg,f,c
  1222  002A74  D7FE               	bra	u4497
  1223  002A76  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1224  002A78  D7FC               	bra	u4497
  1225                           
  1226                           ;lcd.c: 47: lcd_sendCommand(0x03);
  1227  002A7A  0E03               	movlw	3
  1228  002A7C  ECB8  F017         	call	_lcd_sendCommand
  1229                           
  1230                           ;lcd.c: 49: lcd_sendCommand(0x02);
  1231  002A80  0E02               	movlw	2
  1232  002A82  ECB8  F017         	call	_lcd_sendCommand
  1233                           
  1234                           ;lcd.c: 50: lcd_sendCommand(0x02);
  1235  002A86  0E02               	movlw	2
  1236  002A88  ECB8  F017         	call	_lcd_sendCommand
  1237                           
  1238                           ;lcd.c: 51: lcd_sendCommand(0x08);
  1239  002A8C  0E08               	movlw	8
  1240  002A8E  ECB8  F017         	call	_lcd_sendCommand
  1241                           
  1242                           ;lcd.c: 52: lcd_sendCommand(0x00);
  1243  002A92  0E00               	movlw	0
  1244  002A94  ECB8  F017         	call	_lcd_sendCommand
  1245                           
  1246                           ;lcd.c: 53: lcd_sendCommand(0x0C);
  1247  002A98  0E0C               	movlw	12
  1248  002A9A  ECB8  F017         	call	_lcd_sendCommand
  1249                           
  1250                           ;lcd.c: 54: lcd_sendCommand(0x00);
  1251  002A9E  0E00               	movlw	0
  1252  002AA0  ECB8  F017         	call	_lcd_sendCommand
  1253                           
  1254                           ;lcd.c: 55: lcd_sendCommand(0x06);
  1255  002AA4  0E06               	movlw	6
  1256  002AA6  ECB8  F017         	call	_lcd_sendCommand
  1257  002AAA  0012               	return		;funcret
  1258  002AAC                     __end_of_lcd_init:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           intcon	equ	0xFF2
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           
  1268 ;; *************** function _lcd_clear *****************
  1269 ;; Defined at:
  1270 ;;		line 12 in file "lcd.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, status,2, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1284 ;;      Params:         0       0       0       0       0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0
  1287 ;;      Totals:         0       0       0       0       0       0       0
  1288 ;;Total ram usage:        0 bytes
  1289 ;; Hardware stack levels used:    1
  1290 ;; Hardware stack levels required when called:   10
  1291 ;; This function calls:
  1292 ;;		_lcd_sendCommand
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text2
  1299  0030AA                     __ptext2:
  1300                           	opt stack 0
  1301  0030AA                     _lcd_clear:
  1302                           	opt stack 20
  1303                           
  1304                           ;lcd.c: 14: lcd_sendCommand(0);
  1305                           
  1306                           ;incstack = 0
  1307  0030AA  0E00               	movlw	0
  1308  0030AC  ECB8  F017         	call	_lcd_sendCommand
  1309                           
  1310                           ;lcd.c: 15: lcd_sendCommand(1);
  1311  0030B0  0E01               	movlw	1
  1312  0030B2  ECB8  F017         	call	_lcd_sendCommand
  1313  0030B6  0012               	return		;funcret
  1314  0030B8                     __end_of_lcd_clear:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           intcon	equ	0xFF2
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           
  1324 ;; *************** function _lcd_sendCommand *****************
  1325 ;; Defined at:
  1326 ;;		line 3 in file "lcd.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  a               1    wreg     unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  a               1    2[BANK1 ] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1340 ;;      Params:         0       0       0       0       0       0       0
  1341 ;;      Locals:         0       0       1       0       0       0       0
  1342 ;;      Temps:          0       0       1       0       0       0       0
  1343 ;;      Totals:         0       0       2       0       0       0       0
  1344 ;;Total ram usage:        2 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    9
  1347 ;; This function calls:
  1348 ;;		__lcd_Port
  1349 ;; This function is called by:
  1350 ;;		_lcd_clear
  1351 ;;		_lcd_init
  1352 ;;		_lcd_shiftRight
  1353 ;;		_lcd_shiftLeft
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text3
  1358  002F70                     __ptext3:
  1359                           	opt stack 0
  1360  002F70                     _lcd_sendCommand:
  1361                           	opt stack 20
  1362                           
  1363                           ;incstack = 0
  1364                           ;lcd_sendCommand@a stored from wreg
  1365  002F70  0101               	movlb	1	; () banked
  1366  002F72  6F02               	movwf	lcd_sendCommand@a& (0+255),b
  1367                           
  1368                           ;lcd.c: 5: LATAbits.LA5 = 0;
  1369  002F74  9A89               	bcf	3977,5,c	;volatile
  1370                           
  1371                           ;lcd.c: 6: _lcd_Port(a);
  1372  002F76  0101               	movlb	1	; () banked
  1373  002F78  5102               	movf	lcd_sendCommand@a& (0+255),w,b
  1374  002F7A  EC08  F017         	call	__lcd_Port
  1375                           
  1376                           ;lcd.c: 7: LATAbits.LA4 = 1;
  1377  002F7E  8889               	bsf	3977,4,c	;volatile
  1378                           
  1379                           ;lcd.c: 8: _delay((unsigned long)((4)*(16000000UL/4000.0)));
  1380  002F80  0E15               	movlw	21
  1381  002F82  0101               	movlb	1	; () banked
  1382  002F84  6F01               	movwf	??_lcd_sendCommand& (0+255),b
  1383  002F86  0EC6               	movlw	198
  1384  002F88                     u4507:
  1385  002F88  2EE8               	decfsz	wreg,f,c
  1386  002F8A  D7FE               	bra	u4507
  1387  002F8C  2F01               	decfsz	??_lcd_sendCommand& (0+255),f,b
  1388  002F8E  D7FC               	bra	u4507
  1389  002F90  F000               	nop	
  1390                           
  1391                           ;lcd.c: 9: LATAbits.LA4 = 0;
  1392  002F92  9889               	bcf	3977,4,c	;volatile
  1393  002F94  0012               	return		;funcret
  1394  002F96                     __end_of_lcd_sendCommand:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           intcon	equ	0xFF2
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           
  1404 ;; *************** function __lcd_Port *****************
  1405 ;; Defined at:
  1406 ;;		line 139 in file "lcd.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  a               1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  a               1    0[BANK1 ] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1420 ;;      Params:         0       0       0       0       0       0       0
  1421 ;;      Locals:         0       0       1       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0       0       0
  1423 ;;      Totals:         0       0       1       0       0       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    8
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_lcd_sendCommand
  1431 ;;		_lcd_init
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text4
  1436  002E10                     __ptext4:
  1437                           	opt stack 0
  1438  002E10                     __lcd_Port:
  1439                           	opt stack 20
  1440                           
  1441                           ;incstack = 0
  1442                           ;__lcd_Port@a stored from wreg
  1443  002E10  0101               	movlb	1	; () banked
  1444  002E12  6F00               	movwf	__lcd_Port@a& (0+255),b
  1445                           
  1446                           ;lcd.c: 141: if(a & 1)
  1447  002E14  0101               	movlb	1	; () banked
  1448  002E16  A100               	btfss	__lcd_Port@a& (0+255),0,b
  1449  002E18  D002               	goto	l349
  1450                           
  1451                           ; BSR set to: 1
  1452                           ;lcd.c: 142: LATAbits.LA3 = 1;
  1453  002E1A  8689               	bsf	3977,3,c	;volatile
  1454  002E1C  D001               	goto	l3894
  1455  002E1E                     l349:
  1456                           
  1457                           ; BSR set to: 1
  1458                           ;lcd.c: 143: else
  1459                           ;lcd.c: 144: LATAbits.LA3 = 0;
  1460  002E1E  9689               	bcf	3977,3,c	;volatile
  1461  002E20                     l3894:
  1462                           
  1463                           ; BSR set to: 1
  1464                           ;lcd.c: 146: if(a & 2)
  1465  002E20  0101               	movlb	1	; () banked
  1466  002E22  A300               	btfss	__lcd_Port@a& (0+255),1,b
  1467  002E24  D002               	goto	l351
  1468                           
  1469                           ; BSR set to: 1
  1470                           ;lcd.c: 147: LATAbits.LA2 = 1;
  1471  002E26  8489               	bsf	3977,2,c	;volatile
  1472  002E28  D001               	goto	l3898
  1473  002E2A                     l351:
  1474                           
  1475                           ; BSR set to: 1
  1476                           ;lcd.c: 148: else
  1477                           ;lcd.c: 149: LATAbits.LA2 = 0;
  1478  002E2A  9489               	bcf	3977,2,c	;volatile
  1479  002E2C                     l3898:
  1480                           
  1481                           ; BSR set to: 1
  1482                           ;lcd.c: 151: if(a & 4)
  1483  002E2C  0101               	movlb	1	; () banked
  1484  002E2E  A500               	btfss	__lcd_Port@a& (0+255),2,b
  1485  002E30  D002               	goto	l353
  1486                           
  1487                           ; BSR set to: 1
  1488                           ;lcd.c: 152: LATAbits.LA1 = 1;
  1489  002E32  8289               	bsf	3977,1,c	;volatile
  1490  002E34  D001               	goto	l3902
  1491  002E36                     l353:
  1492                           
  1493                           ; BSR set to: 1
  1494                           ;lcd.c: 153: else
  1495                           ;lcd.c: 154: LATAbits.LA1 = 0;
  1496  002E36  9289               	bcf	3977,1,c	;volatile
  1497  002E38                     l3902:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;lcd.c: 156: if(a & 8)
  1501  002E38  0101               	movlb	1	; () banked
  1502  002E3A  A700               	btfss	__lcd_Port@a& (0+255),3,b
  1503  002E3C  D002               	goto	l355
  1504                           
  1505                           ; BSR set to: 1
  1506                           ;lcd.c: 157: LATAbits.LA0 = 1;
  1507  002E3E  8089               	bsf	3977,0,c	;volatile
  1508  002E40  0012               	return	
  1509  002E42                     l355:
  1510                           
  1511                           ; BSR set to: 1
  1512                           ;lcd.c: 158: else
  1513                           ;lcd.c: 159: LATAbits.LA0 = 0;
  1514  002E42  9089               	bcf	3977,0,c	;volatile
  1515  002E44  0012               	return	
  1516  002E46                     __end_of__lcd_Port:
  1517                           	opt stack 0
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           intcon	equ	0xFF2
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           
  1526 ;; *************** function _SYSTEM_Initialize *****************
  1527 ;; Defined at:
  1528 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;		None
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2, status,0, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1542 ;;      Params:         0       0       0       0       0       0       0
  1543 ;;      Locals:         0       0       0       0       0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0
  1545 ;;      Totals:         0       0       0       0       0       0       0
  1546 ;;Total ram usage:        0 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:   10
  1549 ;; This function calls:
  1550 ;;		_EUSART1_Initialize
  1551 ;;		_EXT_INT_Initialize
  1552 ;;		_INTERRUPT_Initialize
  1553 ;;		_OSCILLATOR_Initialize
  1554 ;;		_PIN_MANAGER_Initialize
  1555 ;;		_TMR0_Initialize
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text5
  1562  003060                     __ptext5:
  1563                           	opt stack 0
  1564  003060                     _SYSTEM_Initialize:
  1565                           	opt stack 20
  1566                           
  1567                           ;mcc.c: 114: INTERRUPT_Initialize();
  1568                           
  1569                           ; BSR set to: 1
  1570                           ;incstack = 0
  1571  003060  EC81  F018         	call	_INTERRUPT_Initialize	;wreg free
  1572                           
  1573                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1574  003064  EC72  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  1575                           
  1576                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1577  003068  EC5C  F018         	call	_OSCILLATOR_Initialize	;wreg free
  1578                           
  1579                           ;mcc.c: 117: EXT_INT_Initialize();
  1580  00306C  EC63  F018         	call	_EXT_INT_Initialize	;wreg free
  1581                           
  1582                           ;mcc.c: 118: TMR0_Initialize();
  1583  003070  EC46  F016         	call	_TMR0_Initialize	;wreg free
  1584                           
  1585                           ;mcc.c: 119: EUSART1_Initialize();
  1586  003074  EC4A  F018         	call	_EUSART1_Initialize	;wreg free
  1587  003078  0012               	return		;funcret
  1588  00307A                     __end_of_SYSTEM_Initialize:
  1589                           	opt stack 0
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           intcon	equ	0xFF2
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           
  1598 ;; *************** function _TMR0_Initialize *****************
  1599 ;; Defined at:
  1600 ;;		line 22 in file "mcc_generated_files/tmr0.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1614 ;;      Params:         0       0       0       0       0       0       0
  1615 ;;      Locals:         0       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       2       0       0       0       0
  1617 ;;      Totals:         0       0       2       0       0       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    9
  1621 ;; This function calls:
  1622 ;;		_TMR0_SetInterruptHandler
  1623 ;;		_TMR0_StartTimer
  1624 ;; This function is called by:
  1625 ;;		_SYSTEM_Initialize
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text6
  1630  002C8C                     __ptext6:
  1631                           	opt stack 0
  1632  002C8C                     _TMR0_Initialize:
  1633                           	opt stack 20
  1634                           
  1635                           ;tmr0.c: 27: T0CON = 0x11;
  1636                           
  1637                           ;incstack = 0
  1638  002C8C  0E11               	movlw	17
  1639  002C8E  6ED5               	movwf	4053,c	;volatile
  1640                           
  1641                           ;tmr0.c: 30: TMR0H = 0x15;
  1642  002C90  0E15               	movlw	21
  1643  002C92  6ED7               	movwf	4055,c	;volatile
  1644                           
  1645                           ;tmr0.c: 33: TMR0L = 0x9F;
  1646  002C94  0E9F               	movlw	159
  1647  002C96  6ED6               	movwf	4054,c	;volatile
  1648                           
  1649                           ;tmr0.c: 36: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  1650  002C98  50D6               	movf	4054,w,c	;volatile
  1651  002C9A  CFD7 F102          	movff	4055,??_TMR0_Initialize	;volatile
  1652  002C9E  0101               	movlb	1	; () banked
  1653  002CA0  6B03               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  1654  002CA2  C102  F103         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  1655  002CA6  0101               	movlb	1	; () banked
  1656  002CA8  6B02               	clrf	??_TMR0_Initialize& (0+255),b
  1657  002CAA  0101               	movlb	1	; () banked
  1658  002CAC  1102               	iorwf	??_TMR0_Initialize& (0+255),w,b
  1659  002CAE  6E55               	movwf	_timer0ReloadVal,c	;volatile
  1660  002CB0  0101               	movlb	1	; () banked
  1661  002CB2  5103               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  1662  002CB4  6E56               	movwf	_timer0ReloadVal+1,c	;volatile
  1663                           
  1664                           ; BSR set to: 1
  1665                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  1666  002CB6  94F2               	bcf	intcon,2,c	;volatile
  1667                           
  1668                           ; BSR set to: 1
  1669                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  1670  002CB8  8AF2               	bsf	intcon,5,c	;volatile
  1671                           
  1672                           ; BSR set to: 1
  1673                           ;tmr0.c: 45: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  1674  002CBA  0ED0               	movlw	low _TMR0_DefaultInterruptHandler
  1675  002CBC  0101               	movlb	1	; () banked
  1676  002CBE  6F00               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1677  002CC0  0E2C               	movlw	high _TMR0_DefaultInterruptHandler
  1678  002CC2  0101               	movlb	1	; () banked
  1679  002CC4  6F01               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1680  002CC6  EC70  F018         	call	_TMR0_SetInterruptHandler	;wreg free
  1681                           
  1682                           ;tmr0.c: 48: TMR0_StartTimer();
  1683  002CCA  EC7F  F018         	call	_TMR0_StartTimer	;wreg free
  1684  002CCE  0012               	return		;funcret
  1685  002CD0                     __end_of_TMR0_Initialize:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           intcon	equ	0xFF2
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           
  1695 ;; *************** function _TMR0_StartTimer *****************
  1696 ;; Defined at:
  1697 ;;		line 51 in file "mcc_generated_files/tmr0.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;		None
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		None
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1711 ;;      Params:         0       0       0       0       0       0       0
  1712 ;;      Locals:         0       0       0       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0
  1714 ;;      Totals:         0       0       0       0       0       0       0
  1715 ;;Total ram usage:        0 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    8
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_TMR0_Initialize
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text7
  1726  0030FE                     __ptext7:
  1727                           	opt stack 0
  1728  0030FE                     _TMR0_StartTimer:
  1729                           	opt stack 20
  1730                           
  1731                           ;tmr0.c: 54: T0CONbits.TMR0ON = 1;
  1732                           
  1733                           ;incstack = 0
  1734  0030FE  8ED5               	bsf	4053,7,c	;volatile
  1735  003100  0012               	return		;funcret
  1736  003102                     __end_of_TMR0_StartTimer:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           intcon	equ	0xFF2
  1743                           postinc0	equ	0xFEE
  1744                           wreg	equ	0xFE8
  1745                           
  1746 ;; *************** function _TMR0_SetInterruptHandler *****************
  1747 ;; Defined at:
  1748 ;;		line 109 in file "mcc_generated_files/tmr0.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  1751 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1763 ;;      Params:         0       0       2       0       0       0       0
  1764 ;;      Locals:         0       0       0       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0       0       0
  1766 ;;      Totals:         0       0       2       0       0       0       0
  1767 ;;Total ram usage:        2 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    8
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_TMR0_Initialize
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text8
  1778  0030E0                     __ptext8:
  1779                           	opt stack 0
  1780  0030E0                     _TMR0_SetInterruptHandler:
  1781                           	opt stack 20
  1782                           
  1783                           ;tmr0.c: 110: TMR0_InterruptHandler = InterruptHandler;
  1784                           
  1785                           ;incstack = 0
  1786  0030E0  C100  F0C7         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1787  0030E4  C101  F0C8         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1788  0030E8  0012               	return		;funcret
  1789  0030EA                     __end_of_TMR0_SetInterruptHandler:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           
  1799 ;; *************** function _PIN_MANAGER_Initialize *****************
  1800 ;; Defined at:
  1801 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1815 ;;      Params:         0       0       0       0       0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0
  1818 ;;      Totals:         0       0       0       0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    8
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_SYSTEM_Initialize
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text9
  1830  002EE4                     __ptext9:
  1831                           	opt stack 0
  1832  002EE4                     _PIN_MANAGER_Initialize:
  1833                           	opt stack 21
  1834                           
  1835                           ;pin_manager.c: 56: LATA = 0x00;
  1836                           
  1837                           ;incstack = 0
  1838  002EE4  0E00               	movlw	0
  1839  002EE6  6E89               	movwf	3977,c	;volatile
  1840                           
  1841                           ;pin_manager.c: 57: LATB = 0x3C;
  1842  002EE8  0E3C               	movlw	60
  1843  002EEA  6E8A               	movwf	3978,c	;volatile
  1844                           
  1845                           ;pin_manager.c: 58: LATC = 0x1F;
  1846  002EEC  0E1F               	movlw	31
  1847  002EEE  6E8B               	movwf	3979,c	;volatile
  1848                           
  1849                           ;pin_manager.c: 63: TRISA = 0xC0;
  1850  002EF0  0EC0               	movlw	192
  1851  002EF2  6E92               	movwf	3986,c	;volatile
  1852                           
  1853                           ;pin_manager.c: 64: TRISB = 0xC3;
  1854  002EF4  0EC3               	movlw	195
  1855  002EF6  6E93               	movwf	3987,c	;volatile
  1856                           
  1857                           ;pin_manager.c: 65: TRISC = 0x20;
  1858  002EF8  0E20               	movlw	32
  1859  002EFA  6E94               	movwf	3988,c	;volatile
  1860                           
  1861                           ;pin_manager.c: 70: ANSELC = 0x20;
  1862  002EFC  0E20               	movlw	32
  1863  002EFE  010F               	movlb	15	; () banked
  1864  002F00  6F3A               	movwf	58,b	;volatile
  1865                           
  1866                           ;pin_manager.c: 71: ANSELB = 0x00;
  1867  002F02  0E00               	movlw	0
  1868  002F04  010F               	movlb	15	; () banked
  1869  002F06  6F39               	movwf	57,b	;volatile
  1870                           
  1871                           ;pin_manager.c: 72: ANSELA = 0x00;
  1872  002F08  0E00               	movlw	0
  1873  002F0A  010F               	movlb	15	; () banked
  1874  002F0C  6F38               	movwf	56,b	;volatile
  1875                           
  1876                           ; BSR set to: 15
  1877                           ;pin_manager.c: 77: WPUB = 0xFF;
  1878  002F0E  6861               	setf	3937,c	;volatile
  1879                           
  1880                           ; BSR set to: 15
  1881                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  1882  002F10  9EF1               	bcf	intcon2,7,c	;volatile
  1883                           
  1884                           ; BSR set to: 15
  1885  002F12  0012               	return		;funcret
  1886  002F14                     __end_of_PIN_MANAGER_Initialize:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           intcon	equ	0xFF2
  1893                           intcon2	equ	0xFF1
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           
  1897 ;; *************** function _OSCILLATOR_Initialize *****************
  1898 ;; Defined at:
  1899 ;;		line 122 in file "mcc_generated_files/mcc.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1913 ;;      Params:         0       0       0       0       0       0       0
  1914 ;;      Locals:         0       0       0       0       0       0       0
  1915 ;;      Temps:          0       0       0       0       0       0       0
  1916 ;;      Totals:         0       0       0       0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    8
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_SYSTEM_Initialize
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text10
  1928  0030B8                     __ptext10:
  1929                           	opt stack 0
  1930  0030B8                     _OSCILLATOR_Initialize:
  1931                           	opt stack 21
  1932                           
  1933                           ;mcc.c: 125: OSCCON = 0x70;
  1934                           
  1935                           ; BSR set to: 15
  1936                           ;incstack = 0
  1937  0030B8  0E70               	movlw	112
  1938  0030BA  6ED3               	movwf	4051,c	;volatile
  1939                           
  1940                           ;mcc.c: 127: OSCCON2 = 0x04;
  1941  0030BC  0E04               	movlw	4
  1942  0030BE  6ED2               	movwf	4050,c	;volatile
  1943                           
  1944                           ;mcc.c: 129: OSCTUNE = 0x00;
  1945  0030C0  0E00               	movlw	0
  1946  0030C2  6E9B               	movwf	3995,c	;volatile
  1947  0030C4  0012               	return		;funcret
  1948  0030C6                     __end_of_OSCILLATOR_Initialize:
  1949                           	opt stack 0
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           intcon	equ	0xFF2
  1955                           intcon2	equ	0xFF1
  1956                           postinc0	equ	0xFEE
  1957                           wreg	equ	0xFE8
  1958                           
  1959 ;; *************** function _INTERRUPT_Initialize *****************
  1960 ;; Defined at:
  1961 ;;		line 4 in file "mcc_generated_files/interrupt_manager.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		None
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1975 ;;      Params:         0       0       0       0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0       0       0
  1977 ;;      Temps:          0       0       0       0       0       0       0
  1978 ;;      Totals:         0       0       0       0       0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    8
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_SYSTEM_Initialize
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text11
  1990  003102                     __ptext11:
  1991                           	opt stack 0
  1992  003102                     _INTERRUPT_Initialize:
  1993                           	opt stack 21
  1994                           
  1995                           ;interrupt_manager.c: 7: RCONbits.IPEN = 0;
  1996                           
  1997                           ;incstack = 0
  1998  003102  9ED0               	bcf	4048,7,c	;volatile
  1999  003104  0012               	return		;funcret
  2000  003106                     __end_of_INTERRUPT_Initialize:
  2001                           	opt stack 0
  2002                           tblptru	equ	0xFF8
  2003                           tblptrh	equ	0xFF7
  2004                           tblptrl	equ	0xFF6
  2005                           tablat	equ	0xFF5
  2006                           intcon	equ	0xFF2
  2007                           intcon2	equ	0xFF1
  2008                           postinc0	equ	0xFEE
  2009                           wreg	equ	0xFE8
  2010                           
  2011 ;; *************** function _EXT_INT_Initialize *****************
  2012 ;; Defined at:
  2013 ;;		line 196 in file "mcc_generated_files/ext_int.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		None
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2027 ;;      Params:         0       0       0       0       0       0       0
  2028 ;;      Locals:         0       0       0       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0       0       0
  2030 ;;      Totals:         0       0       0       0       0       0       0
  2031 ;;Total ram usage:        0 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    8
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_SYSTEM_Initialize
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text12
  2042  0030C6                     __ptext12:
  2043                           	opt stack 0
  2044  0030C6                     _EXT_INT_Initialize:
  2045                           	opt stack 21
  2046                           
  2047                           ;ext_int.c: 204: (INTCON3bits.INT1IF = 0);
  2048                           
  2049                           ;incstack = 0
  2050  0030C6  90F0               	bcf	intcon3,0,c	;volatile
  2051                           
  2052                           ;ext_int.c: 205: (INTCON2bits.INTEDG1 = 0);
  2053  0030C8  9AF1               	bcf	intcon2,5,c	;volatile
  2054                           
  2055                           ;ext_int.c: 206: (INTCON3bits.INT1IE = 1);
  2056  0030CA  86F0               	bsf	intcon3,3,c	;volatile
  2057                           
  2058                           ;ext_int.c: 214: (INTCONbits.INT0IF = 0);
  2059  0030CC  92F2               	bcf	intcon,1,c	;volatile
  2060                           
  2061                           ;ext_int.c: 215: (INTCON2bits.INTEDG0 = 0);
  2062  0030CE  9CF1               	bcf	intcon2,6,c	;volatile
  2063                           
  2064                           ;ext_int.c: 216: (INTCONbits.INT0IE = 1);
  2065  0030D0  88F2               	bsf	intcon,4,c	;volatile
  2066  0030D2  0012               	return		;funcret
  2067  0030D4                     __end_of_EXT_INT_Initialize:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           intcon	equ	0xFF2
  2074                           intcon2	equ	0xFF1
  2075                           intcon3	equ	0xFF0
  2076                           postinc0	equ	0xFEE
  2077                           wreg	equ	0xFE8
  2078                           
  2079 ;; *************** function _EUSART1_Initialize *****************
  2080 ;; Defined at:
  2081 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2095 ;;      Params:         0       0       0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0
  2098 ;;      Totals:         0       0       0       0       0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    8
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_SYSTEM_Initialize
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text13
  2110  003094                     __ptext13:
  2111                           	opt stack 0
  2112  003094                     _EUSART1_Initialize:
  2113                           	opt stack 21
  2114                           
  2115                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  2116                           
  2117                           ;incstack = 0
  2118  003094  0E08               	movlw	8
  2119  003096  6EB8               	movwf	4024,c	;volatile
  2120                           
  2121                           ;eusart1.c: 63: RCSTA1 = 0x80;
  2122  003098  0E80               	movlw	128
  2123  00309A  6EAB               	movwf	4011,c	;volatile
  2124                           
  2125                           ;eusart1.c: 66: TXSTA1 = 0x24;
  2126  00309C  0E24               	movlw	36
  2127  00309E  6EAC               	movwf	4012,c	;volatile
  2128                           
  2129                           ;eusart1.c: 69: SPBRG1 = 0xA0;
  2130  0030A0  0EA0               	movlw	160
  2131  0030A2  6EAF               	movwf	4015,c	;volatile
  2132                           
  2133                           ;eusart1.c: 72: SPBRGH1 = 0x01;
  2134  0030A4  0E01               	movlw	1
  2135  0030A6  6EB0               	movwf	4016,c	;volatile
  2136  0030A8  0012               	return		;funcret
  2137  0030AA                     __end_of_EUSART1_Initialize:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           intcon	equ	0xFF2
  2144                           intcon2	equ	0xFF1
  2145                           intcon3	equ	0xFF0
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           
  2149 ;; *************** function _INTERRUPT_InterruptManager *****************
  2150 ;; Defined at:
  2151 ;;		line 10 in file "mcc_generated_files/interrupt_manager.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2165 ;;      Params:         0       0       0       0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0       0       0
  2167 ;;      Temps:          0      14       0       0       0       0       0
  2168 ;;      Totals:         0      14       0       0       0       0       0
  2169 ;;Total ram usage:       14 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    7
  2172 ;; This function calls:
  2173 ;;		_INT0_ISR
  2174 ;;		_INT1_ISR
  2175 ;;		_TMR0_ISR
  2176 ;; This function is called by:
  2177 ;;		Interrupt level 2
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	intcode
  2182  000008                     __pintcode:
  2183                           	opt stack 0
  2184  000008                     _INTERRUPT_InterruptManager:
  2185                           	opt stack 20
  2186                           
  2187                           ;incstack = 0
  2188  000008  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2189  00000A  CFFA F0A1          	movff	pclath,??_INTERRUPT_InterruptManager
  2190  00000E  CFFB F0A2          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2191  000012  CFE9 F0A3          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2192  000016  CFEA F0A4          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2193  00001A  CFE1 F0A5          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2194  00001E  CFE2 F0A6          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2195  000022  CFD9 F0A7          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2196  000026  CFDA F0A8          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2197  00002A  CFF3 F0A9          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2198  00002E  CFF4 F0AA          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2199  000032  CFF6 F0AB          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2200  000036  CFF7 F0AC          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2201  00003A  CFF8 F0AD          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2202  00003E  CFF5 F0AE          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2203                           
  2204                           ;interrupt_manager.c: 13: if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  2205  000042  B6F0               	btfsc	intcon3,3,c	;volatile
  2206  000044  A0F0               	btfss	intcon3,0,c	;volatile
  2207  000046  D003               	goto	i2l125
  2208                           
  2209                           ;interrupt_manager.c: 14: {
  2210                           ;interrupt_manager.c: 15: INT1_ISR();
  2211  000048  ECC1  F015         	call	_INT1_ISR	;wreg free
  2212                           
  2213                           ;interrupt_manager.c: 16: }
  2214  00004C  D00B               	goto	i2l131
  2215  00004E                     i2l125:
  2216                           
  2217                           ;interrupt_manager.c: 17: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  2218  00004E  B8F2               	btfsc	intcon,4,c	;volatile
  2219  000050  A2F2               	btfss	intcon,1,c	;volatile
  2220  000052  D003               	goto	i2l127
  2221                           
  2222                           ;interrupt_manager.c: 18: {
  2223                           ;interrupt_manager.c: 19: INT0_ISR();
  2224  000054  ECB1  F010         	call	_INT0_ISR	;wreg free
  2225                           
  2226                           ;interrupt_manager.c: 20: }
  2227  000058  D005               	goto	i2l131
  2228  00005A                     i2l127:
  2229                           
  2230                           ;interrupt_manager.c: 21: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2231  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  2232  00005C  A4F2               	btfss	intcon,2,c	;volatile
  2233  00005E  D002               	goto	i2l131
  2234                           
  2235                           ;interrupt_manager.c: 22: {
  2236                           ;interrupt_manager.c: 23: TMR0_ISR();
  2237  000060  EC8A  F017         	call	_TMR0_ISR	;wreg free
  2238  000064                     i2l131:
  2239  000064  C0AE  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2240  000068  C0AD  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2241  00006C  C0AC  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2242  000070  C0AB  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2243  000074  C0AA  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2244  000078  C0A9  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2245  00007C  C0A8  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2246  000080  C0A7  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2247  000084  C0A6  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2248  000088  C0A5  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2249  00008C  C0A4  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2250  000090  C0A3  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2251  000094  C0A2  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2252  000098  C0A1  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2253  00009C  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2254  00009E  0011               	retfie		f
  2255  0000A0                     __end_of_INTERRUPT_InterruptManager:
  2256                           	opt stack 0
  2257                           pclatu	equ	0xFFB
  2258                           pclath	equ	0xFFA
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           prodh	equ	0xFF4
  2264                           prodl	equ	0xFF3
  2265                           intcon	equ	0xFF2
  2266                           intcon2	equ	0xFF1
  2267                           intcon3	equ	0xFF0
  2268                           postinc0	equ	0xFEE
  2269                           fsr0h	equ	0xFEA
  2270                           fsr0l	equ	0xFE9
  2271                           wreg	equ	0xFE8
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           fsr2h	equ	0xFDA
  2275                           fsr2l	equ	0xFD9
  2276                           
  2277 ;; *************** function _TMR0_ISR *****************
  2278 ;; Defined at:
  2279 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2293 ;;      Params:         0       0       0       0       0       0       0
  2294 ;;      Locals:         0       0       0       0       0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0
  2296 ;;      Totals:         0       0       0       0       0       0       0
  2297 ;;Total ram usage:        0 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    2
  2300 ;; This function calls:
  2301 ;;		Absolute function
  2302 ;;		_TMR0_DefaultInterruptHandler
  2303 ;; This function is called by:
  2304 ;;		_INTERRUPT_InterruptManager
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text15
  2309  002F14                     __ptext15:
  2310                           	opt stack 0
  2311  002F14                     _TMR0_ISR:
  2312                           	opt stack 24
  2313                           
  2314                           ;tmr0.c: 95: INTCONbits.TMR0IF = 0;
  2315                           
  2316                           ;incstack = 0
  2317  002F14  94F2               	bcf	intcon,2,c	;volatile
  2318                           
  2319                           ;tmr0.c: 99: TMR0H = timer0ReloadVal >> 8;
  2320  002F16  5056               	movf	_timer0ReloadVal+1,w,c	;volatile
  2321  002F18  6ED7               	movwf	4055,c	;volatile
  2322                           
  2323                           ;tmr0.c: 100: TMR0L = (uint8_t) timer0ReloadVal;
  2324  002F1A  C055  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  2325                           
  2326                           ;tmr0.c: 102: if(TMR0_InterruptHandler)
  2327  002F1E  0100               	movlb	0	; () banked
  2328  002F20  51C7               	movf	_TMR0_InterruptHandler& (0+255),w,b
  2329  002F22  0100               	movlb	0	; () banked
  2330  002F24  11C8               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  2331  002F26  B4D8               	btfsc	status,2,c
  2332  002F28  0012               	return	
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;tmr0.c: 103: {
  2336                           ;tmr0.c: 104: TMR0_InterruptHandler();
  2337  002F2A  D801               	call	i2u436_48
  2338  002F2C  0012               	return	
  2339  002F2E                     i2u436_48:
  2340  002F2E  0005               	push	
  2341  002F30  0100               	movlb	0	; () banked
  2342  002F32  6EFA               	movwf	pclath,c
  2343  002F34  51C7               	movf	_TMR0_InterruptHandler& (0+255),w,b
  2344  002F36  6EFD               	movwf	tosl,c
  2345  002F38  51C8               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  2346  002F3A  6EFE               	movwf	tosh,c
  2347  002F3C  50F8               	movf	tblptru,w,c
  2348  002F3E  6EFF               	movwf	tosu,c
  2349  002F40  50FA               	movf	pclath,w,c
  2350  002F42  0012               	return		;indir
  2351  002F44                     __end_of_TMR0_ISR:
  2352                           	opt stack 0
  2353                           tosu	equ	0xFFF
  2354                           tosh	equ	0xFFE
  2355                           tosl	equ	0xFFD
  2356                           pclatu	equ	0xFFB
  2357                           pclath	equ	0xFFA
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           intcon	equ	0xFF2
  2365                           intcon2	equ	0xFF1
  2366                           intcon3	equ	0xFF0
  2367                           postinc0	equ	0xFEE
  2368                           fsr0h	equ	0xFEA
  2369                           fsr0l	equ	0xFE9
  2370                           wreg	equ	0xFE8
  2371                           fsr1h	equ	0xFE2
  2372                           fsr1l	equ	0xFE1
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  2378 ;; Defined at:
  2379 ;;		line 113 in file "mcc_generated_files/tmr0.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2393 ;;      Params:         0       0       0       0       0       0       0
  2394 ;;      Locals:         0       0       0       0       0       0       0
  2395 ;;      Temps:          1       0       0       0       0       0       0
  2396 ;;      Totals:         1       0       0       0       0       0       0
  2397 ;;Total ram usage:        1 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    1
  2400 ;; This function calls:
  2401 ;;		_SetRange
  2402 ;; This function is called by:
  2403 ;;		_TMR0_Initialize
  2404 ;;		_TMR0_ISR
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text16
  2409  002CD0                     __ptext16:
  2410                           	opt stack 0
  2411  002CD0                     _TMR0_DefaultInterruptHandler:
  2412                           	opt stack 24
  2413                           
  2414                           ;tmr0.c: 116: if (cal_mode == 0)
  2415                           
  2416                           ;incstack = 0
  2417  002CD0  5057               	movf	_cal_mode,w,c
  2418  002CD2  A4D8               	btfss	status,2,c
  2419  002CD4  D00F               	goto	i2l193
  2420                           
  2421                           ;tmr0.c: 117: {
  2422                           ;tmr0.c: 119: do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2423  002CD6  AE8B               	btfss	3979,7,c	;volatile
  2424  002CD8  D002               	goto	i2u423_40
  2425  002CDA  0E01               	movlw	1
  2426  002CDC  D001               	goto	i2u423_46
  2427  002CDE                     i2u423_40:
  2428  002CDE  0E00               	movlw	0
  2429  002CE0                     i2u423_46:
  2430  002CE0  0AFF               	xorlw	255
  2431  002CE2  6E0C               	movwf	??_TMR0_DefaultInterruptHandler& (0+255),c
  2432  002CE4  320C               	rrcf	??_TMR0_DefaultInterruptHandler,f,c
  2433  002CE6  320C               	rrcf	??_TMR0_DefaultInterruptHandler,f,c
  2434  002CE8  508B               	movf	3979,w,c	;volatile
  2435  002CEA  180C               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  2436  002CEC  0B7F               	andlw	-129
  2437  002CEE  180C               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  2438  002CF0  6E8B               	movwf	3979,c	;volatile
  2439                           
  2440                           ;tmr0.c: 120: }
  2441  002CF2  D001               	goto	i2l3686
  2442  002CF4                     i2l193:
  2443  002CF4  9E8B               	bcf	3979,7,c	;volatile
  2444  002CF6                     i2l3686:
  2445                           
  2446                           ;tmr0.c: 125: }
  2447                           ;tmr0.c: 128: if (auto_range == 1)
  2448  002CF6  0100               	movlb	0	; () banked
  2449  002CF8  05C9               	decf	_auto_range& (0+255),w,b
  2450  002CFA  A4D8               	btfss	status,2,c
  2451  002CFC  0012               	return	
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;tmr0.c: 129: {
  2455                           ;tmr0.c: 130: if (range < 5)
  2456  002CFE  0E05               	movlw	5
  2457  002D00  0100               	movlb	0	; () banked
  2458  002D02  61CA               	cpfslt	_range& (0+255),b
  2459  002D04  0012               	return	
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;tmr0.c: 131: {
  2463                           ;tmr0.c: 132: range += 1;
  2464  002D06  0100               	movlb	0	; () banked
  2465  002D08  2BCA               	incf	_range& (0+255),f,b
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;tmr0.c: 133: SetRange(range);
  2469  002D0A  0100               	movlb	0	; () banked
  2470  002D0C  51CA               	movf	_range& (0+255),w,b
  2471  002D0E  EC16  F00F         	call	_SetRange
  2472  002D12  0012               	return	
  2473  002D14                     __end_of_TMR0_DefaultInterruptHandler:
  2474                           	opt stack 0
  2475                           tosu	equ	0xFFF
  2476                           tosh	equ	0xFFE
  2477                           tosl	equ	0xFFD
  2478                           pclatu	equ	0xFFB
  2479                           pclath	equ	0xFFA
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           prodh	equ	0xFF4
  2485                           prodl	equ	0xFF3
  2486                           intcon	equ	0xFF2
  2487                           intcon2	equ	0xFF1
  2488                           intcon3	equ	0xFF0
  2489                           postinc0	equ	0xFEE
  2490                           fsr0h	equ	0xFEA
  2491                           fsr0l	equ	0xFE9
  2492                           wreg	equ	0xFE8
  2493                           fsr1h	equ	0xFE2
  2494                           fsr1l	equ	0xFE1
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _INT1_ISR *****************
  2500 ;; Defined at:
  2501 ;;		line 90 in file "mcc_generated_files/ext_int.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;		None
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2515 ;;      Params:         0       0       0       0       0       0       0
  2516 ;;      Locals:         0       0       0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0
  2518 ;;      Totals:         0       0       0       0       0       0       0
  2519 ;;Total ram usage:        0 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    5
  2522 ;; This function calls:
  2523 ;;		_SetRange
  2524 ;;		_printf
  2525 ;; This function is called by:
  2526 ;;		_INTERRUPT_InterruptManager
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text17
  2531  002B82                     __ptext17:
  2532                           	opt stack 0
  2533  002B82                     _INT1_ISR:
  2534                           	opt stack 21
  2535                           
  2536                           ;ext_int.c: 94: if (auto_range == 1)
  2537                           
  2538                           ;incstack = 0
  2539  002B82  0100               	movlb	0	; () banked
  2540  002B84  05C9               	decf	_auto_range& (0+255),w,b
  2541  002B86  A4D8               	btfss	status,2,c
  2542  002B88  D005               	goto	i2l3716
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;ext_int.c: 95: {
  2546                           ;ext_int.c: 96: stored_range = range;
  2547  002B8A  C0CA  F0B5         	movff	_range,_stored_range
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;ext_int.c: 97: auto_range = 0;
  2551  002B8E  0E00               	movlw	0
  2552  002B90  0100               	movlb	0	; () banked
  2553  002B92  6FC9               	movwf	_auto_range& (0+255),b
  2554  002B94                     i2l3716:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;ext_int.c: 98: }
  2558                           ;ext_int.c: 101: if (range < 5)
  2559  002B94  0E05               	movlw	5
  2560  002B96  0100               	movlb	0	; () banked
  2561  002B98  61CA               	cpfslt	_range& (0+255),b
  2562  002B9A  D003               	goto	i2l3720
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;ext_int.c: 102: {
  2566                           ;ext_int.c: 103: range += 1;
  2567  002B9C  0100               	movlb	0	; () banked
  2568  002B9E  2BCA               	incf	_range& (0+255),f,b
  2569                           
  2570                           ;ext_int.c: 104: }
  2571  002BA0  D003               	goto	i2l3722
  2572  002BA2                     i2l3720:
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;ext_int.c: 105: else
  2576                           ;ext_int.c: 107: {
  2577                           ;ext_int.c: 108: range -= (5 - 2);
  2578  002BA2  0E03               	movlw	3
  2579  002BA4  0100               	movlb	0	; () banked
  2580  002BA6  5FCA               	subwf	_range& (0+255),f,b
  2581  002BA8                     i2l3722:
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;ext_int.c: 109: }
  2585                           ;ext_int.c: 113: if (auto_range == 0 && range == stored_range)
  2586  002BA8  0100               	movlb	0	; () banked
  2587  002BAA  51C9               	movf	_auto_range& (0+255),w,b
  2588  002BAC  A4D8               	btfss	status,2,c
  2589  002BAE  D009               	goto	i2l3728
  2590                           
  2591                           ; BSR set to: 0
  2592  002BB0  0100               	movlb	0	; () banked
  2593  002BB2  51B5               	movf	_stored_range& (0+255),w,b
  2594  002BB4  0100               	movlb	0	; () banked
  2595  002BB6  19CA               	xorwf	_range& (0+255),w,b
  2596  002BB8  A4D8               	btfss	status,2,c
  2597  002BBA  D003               	goto	i2l3728
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;ext_int.c: 114: {
  2601                           ;ext_int.c: 115: auto_range = 1;
  2602  002BBC  0E01               	movlw	1
  2603  002BBE  0100               	movlb	0	; () banked
  2604  002BC0  6FC9               	movwf	_auto_range& (0+255),b
  2605  002BC2                     i2l3728:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;ext_int.c: 116: }
  2609                           ;ext_int.c: 119: printf("\r\nSetting range = %d\r\n", range);
  2610  002BC2  0E90               	movlw	low STR_6
  2611  002BC4  6E4B               	movwf	printf@f,c
  2612  002BC6  0E06               	movlw	high STR_6
  2613  002BC8  6E4C               	movwf	printf@f+1,c
  2614  002BCA  C0CA  F04D         	movff	_range,?_printf+2
  2615  002BCE  6A4E               	clrf	?_printf+3,c
  2616  002BD0  EC23  F017         	call	_printf	;wreg free
  2617                           
  2618                           ;ext_int.c: 121: SetRange(range);
  2619  002BD4  0100               	movlb	0	; () banked
  2620  002BD6  51CA               	movf	_range& (0+255),w,b
  2621  002BD8  EC16  F00F         	call	_SetRange
  2622                           
  2623                           ;ext_int.c: 125: (INTCON3bits.INT1IF = 0);
  2624  002BDC  90F0               	bcf	intcon3,0,c	;volatile
  2625  002BDE  0012               	return		;funcret
  2626  002BE0                     __end_of_INT1_ISR:
  2627                           	opt stack 0
  2628                           tosu	equ	0xFFF
  2629                           tosh	equ	0xFFE
  2630                           tosl	equ	0xFFD
  2631                           pclatu	equ	0xFFB
  2632                           pclath	equ	0xFFA
  2633                           tblptru	equ	0xFF8
  2634                           tblptrh	equ	0xFF7
  2635                           tblptrl	equ	0xFF6
  2636                           tablat	equ	0xFF5
  2637                           prodh	equ	0xFF4
  2638                           prodl	equ	0xFF3
  2639                           intcon	equ	0xFF2
  2640                           intcon2	equ	0xFF1
  2641                           intcon3	equ	0xFF0
  2642                           postinc0	equ	0xFEE
  2643                           fsr0h	equ	0xFEA
  2644                           fsr0l	equ	0xFE9
  2645                           wreg	equ	0xFE8
  2646                           fsr1h	equ	0xFE2
  2647                           fsr1l	equ	0xFE1
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _printf *****************
  2653 ;; Defined at:
  2654 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  f               2   74[COMRAM] PTR const unsigned char 
  2657 ;;		 -> STR_6(23), 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  pb              4   80[COMRAM] struct __prbuf
  2660 ;;  ap              2   78[COMRAM] PTR void [1]
  2661 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  2   74[COMRAM] int 
  2664 ;; Registers used:
  2665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2671 ;;      Params:         4       0       0       0       0       0       0
  2672 ;;      Locals:         6       0       0       0       0       0       0
  2673 ;;      Temps:          0       0       0       0       0       0       0
  2674 ;;      Totals:        10       0       0       0       0       0       0
  2675 ;;Total ram usage:       10 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    4
  2678 ;; This function calls:
  2679 ;;		__doprnt
  2680 ;; This function is called by:
  2681 ;;		_INT1_ISR
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text18
  2686  002E46                     __ptext18:
  2687                           	opt stack 0
  2688  002E46                     _printf:
  2689                           	opt stack 21
  2690                           
  2691                           ;incstack = 0
  2692  002E46  0E00               	movlw	0
  2693  002E48  6E51               	movwf	printf@pb,c
  2694  002E4A  0E00               	movlw	0
  2695  002E4C  6E52               	movwf	printf@pb+1,c
  2696  002E4E  0EEA               	movlw	low _putch
  2697  002E50  6E53               	movwf	printf@pb+2,c
  2698  002E52  0E30               	movlw	high _putch
  2699  002E54  6E54               	movwf	printf@pb+3,c
  2700  002E56  0E4D               	movlw	low (?_printf+2)
  2701  002E58  6E4F               	movwf	printf@ap,c
  2702  002E5A  0E00               	movlw	high (?_printf+2)
  2703  002E5C  6E50               	movwf	printf@ap+1,c
  2704                           
  2705                           ;	Return value of _printf is never used
  2706  002E5E  0E51               	movlw	low printf@pb
  2707  002E60  6E3F               	movwf	__doprnt@pb,c
  2708  002E62  0E00               	movlw	high printf@pb
  2709  002E64  6E40               	movwf	__doprnt@pb+1,c
  2710  002E66  C04B  F041         	movff	printf@f,__doprnt@f
  2711  002E6A  C04C  F042         	movff	printf@f+1,__doprnt@f+1
  2712  002E6E  0E4F               	movlw	low printf@ap
  2713  002E70  6E43               	movwf	__doprnt@ap,c
  2714  002E72  0E00               	movlw	high printf@ap
  2715  002E74  6E44               	movwf	__doprnt@ap+1,c
  2716  002E76  EC7B  F003         	call	__doprnt	;wreg free
  2717  002E7A  0012               	return	
  2718  002E7C                     __end_of_printf:
  2719                           	opt stack 0
  2720                           tosu	equ	0xFFF
  2721                           tosh	equ	0xFFE
  2722                           tosl	equ	0xFFD
  2723                           pclatu	equ	0xFFB
  2724                           pclath	equ	0xFFA
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           intcon2	equ	0xFF1
  2733                           intcon3	equ	0xFF0
  2734                           postinc0	equ	0xFEE
  2735                           fsr0h	equ	0xFEA
  2736                           fsr0l	equ	0xFE9
  2737                           wreg	equ	0xFE8
  2738                           fsr1h	equ	0xFE2
  2739                           fsr1l	equ	0xFE1
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _INT0_ISR *****************
  2745 ;; Defined at:
  2746 ;;		line 131 in file "mcc_generated_files/ext_int.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2760 ;;      Params:         0       0       0       0       0       0       0
  2761 ;;      Locals:         3       0       0       0       0       0       0
  2762 ;;      Temps:          1       0       0       0       0       0       0
  2763 ;;      Totals:         4       0       0       0       0       0       0
  2764 ;;Total ram usage:        4 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    6
  2767 ;; This function calls:
  2768 ;;		_SetRange
  2769 ;;		_TMR0_ReadTimer
  2770 ;;		_TMR0_Reload
  2771 ;;		_TMR0_StopTimer
  2772 ;;		_UpdateDisplay
  2773 ;;		___ftadd
  2774 ;;		___ftdiv
  2775 ;;		___ftmul
  2776 ;;		___lwtoft
  2777 ;;		___wmul
  2778 ;;		i2_TMR0_StartTimer
  2779 ;; This function is called by:
  2780 ;;		_INTERRUPT_InterruptManager
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text19
  2785  002162                     __ptext19:
  2786                           	opt stack 0
  2787  002162                     _INT0_ISR:
  2788                           	opt stack 20
  2789                           
  2790                           ;ext_int.c: 134: if (cal_mode == 1)
  2791                           
  2792                           ;incstack = 0
  2793  002162  0457               	decf	_cal_mode,w,c
  2794  002164  A4D8               	btfss	status,2,c
  2795  002166  D002               	goto	i2l3736
  2796                           
  2797                           ;ext_int.c: 135: {
  2798                           ;ext_int.c: 136: do { LATCbits.LATC7 = 0; } while(0);
  2799  002168  9E8B               	bcf	3979,7,c	;volatile
  2800                           
  2801                           ;ext_int.c: 137: return;
  2802  00216A  0012               	return	
  2803  00216C                     i2l3736:
  2804                           
  2805                           ;ext_int.c: 138: }
  2806                           ;ext_int.c: 141: TMR0_StopTimer();
  2807  00216C  EC85  F018         	call	_TMR0_StopTimer	;wreg free
  2808                           
  2809                           ;ext_int.c: 142: reading = TMR0_ReadTimer();
  2810  002170  ECAB  F016         	call	_TMR0_ReadTimer	;wreg free
  2811  002174  C001  F0B2         	movff	?_TMR0_ReadTimer,_reading
  2812  002178  C002  F0B3         	movff	?_TMR0_ReadTimer+1,_reading+1
  2813                           
  2814                           ;ext_int.c: 145: do { LATCbits.LATC7 = 1; } while(0);
  2815  00217C  8E8B               	bsf	3979,7,c	;volatile
  2816                           
  2817                           ;ext_int.c: 149: result += cal_current[range - 1] * ((float)reading - 27) / 3.01004;
  2818  00217E  0EA4               	movlw	164
  2819  002180  6E33               	movwf	___ftdiv@f2,c
  2820  002182  0E40               	movlw	64
  2821  002184  6E34               	movwf	___ftdiv@f2+1,c
  2822  002186  0E40               	movlw	64
  2823  002188  6E35               	movwf	___ftdiv@f2+2,c
  2824  00218A  0E00               	movlw	0
  2825  00218C  6E12               	movwf	___wmul@multiplicand+1,c
  2826  00218E  0E03               	movlw	3
  2827  002190  6E11               	movwf	___wmul@multiplicand,c
  2828  002192  0EFF               	movlw	255
  2829  002194  0100               	movlb	0	; () banked
  2830  002196  25CA               	addwf	_range& (0+255),w,b
  2831  002198  6E0F               	movwf	___wmul@multiplier,c
  2832  00219A  6A10               	clrf	___wmul@multiplier+1,c
  2833  00219C  0EFF               	movlw	255
  2834  00219E  2210               	addwfc	___wmul@multiplier+1,f,c
  2835  0021A0  ECCB  F017         	call	___wmul	;wreg free
  2836  0021A4  0E77               	movlw	low _cal_current
  2837  0021A6  240F               	addwf	?___wmul,w,c
  2838  0021A8  6EF6               	movwf	tblptrl,c
  2839  0021AA  0E06               	movlw	high _cal_current
  2840  0021AC  2010               	addwfc	?___wmul+1,w,c
  2841  0021AE  6EF7               	movwf	tblptrh,c
  2842  0021B0                     	if	0	;There are less than 3 active tblptr bytes
  2843  0021B0                     	endif
  2844  0021B0  0009               	tblrd		*+
  2845  0021B2  CFF5 F024          	movff	tablat,___ftmul@f2
  2846  0021B6  0009               	tblrd		*+
  2847  0021B8  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2848  0021BC  000A               	tblrd		*-
  2849  0021BE  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2850  0021C2  0E00               	movlw	0
  2851  0021C4  6E18               	movwf	___ftadd@f2,c
  2852  0021C6  0ED8               	movlw	216
  2853  0021C8  6E19               	movwf	___ftadd@f2+1,c
  2854  0021CA  0EC1               	movlw	193
  2855  0021CC  6E1A               	movwf	___ftadd@f2+2,c
  2856  0021CE  C0B2  F009         	movff	_reading,___lwtoft@c
  2857  0021D2  C0B3  F00A         	movff	_reading+1,___lwtoft@c+1
  2858  0021D6  ECDE  F017         	call	___lwtoft	;wreg free
  2859  0021DA  C009  F015         	movff	?___lwtoft,___ftadd@f1
  2860  0021DE  C00A  F016         	movff	?___lwtoft+1,___ftadd@f1+1
  2861  0021E2  C00B  F017         	movff	?___lwtoft+2,___ftadd@f1+2
  2862  0021E6  EC40  F00E         	call	___ftadd	;wreg free
  2863  0021EA  C015  F021         	movff	?___ftadd,___ftmul@f1
  2864  0021EE  C016  F022         	movff	?___ftadd+1,___ftmul@f1+1
  2865  0021F2  C017  F023         	movff	?___ftadd+2,___ftmul@f1+2
  2866  0021F6  EC91  F012         	call	___ftmul	;wreg free
  2867  0021FA  C021  F030         	movff	?___ftmul,___ftdiv@f1
  2868  0021FE  C022  F031         	movff	?___ftmul+1,___ftdiv@f1+1
  2869  002202  C023  F032         	movff	?___ftmul+2,___ftdiv@f1+2
  2870  002206  EC85  F013         	call	___ftdiv	;wreg free
  2871  00220A  C030  F052         	movff	?___ftdiv,_INT0_ISR$1654
  2872  00220E  C031  F053         	movff	?___ftdiv+1,_INT0_ISR$1654+1
  2873  002212  C032  F054         	movff	?___ftdiv+2,_INT0_ISR$1654+2
  2874                           
  2875                           ;ext_int.c: 149: result += cal_current[range - 1] * ((float)reading - 27) / 3.01004;
  2876  002216  C0AF  F015         	movff	_result,___ftadd@f1
  2877  00221A  C0B0  F016         	movff	_result+1,___ftadd@f1+1
  2878  00221E  C0B1  F017         	movff	_result+2,___ftadd@f1+2
  2879  002222  C052  F018         	movff	_INT0_ISR$1654,___ftadd@f2
  2880  002226  C053  F019         	movff	_INT0_ISR$1654+1,___ftadd@f2+1
  2881  00222A  C054  F01A         	movff	_INT0_ISR$1654+2,___ftadd@f2+2
  2882  00222E  EC40  F00E         	call	___ftadd	;wreg free
  2883  002232  C015  F0AF         	movff	?___ftadd,_result
  2884  002236  C016  F0B0         	movff	?___ftadd+1,_result+1
  2885  00223A  C017  F0B1         	movff	?___ftadd+2,_result+2
  2886                           
  2887                           ;ext_int.c: 150: av_count += 1;
  2888  00223E  0100               	movlb	0	; () banked
  2889  002240  2BB4               	incf	_av_count& (0+255),f,b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;ext_int.c: 152: if (av_count == 10)
  2893  002242  0E0A               	movlw	10
  2894  002244  0100               	movlb	0	; () banked
  2895  002246  19B4               	xorwf	_av_count& (0+255),w,b
  2896  002248  A4D8               	btfss	status,2,c
  2897  00224A  D019               	goto	i2l3756
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;ext_int.c: 153: {
  2901                           ;ext_int.c: 154: result /= (10);
  2902  00224C  C0AF  F030         	movff	_result,___ftdiv@f1
  2903  002250  C0B0  F031         	movff	_result+1,___ftdiv@f1+1
  2904  002254  C0B1  F032         	movff	_result+2,___ftdiv@f1+2
  2905  002258  0E00               	movlw	0
  2906  00225A  6E33               	movwf	___ftdiv@f2,c
  2907  00225C  0E20               	movlw	32
  2908  00225E  6E34               	movwf	___ftdiv@f2+1,c
  2909  002260  0E41               	movlw	65
  2910  002262  6E35               	movwf	___ftdiv@f2+2,c
  2911  002264  EC85  F013         	call	___ftdiv	;wreg free
  2912  002268  C030  F0AF         	movff	?___ftdiv,_result
  2913  00226C  C031  F0B0         	movff	?___ftdiv+1,_result+1
  2914  002270  C032  F0B1         	movff	?___ftdiv+2,_result+2
  2915                           
  2916                           ;ext_int.c: 155: UpdateDisplay();
  2917  002274  ECE8  F00F         	call	_UpdateDisplay	;wreg free
  2918                           
  2919                           ;ext_int.c: 156: av_count = 0;
  2920  002278  0E00               	movlw	0
  2921  00227A  0100               	movlb	0	; () banked
  2922  00227C  6FB4               	movwf	_av_count& (0+255),b
  2923  00227E                     i2l3756:
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;ext_int.c: 157: }
  2927                           ;ext_int.c: 163: if (auto_range == 1)
  2928  00227E  0100               	movlb	0	; () banked
  2929  002280  05C9               	decf	_auto_range& (0+255),w,b
  2930  002282  A4D8               	btfss	status,2,c
  2931  002284  D012               	goto	i2l3766
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;ext_int.c: 164: {
  2935                           ;ext_int.c: 165: if (reading < 1000 && range > 2)
  2936  002286  0EE8               	movlw	232
  2937  002288  0100               	movlb	0	; () banked
  2938  00228A  5DB2               	subwf	_reading& (0+255),w,b
  2939  00228C  0E03               	movlw	3
  2940  00228E  0100               	movlb	0	; () banked
  2941  002290  59B3               	subwfb	(_reading+1)& (0+255),w,b
  2942  002292  B0D8               	btfsc	status,0,c
  2943  002294  D00A               	goto	i2l3766
  2944                           
  2945                           ; BSR set to: 0
  2946  002296  0E02               	movlw	2
  2947  002298  0100               	movlb	0	; () banked
  2948  00229A  65CA               	cpfsgt	_range& (0+255),b
  2949  00229C  D006               	goto	i2l3766
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;ext_int.c: 166: {
  2953                           ;ext_int.c: 167: range -= 1;
  2954  00229E  0100               	movlb	0	; () banked
  2955  0022A0  07CA               	decf	_range& (0+255),f,b
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;ext_int.c: 168: SetRange(range);
  2959  0022A2  0100               	movlb	0	; () banked
  2960  0022A4  51CA               	movf	_range& (0+255),w,b
  2961  0022A6  EC16  F00F         	call	_SetRange
  2962  0022AA                     i2l3766:
  2963                           
  2964                           ;ext_int.c: 169: }
  2965                           ;ext_int.c: 170: }
  2966                           ;ext_int.c: 173: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2967  0022AA  0E1A               	movlw	26
  2968  0022AC  6E51               	movwf	??_INT0_ISR& (0+255),c
  2969  0022AE  0EF8               	movlw	248
  2970  0022B0                     i2u451_47:
  2971  0022B0  2EE8               	decfsz	wreg,f,c
  2972  0022B2  D7FE               	bra	i2u451_47
  2973  0022B4  2E51               	decfsz	??_INT0_ISR& (0+255),f,c
  2974  0022B6  D7FC               	bra	i2u451_47
  2975  0022B8  D000               	nop2	
  2976                           
  2977                           ;ext_int.c: 176: TMR0_Reload();
  2978  0022BA  EC7A  F018         	call	_TMR0_Reload	;wreg free
  2979                           
  2980                           ;ext_int.c: 179: do { LATCbits.LATC7 = 0; } while(0);
  2981  0022BE  9E8B               	bcf	3979,7,c	;volatile
  2982                           
  2983                           ;ext_int.c: 180: TMR0_StartTimer();
  2984  0022C0  EC83  F018         	call	i2_TMR0_StartTimer	;wreg free
  2985                           
  2986                           ;ext_int.c: 183: (INTCONbits.INT0IF = 0);
  2987  0022C4  92F2               	bcf	intcon,1,c	;volatile
  2988  0022C6  0012               	return		;funcret
  2989  0022C8                     __end_of_INT0_ISR:
  2990                           	opt stack 0
  2991                           tosu	equ	0xFFF
  2992                           tosh	equ	0xFFE
  2993                           tosl	equ	0xFFD
  2994                           pclatu	equ	0xFFB
  2995                           pclath	equ	0xFFA
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           intcon2	equ	0xFF1
  3004                           intcon3	equ	0xFF0
  3005                           postinc0	equ	0xFEE
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           fsr1h	equ	0xFE2
  3010                           fsr1l	equ	0xFE1
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function i2_TMR0_StartTimer *****************
  3016 ;; Defined at:
  3017 ;;		line 51 in file "mcc_generated_files/tmr0.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		None
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3031 ;;      Params:         0       0       0       0       0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0
  3034 ;;      Totals:         0       0       0       0       0       0       0
  3035 ;;Total ram usage:        0 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; This function calls:
  3038 ;;		Nothing
  3039 ;; This function is called by:
  3040 ;;		_INT0_ISR
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text20
  3045  003106                     __ptext20:
  3046                           	opt stack 0
  3047  003106                     i2_TMR0_StartTimer:
  3048                           	opt stack 25
  3049                           
  3050                           ;tmr0.c: 54: T0CONbits.TMR0ON = 1;
  3051                           
  3052                           ;incstack = 0
  3053  003106  8ED5               	bsf	4053,7,c	;volatile
  3054  003108  0012               	return		;funcret
  3055  00310A                     __end_ofi2_TMR0_StartTimer:
  3056                           	opt stack 0
  3057                           tosu	equ	0xFFF
  3058                           tosh	equ	0xFFE
  3059                           tosl	equ	0xFFD
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           intcon3	equ	0xFF0
  3071                           postinc0	equ	0xFEE
  3072                           fsr0h	equ	0xFEA
  3073                           fsr0l	equ	0xFE9
  3074                           wreg	equ	0xFE8
  3075                           fsr1h	equ	0xFE2
  3076                           fsr1l	equ	0xFE1
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function ___lwtoft *****************
  3082 ;; Defined at:
  3083 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwtoft.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  c               2    8[COMRAM] unsigned int 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  3    8[COMRAM] float 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3097 ;;      Params:         3       0       0       0       0       0       0
  3098 ;;      Locals:         0       0       0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0
  3100 ;;      Totals:         3       0       0       0       0       0       0
  3101 ;;Total ram usage:        3 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    1
  3104 ;; This function calls:
  3105 ;;		___ftpack
  3106 ;; This function is called by:
  3107 ;;		_INT0_ISR
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text21
  3112  002FBC                     __ptext21:
  3113                           	opt stack 0
  3114  002FBC                     ___lwtoft:
  3115                           	opt stack 24
  3116                           
  3117                           ;incstack = 0
  3118  002FBC  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3119  002FC0  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3120  002FC4  6A03               	clrf	___ftpack@arg+2,c
  3121  002FC6  0E8E               	movlw	142
  3122  002FC8  6E04               	movwf	___ftpack@exp,c
  3123  002FCA  0E00               	movlw	0
  3124  002FCC  6E05               	movwf	___ftpack@sign,c
  3125  002FCE  ECF8  F013         	call	___ftpack	;wreg free
  3126  002FD2  C001  F009         	movff	?___ftpack,?___lwtoft
  3127  002FD6  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3128  002FDA  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3129  002FDE  0012               	return	
  3130  002FE0                     __end_of___lwtoft:
  3131                           	opt stack 0
  3132                           tosu	equ	0xFFF
  3133                           tosh	equ	0xFFE
  3134                           tosl	equ	0xFFD
  3135                           pclatu	equ	0xFFB
  3136                           pclath	equ	0xFFA
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           intcon2	equ	0xFF1
  3145                           intcon3	equ	0xFF0
  3146                           postinc0	equ	0xFEE
  3147                           fsr0h	equ	0xFEA
  3148                           fsr0l	equ	0xFE9
  3149                           wreg	equ	0xFE8
  3150                           fsr1h	equ	0xFE2
  3151                           fsr1l	equ	0xFE1
  3152                           fsr2h	equ	0xFDA
  3153                           fsr2l	equ	0xFD9
  3154                           status	equ	0xFD8
  3155                           
  3156 ;; *************** function _UpdateDisplay *****************
  3157 ;; Defined at:
  3158 ;;		line 55 in file "mcc_generated_files/ext_int.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  cap_string     16   49[BANK0 ] unsigned char [16]
  3163 ;;  range_string   16   33[BANK0 ] unsigned char [16]
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3173 ;;      Params:         0       0       0       0       0       0       0
  3174 ;;      Locals:         0      32       0       0       0       0       0
  3175 ;;      Temps:          0       0       0       0       0       0       0
  3176 ;;      Totals:         0      32       0       0       0       0       0
  3177 ;;Total ram usage:       32 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    5
  3180 ;; This function calls:
  3181 ;;		___ftdiv
  3182 ;;		___ftge
  3183 ;;		_lcd_sendStringToPos
  3184 ;;		_sprintf
  3185 ;; This function is called by:
  3186 ;;		_INT0_ISR
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text22
  3191  001FD0                     __ptext22:
  3192                           	opt stack 0
  3193  001FD0                     _UpdateDisplay:
  3194                           	opt stack 20
  3195                           
  3196                           ;ext_int.c: 58: char cap_string[16];
  3197                           ;ext_int.c: 59: char range_string[16];
  3198                           ;ext_int.c: 62: if (result >= 1000000.0)
  3199                           
  3200                           ;incstack = 0
  3201  001FD0  C0AF  F001         	movff	_result,___ftge@ff1
  3202  001FD4  C0B0  F002         	movff	_result+1,___ftge@ff1+1
  3203  001FD8  C0B1  F003         	movff	_result+2,___ftge@ff1+2
  3204  001FDC  0E24               	movlw	36
  3205  001FDE  6E04               	movwf	___ftge@ff2,c
  3206  001FE0  0E74               	movlw	116
  3207  001FE2  6E05               	movwf	___ftge@ff2+1,c
  3208  001FE4  0E49               	movlw	73
  3209  001FE6  6E06               	movwf	___ftge@ff2+2,c
  3210  001FE8  EC4F  F014         	call	___ftge	;wreg free
  3211  001FEC  A0D8               	btfss	status,0,c
  3212  001FEE  D023               	goto	i2l3620
  3213                           
  3214                           ;ext_int.c: 63: {
  3215                           ;ext_int.c: 64: sprintf(cap_string, "C=%12.6fuF", result / 1000000.0);
  3216  001FF0  0E91               	movlw	low UpdateDisplay@cap_string
  3217  001FF2  0100               	movlb	0	; () banked
  3218  001FF4  6F77               	movwf	sprintf@wh& (0+255),b
  3219  001FF6  0E00               	movlw	high UpdateDisplay@cap_string
  3220  001FF8  0100               	movlb	0	; () banked
  3221  001FFA  6F78               	movwf	(sprintf@wh+1)& (0+255),b
  3222  001FFC  0EE9               	movlw	low STR_1
  3223  001FFE  0100               	movlb	0	; () banked
  3224  002000  6F79               	movwf	sprintf@f& (0+255),b
  3225  002002  0E06               	movlw	high STR_1
  3226  002004  0100               	movlb	0	; () banked
  3227  002006  6F7A               	movwf	(sprintf@f+1)& (0+255),b
  3228  002008  C0AF  F030         	movff	_result,___ftdiv@f1
  3229  00200C  C0B0  F031         	movff	_result+1,___ftdiv@f1+1
  3230  002010  C0B1  F032         	movff	_result+2,___ftdiv@f1+2
  3231  002014  0E24               	movlw	36
  3232  002016  6E33               	movwf	___ftdiv@f2,c
  3233  002018  0E74               	movlw	116
  3234  00201A  6E34               	movwf	___ftdiv@f2+1,c
  3235  00201C  0E49               	movlw	73
  3236  00201E  6E35               	movwf	___ftdiv@f2+2,c
  3237  002020  EC85  F013         	call	___ftdiv	;wreg free
  3238  002024  C030  F07B         	movff	?___ftdiv,?_sprintf+4
  3239  002028  C031  F07C         	movff	?___ftdiv+1,?_sprintf+5
  3240  00202C  C032  F07D         	movff	?___ftdiv+2,?_sprintf+6
  3241  002030  EC8A  F016         	call	_sprintf	;wreg free
  3242                           
  3243                           ;ext_int.c: 65: }
  3244  002034  D069               	goto	i2l55
  3245  002036                     i2l3620:
  3246                           
  3247                           ;ext_int.c: 66: else if (result < 1000000 && result >= 1000.0)
  3248  002036  C0AF  F001         	movff	_result,___ftge@ff1
  3249  00203A  C0B0  F002         	movff	_result+1,___ftge@ff1+1
  3250  00203E  C0B1  F003         	movff	_result+2,___ftge@ff1+2
  3251  002042  0E24               	movlw	36
  3252  002044  6E04               	movwf	___ftge@ff2,c
  3253  002046  0E74               	movlw	116
  3254  002048  6E05               	movwf	___ftge@ff2+1,c
  3255  00204A  0E49               	movlw	73
  3256  00204C  6E06               	movwf	___ftge@ff2+2,c
  3257  00204E  EC4F  F014         	call	___ftge	;wreg free
  3258  002052  B0D8               	btfsc	status,0,c
  3259  002054  D033               	goto	i2l3626
  3260  002056  C0AF  F001         	movff	_result,___ftge@ff1
  3261  00205A  C0B0  F002         	movff	_result+1,___ftge@ff1+1
  3262  00205E  C0B1  F003         	movff	_result+2,___ftge@ff1+2
  3263  002062  0E00               	movlw	0
  3264  002064  6E04               	movwf	___ftge@ff2,c
  3265  002066  0E7A               	movlw	122
  3266  002068  6E05               	movwf	___ftge@ff2+1,c
  3267  00206A  0E44               	movlw	68
  3268  00206C  6E06               	movwf	___ftge@ff2+2,c
  3269  00206E  EC4F  F014         	call	___ftge	;wreg free
  3270  002072  A0D8               	btfss	status,0,c
  3271  002074  D023               	goto	i2l3626
  3272                           
  3273                           ;ext_int.c: 67: {
  3274                           ;ext_int.c: 68: sprintf(cap_string, "C=%12.3fnF", result / 1000.0);
  3275  002076  0E91               	movlw	low UpdateDisplay@cap_string
  3276  002078  0100               	movlb	0	; () banked
  3277  00207A  6F77               	movwf	sprintf@wh& (0+255),b
  3278  00207C  0E00               	movlw	high UpdateDisplay@cap_string
  3279  00207E  0100               	movlb	0	; () banked
  3280  002080  6F78               	movwf	(sprintf@wh+1)& (0+255),b
  3281  002082  0ED3               	movlw	low STR_2
  3282  002084  0100               	movlb	0	; () banked
  3283  002086  6F79               	movwf	sprintf@f& (0+255),b
  3284  002088  0E06               	movlw	high STR_2
  3285  00208A  0100               	movlb	0	; () banked
  3286  00208C  6F7A               	movwf	(sprintf@f+1)& (0+255),b
  3287  00208E  C0AF  F030         	movff	_result,___ftdiv@f1
  3288  002092  C0B0  F031         	movff	_result+1,___ftdiv@f1+1
  3289  002096  C0B1  F032         	movff	_result+2,___ftdiv@f1+2
  3290  00209A  0E00               	movlw	0
  3291  00209C  6E33               	movwf	___ftdiv@f2,c
  3292  00209E  0E7A               	movlw	122
  3293  0020A0  6E34               	movwf	___ftdiv@f2+1,c
  3294  0020A2  0E44               	movlw	68
  3295  0020A4  6E35               	movwf	___ftdiv@f2+2,c
  3296  0020A6  EC85  F013         	call	___ftdiv	;wreg free
  3297  0020AA  C030  F07B         	movff	?___ftdiv,?_sprintf+4
  3298  0020AE  C031  F07C         	movff	?___ftdiv+1,?_sprintf+5
  3299  0020B2  C032  F07D         	movff	?___ftdiv+2,?_sprintf+6
  3300  0020B6  EC8A  F016         	call	_sprintf	;wreg free
  3301                           
  3302                           ;ext_int.c: 69: }
  3303  0020BA  D026               	goto	i2l55
  3304  0020BC                     i2l3626:
  3305                           
  3306                           ;ext_int.c: 70: else if (result < 0)
  3307  0020BC  0100               	movlb	0	; () banked
  3308  0020BE  AFB1               	btfss	(_result+2)& (0+255),7,b
  3309  0020C0  D00F               	goto	i2l3630
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;ext_int.c: 71: {
  3313                           ;ext_int.c: 72: sprintf(cap_string, "C=ERROR         ");
  3314  0020C2  0E91               	movlw	low UpdateDisplay@cap_string
  3315  0020C4  0100               	movlb	0	; () banked
  3316  0020C6  6F77               	movwf	sprintf@wh& (0+255),b
  3317  0020C8  0E00               	movlw	high UpdateDisplay@cap_string
  3318  0020CA  0100               	movlb	0	; () banked
  3319  0020CC  6F78               	movwf	(sprintf@wh+1)& (0+255),b
  3320  0020CE  0EA7               	movlw	low STR_3
  3321  0020D0  0100               	movlb	0	; () banked
  3322  0020D2  6F79               	movwf	sprintf@f& (0+255),b
  3323  0020D4  0E06               	movlw	high STR_3
  3324  0020D6  0100               	movlb	0	; () banked
  3325  0020D8  6F7A               	movwf	(sprintf@f+1)& (0+255),b
  3326  0020DA  EC8A  F016         	call	_sprintf	;wreg free
  3327                           
  3328                           ;ext_int.c: 73: }
  3329  0020DE  D014               	goto	i2l55
  3330  0020E0                     i2l3630:
  3331                           
  3332                           ;ext_int.c: 74: else
  3333                           ;ext_int.c: 75: {
  3334                           ;ext_int.c: 76: sprintf(cap_string, "C=%12.0fpF", result);
  3335  0020E0  0E91               	movlw	low UpdateDisplay@cap_string
  3336  0020E2  0100               	movlb	0	; () banked
  3337  0020E4  6F77               	movwf	sprintf@wh& (0+255),b
  3338  0020E6  0E00               	movlw	high UpdateDisplay@cap_string
  3339  0020E8  0100               	movlb	0	; () banked
  3340  0020EA  6F78               	movwf	(sprintf@wh+1)& (0+255),b
  3341  0020EC  0EDE               	movlw	low STR_4
  3342  0020EE  0100               	movlb	0	; () banked
  3343  0020F0  6F79               	movwf	sprintf@f& (0+255),b
  3344  0020F2  0E06               	movlw	high STR_4
  3345  0020F4  0100               	movlb	0	; () banked
  3346  0020F6  6F7A               	movwf	(sprintf@f+1)& (0+255),b
  3347  0020F8  C0AF  F07B         	movff	_result,?_sprintf+4
  3348  0020FC  C0B0  F07C         	movff	_result+1,?_sprintf+5
  3349  002100  C0B1  F07D         	movff	_result+2,?_sprintf+6
  3350  002104  EC8A  F016         	call	_sprintf	;wreg free
  3351  002108                     i2l55:
  3352                           
  3353                           ;ext_int.c: 77: }
  3354                           ;ext_int.c: 79: sprintf(range_string, "Range %d (%d)%d", range, auto_range, av_count);
  3355  002108  0E81               	movlw	low UpdateDisplay@range_string
  3356  00210A  0100               	movlb	0	; () banked
  3357  00210C  6F77               	movwf	sprintf@wh& (0+255),b
  3358  00210E  0E00               	movlw	high UpdateDisplay@range_string
  3359  002110  0100               	movlb	0	; () banked
  3360  002112  6F78               	movwf	(sprintf@wh+1)& (0+255),b
  3361  002114  0EB8               	movlw	low STR_5
  3362  002116  0100               	movlb	0	; () banked
  3363  002118  6F79               	movwf	sprintf@f& (0+255),b
  3364  00211A  0E06               	movlw	high STR_5
  3365  00211C  0100               	movlb	0	; () banked
  3366  00211E  6F7A               	movwf	(sprintf@f+1)& (0+255),b
  3367  002120  C0CA  F07B         	movff	_range,?_sprintf+4
  3368  002124  0100               	movlb	0	; () banked
  3369  002126  6B7C               	clrf	(?_sprintf+5)& (0+255),b
  3370  002128  C0C9  F07D         	movff	_auto_range,?_sprintf+6
  3371  00212C  0100               	movlb	0	; () banked
  3372  00212E  6B7E               	clrf	(?_sprintf+7)& (0+255),b
  3373  002130  C0B4  F07F         	movff	_av_count,?_sprintf+8
  3374  002134  0100               	movlb	0	; () banked
  3375  002136  6B80               	clrf	(?_sprintf+9)& (0+255),b
  3376  002138  EC8A  F016         	call	_sprintf	;wreg free
  3377                           
  3378                           ;ext_int.c: 81: lcd_sendStringToPos(1, 1, cap_string);
  3379  00213C  0E01               	movlw	1
  3380  00213E  6E09               	movwf	lcd_sendStringToPos@y,c
  3381  002140  0E91               	movlw	low UpdateDisplay@cap_string
  3382  002142  6E0A               	movwf	lcd_sendStringToPos@charString,c
  3383  002144  0E00               	movlw	high UpdateDisplay@cap_string
  3384  002146  6E0B               	movwf	lcd_sendStringToPos@charString+1,c
  3385  002148  0E01               	movlw	1
  3386  00214A  EC3D  F018         	call	_lcd_sendStringToPos
  3387                           
  3388                           ;ext_int.c: 82: lcd_sendStringToPos(1, 2, range_string);
  3389  00214E  0E02               	movlw	2
  3390  002150  6E09               	movwf	lcd_sendStringToPos@y,c
  3391  002152  0E81               	movlw	low UpdateDisplay@range_string
  3392  002154  6E0A               	movwf	lcd_sendStringToPos@charString,c
  3393  002156  0E00               	movlw	high UpdateDisplay@range_string
  3394  002158  6E0B               	movwf	lcd_sendStringToPos@charString+1,c
  3395  00215A  0E01               	movlw	1
  3396  00215C  EC3D  F018         	call	_lcd_sendStringToPos
  3397  002160  0012               	return		;funcret
  3398  002162                     __end_of_UpdateDisplay:
  3399                           	opt stack 0
  3400                           tosu	equ	0xFFF
  3401                           tosh	equ	0xFFE
  3402                           tosl	equ	0xFFD
  3403                           pclatu	equ	0xFFB
  3404                           pclath	equ	0xFFA
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           intcon	equ	0xFF2
  3412                           intcon2	equ	0xFF1
  3413                           intcon3	equ	0xFF0
  3414                           postinc0	equ	0xFEE
  3415                           fsr0h	equ	0xFEA
  3416                           fsr0l	equ	0xFE9
  3417                           wreg	equ	0xFE8
  3418                           fsr1h	equ	0xFE2
  3419                           fsr1l	equ	0xFE1
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _sprintf *****************
  3425 ;; Defined at:
  3426 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  wh              2   23[BANK0 ] PTR unsigned char 
  3429 ;;		 -> ftoa@buf(17), UpdateDisplay@range_string(16), UpdateDisplay@cap_string(16), 
  3430 ;;  f               2   25[BANK0 ] PTR const unsigned char 
  3431 ;;		 -> STR_7(11), STR_5(16), STR_4(11), STR_3(17), 
  3432 ;;		 -> STR_2(11), STR_1(11), 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  pb              4   76[COMRAM] struct __prbuf
  3435 ;;  ap              2   74[COMRAM] PTR void [1]
  3436 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  2   23[BANK0 ] int 
  3439 ;; Registers used:
  3440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3446 ;;      Params:         0      10       0       0       0       0       0
  3447 ;;      Locals:         6       0       0       0       0       0       0
  3448 ;;      Temps:          0       0       0       0       0       0       0
  3449 ;;      Totals:         6      10       0       0       0       0       0
  3450 ;;Total ram usage:       16 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    4
  3453 ;; This function calls:
  3454 ;;		__doprnt
  3455 ;; This function is called by:
  3456 ;;		_UpdateDisplay
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text23
  3461  002D14                     __ptext23:
  3462                           	opt stack 0
  3463  002D14                     _sprintf:
  3464                           	opt stack 20
  3465                           
  3466                           ;incstack = 0
  3467  002D14  C077  F04D         	movff	sprintf@wh,sprintf@pb
  3468  002D18  C078  F04E         	movff	sprintf@wh+1,sprintf@pb+1
  3469  002D1C  0E00               	movlw	0
  3470  002D1E  6E4F               	movwf	sprintf@pb+2,c
  3471  002D20  0E00               	movlw	0
  3472  002D22  6E50               	movwf	sprintf@pb+3,c
  3473  002D24  0E7B               	movlw	low (?_sprintf+4)
  3474  002D26  6E4B               	movwf	sprintf@ap,c
  3475  002D28  0E00               	movlw	high (?_sprintf+4)
  3476  002D2A  6E4C               	movwf	sprintf@ap+1,c
  3477  002D2C  0E4D               	movlw	low sprintf@pb
  3478  002D2E  6E3F               	movwf	__doprnt@pb,c
  3479  002D30  0E00               	movlw	high sprintf@pb
  3480  002D32  6E40               	movwf	__doprnt@pb+1,c
  3481  002D34  C079  F041         	movff	sprintf@f,__doprnt@f
  3482  002D38  C07A  F042         	movff	sprintf@f+1,__doprnt@f+1
  3483  002D3C  0E4B               	movlw	low sprintf@ap
  3484  002D3E  6E43               	movwf	__doprnt@ap,c
  3485  002D40  0E00               	movlw	high sprintf@ap
  3486  002D42  6E44               	movwf	__doprnt@ap+1,c
  3487  002D44  EC7B  F003         	call	__doprnt	;wreg free
  3488  002D48  C04D  FFD9         	movff	sprintf@pb,fsr2l
  3489  002D4C  C04E  FFDA         	movff	sprintf@pb+1,fsr2h
  3490  002D50  0E00               	movlw	0
  3491  002D52  6EDF               	movwf	indf2,c
  3492  002D54  0012               	return	
  3493  002D56                     __end_of_sprintf:
  3494                           	opt stack 0
  3495                           tosu	equ	0xFFF
  3496                           tosh	equ	0xFFE
  3497                           tosl	equ	0xFFD
  3498                           pclatu	equ	0xFFB
  3499                           pclath	equ	0xFFA
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           prodh	equ	0xFF4
  3505                           prodl	equ	0xFF3
  3506                           intcon	equ	0xFF2
  3507                           intcon2	equ	0xFF1
  3508                           intcon3	equ	0xFF0
  3509                           postinc0	equ	0xFEE
  3510                           fsr0h	equ	0xFEA
  3511                           fsr0l	equ	0xFE9
  3512                           wreg	equ	0xFE8
  3513                           fsr1h	equ	0xFE2
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           fsr2h	equ	0xFDA
  3517                           fsr2l	equ	0xFD9
  3518                           status	equ	0xFD8
  3519                           
  3520 ;; *************** function __doprnt *****************
  3521 ;; Defined at:
  3522 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  pb              2   62[COMRAM] PTR struct __prbuf
  3525 ;;		 -> sprintf@pb(4), printf@pb(4), 
  3526 ;;  f               2   64[COMRAM] PTR const unsigned char 
  3527 ;;		 -> STR_7(11), STR_6(23), STR_5(16), STR_4(11), 
  3528 ;;		 -> STR_3(17), STR_2(11), STR_1(11), 
  3529 ;;  ap              2   66[COMRAM] PTR PTR void 
  3530 ;;		 -> sprintf@ap(2), printf@ap(2), 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  tmpval          4   13[BANK0 ] struct .
  3533 ;;  val             4    9[BANK0 ] unsigned long 
  3534 ;;  fval            3   17[BANK0 ] unsigned long 
  3535 ;;  cp              3    0        PTR const unsigned char 
  3536 ;;  prec            2   20[BANK0 ] int 
  3537 ;;  exp             2    7[BANK0 ] int 
  3538 ;;  flag            2    5[BANK0 ] unsigned short 
  3539 ;;  width           2    3[BANK0 ] int 
  3540 ;;  len             2    0        unsigned int 
  3541 ;;  c               1   22[BANK0 ] char 
  3542 ;;  d               1    0        unsigned char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  2   62[COMRAM] int 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3552 ;;      Params:         6       0       0       0       0       0       0
  3553 ;;      Locals:         0      23       0       0       0       0       0
  3554 ;;      Temps:          6       0       0       0       0       0       0
  3555 ;;      Totals:        12      23       0       0       0       0       0
  3556 ;;Total ram usage:       35 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    3
  3559 ;; This function calls:
  3560 ;;		Absolute function
  3561 ;;		___awdiv
  3562 ;;		___ftadd
  3563 ;;		___ftge
  3564 ;;		___ftmul
  3565 ;;		___ftneg
  3566 ;;		___ftsub
  3567 ;;		___fttol
  3568 ;;		___lldiv
  3569 ;;		___llmod
  3570 ;;		___lltoft
  3571 ;;		___wmul
  3572 ;;		__div_to_l_
  3573 ;;		__tdiv_to_l_
  3574 ;;		_fround
  3575 ;;		_isdigit
  3576 ;;		_putch
  3577 ;;		_scale
  3578 ;; This function is called by:
  3579 ;;		_printf
  3580 ;;		_sprintf
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text24
  3585  0006F6                     __ptext24:
  3586                           	opt stack 0
  3587  0006F6                     __doprnt:
  3588                           	opt stack 21
  3589                           
  3590                           ;doprnt.c: 499: signed char c;
  3591                           ;doprnt.c: 501: int width;
  3592                           ;doprnt.c: 504: int prec;
  3593                           ;doprnt.c: 508: unsigned short flag;
  3594                           ;doprnt.c: 515: char d;
  3595                           ;doprnt.c: 516: double fval;
  3596                           ;doprnt.c: 517: int exp;
  3597                           ;doprnt.c: 523: union {
  3598                           ;doprnt.c: 524: unsigned long vd;
  3599                           ;doprnt.c: 525: double integ;
  3600                           ;doprnt.c: 526: } tmpval;
  3601                           ;doprnt.c: 528: unsigned long val;
  3602                           ;doprnt.c: 529: unsigned len;
  3603                           ;doprnt.c: 530: const char * cp;
  3604                           ;doprnt.c: 536: while(c = *f++) {
  3605                           
  3606                           ;incstack = 0
  3607  0006F6  EF12  F00B         	goto	i2l3530
  3608  0006FA                     i2l3196:
  3609                           
  3610                           ;doprnt.c: 538: if(c != '%')
  3611  0006FA  0E25               	movlw	37
  3612  0006FC  0100               	movlb	0	; () banked
  3613  0006FE  1976               	xorwf	__doprnt@c& (0+255),w,b
  3614  000700  B4D8               	btfsc	status,2,c
  3615  000702  D036               	goto	i2l3206
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;doprnt.c: 540: {
  3619                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3620  000704  EE20 F002          	lfsr	2,2
  3621  000708  503F               	movf	__doprnt@pb,w,c
  3622  00070A  26D9               	addwf	fsr2l,f,c
  3623  00070C  5040               	movf	__doprnt@pb+1,w,c
  3624  00070E  22DA               	addwfc	fsr2h,f,c
  3625  000710  50DE               	movf	postinc2,w,c
  3626  000712  10DE               	iorwf	postinc2,w,c
  3627  000714  B4D8               	btfsc	status,2,c
  3628  000716  D015               	goto	i2l3202
  3629                           
  3630                           ; BSR set to: 0
  3631  000718  EE20 F002          	lfsr	2,2
  3632  00071C  503F               	movf	__doprnt@pb,w,c
  3633  00071E  26D9               	addwf	fsr2l,f,c
  3634  000720  5040               	movf	__doprnt@pb+1,w,c
  3635  000722  22DA               	addwfc	fsr2h,f,c
  3636  000724  D802               	call	i2u325_48
  3637  000726  EF12  F00B         	goto	i2l3530
  3638  00072A                     i2u325_48:
  3639  00072A  0005               	push	
  3640  00072C  6EFA               	movwf	pclath,c
  3641  00072E  50DE               	movf	postinc2,w,c
  3642  000730  6EFD               	movwf	tosl,c
  3643  000732  50DE               	movf	postinc2,w,c
  3644  000734  6EFE               	movwf	tosh,c
  3645  000736  50F8               	movf	tblptru,w,c
  3646  000738  6EFF               	movwf	tosu,c
  3647  00073A  50FA               	movf	pclath,w,c
  3648  00073C  0100               	movlb	0	; () banked
  3649  00073E  5176               	movf	__doprnt@c& (0+255),w,b
  3650  000740  0012               	return		;indir
  3651  000742                     i2l3202:
  3652  000742  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  3653  000746  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  3654  00074A  CFDE F045          	movff	postinc2,??__doprnt
  3655  00074E  CFDD F046          	movff	postdec2,??__doprnt+1
  3656  000752  C045  FFD9         	movff	??__doprnt,fsr2l
  3657  000756  C046  FFDA         	movff	??__doprnt+1,fsr2h
  3658  00075A  C076  FFDF         	movff	__doprnt@c,indf2
  3659  00075E  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  3660  000762  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  3661  000766  2ADE               	incf	postinc2,f,c
  3662  000768  0E00               	movlw	0
  3663  00076A  22DD               	addwfc	postdec2,f,c
  3664                           
  3665                           ;doprnt.c: 542: continue;
  3666  00076C  EF12  F00B         	goto	i2l3530
  3667  000770                     i2l3206:
  3668                           
  3669                           ;doprnt.c: 543: }
  3670                           ;doprnt.c: 546: width = 0;
  3671  000770  0E00               	movlw	0
  3672  000772  0100               	movlb	0	; () banked
  3673  000774  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  3674  000776  0E00               	movlw	0
  3675  000778  6F63               	movwf	__doprnt@width& (0+255),b
  3676                           
  3677                           ;doprnt.c: 548: flag = 0;
  3678  00077A  0E00               	movlw	0
  3679  00077C  0100               	movlb	0	; () banked
  3680  00077E  6F66               	movwf	(__doprnt@flag+1)& (0+255),b
  3681  000780  0E00               	movlw	0
  3682  000782  6F65               	movwf	__doprnt@flag& (0+255),b
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3686  000784  C041  FFF6         	movff	__doprnt@f,tblptrl
  3687  000788  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3688  00078C                     	if	0	;tblptru may be non-zero
  3689  00078C                     	endif
  3690  00078C                     	if	0	;tblptru may be non-zero
  3691  00078C                     	endif
  3692  00078C  0008               	tblrd		*
  3693  00078E  50F5               	movf	tablat,w,c
  3694  000790  EC21  F018         	call	_isdigit
  3695  000794  A0D8               	btfss	status,0,c
  3696  000796  D035               	goto	i2l3220
  3697                           
  3698                           ;doprnt.c: 598: width = 0;
  3699  000798  0E00               	movlw	0
  3700  00079A  0100               	movlb	0	; () banked
  3701  00079C  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  3702  00079E  0E00               	movlw	0
  3703  0007A0  6F63               	movwf	__doprnt@width& (0+255),b
  3704  0007A2                     i2l3212:
  3705                           
  3706                           ;doprnt.c: 600: width *= 10;
  3707  0007A2  C063  F00F         	movff	__doprnt@width,___wmul@multiplier
  3708  0007A6  C064  F010         	movff	__doprnt@width+1,___wmul@multiplier+1
  3709  0007AA  0E00               	movlw	0
  3710  0007AC  6E12               	movwf	___wmul@multiplicand+1,c
  3711  0007AE  0E0A               	movlw	10
  3712  0007B0  6E11               	movwf	___wmul@multiplicand,c
  3713  0007B2  ECCB  F017         	call	___wmul	;wreg free
  3714  0007B6  C00F  F063         	movff	?___wmul,__doprnt@width
  3715  0007BA  C010  F064         	movff	?___wmul+1,__doprnt@width+1
  3716                           
  3717                           ;doprnt.c: 601: width += *f++ - '0';
  3718  0007BE  0ED0               	movlw	208
  3719  0007C0  6E45               	movwf	??__doprnt& (0+255),c
  3720  0007C2  0EFF               	movlw	255
  3721  0007C4  6E46               	movwf	(??__doprnt+1)& (0+255),c
  3722  0007C6  C041  FFF6         	movff	__doprnt@f,tblptrl
  3723  0007CA  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3724  0007CE                     	if	0	;tblptru may be non-zero
  3725  0007CE                     	endif
  3726  0007CE                     	if	0	;tblptru may be non-zero
  3727  0007CE                     	endif
  3728  0007CE  0008               	tblrd		*
  3729  0007D0  50F5               	movf	tablat,w,c
  3730  0007D2  6E47               	movwf	(??__doprnt+2)& (0+255),c
  3731  0007D4  6A48               	clrf	(??__doprnt+3)& (0+255),c
  3732  0007D6  5045               	movf	??__doprnt,w,c
  3733  0007D8  2647               	addwf	??__doprnt+2,f,c
  3734  0007DA  5046               	movf	??__doprnt+1,w,c
  3735  0007DC  2248               	addwfc	??__doprnt+3,f,c
  3736  0007DE  5047               	movf	??__doprnt+2,w,c
  3737  0007E0  0100               	movlb	0	; () banked
  3738  0007E2  2763               	addwf	__doprnt@width& (0+255),f,b
  3739  0007E4  5048               	movf	??__doprnt+3,w,c
  3740  0007E6  0100               	movlb	0	; () banked
  3741  0007E8  2364               	addwfc	(__doprnt@width+1)& (0+255),f,b
  3742                           
  3743                           ; BSR set to: 0
  3744  0007EA  4A41               	infsnz	__doprnt@f,f,c
  3745  0007EC  2A42               	incf	__doprnt@f+1,f,c
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3749  0007EE  C041  FFF6         	movff	__doprnt@f,tblptrl
  3750  0007F2  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3751  0007F6                     	if	0	;tblptru may be non-zero
  3752  0007F6                     	endif
  3753  0007F6                     	if	0	;tblptru may be non-zero
  3754  0007F6                     	endif
  3755  0007F6  0008               	tblrd		*
  3756  0007F8  50F5               	movf	tablat,w,c
  3757  0007FA  EC21  F018         	call	_isdigit
  3758  0007FE  B0D8               	btfsc	status,0,c
  3759  000800  D7D0               	goto	i2l3212
  3760  000802                     i2l3220:
  3761                           
  3762                           ;doprnt.c: 608: }
  3763                           ;doprnt.c: 611: if(*f == '.') {
  3764  000802  C041  FFF6         	movff	__doprnt@f,tblptrl
  3765  000806  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3766  00080A                     	if	0	;tblptru may be non-zero
  3767  00080A                     	endif
  3768  00080A                     	if	0	;tblptru may be non-zero
  3769  00080A                     	endif
  3770  00080A  0008               	tblrd		*
  3771  00080C  50F5               	movf	tablat,w,c
  3772  00080E  0A2E               	xorlw	46
  3773  000810  A4D8               	btfss	status,2,c
  3774  000812  D032               	goto	i2l3232
  3775                           
  3776                           ;doprnt.c: 612: flag |= 0x4000;
  3777  000814  0100               	movlb	0	; () banked
  3778  000816  8D66               	bsf	(__doprnt@flag+1)& (0+255),6,b
  3779                           
  3780                           ;doprnt.c: 613: f++;
  3781  000818  4A41               	infsnz	__doprnt@f,f,c
  3782  00081A  2A42               	incf	__doprnt@f+1,f,c
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 620: {
  3786                           ;doprnt.c: 621: prec = 0;
  3787  00081C  0E00               	movlw	0
  3788  00081E  0100               	movlb	0	; () banked
  3789  000820  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  3790  000822  0E00               	movlw	0
  3791  000824  6F74               	movwf	__doprnt@prec& (0+255),b
  3792                           
  3793                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3794  000826  D01D               	goto	i2l3230
  3795  000828                     i2l3226:
  3796                           
  3797                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3798  000828  C074  F00F         	movff	__doprnt@prec,___wmul@multiplier
  3799  00082C  C075  F010         	movff	__doprnt@prec+1,___wmul@multiplier+1
  3800  000830  0E00               	movlw	0
  3801  000832  6E12               	movwf	___wmul@multiplicand+1,c
  3802  000834  0E0A               	movlw	10
  3803  000836  6E11               	movwf	___wmul@multiplicand,c
  3804  000838  ECCB  F017         	call	___wmul	;wreg free
  3805  00083C  C041  FFF6         	movff	__doprnt@f,tblptrl
  3806  000840  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3807  000844                     	if	0	;tblptru may be non-zero
  3808  000844                     	endif
  3809  000844                     	if	0	;tblptru may be non-zero
  3810  000844                     	endif
  3811  000844  0008               	tblrd		*
  3812  000846  50F5               	movf	tablat,w,c
  3813  000848  260F               	addwf	?___wmul,f,c
  3814  00084A  0E00               	movlw	0
  3815  00084C  2210               	addwfc	?___wmul+1,f,c
  3816  00084E  0ED0               	movlw	208
  3817  000850  240F               	addwf	?___wmul,w,c
  3818  000852  0100               	movlb	0	; () banked
  3819  000854  6F74               	movwf	__doprnt@prec& (0+255),b
  3820  000856  0EFF               	movlw	255
  3821  000858  2010               	addwfc	?___wmul+1,w,c
  3822  00085A  0100               	movlb	0	; () banked
  3823  00085C  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  3824                           
  3825                           ; BSR set to: 0
  3826  00085E  4A41               	infsnz	__doprnt@f,f,c
  3827  000860  2A42               	incf	__doprnt@f+1,f,c
  3828  000862                     i2l3230:
  3829                           
  3830                           ; BSR set to: 0
  3831  000862  C041  FFF6         	movff	__doprnt@f,tblptrl
  3832  000866  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3833  00086A                     	if	0	;tblptru may be non-zero
  3834  00086A                     	endif
  3835  00086A                     	if	0	;tblptru may be non-zero
  3836  00086A                     	endif
  3837  00086A  0008               	tblrd		*
  3838  00086C  50F5               	movf	tablat,w,c
  3839  00086E  EC21  F018         	call	_isdigit
  3840  000872  A0D8               	btfss	status,0,c
  3841  000874  D012               	goto	i2l3244
  3842  000876  D7D8               	goto	i2l3226
  3843  000878                     i2l3232:
  3844                           
  3845                           ;doprnt.c: 626: prec = 0;
  3846  000878  0E00               	movlw	0
  3847  00087A  0100               	movlb	0	; () banked
  3848  00087C  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  3849  00087E  0E00               	movlw	0
  3850  000880  6F74               	movwf	__doprnt@prec& (0+255),b
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 628: flag |= 0x1000;
  3854  000882  0100               	movlb	0	; () banked
  3855  000884  8966               	bsf	(__doprnt@flag+1)& (0+255),4,b
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;doprnt.c: 635: switch(c = *f++) {
  3859                           
  3860                           ;doprnt.c: 630: }
  3861                           ;doprnt.c: 633: loop:
  3862                           
  3863                           ; BSR set to: 0
  3864  000886  D009               	goto	i2l3244
  3865  000888                     i2l3236:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;doprnt.c: 643: flag |= 0x10;
  3869  000888  0100               	movlb	0	; () banked
  3870  00088A  8965               	bsf	__doprnt@flag& (0+255),4,b
  3871                           
  3872                           ;doprnt.c: 644: goto loop;
  3873  00088C  D006               	goto	i2l3244
  3874  00088E                     i2l3238:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;doprnt.c: 663: flag |= 0x400;
  3878  00088E  0100               	movlb	0	; () banked
  3879  000890  8566               	bsf	(__doprnt@flag+1)& (0+255),2,b
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 698: case 'i':
  3883                           ;doprnt.c: 699: break;
  3884                           
  3885                           ; BSR set to: 0
  3886                           
  3887                           ;doprnt.c: 697: case 'd':
  3888                           
  3889                           ;doprnt.c: 664: break;
  3890  000892  D023               	goto	i2l3246
  3891  000894                     i2l3240:
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;doprnt.c: 818: flag |= 0x40;
  3895  000894  0100               	movlb	0	; () banked
  3896  000896  8D65               	bsf	__doprnt@flag& (0+255),6,b
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 822: }
  3900                           
  3901                           ;doprnt.c: 819: break;
  3902  000898  D020               	goto	i2l3246
  3903  00089A                     i2l3244:
  3904  00089A  C041  FFF6         	movff	__doprnt@f,tblptrl
  3905  00089E  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  3906  0008A2  4A41               	infsnz	__doprnt@f,f,c
  3907  0008A4  2A42               	incf	__doprnt@f+1,f,c
  3908  0008A6                     	if	0	;tblptru may be non-zero
  3909  0008A6                     	endif
  3910  0008A6                     	if	0	;tblptru may be non-zero
  3911  0008A6                     	endif
  3912  0008A6  0008               	tblrd		*
  3913  0008A8  CFF5 F076          	movff	tablat,__doprnt@c
  3914  0008AC  0100               	movlb	0	; () banked
  3915  0008AE  5176               	movf	__doprnt@c& (0+255),w,b
  3916                           
  3917                           ; Switch size 1, requested type "space"
  3918                           ; Number of cases is 6, Range of values is 0 to 117
  3919                           ; switch strategies available:
  3920                           ; Name         Instructions Cycles
  3921                           ; simple_byte           19    10 (average)
  3922                           ;	Chosen strategy is simple_byte
  3923  0008B0  0A00               	xorlw	0	; case 0
  3924  0008B2  B4D8               	btfsc	status,2,c
  3925  0008B4  EF20  F00B         	goto	i2l3532
  3926  0008B8  0A64               	xorlw	100	; case 100
  3927  0008BA  B4D8               	btfsc	status,2,c
  3928  0008BC  D00E               	goto	i2l3246
  3929  0008BE  0A02               	xorlw	2	; case 102
  3930  0008C0  B4D8               	btfsc	status,2,c
  3931  0008C2  D7E5               	goto	i2l3238
  3932  0008C4  0A0F               	xorlw	15	; case 105
  3933  0008C6  B4D8               	btfsc	status,2,c
  3934  0008C8  D008               	goto	i2l3246
  3935  0008CA  0A05               	xorlw	5	; case 108
  3936  0008CC  B4D8               	btfsc	status,2,c
  3937  0008CE  D7DC               	goto	i2l3236
  3938  0008D0  0A19               	xorlw	25	; case 117
  3939  0008D2  B4D8               	btfsc	status,2,c
  3940  0008D4  D7DF               	goto	i2l3240
  3941  0008D6  EF12  F00B         	goto	i2l3530
  3942  0008DA                     i2l3246:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;doprnt.c: 825: if(flag & (0x700)) {
  3946  0008DA  0E07               	movlw	7
  3947  0008DC  0100               	movlb	0	; () banked
  3948  0008DE  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3949  0008E0  B4D8               	btfsc	status,2,c
  3950  0008E2  EFE9  F008         	goto	i2l414
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;doprnt.c: 827: if(flag & 0x1000)
  3954  0008E6  0100               	movlb	0	; () banked
  3955  0008E8  A966               	btfss	(__doprnt@flag+1)& (0+255),4,b
  3956  0008EA  D005               	goto	i2l3252
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;doprnt.c: 829: prec = 6;
  3960  0008EC  0E00               	movlw	0
  3961  0008EE  0100               	movlb	0	; () banked
  3962  0008F0  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  3963  0008F2  0E06               	movlw	6
  3964  0008F4  6F74               	movwf	__doprnt@prec& (0+255),b
  3965  0008F6                     i2l3252:
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3969  0008F6  C043  FFD9         	movff	__doprnt@ap,fsr2l
  3970  0008FA  C044  FFDA         	movff	__doprnt@ap+1,fsr2h
  3971  0008FE  CFDF F045          	movff	indf2,??__doprnt
  3972  000902  0E03               	movlw	3
  3973  000904  26DE               	addwf	postinc2,f,c
  3974  000906  CFDF F046          	movff	indf2,??__doprnt+1
  3975  00090A  0E00               	movlw	0
  3976  00090C  22DD               	addwfc	postdec2,f,c
  3977  00090E  C045  FFD9         	movff	??__doprnt,fsr2l
  3978  000912  C046  FFDA         	movff	??__doprnt+1,fsr2h
  3979  000916  CFDE F071          	movff	postinc2,__doprnt@fval
  3980  00091A  CFDE F072          	movff	postinc2,__doprnt@fval+1
  3981  00091E  CFDD F073          	movff	postdec2,__doprnt@fval+2
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;doprnt.c: 831: if(fval < 0.0) {
  3985  000922  0100               	movlb	0	; () banked
  3986  000924  AF73               	btfss	(__doprnt@fval+2)& (0+255),7,b
  3987  000926  D011               	goto	i2l3260
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;doprnt.c: 832: fval = -fval;
  3991  000928  C071  F001         	movff	__doprnt@fval,___ftneg@f1
  3992  00092C  C072  F002         	movff	__doprnt@fval+1,___ftneg@f1+1
  3993  000930  C073  F003         	movff	__doprnt@fval+2,___ftneg@f1+2
  3994  000934  ECF0  F017         	call	___ftneg	;wreg free
  3995  000938  C001  F071         	movff	?___ftneg,__doprnt@fval
  3996  00093C  C002  F072         	movff	?___ftneg+1,__doprnt@fval+1
  3997  000940  C003  F073         	movff	?___ftneg+2,__doprnt@fval+2
  3998                           
  3999                           ;doprnt.c: 833: flag |= 0x03;
  4000  000944  0E03               	movlw	3
  4001  000946  0100               	movlb	0	; () banked
  4002  000948  1365               	iorwf	__doprnt@flag& (0+255),f,b
  4003  00094A                     i2l3260:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;doprnt.c: 834: }
  4007                           ;doprnt.c: 835: exp = 0;
  4008  00094A  0E00               	movlw	0
  4009  00094C  0100               	movlb	0	; () banked
  4010  00094E  6F68               	movwf	(__doprnt@exp+1)& (0+255),b
  4011  000950  0E00               	movlw	0
  4012  000952  6F67               	movwf	__doprnt@exp& (0+255),b
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 836: if( fval!=0) {
  4016  000954  0100               	movlb	0	; () banked
  4017  000956  5171               	movf	__doprnt@fval& (0+255),w,b
  4018  000958  0100               	movlb	0	; () banked
  4019  00095A  1172               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  4020  00095C  0100               	movlb	0	; () banked
  4021  00095E  1173               	iorwf	(__doprnt@fval+2)& (0+255),w,b
  4022  000960  B4D8               	btfsc	status,2,c
  4023  000962  D08B               	goto	i2l3288
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4027  000964  0E82               	movlw	130
  4028  000966  6E45               	movwf	??__doprnt& (0+255),c
  4029  000968  0EFF               	movlw	255
  4030  00096A  6E46               	movwf	(??__doprnt+1)& (0+255),c
  4031  00096C  C071  F047         	movff	__doprnt@fval,??__doprnt+2
  4032  000970  C072  F048         	movff	__doprnt@fval+1,??__doprnt+3
  4033  000974  C073  F049         	movff	__doprnt@fval+2,??__doprnt+4
  4034  000978  C074  F04A         	movff	__doprnt@fval+3,??__doprnt+5
  4035  00097C  0E10               	movlw	16
  4036  00097E  D005               	goto	i2u334_40
  4037  000980                     i2u334_45:
  4038  000980  90D8               	bcf	status,0,c
  4039  000982  324A               	rrcf	??__doprnt+5,f,c
  4040  000984  3249               	rrcf	??__doprnt+4,f,c
  4041  000986  3248               	rrcf	??__doprnt+3,f,c
  4042  000988  3247               	rrcf	??__doprnt+2,f,c
  4043  00098A                     i2u334_40:
  4044  00098A  2EE8               	decfsz	wreg,f,c
  4045  00098C  D7F9               	goto	i2u334_45
  4046  00098E  5047               	movf	??__doprnt+2,w,c
  4047  000990  2445               	addwf	??__doprnt,w,c
  4048  000992  0100               	movlb	0	; () banked
  4049  000994  6F67               	movwf	__doprnt@exp& (0+255),b
  4050  000996  0E00               	movlw	0
  4051  000998  2046               	addwfc	??__doprnt+1,w,c
  4052  00099A  0100               	movlb	0	; () banked
  4053  00099C  6F68               	movwf	(__doprnt@exp+1)& (0+255),b
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;doprnt.c: 838: exp--;
  4057  00099E  0100               	movlb	0	; () banked
  4058  0009A0  0767               	decf	__doprnt@exp& (0+255),f,b
  4059  0009A2  A0D8               	btfss	status,0,c
  4060  0009A4  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;doprnt.c: 839: exp *= 3;
  4064  0009A6  C067  F00F         	movff	__doprnt@exp,___wmul@multiplier
  4065  0009AA  C068  F010         	movff	__doprnt@exp+1,___wmul@multiplier+1
  4066  0009AE  0E00               	movlw	0
  4067  0009B0  6E12               	movwf	___wmul@multiplicand+1,c
  4068  0009B2  0E03               	movlw	3
  4069  0009B4  6E11               	movwf	___wmul@multiplicand,c
  4070  0009B6  ECCB  F017         	call	___wmul	;wreg free
  4071  0009BA  C00F  F067         	movff	?___wmul,__doprnt@exp
  4072  0009BE  C010  F068         	movff	?___wmul+1,__doprnt@exp+1
  4073                           
  4074                           ;doprnt.c: 840: exp /= 10;
  4075  0009C2  C067  F007         	movff	__doprnt@exp,___awdiv@dividend
  4076  0009C6  C068  F008         	movff	__doprnt@exp+1,___awdiv@dividend+1
  4077  0009CA  0E00               	movlw	0
  4078  0009CC  6E0A               	movwf	___awdiv@divisor+1,c
  4079  0009CE  0E0A               	movlw	10
  4080  0009D0  6E09               	movwf	___awdiv@divisor,c
  4081  0009D2  EC97  F014         	call	___awdiv	;wreg free
  4082  0009D6  C007  F067         	movff	?___awdiv,__doprnt@exp
  4083  0009DA  C008  F068         	movff	?___awdiv+1,__doprnt@exp+1
  4084                           
  4085                           ;doprnt.c: 841: if(exp < 0)
  4086  0009DE  0100               	movlb	0	; () banked
  4087  0009E0  AF68               	btfss	(__doprnt@exp+1)& (0+255),7,b
  4088  0009E2  D004               	goto	i2l3276
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;doprnt.c: 842: exp--;
  4092  0009E4  0100               	movlb	0	; () banked
  4093  0009E6  0767               	decf	__doprnt@exp& (0+255),f,b
  4094  0009E8  A0D8               	btfss	status,0,c
  4095  0009EA  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4096  0009EC                     i2l3276:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4100  0009EC  0100               	movlb	0	; () banked
  4101  0009EE  5167               	movf	__doprnt@exp& (0+255),w,b
  4102  0009F0  0800               	sublw	0
  4103  0009F2  EC25  F00B         	call	_scale
  4104  0009F6  C030  F06D         	movff	?_scale,__doprnt@tmpval
  4105  0009FA  C031  F06E         	movff	?_scale+1,__doprnt@tmpval+1
  4106  0009FE  C032  F06F         	movff	?_scale+2,__doprnt@tmpval+2
  4107                           
  4108                           ;doprnt.c: 847: tmpval.integ *= fval;
  4109  000A02  C06D  F021         	movff	__doprnt@tmpval,___ftmul@f1
  4110  000A06  C06E  F022         	movff	__doprnt@tmpval+1,___ftmul@f1+1
  4111  000A0A  C06F  F023         	movff	__doprnt@tmpval+2,___ftmul@f1+2
  4112  000A0E  C071  F024         	movff	__doprnt@fval,___ftmul@f2
  4113  000A12  C072  F025         	movff	__doprnt@fval+1,___ftmul@f2+1
  4114  000A16  C073  F026         	movff	__doprnt@fval+2,___ftmul@f2+2
  4115  000A1A  EC91  F012         	call	___ftmul	;wreg free
  4116  000A1E  C021  F06D         	movff	?___ftmul,__doprnt@tmpval
  4117  000A22  C022  F06E         	movff	?___ftmul+1,__doprnt@tmpval+1
  4118  000A26  C023  F06F         	movff	?___ftmul+2,__doprnt@tmpval+2
  4119                           
  4120                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4121  000A2A  C06D  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4122  000A2E  C06E  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4123  000A32  C06F  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4124  000A36  0E00               	movlw	0
  4125  000A38  6E04               	movwf	___ftge@ff2,c
  4126  000A3A  0E80               	movlw	128
  4127  000A3C  6E05               	movwf	___ftge@ff2+1,c
  4128  000A3E  0E3F               	movlw	63
  4129  000A40  6E06               	movwf	___ftge@ff2+2,c
  4130  000A42  EC4F  F014         	call	___ftge	;wreg free
  4131  000A46  B0D8               	btfsc	status,0,c
  4132  000A48  D005               	goto	i2l3284
  4133                           
  4134                           ;doprnt.c: 849: exp--;
  4135  000A4A  0100               	movlb	0	; () banked
  4136  000A4C  0767               	decf	__doprnt@exp& (0+255),f,b
  4137  000A4E  A0D8               	btfss	status,0,c
  4138  000A50  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4139  000A52  D013               	goto	i2l3288
  4140  000A54                     i2l3284:
  4141                           
  4142                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4143  000A54  C06D  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4144  000A58  C06E  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4145  000A5C  C06F  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4146  000A60  0E00               	movlw	0
  4147  000A62  6E04               	movwf	___ftge@ff2,c
  4148  000A64  0E20               	movlw	32
  4149  000A66  6E05               	movwf	___ftge@ff2+1,c
  4150  000A68  0E41               	movlw	65
  4151  000A6A  6E06               	movwf	___ftge@ff2+2,c
  4152  000A6C  EC4F  F014         	call	___ftge	;wreg free
  4153  000A70  A0D8               	btfss	status,0,c
  4154  000A72  D003               	goto	i2l3288
  4155                           
  4156                           ;doprnt.c: 851: exp++;
  4157  000A74  0100               	movlb	0	; () banked
  4158  000A76  4B67               	infsnz	__doprnt@exp& (0+255),f,b
  4159  000A78  2B68               	incf	(__doprnt@exp+1)& (0+255),f,b
  4160  000A7A                     i2l3288:
  4161                           
  4162                           ;doprnt.c: 852: }
  4163                           ;doprnt.c: 1112: if(prec <= 12)
  4164  000A7A  0100               	movlb	0	; () banked
  4165  000A7C  BF75               	btfsc	(__doprnt@prec+1)& (0+255),7,b
  4166  000A7E  D008               	goto	i2l3290
  4167  000A80  0100               	movlb	0	; () banked
  4168  000A82  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  4169  000A84  E11D               	bnz	i2l3292
  4170  000A86  0E0D               	movlw	13
  4171  000A88  0100               	movlb	0	; () banked
  4172  000A8A  5D74               	subwf	__doprnt@prec& (0+255),w,b
  4173  000A8C  B0D8               	btfsc	status,0,c
  4174  000A8E  D018               	goto	i2l3292
  4175  000A90                     i2l3290:
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 1113: fval += fround(prec);
  4179  000A90  C071  F015         	movff	__doprnt@fval,___ftadd@f1
  4180  000A94  C072  F016         	movff	__doprnt@fval+1,___ftadd@f1+1
  4181  000A98  C073  F017         	movff	__doprnt@fval+2,___ftadd@f1+2
  4182  000A9C  0100               	movlb	0	; () banked
  4183  000A9E  5174               	movf	__doprnt@prec& (0+255),w,b
  4184  000AA0  EC1D  F00D         	call	_fround
  4185  000AA4  C030  F018         	movff	?_fround,___ftadd@f2
  4186  000AA8  C031  F019         	movff	?_fround+1,___ftadd@f2+1
  4187  000AAC  C032  F01A         	movff	?_fround+2,___ftadd@f2+2
  4188  000AB0  EC40  F00E         	call	___ftadd	;wreg free
  4189  000AB4  C015  F071         	movff	?___ftadd,__doprnt@fval
  4190  000AB8  C016  F072         	movff	?___ftadd+1,__doprnt@fval+1
  4191  000ABC  C017  F073         	movff	?___ftadd+2,__doprnt@fval+2
  4192  000AC0                     i2l3292:
  4193                           
  4194                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4195  000AC0  0100               	movlb	0	; () banked
  4196  000AC2  BF68               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4197  000AC4  D008               	goto	i2l3294
  4198  000AC6  0100               	movlb	0	; () banked
  4199  000AC8  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  4200  000ACA  E126               	bnz	i2l3300
  4201  000ACC  0E0A               	movlw	10
  4202  000ACE  0100               	movlb	0	; () banked
  4203  000AD0  5D67               	subwf	__doprnt@exp& (0+255),w,b
  4204  000AD2  B0D8               	btfsc	status,0,c
  4205  000AD4  D021               	goto	i2l3300
  4206  000AD6                     i2l3294:
  4207                           
  4208                           ; BSR set to: 0
  4209  000AD6  0100               	movlb	0	; () banked
  4210  000AD8  5171               	movf	__doprnt@fval& (0+255),w,b
  4211  000ADA  0100               	movlb	0	; () banked
  4212  000ADC  1172               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  4213  000ADE  0100               	movlb	0	; () banked
  4214  000AE0  1173               	iorwf	(__doprnt@fval+2)& (0+255),w,b
  4215  000AE2  B4D8               	btfsc	status,2,c
  4216  000AE4  D05B               	goto	i2l3314
  4217                           
  4218                           ; BSR set to: 0
  4219  000AE6  C071  F030         	movff	__doprnt@fval,___fttol@f1
  4220  000AEA  C072  F031         	movff	__doprnt@fval+1,___fttol@f1+1
  4221  000AEE  C073  F032         	movff	__doprnt@fval+2,___fttol@f1+2
  4222  000AF2  EC0B  F013         	call	___fttol	;wreg free
  4223  000AF6  5030               	movf	?___fttol,w,c
  4224  000AF8  1031               	iorwf	?___fttol+1,w,c
  4225  000AFA  1032               	iorwf	?___fttol+2,w,c
  4226  000AFC  1033               	iorwf	?___fttol+3,w,c
  4227  000AFE  A4D8               	btfss	status,2,c
  4228  000B00  D04D               	goto	i2l3314
  4229  000B02  0100               	movlb	0	; () banked
  4230  000B04  BF68               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4231  000B06  D04A               	goto	i2l3314
  4232  000B08  0100               	movlb	0	; () banked
  4233  000B0A  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  4234  000B0C  E105               	bnz	i2l3300
  4235  000B0E  0E02               	movlw	2
  4236  000B10  0100               	movlb	0	; () banked
  4237  000B12  5D67               	subwf	__doprnt@exp& (0+255),w,b
  4238  000B14  A0D8               	btfss	status,0,c
  4239  000B16  D042               	goto	i2l3314
  4240  000B18                     i2l3300:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4244  000B18  C06D  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4245  000B1C  C06E  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4246  000B20  C06F  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4247  000B24  0E70               	movlw	112
  4248  000B26  6E04               	movwf	___ftge@ff2,c
  4249  000B28  0E89               	movlw	137
  4250  000B2A  6E05               	movwf	___ftge@ff2+1,c
  4251  000B2C  0E40               	movlw	64
  4252  000B2E  6E06               	movwf	___ftge@ff2+2,c
  4253  000B30  EC4F  F014         	call	___ftge	;wreg free
  4254  000B34  B0D8               	btfsc	status,0,c
  4255  000B36  D003               	goto	i2l3304
  4256                           
  4257                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4258  000B38  0100               	movlb	0	; () banked
  4259  000B3A  0EF7               	movlw	247
  4260  000B3C  D002               	goto	L1
  4261  000B3E                     i2l3304:
  4262                           
  4263                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4264  000B3E  0100               	movlb	0	; () banked
  4265  000B40  0EF8               	movlw	248
  4266  000B42                     L1:
  4267  000B42  2767               	addwf	__doprnt@exp& (0+255),f,b
  4268  000B44  0EFF               	movlw	255
  4269  000B46  2368               	addwfc	(__doprnt@exp+1)& (0+255),f,b
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;doprnt.c: 1124: }
  4273                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4274                           
  4275                           ; BSR set to: 0
  4276  000B48  0100               	movlb	0	; () banked
  4277  000B4A  5167               	movf	__doprnt@exp& (0+255),w,b
  4278  000B4C  EC25  F00B         	call	_scale
  4279  000B50  C030  F06D         	movff	?_scale,__doprnt@tmpval
  4280  000B54  C031  F06E         	movff	?_scale+1,__doprnt@tmpval+1
  4281  000B58  C032  F06F         	movff	?_scale+2,__doprnt@tmpval+2
  4282                           
  4283                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4284  000B5C  C071  F001         	movff	__doprnt@fval,__tdiv_to_l_@f1
  4285  000B60  C072  F002         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
  4286  000B64  C073  F003         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
  4287  000B68  C06D  F004         	movff	__doprnt@tmpval,__tdiv_to_l_@f2
  4288  000B6C  C06E  F005         	movff	__doprnt@tmpval+1,__tdiv_to_l_@f2+1
  4289  000B70  C06F  F006         	movff	__doprnt@tmpval+2,__tdiv_to_l_@f2+2
  4290  000B74  EC64  F011         	call	__tdiv_to_l_	;wreg free
  4291  000B78  C001  F069         	movff	?__tdiv_to_l_,__doprnt@val
  4292  000B7C  C002  F06A         	movff	?__tdiv_to_l_+1,__doprnt@val+1
  4293  000B80  C003  F06B         	movff	?__tdiv_to_l_+2,__doprnt@val+2
  4294  000B84  C004  F06C         	movff	?__tdiv_to_l_+3,__doprnt@val+3
  4295                           
  4296                           ;doprnt.c: 1129: fval = 0.0;
  4297  000B88  0E00               	movlw	0
  4298  000B8A  0100               	movlb	0	; () banked
  4299  000B8C  6F71               	movwf	__doprnt@fval& (0+255),b
  4300  000B8E  0E00               	movlw	0
  4301  000B90  0100               	movlb	0	; () banked
  4302  000B92  6F72               	movwf	(__doprnt@fval+1)& (0+255),b
  4303  000B94  0E00               	movlw	0
  4304  000B96  0100               	movlb	0	; () banked
  4305  000B98  6F73               	movwf	(__doprnt@fval+2)& (0+255),b
  4306                           
  4307                           ;doprnt.c: 1130: } else {
  4308  000B9A  D033               	goto	i2l3318
  4309  000B9C                     i2l3314:
  4310                           
  4311                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4312  000B9C  C071  F030         	movff	__doprnt@fval,___fttol@f1
  4313  000BA0  C072  F031         	movff	__doprnt@fval+1,___fttol@f1+1
  4314  000BA4  C073  F032         	movff	__doprnt@fval+2,___fttol@f1+2
  4315  000BA8  EC0B  F013         	call	___fttol	;wreg free
  4316  000BAC  C030  F069         	movff	?___fttol,__doprnt@val
  4317  000BB0  C031  F06A         	movff	?___fttol+1,__doprnt@val+1
  4318  000BB4  C032  F06B         	movff	?___fttol+2,__doprnt@val+2
  4319  000BB8  C033  F06C         	movff	?___fttol+3,__doprnt@val+3
  4320                           
  4321                           ;doprnt.c: 1132: fval -= (double)val;
  4322  000BBC  C071  F021         	movff	__doprnt@fval,___ftsub@f1
  4323  000BC0  C072  F022         	movff	__doprnt@fval+1,___ftsub@f1+1
  4324  000BC4  C073  F023         	movff	__doprnt@fval+2,___ftsub@f1+2
  4325  000BC8  C069  F009         	movff	__doprnt@val,___lltoft@c
  4326  000BCC  C06A  F00A         	movff	__doprnt@val+1,___lltoft@c+1
  4327  000BD0  C06B  F00B         	movff	__doprnt@val+2,___lltoft@c+2
  4328  000BD4  C06C  F00C         	movff	__doprnt@val+3,___lltoft@c+3
  4329  000BD8  ECF0  F015         	call	___lltoft	;wreg free
  4330  000BDC  C009  F024         	movff	?___lltoft,___ftsub@f2
  4331  000BE0  C00A  F025         	movff	?___lltoft+1,___ftsub@f2+1
  4332  000BE4  C00B  F026         	movff	?___lltoft+2,___ftsub@f2+2
  4333  000BE8  ECCC  F016         	call	___ftsub	;wreg free
  4334  000BEC  C021  F071         	movff	?___ftsub,__doprnt@fval
  4335  000BF0  C022  F072         	movff	?___ftsub+1,__doprnt@fval+1
  4336  000BF4  C023  F073         	movff	?___ftsub+2,__doprnt@fval+2
  4337                           
  4338                           ;doprnt.c: 1133: exp = 0;
  4339  000BF8  0E00               	movlw	0
  4340  000BFA  0100               	movlb	0	; () banked
  4341  000BFC  6F68               	movwf	(__doprnt@exp+1)& (0+255),b
  4342  000BFE  0E00               	movlw	0
  4343  000C00  6F67               	movwf	__doprnt@exp& (0+255),b
  4344  000C02                     i2l3318:
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 1134: }
  4348                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4349  000C02  0E01               	movlw	1
  4350  000C04  0100               	movlb	0	; () banked
  4351  000C06  6F76               	movwf	__doprnt@c& (0+255),b
  4352  000C08                     i2l3320:
  4353                           
  4354                           ; BSR set to: 0
  4355  000C08  0E0A               	movlw	10
  4356  000C0A  0100               	movlb	0	; () banked
  4357  000C0C  1976               	xorwf	__doprnt@c& (0+255),w,b
  4358  000C0E  B4D8               	btfsc	status,2,c
  4359  000C10  D01E               	goto	i2l3332
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;doprnt.c: 1137: if(val < dpowers[c])
  4363                           
  4364                           ; BSR set to: 0
  4365                           
  4366                           ; BSR set to: 0
  4367  000C12  0100               	movlb	0	; () banked
  4368  000C14  5176               	movf	__doprnt@c& (0+255),w,b
  4369  000C16  0D04               	mullw	4
  4370  000C18  0E01               	movlw	low _dpowers
  4371  000C1A  24F3               	addwf	prodl,w,c
  4372  000C1C  6EF6               	movwf	tblptrl,c
  4373  000C1E  0E06               	movlw	high _dpowers
  4374  000C20  20F4               	addwfc	prodh,w,c
  4375  000C22  6EF7               	movwf	tblptrh,c
  4376  000C24                     	if	0	;There are less than 3 active tblptr bytes
  4377  000C24                     	endif
  4378  000C24  0009               	tblrd		*+
  4379  000C26  50F5               	movf	tablat,w,c
  4380  000C28  0100               	movlb	0	; () banked
  4381  000C2A  5D69               	subwf	__doprnt@val& (0+255),w,b
  4382  000C2C  0009               	tblrd		*+
  4383  000C2E  50F5               	movf	tablat,w,c
  4384  000C30  0100               	movlb	0	; () banked
  4385  000C32  596A               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4386  000C34  0009               	tblrd		*+
  4387  000C36  50F5               	movf	tablat,w,c
  4388  000C38  0100               	movlb	0	; () banked
  4389  000C3A  596B               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4390  000C3C  0009               	tblrd		*+
  4391  000C3E  50F5               	movf	tablat,w,c
  4392  000C40  0100               	movlb	0	; () banked
  4393  000C42  596C               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4394  000C44  A0D8               	btfss	status,0,c
  4395  000C46  D003               	goto	i2l3332
  4396                           
  4397                           ; BSR set to: 0
  4398                           
  4399                           ; BSR set to: 0
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;doprnt.c: 1138: break;
  4403  000C48  0100               	movlb	0	; () banked
  4404  000C4A  2B76               	incf	__doprnt@c& (0+255),f,b
  4405  000C4C  D7DD               	goto	i2l3320
  4406  000C4E                     i2l3332:
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;doprnt.c: 1142: width -= prec + c + exp;
  4410  000C4E  C076  F045         	movff	__doprnt@c,??__doprnt
  4411  000C52  6A46               	clrf	(??__doprnt+1)& (0+255),c
  4412  000C54  BE45               	btfsc	??__doprnt& (0+255),7,c
  4413  000C56  0646               	decf	(??__doprnt+1)& (0+255),f,c
  4414  000C58  0100               	movlb	0	; () banked
  4415  000C5A  5174               	movf	__doprnt@prec& (0+255),w,b
  4416  000C5C  2645               	addwf	??__doprnt,f,c
  4417  000C5E  0100               	movlb	0	; () banked
  4418  000C60  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  4419  000C62  2246               	addwfc	??__doprnt+1,f,c
  4420  000C64  0100               	movlb	0	; () banked
  4421  000C66  5167               	movf	__doprnt@exp& (0+255),w,b
  4422  000C68  2645               	addwf	??__doprnt,f,c
  4423  000C6A  0100               	movlb	0	; () banked
  4424  000C6C  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  4425  000C6E  2246               	addwfc	??__doprnt+1,f,c
  4426  000C70  5045               	movf	??__doprnt,w,c
  4427  000C72  0100               	movlb	0	; () banked
  4428  000C74  5F63               	subwf	__doprnt@width& (0+255),f,b
  4429  000C76  5046               	movf	??__doprnt+1,w,c
  4430  000C78  0100               	movlb	0	; () banked
  4431  000C7A  5B64               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4432                           
  4433                           ;doprnt.c: 1143: if(
  4434                           ;doprnt.c: 1147: prec)
  4435  000C7C  0100               	movlb	0	; () banked
  4436  000C7E  5174               	movf	__doprnt@prec& (0+255),w,b
  4437  000C80  0100               	movlb	0	; () banked
  4438  000C82  1175               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  4439  000C84  B4D8               	btfsc	status,2,c
  4440  000C86  D004               	goto	i2l3336
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;doprnt.c: 1148: width--;
  4444  000C88  0100               	movlb	0	; () banked
  4445  000C8A  0763               	decf	__doprnt@width& (0+255),f,b
  4446  000C8C  A0D8               	btfss	status,0,c
  4447  000C8E  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  4448  000C90                     i2l3336:
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;doprnt.c: 1149: if(flag & 0x03)
  4452  000C90  0E03               	movlw	3
  4453  000C92  0100               	movlb	0	; () banked
  4454  000C94  1565               	andwf	__doprnt@flag& (0+255),w,b
  4455  000C96  6E45               	movwf	??__doprnt& (0+255),c
  4456  000C98  0E00               	movlw	0
  4457  000C9A  0100               	movlb	0	; () banked
  4458  000C9C  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4459  000C9E  6E46               	movwf	(??__doprnt+1)& (0+255),c
  4460  000CA0  5045               	movf	??__doprnt,w,c
  4461  000CA2  1046               	iorwf	??__doprnt+1,w,c
  4462  000CA4  B4D8               	btfsc	status,2,c
  4463  000CA6  D037               	goto	i2l3350
  4464  000CA8  D032               	goto	i2l3348
  4465  000CAA                     i2l3340:
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;doprnt.c: 1181: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4469  000CAA  EE20 F002          	lfsr	2,2
  4470  000CAE  503F               	movf	__doprnt@pb,w,c
  4471  000CB0  26D9               	addwf	fsr2l,f,c
  4472  000CB2  5040               	movf	__doprnt@pb+1,w,c
  4473  000CB4  22DA               	addwfc	fsr2h,f,c
  4474  000CB6  50DE               	movf	postinc2,w,c
  4475  000CB8  10DE               	iorwf	postinc2,w,c
  4476  000CBA  B4D8               	btfsc	status,2,c
  4477  000CBC  D013               	goto	i2l3344
  4478                           
  4479                           ; BSR set to: 0
  4480  000CBE  EE20 F002          	lfsr	2,2
  4481  000CC2  503F               	movf	__doprnt@pb,w,c
  4482  000CC4  26D9               	addwf	fsr2l,f,c
  4483  000CC6  5040               	movf	__doprnt@pb+1,w,c
  4484  000CC8  22DA               	addwfc	fsr2h,f,c
  4485  000CCA  D801               	call	i2u350_48
  4486  000CCC  D020               	goto	i2l3348
  4487  000CCE                     i2u350_48:
  4488  000CCE  0005               	push	
  4489  000CD0  6EFA               	movwf	pclath,c
  4490  000CD2  50DE               	movf	postinc2,w,c
  4491  000CD4  6EFD               	movwf	tosl,c
  4492  000CD6  50DE               	movf	postinc2,w,c
  4493  000CD8  6EFE               	movwf	tosh,c
  4494  000CDA  50F8               	movf	tblptru,w,c
  4495  000CDC  6EFF               	movwf	tosu,c
  4496  000CDE  50FA               	movf	pclath,w,c
  4497  000CE0  0E20               	movlw	32
  4498  000CE2  0012               	return		;indir
  4499  000CE4                     i2l3344:
  4500  000CE4  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4501  000CE8  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4502  000CEC  CFDE F045          	movff	postinc2,??__doprnt
  4503  000CF0  CFDD F046          	movff	postdec2,??__doprnt+1
  4504  000CF4  C045  FFD9         	movff	??__doprnt,fsr2l
  4505  000CF8  C046  FFDA         	movff	??__doprnt+1,fsr2h
  4506  000CFC  0E20               	movlw	32
  4507  000CFE  6EDF               	movwf	indf2,c
  4508  000D00  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4509  000D04  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4510  000D08  2ADE               	incf	postinc2,f,c
  4511  000D0A  0E00               	movlw	0
  4512  000D0C  22DD               	addwfc	postdec2,f,c
  4513  000D0E                     i2l3348:
  4514                           
  4515                           ;doprnt.c: 1182: width--;
  4516  000D0E  0100               	movlb	0	; () banked
  4517  000D10  0763               	decf	__doprnt@width& (0+255),f,b
  4518  000D12  A0D8               	btfss	status,0,c
  4519  000D14  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  4520  000D16                     i2l3350:
  4521                           
  4522                           ; BSR set to: 0
  4523  000D16  0100               	movlb	0	; () banked
  4524  000D18  BF64               	btfsc	(__doprnt@width+1)& (0+255),7,b
  4525  000D1A  D007               	goto	i2l3352
  4526  000D1C  0100               	movlb	0	; () banked
  4527  000D1E  5164               	movf	(__doprnt@width+1)& (0+255),w,b
  4528  000D20  E1C4               	bnz	i2l3340
  4529  000D22  0100               	movlb	0	; () banked
  4530  000D24  0563               	decf	__doprnt@width& (0+255),w,b
  4531  000D26  B0D8               	btfsc	status,0,c
  4532  000D28  D7C0               	goto	i2l3340
  4533  000D2A                     i2l3352:
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;doprnt.c: 1183: }
  4537                           ;doprnt.c: 1188: if(flag & 0x03)
  4538  000D2A  0E03               	movlw	3
  4539  000D2C  0100               	movlb	0	; () banked
  4540  000D2E  1565               	andwf	__doprnt@flag& (0+255),w,b
  4541  000D30  6E45               	movwf	??__doprnt& (0+255),c
  4542  000D32  0E00               	movlw	0
  4543  000D34  0100               	movlb	0	; () banked
  4544  000D36  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4545  000D38  6E46               	movwf	(??__doprnt+1)& (0+255),c
  4546  000D3A  5045               	movf	??__doprnt,w,c
  4547  000D3C  1046               	iorwf	??__doprnt+1,w,c
  4548  000D3E  B4D8               	btfsc	status,2,c
  4549  000D40  D0A4               	goto	i2l3372
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;doprnt.c: 1190: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4553  000D42  EE20 F002          	lfsr	2,2
  4554  000D46  503F               	movf	__doprnt@pb,w,c
  4555  000D48  26D9               	addwf	fsr2l,f,c
  4556  000D4A  5040               	movf	__doprnt@pb+1,w,c
  4557  000D4C  22DA               	addwfc	fsr2h,f,c
  4558  000D4E  50DE               	movf	postinc2,w,c
  4559  000D50  10DE               	iorwf	postinc2,w,c
  4560  000D52  B4D8               	btfsc	status,2,c
  4561  000D54  D013               	goto	i2l3358
  4562                           
  4563                           ; BSR set to: 0
  4564  000D56  EE20 F002          	lfsr	2,2
  4565  000D5A  503F               	movf	__doprnt@pb,w,c
  4566  000D5C  26D9               	addwf	fsr2l,f,c
  4567  000D5E  5040               	movf	__doprnt@pb+1,w,c
  4568  000D60  22DA               	addwfc	fsr2h,f,c
  4569  000D62  D801               	call	i2u354_48
  4570  000D64  D092               	goto	i2l3372
  4571  000D66                     i2u354_48:
  4572  000D66  0005               	push	
  4573  000D68  6EFA               	movwf	pclath,c
  4574  000D6A  50DE               	movf	postinc2,w,c
  4575  000D6C  6EFD               	movwf	tosl,c
  4576  000D6E  50DE               	movf	postinc2,w,c
  4577  000D70  6EFE               	movwf	tosh,c
  4578  000D72  50F8               	movf	tblptru,w,c
  4579  000D74  6EFF               	movwf	tosu,c
  4580  000D76  50FA               	movf	pclath,w,c
  4581  000D78  0E2D               	movlw	45
  4582  000D7A  0012               	return		;indir
  4583  000D7C                     i2l3358:
  4584  000D7C  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4585  000D80  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4586  000D84  CFDE F045          	movff	postinc2,??__doprnt
  4587  000D88  CFDD F046          	movff	postdec2,??__doprnt+1
  4588  000D8C  C045  FFD9         	movff	??__doprnt,fsr2l
  4589  000D90  C046  FFDA         	movff	??__doprnt+1,fsr2h
  4590  000D94  0E2D               	movlw	45
  4591  000D96  D077               	goto	L2
  4592  000D98                     i2l3360:
  4593  000D98  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4594  000D9C  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4595  000DA0  2ADE               	incf	postinc2,f,c
  4596  000DA2  0E00               	movlw	0
  4597  000DA4  22DD               	addwfc	postdec2,f,c
  4598                           
  4599                           ;doprnt.c: 1195: }
  4600                           ;doprnt.c: 1196: while(c--) {
  4601  000DA6  D071               	goto	i2l3372
  4602  000DA8                     i2l3362:
  4603                           
  4604                           ;doprnt.c: 1200: {
  4605                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4606  000DA8  C069  F001         	movff	__doprnt@val,___lldiv@dividend
  4607  000DAC  C06A  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  4608  000DB0  C06B  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  4609  000DB4  C06C  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  4610  000DB8  0100               	movlb	0	; () banked
  4611  000DBA  5176               	movf	__doprnt@c& (0+255),w,b
  4612  000DBC  0D04               	mullw	4
  4613  000DBE  0E01               	movlw	low _dpowers
  4614  000DC0  24F3               	addwf	prodl,w,c
  4615  000DC2  6EF6               	movwf	tblptrl,c
  4616  000DC4  0E06               	movlw	high _dpowers
  4617  000DC6  20F4               	addwfc	prodh,w,c
  4618  000DC8  6EF7               	movwf	tblptrh,c
  4619  000DCA                     	if	0	;There are less than 3 active tblptr bytes
  4620  000DCA                     	endif
  4621  000DCA  0009               	tblrd		*+
  4622  000DCC  CFF5 F005          	movff	tablat,___lldiv@divisor
  4623  000DD0  0009               	tblrd		*+
  4624  000DD2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4625  000DD6  0009               	tblrd		*+
  4626  000DD8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4627  000DDC  000A               	tblrd		*-
  4628  000DDE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4629  000DE2  ECD9  F014         	call	___lldiv
  4630  000DE6  C001  F06D         	movff	?___lldiv,__doprnt@tmpval
  4631  000DEA  C002  F06E         	movff	?___lldiv+1,__doprnt@tmpval+1
  4632  000DEE  C003  F06F         	movff	?___lldiv+2,__doprnt@tmpval+2
  4633  000DF2  C004  F070         	movff	?___lldiv+3,__doprnt@tmpval+3
  4634                           
  4635                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4636  000DF6  C06D  F00E         	movff	__doprnt@tmpval,___llmod@dividend
  4637  000DFA  C06E  F00F         	movff	__doprnt@tmpval+1,___llmod@dividend+1
  4638  000DFE  C06F  F010         	movff	__doprnt@tmpval+2,___llmod@dividend+2
  4639  000E02  C070  F011         	movff	__doprnt@tmpval+3,___llmod@dividend+3
  4640  000E06  0E0A               	movlw	10
  4641  000E08  6E12               	movwf	___llmod@divisor,c
  4642  000E0A  0E00               	movlw	0
  4643  000E0C  6E13               	movwf	___llmod@divisor+1,c
  4644  000E0E  0E00               	movlw	0
  4645  000E10  6E14               	movwf	___llmod@divisor+2,c
  4646  000E12  0E00               	movlw	0
  4647  000E14  6E15               	movwf	___llmod@divisor+3,c
  4648  000E16  EC8E  F015         	call	___llmod	;wreg free
  4649  000E1A  C00E  F06D         	movff	?___llmod,__doprnt@tmpval
  4650  000E1E  C00F  F06E         	movff	?___llmod+1,__doprnt@tmpval+1
  4651  000E22  C010  F06F         	movff	?___llmod+2,__doprnt@tmpval+2
  4652  000E26  C011  F070         	movff	?___llmod+3,__doprnt@tmpval+3
  4653                           
  4654                           ;doprnt.c: 1203: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmp
      +                          val.vd));
  4655  000E2A  EE20 F002          	lfsr	2,2
  4656  000E2E  503F               	movf	__doprnt@pb,w,c
  4657  000E30  26D9               	addwf	fsr2l,f,c
  4658  000E32  5040               	movf	__doprnt@pb+1,w,c
  4659  000E34  22DA               	addwfc	fsr2h,f,c
  4660  000E36  50DE               	movf	postinc2,w,c
  4661  000E38  10DE               	iorwf	postinc2,w,c
  4662  000E3A  B4D8               	btfsc	status,2,c
  4663  000E3C  D015               	goto	i2l3370
  4664  000E3E  EE20 F002          	lfsr	2,2
  4665  000E42  503F               	movf	__doprnt@pb,w,c
  4666  000E44  26D9               	addwf	fsr2l,f,c
  4667  000E46  5040               	movf	__doprnt@pb+1,w,c
  4668  000E48  22DA               	addwfc	fsr2h,f,c
  4669  000E4A  D801               	call	i2u356_48
  4670  000E4C  D01E               	goto	i2l3372
  4671  000E4E                     i2u356_48:
  4672  000E4E  0005               	push	
  4673  000E50  6EFA               	movwf	pclath,c
  4674  000E52  50DE               	movf	postinc2,w,c
  4675  000E54  6EFD               	movwf	tosl,c
  4676  000E56  50DE               	movf	postinc2,w,c
  4677  000E58  6EFE               	movwf	tosh,c
  4678  000E5A  50F8               	movf	tblptru,w,c
  4679  000E5C  6EFF               	movwf	tosu,c
  4680  000E5E  50FA               	movf	pclath,w,c
  4681  000E60  0100               	movlb	0	; () banked
  4682  000E62  516D               	movf	__doprnt@tmpval& (0+255),w,b
  4683  000E64  0F30               	addlw	48
  4684  000E66  0012               	return		;indir
  4685  000E68                     i2l3370:
  4686  000E68  0100               	movlb	0	; () banked
  4687  000E6A  516D               	movf	__doprnt@tmpval& (0+255),w,b
  4688  000E6C  0F30               	addlw	48
  4689  000E6E  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4690  000E72  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4691  000E76  CFDE F045          	movff	postinc2,??__doprnt
  4692  000E7A  CFDD F046          	movff	postdec2,??__doprnt+1
  4693  000E7E  C045  FFD9         	movff	??__doprnt,fsr2l
  4694  000E82  C046  FFDA         	movff	??__doprnt+1,fsr2h
  4695  000E86                     L2:
  4696  000E86  6EDF               	movwf	indf2,c
  4697  000E88  D787               	goto	i2l3360
  4698  000E8A                     i2l3372:
  4699  000E8A  0100               	movlb	0	; () banked
  4700  000E8C  0776               	decf	__doprnt@c& (0+255),f,b
  4701  000E8E  0100               	movlb	0	; () banked
  4702  000E90  2976               	incf	__doprnt@c& (0+255),w,b
  4703  000E92  B4D8               	btfsc	status,2,c
  4704  000E94  D037               	goto	i2l3384
  4705  000E96  D788               	goto	i2l3362
  4706  000E98                     i2l3374:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;doprnt.c: 1208: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  4710  000E98  EE20 F002          	lfsr	2,2
  4711  000E9C  503F               	movf	__doprnt@pb,w,c
  4712  000E9E  26D9               	addwf	fsr2l,f,c
  4713  000EA0  5040               	movf	__doprnt@pb+1,w,c
  4714  000EA2  22DA               	addwfc	fsr2h,f,c
  4715  000EA4  50DE               	movf	postinc2,w,c
  4716  000EA6  10DE               	iorwf	postinc2,w,c
  4717  000EA8  B4D8               	btfsc	status,2,c
  4718  000EAA  D013               	goto	i2l3378
  4719                           
  4720                           ; BSR set to: 0
  4721  000EAC  EE20 F002          	lfsr	2,2
  4722  000EB0  503F               	movf	__doprnt@pb,w,c
  4723  000EB2  26D9               	addwf	fsr2l,f,c
  4724  000EB4  5040               	movf	__doprnt@pb+1,w,c
  4725  000EB6  22DA               	addwfc	fsr2h,f,c
  4726  000EB8  D801               	call	i2u359_48
  4727  000EBA  D020               	goto	i2l3382
  4728  000EBC                     i2u359_48:
  4729  000EBC  0005               	push	
  4730  000EBE  6EFA               	movwf	pclath,c
  4731  000EC0  50DE               	movf	postinc2,w,c
  4732  000EC2  6EFD               	movwf	tosl,c
  4733  000EC4  50DE               	movf	postinc2,w,c
  4734  000EC6  6EFE               	movwf	tosh,c
  4735  000EC8  50F8               	movf	tblptru,w,c
  4736  000ECA  6EFF               	movwf	tosu,c
  4737  000ECC  50FA               	movf	pclath,w,c
  4738  000ECE  0E30               	movlw	48
  4739  000ED0  0012               	return		;indir
  4740  000ED2                     i2l3378:
  4741  000ED2  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4742  000ED6  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4743  000EDA  CFDE F045          	movff	postinc2,??__doprnt
  4744  000EDE  CFDD F046          	movff	postdec2,??__doprnt+1
  4745  000EE2  C045  FFD9         	movff	??__doprnt,fsr2l
  4746  000EE6  C046  FFDA         	movff	??__doprnt+1,fsr2h
  4747  000EEA  0E30               	movlw	48
  4748  000EEC  6EDF               	movwf	indf2,c
  4749  000EEE  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4750  000EF2  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4751  000EF6  2ADE               	incf	postinc2,f,c
  4752  000EF8  0E00               	movlw	0
  4753  000EFA  22DD               	addwfc	postdec2,f,c
  4754  000EFC                     i2l3382:
  4755                           
  4756                           ;doprnt.c: 1209: exp--;
  4757  000EFC  0100               	movlb	0	; () banked
  4758  000EFE  0767               	decf	__doprnt@exp& (0+255),f,b
  4759  000F00  A0D8               	btfss	status,0,c
  4760  000F02  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4761  000F04                     i2l3384:
  4762                           
  4763                           ; BSR set to: 0
  4764  000F04  0100               	movlb	0	; () banked
  4765  000F06  BF68               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4766  000F08  D007               	goto	i2l3386
  4767  000F0A  0100               	movlb	0	; () banked
  4768  000F0C  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  4769  000F0E  E1C4               	bnz	i2l3374
  4770  000F10  0100               	movlb	0	; () banked
  4771  000F12  0567               	decf	__doprnt@exp& (0+255),w,b
  4772  000F14  B0D8               	btfsc	status,0,c
  4773  000F16  D7C0               	goto	i2l3374
  4774  000F18                     i2l3386:
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;doprnt.c: 1210: }
  4778                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4779  000F18  0100               	movlb	0	; () banked
  4780  000F1A  BF75               	btfsc	(__doprnt@prec+1)& (0+255),7,b
  4781  000F1C  D00C               	goto	i2l456
  4782  000F1E  0100               	movlb	0	; () banked
  4783  000F20  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  4784  000F22  E105               	bnz	i2u361_40
  4785  000F24  0E09               	movlw	9
  4786  000F26  0100               	movlb	0	; () banked
  4787  000F28  5D74               	subwf	__doprnt@prec& (0+255),w,b
  4788  000F2A  A0D8               	btfss	status,0,c
  4789  000F2C  D004               	goto	i2l456
  4790  000F2E                     i2u361_40:
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4794  000F2E  0E08               	movlw	8
  4795  000F30  0100               	movlb	0	; () banked
  4796  000F32  6F76               	movwf	__doprnt@c& (0+255),b
  4797  000F34  D002               	goto	i2l3390
  4798  000F36                     i2l456:
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;doprnt.c: 1213: else
  4802                           ;doprnt.c: 1214: c = prec;
  4803  000F36  C074  F076         	movff	__doprnt@prec,__doprnt@c
  4804  000F3A                     i2l3390:
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;doprnt.c: 1215: prec -= c;
  4808  000F3A  0100               	movlb	0	; () banked
  4809  000F3C  5176               	movf	__doprnt@c& (0+255),w,b
  4810  000F3E  0100               	movlb	0	; () banked
  4811  000F40  5F74               	subwf	__doprnt@prec& (0+255),f,b
  4812  000F42  0E00               	movlw	0
  4813  000F44  0100               	movlb	0	; () banked
  4814  000F46  BF76               	btfsc	__doprnt@c& (0+255),7,b
  4815  000F48  0EFF               	movlw	255
  4816  000F4A  0100               	movlb	0	; () banked
  4817  000F4C  5B75               	subwfb	(__doprnt@prec+1)& (0+255),f,b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 1219: if(c)
  4821  000F4E  0100               	movlb	0	; () banked
  4822  000F50  5176               	movf	__doprnt@c& (0+255),w,b
  4823  000F52  0100               	movlb	0	; () banked
  4824  000F54  B4D8               	btfsc	status,2,c
  4825  000F56  D032               	goto	i2l3402
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;doprnt.c: 1221: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
  4829  000F58  EE20 F002          	lfsr	2,2
  4830  000F5C  503F               	movf	__doprnt@pb,w,c
  4831  000F5E  26D9               	addwf	fsr2l,f,c
  4832  000F60  5040               	movf	__doprnt@pb+1,w,c
  4833  000F62  22DA               	addwfc	fsr2h,f,c
  4834  000F64  50DE               	movf	postinc2,w,c
  4835  000F66  10DE               	iorwf	postinc2,w,c
  4836  000F68  B4D8               	btfsc	status,2,c
  4837  000F6A  D013               	goto	i2l3398
  4838                           
  4839                           ; BSR set to: 0
  4840  000F6C  EE20 F002          	lfsr	2,2
  4841  000F70  503F               	movf	__doprnt@pb,w,c
  4842  000F72  26D9               	addwf	fsr2l,f,c
  4843  000F74  5040               	movf	__doprnt@pb+1,w,c
  4844  000F76  22DA               	addwfc	fsr2h,f,c
  4845  000F78  D801               	call	i2u364_48
  4846  000F7A  D020               	goto	i2l3402
  4847  000F7C                     i2u364_48:
  4848  000F7C  0005               	push	
  4849  000F7E  6EFA               	movwf	pclath,c
  4850  000F80  50DE               	movf	postinc2,w,c
  4851  000F82  6EFD               	movwf	tosl,c
  4852  000F84  50DE               	movf	postinc2,w,c
  4853  000F86  6EFE               	movwf	tosh,c
  4854  000F88  50F8               	movf	tblptru,w,c
  4855  000F8A  6EFF               	movwf	tosu,c
  4856  000F8C  50FA               	movf	pclath,w,c
  4857  000F8E  0E2E               	movlw	46
  4858  000F90  0012               	return		;indir
  4859  000F92                     i2l3398:
  4860  000F92  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4861  000F96  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4862  000F9A  CFDE F045          	movff	postinc2,??__doprnt
  4863  000F9E  CFDD F046          	movff	postdec2,??__doprnt+1
  4864  000FA2  C045  FFD9         	movff	??__doprnt,fsr2l
  4865  000FA6  C046  FFDA         	movff	??__doprnt+1,fsr2h
  4866  000FAA  0E2E               	movlw	46
  4867  000FAC  6EDF               	movwf	indf2,c
  4868  000FAE  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4869  000FB2  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4870  000FB6  2ADE               	incf	postinc2,f,c
  4871  000FB8  0E00               	movlw	0
  4872  000FBA  22DD               	addwfc	postdec2,f,c
  4873  000FBC                     i2l3402:
  4874                           
  4875                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4876  000FBC  0100               	movlb	0	; () banked
  4877  000FBE  5176               	movf	__doprnt@c& (0+255),w,b
  4878  000FC0  EC25  F00B         	call	_scale
  4879  000FC4  C030  F060         	movff	?_scale,__doprnt$1658
  4880  000FC8  C031  F061         	movff	?_scale+1,__doprnt$1658+1
  4881  000FCC  C032  F062         	movff	?_scale+2,__doprnt$1658+2
  4882                           
  4883                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4884  000FD0  C071  F024         	movff	__doprnt@fval,___ftmul@f2
  4885  000FD4  C072  F025         	movff	__doprnt@fval+1,___ftmul@f2+1
  4886  000FD8  C073  F026         	movff	__doprnt@fval+2,___ftmul@f2+2
  4887  000FDC  C060  F021         	movff	__doprnt$1658,___ftmul@f1
  4888  000FE0  C061  F022         	movff	__doprnt$1658+1,___ftmul@f1+1
  4889  000FE4  C062  F023         	movff	__doprnt$1658+2,___ftmul@f1+2
  4890  000FE8  EC91  F012         	call	___ftmul	;wreg free
  4891  000FEC  C021  F030         	movff	?___ftmul,___fttol@f1
  4892  000FF0  C022  F031         	movff	?___ftmul+1,___fttol@f1+1
  4893  000FF4  C023  F032         	movff	?___ftmul+2,___fttol@f1+2
  4894  000FF8  EC0B  F013         	call	___fttol	;wreg free
  4895  000FFC  C030  F069         	movff	?___fttol,__doprnt@val
  4896  001000  C031  F06A         	movff	?___fttol+1,__doprnt@val+1
  4897  001004  C032  F06B         	movff	?___fttol+2,__doprnt@val+2
  4898  001008  C033  F06C         	movff	?___fttol+3,__doprnt@val+3
  4899                           
  4900                           ;doprnt.c: 1228: while(c--) {
  4901  00100C  D09E               	goto	i2l3418
  4902  00100E                     i2l3406:
  4903                           
  4904                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4905  00100E  C069  F001         	movff	__doprnt@val,___lldiv@dividend
  4906  001012  C06A  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  4907  001016  C06B  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  4908  00101A  C06C  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  4909  00101E  0100               	movlb	0	; () banked
  4910  001020  5176               	movf	__doprnt@c& (0+255),w,b
  4911  001022  0D04               	mullw	4
  4912  001024  0E01               	movlw	low _dpowers
  4913  001026  24F3               	addwf	prodl,w,c
  4914  001028  6EF6               	movwf	tblptrl,c
  4915  00102A  0E06               	movlw	high _dpowers
  4916  00102C  20F4               	addwfc	prodh,w,c
  4917  00102E  6EF7               	movwf	tblptrh,c
  4918  001030                     	if	0	;There are less than 3 active tblptr bytes
  4919  001030                     	endif
  4920  001030  0009               	tblrd		*+
  4921  001032  CFF5 F005          	movff	tablat,___lldiv@divisor
  4922  001036  0009               	tblrd		*+
  4923  001038  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4924  00103C  0009               	tblrd		*+
  4925  00103E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4926  001042  000A               	tblrd		*-
  4927  001044  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4928  001048  ECD9  F014         	call	___lldiv	;wreg free
  4929  00104C  C001  F06D         	movff	?___lldiv,__doprnt@tmpval
  4930  001050  C002  F06E         	movff	?___lldiv+1,__doprnt@tmpval+1
  4931  001054  C003  F06F         	movff	?___lldiv+2,__doprnt@tmpval+2
  4932  001058  C004  F070         	movff	?___lldiv+3,__doprnt@tmpval+3
  4933                           
  4934                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4935  00105C  C06D  F00E         	movff	__doprnt@tmpval,___llmod@dividend
  4936  001060  C06E  F00F         	movff	__doprnt@tmpval+1,___llmod@dividend+1
  4937  001064  C06F  F010         	movff	__doprnt@tmpval+2,___llmod@dividend+2
  4938  001068  C070  F011         	movff	__doprnt@tmpval+3,___llmod@dividend+3
  4939  00106C  0E0A               	movlw	10
  4940  00106E  6E12               	movwf	___llmod@divisor,c
  4941  001070  0E00               	movlw	0
  4942  001072  6E13               	movwf	___llmod@divisor+1,c
  4943  001074  0E00               	movlw	0
  4944  001076  6E14               	movwf	___llmod@divisor+2,c
  4945  001078  0E00               	movlw	0
  4946  00107A  6E15               	movwf	___llmod@divisor+3,c
  4947  00107C  EC8E  F015         	call	___llmod	;wreg free
  4948  001080  C00E  F06D         	movff	?___llmod,__doprnt@tmpval
  4949  001084  C00F  F06E         	movff	?___llmod+1,__doprnt@tmpval+1
  4950  001088  C010  F06F         	movff	?___llmod+2,__doprnt@tmpval+2
  4951  00108C  C011  F070         	movff	?___llmod+3,__doprnt@tmpval+3
  4952                           
  4953                           ;doprnt.c: 1231: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmp
      +                          val.vd));
  4954  001090  EE20 F002          	lfsr	2,2
  4955  001094  503F               	movf	__doprnt@pb,w,c
  4956  001096  26D9               	addwf	fsr2l,f,c
  4957  001098  5040               	movf	__doprnt@pb+1,w,c
  4958  00109A  22DA               	addwfc	fsr2h,f,c
  4959  00109C  50DE               	movf	postinc2,w,c
  4960  00109E  10DE               	iorwf	postinc2,w,c
  4961  0010A0  B4D8               	btfsc	status,2,c
  4962  0010A2  D015               	goto	i2l3414
  4963  0010A4  EE20 F002          	lfsr	2,2
  4964  0010A8  503F               	movf	__doprnt@pb,w,c
  4965  0010AA  26D9               	addwf	fsr2l,f,c
  4966  0010AC  5040               	movf	__doprnt@pb+1,w,c
  4967  0010AE  22DA               	addwfc	fsr2h,f,c
  4968  0010B0  D801               	call	i2u366_48
  4969  0010B2  D024               	goto	i2l3416
  4970  0010B4                     i2u366_48:
  4971  0010B4  0005               	push	
  4972  0010B6  6EFA               	movwf	pclath,c
  4973  0010B8  50DE               	movf	postinc2,w,c
  4974  0010BA  6EFD               	movwf	tosl,c
  4975  0010BC  50DE               	movf	postinc2,w,c
  4976  0010BE  6EFE               	movwf	tosh,c
  4977  0010C0  50F8               	movf	tblptru,w,c
  4978  0010C2  6EFF               	movwf	tosu,c
  4979  0010C4  50FA               	movf	pclath,w,c
  4980  0010C6  0100               	movlb	0	; () banked
  4981  0010C8  516D               	movf	__doprnt@tmpval& (0+255),w,b
  4982  0010CA  0F30               	addlw	48
  4983  0010CC  0012               	return		;indir
  4984  0010CE                     i2l3414:
  4985  0010CE  0100               	movlb	0	; () banked
  4986  0010D0  516D               	movf	__doprnt@tmpval& (0+255),w,b
  4987  0010D2  0F30               	addlw	48
  4988  0010D4  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4989  0010D8  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4990  0010DC  CFDE F045          	movff	postinc2,??__doprnt
  4991  0010E0  CFDD F046          	movff	postdec2,??__doprnt+1
  4992  0010E4  C045  FFD9         	movff	??__doprnt,fsr2l
  4993  0010E8  C046  FFDA         	movff	??__doprnt+1,fsr2h
  4994  0010EC  6EDF               	movwf	indf2,c
  4995  0010EE  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  4996  0010F2  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  4997  0010F6  2ADE               	incf	postinc2,f,c
  4998  0010F8  0E00               	movlw	0
  4999  0010FA  22DD               	addwfc	postdec2,f,c
  5000  0010FC                     i2l3416:
  5001                           
  5002                           ;doprnt.c: 1232: val %= dpowers[c];
  5003  0010FC  C069  F00E         	movff	__doprnt@val,___llmod@dividend
  5004  001100  C06A  F00F         	movff	__doprnt@val+1,___llmod@dividend+1
  5005  001104  C06B  F010         	movff	__doprnt@val+2,___llmod@dividend+2
  5006  001108  C06C  F011         	movff	__doprnt@val+3,___llmod@dividend+3
  5007  00110C  0100               	movlb	0	; () banked
  5008  00110E  5176               	movf	__doprnt@c& (0+255),w,b
  5009  001110  0D04               	mullw	4
  5010  001112  0E01               	movlw	low _dpowers
  5011  001114  24F3               	addwf	prodl,w,c
  5012  001116  6EF6               	movwf	tblptrl,c
  5013  001118  0E06               	movlw	high _dpowers
  5014  00111A  20F4               	addwfc	prodh,w,c
  5015  00111C  6EF7               	movwf	tblptrh,c
  5016  00111E                     	if	0	;There are less than 3 active tblptr bytes
  5017  00111E                     	endif
  5018  00111E  0009               	tblrd		*+
  5019  001120  CFF5 F012          	movff	tablat,___llmod@divisor
  5020  001124  0009               	tblrd		*+
  5021  001126  CFF5 F013          	movff	tablat,___llmod@divisor+1
  5022  00112A  0009               	tblrd		*+
  5023  00112C  CFF5 F014          	movff	tablat,___llmod@divisor+2
  5024  001130  000A               	tblrd		*-
  5025  001132  CFF5 F015          	movff	tablat,___llmod@divisor+3
  5026  001136  EC8E  F015         	call	___llmod
  5027  00113A  C00E  F069         	movff	?___llmod,__doprnt@val
  5028  00113E  C00F  F06A         	movff	?___llmod+1,__doprnt@val+1
  5029  001142  C010  F06B         	movff	?___llmod+2,__doprnt@val+2
  5030  001146  C011  F06C         	movff	?___llmod+3,__doprnt@val+3
  5031  00114A                     i2l3418:
  5032  00114A  0100               	movlb	0	; () banked
  5033  00114C  0776               	decf	__doprnt@c& (0+255),f,b
  5034  00114E  0100               	movlb	0	; () banked
  5035  001150  2976               	incf	__doprnt@c& (0+255),w,b
  5036  001152  B4D8               	btfsc	status,2,c
  5037  001154  D037               	goto	i2l3430
  5038  001156  D75B               	goto	i2l3406
  5039  001158                     i2l3420:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;doprnt.c: 1236: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5043  001158  EE20 F002          	lfsr	2,2
  5044  00115C  503F               	movf	__doprnt@pb,w,c
  5045  00115E  26D9               	addwf	fsr2l,f,c
  5046  001160  5040               	movf	__doprnt@pb+1,w,c
  5047  001162  22DA               	addwfc	fsr2h,f,c
  5048  001164  50DE               	movf	postinc2,w,c
  5049  001166  10DE               	iorwf	postinc2,w,c
  5050  001168  B4D8               	btfsc	status,2,c
  5051  00116A  D013               	goto	i2l3424
  5052                           
  5053                           ; BSR set to: 0
  5054  00116C  EE20 F002          	lfsr	2,2
  5055  001170  503F               	movf	__doprnt@pb,w,c
  5056  001172  26D9               	addwf	fsr2l,f,c
  5057  001174  5040               	movf	__doprnt@pb+1,w,c
  5058  001176  22DA               	addwfc	fsr2h,f,c
  5059  001178  D801               	call	i2u369_48
  5060  00117A  D020               	goto	i2l3428
  5061  00117C                     i2u369_48:
  5062  00117C  0005               	push	
  5063  00117E  6EFA               	movwf	pclath,c
  5064  001180  50DE               	movf	postinc2,w,c
  5065  001182  6EFD               	movwf	tosl,c
  5066  001184  50DE               	movf	postinc2,w,c
  5067  001186  6EFE               	movwf	tosh,c
  5068  001188  50F8               	movf	tblptru,w,c
  5069  00118A  6EFF               	movwf	tosu,c
  5070  00118C  50FA               	movf	pclath,w,c
  5071  00118E  0E30               	movlw	48
  5072  001190  0012               	return		;indir
  5073  001192                     i2l3424:
  5074  001192  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5075  001196  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5076  00119A  CFDE F045          	movff	postinc2,??__doprnt
  5077  00119E  CFDD F046          	movff	postdec2,??__doprnt+1
  5078  0011A2  C045  FFD9         	movff	??__doprnt,fsr2l
  5079  0011A6  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5080  0011AA  0E30               	movlw	48
  5081  0011AC  6EDF               	movwf	indf2,c
  5082  0011AE  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5083  0011B2  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5084  0011B6  2ADE               	incf	postinc2,f,c
  5085  0011B8  0E00               	movlw	0
  5086  0011BA  22DD               	addwfc	postdec2,f,c
  5087  0011BC                     i2l3428:
  5088                           
  5089                           ;doprnt.c: 1237: prec--;
  5090  0011BC  0100               	movlb	0	; () banked
  5091  0011BE  0774               	decf	__doprnt@prec& (0+255),f,b
  5092  0011C0  A0D8               	btfss	status,0,c
  5093  0011C2  0775               	decf	(__doprnt@prec+1)& (0+255),f,b
  5094  0011C4                     i2l3430:
  5095                           
  5096                           ; BSR set to: 0
  5097  0011C4  0100               	movlb	0	; () banked
  5098  0011C6  5174               	movf	__doprnt@prec& (0+255),w,b
  5099  0011C8  0100               	movlb	0	; () banked
  5100  0011CA  1175               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5101  0011CC  B4D8               	btfsc	status,2,c
  5102  0011CE  D22A               	goto	i2l3530
  5103  0011D0  D7C3               	goto	i2l3420
  5104  0011D2                     i2l414:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;doprnt.c: 1246: }
  5108                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5109  0011D2  0100               	movlb	0	; () banked
  5110  0011D4  BD65               	btfsc	__doprnt@flag& (0+255),6,b
  5111  0011D6  D046               	goto	i2l471
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;doprnt.c: 1253: {
  5115                           ;doprnt.c: 1255: if(flag & 0x10)
  5116  0011D8  0100               	movlb	0	; () banked
  5117  0011DA  A965               	btfss	__doprnt@flag& (0+255),4,b
  5118  0011DC  D019               	goto	i2l3436
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5122  0011DE  C043  FFD9         	movff	__doprnt@ap,fsr2l
  5123  0011E2  C044  FFDA         	movff	__doprnt@ap+1,fsr2h
  5124  0011E6  CFDF F045          	movff	indf2,??__doprnt
  5125  0011EA  0E04               	movlw	4
  5126  0011EC  26DE               	addwf	postinc2,f,c
  5127  0011EE  CFDF F046          	movff	indf2,??__doprnt+1
  5128  0011F2  0E00               	movlw	0
  5129  0011F4  22DD               	addwfc	postdec2,f,c
  5130  0011F6  C045  FFD9         	movff	??__doprnt,fsr2l
  5131  0011FA  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5132  0011FE  CFDE F069          	movff	postinc2,__doprnt@val
  5133  001202  CFDE F06A          	movff	postinc2,__doprnt@val+1
  5134  001206  CFDE F06B          	movff	postinc2,__doprnt@val+2
  5135  00120A  CFDE F06C          	movff	postinc2,__doprnt@val+3
  5136  00120E  D01A               	goto	i2l3438
  5137  001210                     i2l3436:
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;doprnt.c: 1257: else
  5141                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5142  001210  C043  FFD9         	movff	__doprnt@ap,fsr2l
  5143  001214  C044  FFDA         	movff	__doprnt@ap+1,fsr2h
  5144  001218  CFDF F045          	movff	indf2,??__doprnt
  5145  00121C  0E02               	movlw	2
  5146  00121E  26DE               	addwf	postinc2,f,c
  5147  001220  CFDF F046          	movff	indf2,??__doprnt+1
  5148  001224  0E00               	movlw	0
  5149  001226  22DD               	addwfc	postdec2,f,c
  5150  001228  C045  FFD9         	movff	??__doprnt,fsr2l
  5151  00122C  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5152  001230  CFDE F069          	movff	postinc2,__doprnt@val
  5153  001234  CFDD F06A          	movff	postdec2,__doprnt@val+1
  5154  001238  0100               	movlb	0	; () banked
  5155  00123A  0E00               	movlw	0
  5156  00123C  BF6A               	btfsc	(__doprnt@val+1)& (0+255),7,b
  5157  00123E  0EFF               	movlw	-1
  5158  001240  6F6B               	movwf	(__doprnt@val+2)& (0+255),b
  5159  001242  6F6C               	movwf	(__doprnt@val+3)& (0+255),b
  5160  001244                     i2l3438:
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;doprnt.c: 1261: if((long)val < 0) {
  5164  001244  0100               	movlb	0	; () banked
  5165  001246  AF6C               	btfss	(__doprnt@val+3)& (0+255),7,b
  5166  001248  D044               	goto	i2l3448
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;doprnt.c: 1262: flag |= 0x03;
  5170  00124A  0E03               	movlw	3
  5171  00124C  0100               	movlb	0	; () banked
  5172  00124E  1365               	iorwf	__doprnt@flag& (0+255),f,b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;doprnt.c: 1263: val = -val;
  5176  001250  0100               	movlb	0	; () banked
  5177  001252  1F6C               	comf	(__doprnt@val+3)& (0+255),f,b
  5178  001254  1F6B               	comf	(__doprnt@val+2)& (0+255),f,b
  5179  001256  1F6A               	comf	(__doprnt@val+1)& (0+255),f,b
  5180  001258  6D69               	negf	__doprnt@val& (0+255),b
  5181  00125A  0E00               	movlw	0
  5182  00125C  236A               	addwfc	(__doprnt@val+1)& (0+255),f,b
  5183  00125E  236B               	addwfc	(__doprnt@val+2)& (0+255),f,b
  5184  001260  236C               	addwfc	(__doprnt@val+3)& (0+255),f,b
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;doprnt.c: 1264: }
  5188                           ;doprnt.c: 1266: }
  5189  001262  D037               	goto	i2l3448
  5190  001264                     i2l471:
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;doprnt.c: 1268: else
  5194                           ;doprnt.c: 1273: {
  5195                           ;doprnt.c: 1281: if(flag & 0x10)
  5196  001264  0100               	movlb	0	; () banked
  5197  001266  A965               	btfss	__doprnt@flag& (0+255),4,b
  5198  001268  D019               	goto	i2l3446
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5202  00126A  C043  FFD9         	movff	__doprnt@ap,fsr2l
  5203  00126E  C044  FFDA         	movff	__doprnt@ap+1,fsr2h
  5204  001272  CFDF F045          	movff	indf2,??__doprnt
  5205  001276  0E04               	movlw	4
  5206  001278  26DE               	addwf	postinc2,f,c
  5207  00127A  CFDF F046          	movff	indf2,??__doprnt+1
  5208  00127E  0E00               	movlw	0
  5209  001280  22DD               	addwfc	postdec2,f,c
  5210  001282  C045  FFD9         	movff	??__doprnt,fsr2l
  5211  001286  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5212  00128A  CFDE F069          	movff	postinc2,__doprnt@val
  5213  00128E  CFDE F06A          	movff	postinc2,__doprnt@val+1
  5214  001292  CFDE F06B          	movff	postinc2,__doprnt@val+2
  5215  001296  CFDE F06C          	movff	postinc2,__doprnt@val+3
  5216  00129A  D01B               	goto	i2l3448
  5217  00129C                     i2l3446:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;doprnt.c: 1283: else
  5221                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5222  00129C  C043  FFD9         	movff	__doprnt@ap,fsr2l
  5223  0012A0  C044  FFDA         	movff	__doprnt@ap+1,fsr2h
  5224  0012A4  CFDF F045          	movff	indf2,??__doprnt
  5225  0012A8  0E02               	movlw	2
  5226  0012AA  26DE               	addwf	postinc2,f,c
  5227  0012AC  CFDF F046          	movff	indf2,??__doprnt+1
  5228  0012B0  0E00               	movlw	0
  5229  0012B2  22DD               	addwfc	postdec2,f,c
  5230  0012B4  C045  FFD9         	movff	??__doprnt,fsr2l
  5231  0012B8  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5232  0012BC  CFDE F047          	movff	postinc2,??__doprnt+2
  5233  0012C0  CFDD F048          	movff	postdec2,??__doprnt+3
  5234  0012C4  C047  F069         	movff	??__doprnt+2,__doprnt@val
  5235  0012C8  C048  F06A         	movff	??__doprnt+3,__doprnt@val+1
  5236  0012CC  0100               	movlb	0	; () banked
  5237  0012CE  6B6B               	clrf	(__doprnt@val+2)& (0+255),b
  5238  0012D0  6B6C               	clrf	(__doprnt@val+3)& (0+255),b
  5239  0012D2                     i2l3448:
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;doprnt.c: 1287: }
  5243                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5244  0012D2  0100               	movlb	0	; () banked
  5245  0012D4  5174               	movf	__doprnt@prec& (0+255),w,b
  5246  0012D6  0100               	movlb	0	; () banked
  5247  0012D8  1175               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5248  0012DA  A4D8               	btfss	status,2,c
  5249  0012DC  D00D               	goto	i2l3454
  5250                           
  5251                           ; BSR set to: 0
  5252  0012DE  0100               	movlb	0	; () banked
  5253  0012E0  5169               	movf	__doprnt@val& (0+255),w,b
  5254  0012E2  0100               	movlb	0	; () banked
  5255  0012E4  116A               	iorwf	(__doprnt@val+1)& (0+255),w,b
  5256  0012E6  0100               	movlb	0	; () banked
  5257  0012E8  116B               	iorwf	(__doprnt@val+2)& (0+255),w,b
  5258  0012EA  0100               	movlb	0	; () banked
  5259  0012EC  116C               	iorwf	(__doprnt@val+3)& (0+255),w,b
  5260  0012EE  A4D8               	btfss	status,2,c
  5261  0012F0  D003               	goto	i2l3454
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;doprnt.c: 1291: prec++;
  5265  0012F2  0100               	movlb	0	; () banked
  5266  0012F4  4B74               	infsnz	__doprnt@prec& (0+255),f,b
  5267  0012F6  2B75               	incf	(__doprnt@prec+1)& (0+255),f,b
  5268  0012F8                     i2l3454:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5272  0012F8  0E01               	movlw	1
  5273  0012FA  0100               	movlb	0	; () banked
  5274  0012FC  6F76               	movwf	__doprnt@c& (0+255),b
  5275  0012FE                     i2l3456:
  5276                           
  5277                           ; BSR set to: 0
  5278  0012FE  0E0A               	movlw	10
  5279  001300  0100               	movlb	0	; () banked
  5280  001302  1976               	xorwf	__doprnt@c& (0+255),w,b
  5281  001304  B4D8               	btfsc	status,2,c
  5282  001306  D01E               	goto	i2l3468
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;doprnt.c: 1306: if(val < dpowers[c])
  5286                           
  5287                           ; BSR set to: 0
  5288                           
  5289                           ; BSR set to: 0
  5290  001308  0100               	movlb	0	; () banked
  5291  00130A  5176               	movf	__doprnt@c& (0+255),w,b
  5292  00130C  0D04               	mullw	4
  5293  00130E  0E01               	movlw	low _dpowers
  5294  001310  24F3               	addwf	prodl,w,c
  5295  001312  6EF6               	movwf	tblptrl,c
  5296  001314  0E06               	movlw	high _dpowers
  5297  001316  20F4               	addwfc	prodh,w,c
  5298  001318  6EF7               	movwf	tblptrh,c
  5299  00131A                     	if	0	;There are less than 3 active tblptr bytes
  5300  00131A                     	endif
  5301  00131A  0009               	tblrd		*+
  5302  00131C  50F5               	movf	tablat,w,c
  5303  00131E  0100               	movlb	0	; () banked
  5304  001320  5D69               	subwf	__doprnt@val& (0+255),w,b
  5305  001322  0009               	tblrd		*+
  5306  001324  50F5               	movf	tablat,w,c
  5307  001326  0100               	movlb	0	; () banked
  5308  001328  596A               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5309  00132A  0009               	tblrd		*+
  5310  00132C  50F5               	movf	tablat,w,c
  5311  00132E  0100               	movlb	0	; () banked
  5312  001330  596B               	subwfb	(__doprnt@val+2)& (0+255),w,b
  5313  001332  0009               	tblrd		*+
  5314  001334  50F5               	movf	tablat,w,c
  5315  001336  0100               	movlb	0	; () banked
  5316  001338  596C               	subwfb	(__doprnt@val+3)& (0+255),w,b
  5317  00133A  A0D8               	btfss	status,0,c
  5318  00133C  D003               	goto	i2l3468
  5319                           
  5320                           ; BSR set to: 0
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;doprnt.c: 1307: break;
  5326  00133E  0100               	movlb	0	; () banked
  5327  001340  2B76               	incf	__doprnt@c& (0+255),f,b
  5328  001342  D7DD               	goto	i2l3456
  5329  001344                     i2l3468:
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;doprnt.c: 1339: if(c < prec)
  5333  001344  0E80               	movlw	128
  5334  001346  0100               	movlb	0	; () banked
  5335  001348  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5336  00134A  0E7F               	movlw	127
  5337  00134C  6E45               	movwf	??__doprnt& (0+255),c
  5338  00134E  0100               	movlb	0	; () banked
  5339  001350  5174               	movf	__doprnt@prec& (0+255),w,b
  5340  001352  0100               	movlb	0	; () banked
  5341  001354  5D76               	subwf	__doprnt@c& (0+255),w,b
  5342  001356  0100               	movlb	0	; () banked
  5343  001358  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5344  00135A  0A80               	xorlw	128
  5345  00135C  5845               	subwfb	??__doprnt& (0+255),w,c
  5346  00135E  B0D8               	btfsc	status,0,c
  5347  001360  D003               	goto	i2l3472
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;doprnt.c: 1340: c = prec;
  5351  001362  C074  F076         	movff	__doprnt@prec,__doprnt@c
  5352  001366  D016               	goto	i2l3476
  5353  001368                     i2l3472:
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;doprnt.c: 1341: else if(prec < c)
  5357  001368  0100               	movlb	0	; () banked
  5358  00136A  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5359  00136C  0A80               	xorlw	128
  5360  00136E  6E45               	movwf	??__doprnt& (0+255),c
  5361  001370  0100               	movlb	0	; () banked
  5362  001372  5176               	movf	__doprnt@c& (0+255),w,b
  5363  001374  0100               	movlb	0	; () banked
  5364  001376  5D74               	subwf	__doprnt@prec& (0+255),w,b
  5365  001378  0E80               	movlw	128
  5366  00137A  0100               	movlb	0	; () banked
  5367  00137C  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5368  00137E  0E7F               	movlw	127
  5369  001380  5845               	subwfb	??__doprnt& (0+255),w,c
  5370  001382  B0D8               	btfsc	status,0,c
  5371  001384  D007               	goto	i2l3476
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 1342: prec = c;
  5375  001386  0100               	movlb	0	; () banked
  5376  001388  5176               	movf	__doprnt@c& (0+255),w,b
  5377  00138A  0100               	movlb	0	; () banked
  5378  00138C  6F74               	movwf	__doprnt@prec& (0+255),b
  5379  00138E  6B75               	clrf	(__doprnt@prec+1)& (0+255),b
  5380  001390  BF74               	btfsc	__doprnt@prec& (0+255),7,b
  5381  001392  0775               	decf	(__doprnt@prec+1)& (0+255),f,b
  5382  001394                     i2l3476:
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5386  001394  0100               	movlb	0	; () banked
  5387  001396  5163               	movf	__doprnt@width& (0+255),w,b
  5388  001398  0100               	movlb	0	; () banked
  5389  00139A  1164               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5390  00139C  B4D8               	btfsc	status,2,c
  5391  00139E  D010               	goto	i2l3482
  5392                           
  5393                           ; BSR set to: 0
  5394  0013A0  0E03               	movlw	3
  5395  0013A2  0100               	movlb	0	; () banked
  5396  0013A4  1565               	andwf	__doprnt@flag& (0+255),w,b
  5397  0013A6  6E45               	movwf	??__doprnt& (0+255),c
  5398  0013A8  0E00               	movlw	0
  5399  0013AA  0100               	movlb	0	; () banked
  5400  0013AC  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5401  0013AE  6E46               	movwf	(??__doprnt+1)& (0+255),c
  5402  0013B0  5045               	movf	??__doprnt,w,c
  5403  0013B2  1046               	iorwf	??__doprnt+1,w,c
  5404  0013B4  B4D8               	btfsc	status,2,c
  5405  0013B6  D004               	goto	i2l3482
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;doprnt.c: 1346: width--;
  5409  0013B8  0100               	movlb	0	; () banked
  5410  0013BA  0763               	decf	__doprnt@width& (0+255),f,b
  5411  0013BC  A0D8               	btfss	status,0,c
  5412  0013BE  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  5413  0013C0                     i2l3482:
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5417  0013C0  0100               	movlb	0	; () banked
  5418  0013C2  AD66               	btfss	(__doprnt@flag+1)& (0+255),6,b
  5419  0013C4  D01C               	goto	i2l3490
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;doprnt.c: 1349: if(width > prec)
  5423  0013C6  0100               	movlb	0	; () banked
  5424  0013C8  5163               	movf	__doprnt@width& (0+255),w,b
  5425  0013CA  0100               	movlb	0	; () banked
  5426  0013CC  5D74               	subwf	__doprnt@prec& (0+255),w,b
  5427  0013CE  0100               	movlb	0	; () banked
  5428  0013D0  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5429  0013D2  0A80               	xorlw	128
  5430  0013D4  6E45               	movwf	??__doprnt& (0+255),c
  5431  0013D6  0100               	movlb	0	; () banked
  5432  0013D8  5164               	movf	(__doprnt@width+1)& (0+255),w,b
  5433  0013DA  0A80               	xorlw	128
  5434  0013DC  5845               	subwfb	??__doprnt& (0+255),w,c
  5435  0013DE  B0D8               	btfsc	status,0,c
  5436  0013E0  D009               	goto	i2l3488
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;doprnt.c: 1350: width -= prec;
  5440  0013E2  0100               	movlb	0	; () banked
  5441  0013E4  5174               	movf	__doprnt@prec& (0+255),w,b
  5442  0013E6  0100               	movlb	0	; () banked
  5443  0013E8  5F63               	subwf	__doprnt@width& (0+255),f,b
  5444  0013EA  0100               	movlb	0	; () banked
  5445  0013EC  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5446  0013EE  0100               	movlb	0	; () banked
  5447  0013F0  5B64               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5448  0013F2  D005               	goto	i2l3490
  5449  0013F4                     i2l3488:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1351: else
  5453                           ;doprnt.c: 1352: width = 0;
  5454  0013F4  0E00               	movlw	0
  5455  0013F6  0100               	movlb	0	; () banked
  5456  0013F8  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  5457  0013FA  0E00               	movlw	0
  5458  0013FC  6F63               	movwf	__doprnt@width& (0+255),b
  5459  0013FE                     i2l3490:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;doprnt.c: 1353: }
  5463                           ;doprnt.c: 1381: if(width > c)
  5464  0013FE  0E80               	movlw	128
  5465  001400  0100               	movlb	0	; () banked
  5466  001402  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5467  001404  0E7F               	movlw	127
  5468  001406  6E45               	movwf	??__doprnt& (0+255),c
  5469  001408  0100               	movlb	0	; () banked
  5470  00140A  5163               	movf	__doprnt@width& (0+255),w,b
  5471  00140C  0100               	movlb	0	; () banked
  5472  00140E  5D76               	subwf	__doprnt@c& (0+255),w,b
  5473  001410  0100               	movlb	0	; () banked
  5474  001412  5164               	movf	(__doprnt@width+1)& (0+255),w,b
  5475  001414  0A80               	xorlw	128
  5476  001416  5845               	subwfb	??__doprnt& (0+255),w,c
  5477  001418  B0D8               	btfsc	status,0,c
  5478  00141A  D00B               	goto	i2l3494
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 1382: width -= c;
  5482  00141C  0100               	movlb	0	; () banked
  5483  00141E  5176               	movf	__doprnt@c& (0+255),w,b
  5484  001420  0100               	movlb	0	; () banked
  5485  001422  5F63               	subwf	__doprnt@width& (0+255),f,b
  5486  001424  0E00               	movlw	0
  5487  001426  0100               	movlb	0	; () banked
  5488  001428  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5489  00142A  0EFF               	movlw	255
  5490  00142C  0100               	movlb	0	; () banked
  5491  00142E  5B64               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5492  001430  D005               	goto	i2l3496
  5493  001432                     i2l3494:
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;doprnt.c: 1383: else
  5497                           ;doprnt.c: 1384: width = 0;
  5498  001432  0E00               	movlw	0
  5499  001434  0100               	movlb	0	; () banked
  5500  001436  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  5501  001438  0E00               	movlw	0
  5502  00143A  6F63               	movwf	__doprnt@width& (0+255),b
  5503  00143C                     i2l3496:
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;doprnt.c: 1422: {
  5507                           ;doprnt.c: 1424: if(width
  5508                           ;doprnt.c: 1428: )
  5509  00143C  0100               	movlb	0	; () banked
  5510  00143E  5163               	movf	__doprnt@width& (0+255),w,b
  5511  001440  0100               	movlb	0	; () banked
  5512  001442  1164               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5513  001444  B4D8               	btfsc	status,2,c
  5514  001446  D03C               	goto	i2l3508
  5515  001448                     i2l3498:
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5519  001448  EE20 F002          	lfsr	2,2
  5520  00144C  503F               	movf	__doprnt@pb,w,c
  5521  00144E  26D9               	addwf	fsr2l,f,c
  5522  001450  5040               	movf	__doprnt@pb+1,w,c
  5523  001452  22DA               	addwfc	fsr2h,f,c
  5524  001454  50DE               	movf	postinc2,w,c
  5525  001456  10DE               	iorwf	postinc2,w,c
  5526  001458  B4D8               	btfsc	status,2,c
  5527  00145A  D013               	goto	i2l3502
  5528                           
  5529                           ; BSR set to: 0
  5530  00145C  EE20 F002          	lfsr	2,2
  5531  001460  503F               	movf	__doprnt@pb,w,c
  5532  001462  26D9               	addwf	fsr2l,f,c
  5533  001464  5040               	movf	__doprnt@pb+1,w,c
  5534  001466  22DA               	addwfc	fsr2h,f,c
  5535  001468  D801               	call	i2u389_48
  5536  00146A  D020               	goto	i2l3506
  5537  00146C                     i2u389_48:
  5538  00146C  0005               	push	
  5539  00146E  6EFA               	movwf	pclath,c
  5540  001470  50DE               	movf	postinc2,w,c
  5541  001472  6EFD               	movwf	tosl,c
  5542  001474  50DE               	movf	postinc2,w,c
  5543  001476  6EFE               	movwf	tosh,c
  5544  001478  50F8               	movf	tblptru,w,c
  5545  00147A  6EFF               	movwf	tosu,c
  5546  00147C  50FA               	movf	pclath,w,c
  5547  00147E  0E20               	movlw	32
  5548  001480  0012               	return		;indir
  5549  001482                     i2l3502:
  5550  001482  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5551  001486  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5552  00148A  CFDE F045          	movff	postinc2,??__doprnt
  5553  00148E  CFDD F046          	movff	postdec2,??__doprnt+1
  5554  001492  C045  FFD9         	movff	??__doprnt,fsr2l
  5555  001496  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5556  00149A  0E20               	movlw	32
  5557  00149C  6EDF               	movwf	indf2,c
  5558  00149E  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5559  0014A2  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5560  0014A6  2ADE               	incf	postinc2,f,c
  5561  0014A8  0E00               	movlw	0
  5562  0014AA  22DD               	addwfc	postdec2,f,c
  5563  0014AC                     i2l3506:
  5564                           
  5565                           ;doprnt.c: 1431: while(--width);
  5566  0014AC  0100               	movlb	0	; () banked
  5567  0014AE  0763               	decf	__doprnt@width& (0+255),f,b
  5568  0014B0  A0D8               	btfss	status,0,c
  5569  0014B2  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  5570  0014B4  0100               	movlb	0	; () banked
  5571  0014B6  5163               	movf	__doprnt@width& (0+255),w,b
  5572  0014B8  0100               	movlb	0	; () banked
  5573  0014BA  1164               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5574  0014BC  A4D8               	btfss	status,2,c
  5575  0014BE  D7C4               	goto	i2l3498
  5576  0014C0                     i2l3508:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 1438: if(flag & 0x03)
  5580  0014C0  0E03               	movlw	3
  5581  0014C2  0100               	movlb	0	; () banked
  5582  0014C4  1565               	andwf	__doprnt@flag& (0+255),w,b
  5583  0014C6  6E45               	movwf	??__doprnt& (0+255),c
  5584  0014C8  0E00               	movlw	0
  5585  0014CA  0100               	movlb	0	; () banked
  5586  0014CC  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5587  0014CE  6E46               	movwf	(??__doprnt+1)& (0+255),c
  5588  0014D0  5045               	movf	??__doprnt,w,c
  5589  0014D2  1046               	iorwf	??__doprnt+1,w,c
  5590  0014D4  B4D8               	btfsc	status,2,c
  5591  0014D6  D09B               	goto	i2l3528
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5595  0014D8  EE20 F002          	lfsr	2,2
  5596  0014DC  503F               	movf	__doprnt@pb,w,c
  5597  0014DE  26D9               	addwf	fsr2l,f,c
  5598  0014E0  5040               	movf	__doprnt@pb+1,w,c
  5599  0014E2  22DA               	addwfc	fsr2h,f,c
  5600  0014E4  50DE               	movf	postinc2,w,c
  5601  0014E6  10DE               	iorwf	postinc2,w,c
  5602  0014E8  B4D8               	btfsc	status,2,c
  5603  0014EA  D013               	goto	i2l3514
  5604                           
  5605                           ; BSR set to: 0
  5606  0014EC  EE20 F002          	lfsr	2,2
  5607  0014F0  503F               	movf	__doprnt@pb,w,c
  5608  0014F2  26D9               	addwf	fsr2l,f,c
  5609  0014F4  5040               	movf	__doprnt@pb+1,w,c
  5610  0014F6  22DA               	addwfc	fsr2h,f,c
  5611  0014F8  D801               	call	i2u393_48
  5612  0014FA  D089               	goto	i2l3528
  5613  0014FC                     i2u393_48:
  5614  0014FC  0005               	push	
  5615  0014FE  6EFA               	movwf	pclath,c
  5616  001500  50DE               	movf	postinc2,w,c
  5617  001502  6EFD               	movwf	tosl,c
  5618  001504  50DE               	movf	postinc2,w,c
  5619  001506  6EFE               	movwf	tosh,c
  5620  001508  50F8               	movf	tblptru,w,c
  5621  00150A  6EFF               	movwf	tosu,c
  5622  00150C  50FA               	movf	pclath,w,c
  5623  00150E  0E2D               	movlw	45
  5624  001510  0012               	return		;indir
  5625  001512                     i2l3514:
  5626  001512  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5627  001516  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5628  00151A  CFDE F045          	movff	postinc2,??__doprnt
  5629  00151E  CFDD F046          	movff	postdec2,??__doprnt+1
  5630  001522  C045  FFD9         	movff	??__doprnt,fsr2l
  5631  001526  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5632  00152A  0E2D               	movlw	45
  5633  00152C  6EDF               	movwf	indf2,c
  5634  00152E  D068               	goto	i2l3526
  5635  001530                     i2l3518:
  5636                           
  5637                           ;doprnt.c: 1478: {
  5638                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5639  001530  C074  F045         	movff	__doprnt@prec,??__doprnt
  5640  001534  C075  F046         	movff	__doprnt@prec+1,??__doprnt+1
  5641  001538  90D8               	bcf	status,0,c
  5642  00153A  3645               	rlcf	??__doprnt,f,c
  5643  00153C  3646               	rlcf	??__doprnt+1,f,c
  5644  00153E  90D8               	bcf	status,0,c
  5645  001540  3645               	rlcf	??__doprnt,f,c
  5646  001542  3646               	rlcf	??__doprnt+1,f,c
  5647  001544  0E01               	movlw	low _dpowers
  5648  001546  2445               	addwf	??__doprnt,w,c
  5649  001548  6EF6               	movwf	tblptrl,c
  5650  00154A  0E06               	movlw	high _dpowers
  5651  00154C  2046               	addwfc	??__doprnt+1,w,c
  5652  00154E  6EF7               	movwf	tblptrh,c
  5653  001550                     	if	0	;There are less than 3 active tblptr bytes
  5654  001550                     	endif
  5655  001550  0009               	tblrd		*+
  5656  001552  CFF5 F005          	movff	tablat,___lldiv@divisor
  5657  001556  0009               	tblrd		*+
  5658  001558  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5659  00155C  0009               	tblrd		*+
  5660  00155E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5661  001562  000A               	tblrd		*-
  5662  001564  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5663  001568  C069  F001         	movff	__doprnt@val,___lldiv@dividend
  5664  00156C  C06A  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  5665  001570  C06B  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  5666  001574  C06C  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  5667  001578  ECD9  F014         	call	___lldiv
  5668  00157C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5669  001580  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5670  001584  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5671  001588  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5672  00158C  0E0A               	movlw	10
  5673  00158E  6E12               	movwf	___llmod@divisor,c
  5674  001590  0E00               	movlw	0
  5675  001592  6E13               	movwf	___llmod@divisor+1,c
  5676  001594  0E00               	movlw	0
  5677  001596  6E14               	movwf	___llmod@divisor+2,c
  5678  001598  0E00               	movlw	0
  5679  00159A  6E15               	movwf	___llmod@divisor+3,c
  5680  00159C  EC8E  F015         	call	___llmod	;wreg free
  5681  0015A0  500E               	movf	?___llmod,w,c
  5682  0015A2  0F30               	addlw	48
  5683  0015A4  0100               	movlb	0	; () banked
  5684  0015A6  6F76               	movwf	__doprnt@c& (0+255),b
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;doprnt.c: 1523: }
  5688                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5689  0015A8  EE20 F002          	lfsr	2,2
  5690  0015AC  503F               	movf	__doprnt@pb,w,c
  5691  0015AE  26D9               	addwf	fsr2l,f,c
  5692  0015B0  5040               	movf	__doprnt@pb+1,w,c
  5693  0015B2  22DA               	addwfc	fsr2h,f,c
  5694  0015B4  50DE               	movf	postinc2,w,c
  5695  0015B6  10DE               	iorwf	postinc2,w,c
  5696  0015B8  B4D8               	btfsc	status,2,c
  5697  0015BA  D014               	goto	i2l3524
  5698                           
  5699                           ; BSR set to: 0
  5700  0015BC  EE20 F002          	lfsr	2,2
  5701  0015C0  503F               	movf	__doprnt@pb,w,c
  5702  0015C2  26D9               	addwf	fsr2l,f,c
  5703  0015C4  5040               	movf	__doprnt@pb+1,w,c
  5704  0015C6  22DA               	addwfc	fsr2h,f,c
  5705  0015C8  D801               	call	i2u395_48
  5706  0015CA  D021               	goto	i2l3528
  5707  0015CC                     i2u395_48:
  5708  0015CC  0005               	push	
  5709  0015CE  6EFA               	movwf	pclath,c
  5710  0015D0  50DE               	movf	postinc2,w,c
  5711  0015D2  6EFD               	movwf	tosl,c
  5712  0015D4  50DE               	movf	postinc2,w,c
  5713  0015D6  6EFE               	movwf	tosh,c
  5714  0015D8  50F8               	movf	tblptru,w,c
  5715  0015DA  6EFF               	movwf	tosu,c
  5716  0015DC  50FA               	movf	pclath,w,c
  5717  0015DE  0100               	movlb	0	; () banked
  5718  0015E0  5176               	movf	__doprnt@c& (0+255),w,b
  5719  0015E2  0012               	return		;indir
  5720  0015E4                     i2l3524:
  5721  0015E4  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5722  0015E8  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5723  0015EC  CFDE F045          	movff	postinc2,??__doprnt
  5724  0015F0  CFDD F046          	movff	postdec2,??__doprnt+1
  5725  0015F4  C045  FFD9         	movff	??__doprnt,fsr2l
  5726  0015F8  C046  FFDA         	movff	??__doprnt+1,fsr2h
  5727  0015FC  C076  FFDF         	movff	__doprnt@c,indf2
  5728  001600                     i2l3526:
  5729  001600  C03F  FFD9         	movff	__doprnt@pb,fsr2l
  5730  001604  C040  FFDA         	movff	__doprnt@pb+1,fsr2h
  5731  001608  2ADE               	incf	postinc2,f,c
  5732  00160A  0E00               	movlw	0
  5733  00160C  22DD               	addwfc	postdec2,f,c
  5734  00160E                     i2l3528:
  5735  00160E  0100               	movlb	0	; () banked
  5736  001610  0774               	decf	__doprnt@prec& (0+255),f,b
  5737  001612  A0D8               	btfss	status,0,c
  5738  001614  0775               	decf	(__doprnt@prec+1)& (0+255),f,b
  5739  001616  0100               	movlb	0	; () banked
  5740  001618  2974               	incf	__doprnt@prec& (0+255),w,b
  5741  00161A  E18A               	bnz	i2l3518
  5742  00161C  0100               	movlb	0	; () banked
  5743  00161E  2975               	incf	(__doprnt@prec+1)& (0+255),w,b
  5744  001620  A4D8               	btfss	status,2,c
  5745  001622  D786               	goto	i2l3518
  5746  001624                     i2l3530:
  5747  001624  C041  FFF6         	movff	__doprnt@f,tblptrl
  5748  001628  C042  FFF7         	movff	__doprnt@f+1,tblptrh
  5749  00162C  4A41               	infsnz	__doprnt@f,f,c
  5750  00162E  2A42               	incf	__doprnt@f+1,f,c
  5751  001630                     	if	0	;tblptru may be non-zero
  5752  001630                     	endif
  5753  001630                     	if	0	;tblptru may be non-zero
  5754  001630                     	endif
  5755  001630  0008               	tblrd		*
  5756  001632  CFF5 F076          	movff	tablat,__doprnt@c
  5757  001636  0100               	movlb	0	; () banked
  5758  001638  5176               	movf	__doprnt@c& (0+255),w,b
  5759  00163A  A4D8               	btfss	status,2,c
  5760  00163C  EF7D  F003         	goto	i2l3196
  5761  001640                     i2l3532:
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;doprnt.c: 1540: return 0;
  5765  001640  0E00               	movlw	0
  5766  001642  6E40               	movwf	?__doprnt+1,c
  5767  001644  0E00               	movlw	0
  5768  001646  6E3F               	movwf	?__doprnt,c
  5769  001648  0012               	return	
  5770  00164A                     __end_of__doprnt:
  5771                           	opt stack 0
  5772                           tosu	equ	0xFFF
  5773                           tosh	equ	0xFFE
  5774                           tosl	equ	0xFFD
  5775                           pclatu	equ	0xFFB
  5776                           pclath	equ	0xFFA
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodh	equ	0xFF4
  5782                           prodl	equ	0xFF3
  5783                           intcon	equ	0xFF2
  5784                           intcon2	equ	0xFF1
  5785                           intcon3	equ	0xFF0
  5786                           postinc0	equ	0xFEE
  5787                           fsr0h	equ	0xFEA
  5788                           fsr0l	equ	0xFE9
  5789                           wreg	equ	0xFE8
  5790                           fsr1h	equ	0xFE2
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _scale *****************
  5800 ;; Defined at:
  5801 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  scl             1    wreg     char 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;  scl             1   53[COMRAM] char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  3   47[COMRAM] char 
  5808 ;; Registers used:
  5809 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5815 ;;      Params:         3       0       0       0       0       0       0
  5816 ;;      Locals:         4       0       0       0       0       0       0
  5817 ;;      Temps:          0       0       0       0       0       0       0
  5818 ;;      Totals:         7       0       0       0       0       0       0
  5819 ;;Total ram usage:        7 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    2
  5822 ;; This function calls:
  5823 ;;		___awdiv
  5824 ;;		___awmod
  5825 ;;		___ftmul
  5826 ;;		___wmul
  5827 ;; This function is called by:
  5828 ;;		__doprnt
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           	psect	text25
  5833  00164A                     __ptext25:
  5834                           	opt stack 0
  5835  00164A                     _scale:
  5836                           	opt stack 21
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;incstack = 0
  5840                           ;scale@scl stored from wreg
  5841  00164A  6E36               	movwf	scale@scl,c
  5842                           
  5843                           ;doprnt.c: 428: if(scl < 0) {
  5844  00164C  AE36               	btfss	scale@scl,7,c
  5845  00164E  D0FB               	goto	i2l2890
  5846                           
  5847                           ;doprnt.c: 429: scl = -scl;
  5848  001650  6C36               	negf	scale@scl,c
  5849                           
  5850                           ;doprnt.c: 430: if(scl>=110)
  5851  001652  5036               	movf	scale@scl,w,c
  5852  001654  0A80               	xorlw	128
  5853  001656  0F12               	addlw	-238
  5854  001658  A0D8               	btfss	status,0,c
  5855  00165A  D091               	goto	i2l2880
  5856                           
  5857                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5858  00165C  0E00               	movlw	0
  5859  00165E  6E12               	movwf	___wmul@multiplicand+1,c
  5860  001660  0E03               	movlw	3
  5861  001662  6E11               	movwf	___wmul@multiplicand,c
  5862  001664  0E00               	movlw	0
  5863  001666  6E0A               	movwf	___awdiv@divisor+1,c
  5864  001668  0E0A               	movlw	10
  5865  00166A  6E09               	movwf	___awdiv@divisor,c
  5866  00166C  0E00               	movlw	0
  5867  00166E  6E04               	movwf	___awmod@divisor+1,c
  5868  001670  0E64               	movlw	100
  5869  001672  6E03               	movwf	___awmod@divisor,c
  5870  001674  5036               	movf	scale@scl,w,c
  5871  001676  6E01               	movwf	___awmod@dividend,c
  5872  001678  6A02               	clrf	___awmod@dividend+1,c
  5873  00167A  BE01               	btfsc	___awmod@dividend,7,c
  5874  00167C  0602               	decf	___awmod@dividend+1,f,c
  5875  00167E  EC56  F015         	call	___awmod
  5876  001682  C001  F007         	movff	?___awmod,___awdiv@dividend
  5877  001686  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5878  00168A  EC97  F014         	call	___awdiv	;wreg free
  5879  00168E  0E09               	movlw	9
  5880  001690  2407               	addwf	?___awdiv,w,c
  5881  001692  6E0F               	movwf	___wmul@multiplier,c
  5882  001694  0E00               	movlw	0
  5883  001696  2008               	addwfc	?___awdiv+1,w,c
  5884  001698  6E10               	movwf	___wmul@multiplier+1,c
  5885  00169A  ECCB  F017         	call	___wmul	;wreg free
  5886  00169E  0E29               	movlw	low __npowers_
  5887  0016A0  240F               	addwf	?___wmul,w,c
  5888  0016A2  6EF6               	movwf	tblptrl,c
  5889  0016A4  0E06               	movlw	high __npowers_
  5890  0016A6  2010               	addwfc	?___wmul+1,w,c
  5891  0016A8  6EF7               	movwf	tblptrh,c
  5892  0016AA                     	if	0	;There are less than 3 active tblptr bytes
  5893  0016AA                     	endif
  5894  0016AA  0009               	tblrd		*+
  5895  0016AC  CFF5 F024          	movff	tablat,___ftmul@f2
  5896  0016B0  0009               	tblrd		*+
  5897  0016B2  CFF5 F025          	movff	tablat,___ftmul@f2+1
  5898  0016B6  000A               	tblrd		*-
  5899  0016B8  CFF5 F026          	movff	tablat,___ftmul@f2+2
  5900  0016BC  0E00               	movlw	0
  5901  0016BE  6E0A               	movwf	___awdiv@divisor+1,c
  5902  0016C0  0E64               	movlw	100
  5903  0016C2  6E09               	movwf	___awdiv@divisor,c
  5904  0016C4  5036               	movf	scale@scl,w,c
  5905  0016C6  6E07               	movwf	___awdiv@dividend,c
  5906  0016C8  6A08               	clrf	___awdiv@dividend+1,c
  5907  0016CA  BE07               	btfsc	___awdiv@dividend,7,c
  5908  0016CC  0608               	decf	___awdiv@dividend+1,f,c
  5909  0016CE  EC97  F014         	call	___awdiv	;wreg free
  5910  0016D2  0E12               	movlw	18
  5911  0016D4  2407               	addwf	?___awdiv,w,c
  5912  0016D6  6E0F               	movwf	___wmul@multiplier,c
  5913  0016D8  0E00               	movlw	0
  5914  0016DA  2008               	addwfc	?___awdiv+1,w,c
  5915  0016DC  6E10               	movwf	___wmul@multiplier+1,c
  5916  0016DE  0E00               	movlw	0
  5917  0016E0  6E12               	movwf	___wmul@multiplicand+1,c
  5918  0016E2  0E03               	movlw	3
  5919  0016E4  6E11               	movwf	___wmul@multiplicand,c
  5920  0016E6  ECCB  F017         	call	___wmul	;wreg free
  5921  0016EA  0E29               	movlw	low __npowers_
  5922  0016EC  240F               	addwf	?___wmul,w,c
  5923  0016EE  6EF6               	movwf	tblptrl,c
  5924  0016F0  0E06               	movlw	high __npowers_
  5925  0016F2  2010               	addwfc	?___wmul+1,w,c
  5926  0016F4  6EF7               	movwf	tblptrh,c
  5927  0016F6                     	if	0	;There are less than 3 active tblptr bytes
  5928  0016F6                     	endif
  5929  0016F6  0009               	tblrd		*+
  5930  0016F8  CFF5 F021          	movff	tablat,___ftmul@f1
  5931  0016FC  0009               	tblrd		*+
  5932  0016FE  CFF5 F022          	movff	tablat,___ftmul@f1+1
  5933  001702  000A               	tblrd		*-
  5934  001704  CFF5 F023          	movff	tablat,___ftmul@f1+2
  5935  001708  EC91  F012         	call	___ftmul	;wreg free
  5936  00170C  C021  F033         	movff	?___ftmul,_scale$1657
  5937  001710  C022  F034         	movff	?___ftmul+1,_scale$1657+1
  5938  001714  C023  F035         	movff	?___ftmul+2,_scale$1657+2
  5939                           
  5940                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5941  001718  C033  F021         	movff	_scale$1657,___ftmul@f1
  5942  00171C  C034  F022         	movff	_scale$1657+1,___ftmul@f1+1
  5943  001720  C035  F023         	movff	_scale$1657+2,___ftmul@f1+2
  5944  001724  0E00               	movlw	0
  5945  001726  6E12               	movwf	___wmul@multiplicand+1,c
  5946  001728  0E03               	movlw	3
  5947  00172A  6E11               	movwf	___wmul@multiplicand,c
  5948  00172C  0E00               	movlw	0
  5949  00172E  6E04               	movwf	___awmod@divisor+1,c
  5950  001730  0E0A               	movlw	10
  5951  001732  6E03               	movwf	___awmod@divisor,c
  5952  001734  5036               	movf	scale@scl,w,c
  5953  001736  6E01               	movwf	___awmod@dividend,c
  5954  001738  6A02               	clrf	___awmod@dividend+1,c
  5955  00173A  BE01               	btfsc	___awmod@dividend,7,c
  5956  00173C  0602               	decf	___awmod@dividend+1,f,c
  5957  00173E  EC56  F015         	call	___awmod	;wreg free
  5958  001742  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5959  001746  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5960  00174A  ECCB  F017         	call	___wmul	;wreg free
  5961  00174E  0E29               	movlw	low __npowers_
  5962  001750  240F               	addwf	?___wmul,w,c
  5963  001752  6EF6               	movwf	tblptrl,c
  5964  001754  0E06               	movlw	high __npowers_
  5965  001756  2010               	addwfc	?___wmul+1,w,c
  5966  001758  6EF7               	movwf	tblptrh,c
  5967  00175A                     	if	0	;There are less than 3 active tblptr bytes
  5968  00175A                     	endif
  5969  00175A  0009               	tblrd		*+
  5970  00175C  CFF5 F024          	movff	tablat,___ftmul@f2
  5971  001760  0009               	tblrd		*+
  5972  001762  CFF5 F025          	movff	tablat,___ftmul@f2+1
  5973  001766  000A               	tblrd		*-
  5974  001768  CFF5 F026          	movff	tablat,___ftmul@f2+2
  5975  00176C  EC91  F012         	call	___ftmul	;wreg free
  5976  001770  C021  F030         	movff	?___ftmul,?_scale
  5977  001774  C022  F031         	movff	?___ftmul+1,?_scale+1
  5978  001778  C023  F032         	movff	?___ftmul+2,?_scale+2
  5979  00177C  0012               	return	
  5980  00177E                     i2l2880:
  5981                           
  5982                           ;doprnt.c: 432: else if(scl > 10)
  5983  00177E  5036               	movf	scale@scl,w,c
  5984  001780  0A80               	xorlw	128
  5985  001782  0F75               	addlw	-139
  5986  001784  A0D8               	btfss	status,0,c
  5987  001786  D04D               	goto	i2l2886
  5988                           
  5989                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5990  001788  0E00               	movlw	0
  5991  00178A  6E0A               	movwf	___awdiv@divisor+1,c
  5992  00178C  0E0A               	movlw	10
  5993  00178E  6E09               	movwf	___awdiv@divisor,c
  5994  001790  5036               	movf	scale@scl,w,c
  5995  001792  6E07               	movwf	___awdiv@dividend,c
  5996  001794  6A08               	clrf	___awdiv@dividend+1,c
  5997  001796  BE07               	btfsc	___awdiv@dividend,7,c
  5998  001798  0608               	decf	___awdiv@dividend+1,f,c
  5999  00179A  EC97  F014         	call	___awdiv	;wreg free
  6000  00179E  0E09               	movlw	9
  6001  0017A0  2407               	addwf	?___awdiv,w,c
  6002  0017A2  6E0F               	movwf	___wmul@multiplier,c
  6003  0017A4  0E00               	movlw	0
  6004  0017A6  2008               	addwfc	?___awdiv+1,w,c
  6005  0017A8  6E10               	movwf	___wmul@multiplier+1,c
  6006  0017AA  0E00               	movlw	0
  6007  0017AC  6E12               	movwf	___wmul@multiplicand+1,c
  6008  0017AE  0E03               	movlw	3
  6009  0017B0  6E11               	movwf	___wmul@multiplicand,c
  6010  0017B2  ECCB  F017         	call	___wmul	;wreg free
  6011  0017B6  0E29               	movlw	low __npowers_
  6012  0017B8  240F               	addwf	?___wmul,w,c
  6013  0017BA  6EF6               	movwf	tblptrl,c
  6014  0017BC  0E06               	movlw	high __npowers_
  6015  0017BE  2010               	addwfc	?___wmul+1,w,c
  6016  0017C0  6EF7               	movwf	tblptrh,c
  6017  0017C2                     	if	0	;There are less than 3 active tblptr bytes
  6018  0017C2                     	endif
  6019  0017C2  0009               	tblrd		*+
  6020  0017C4  CFF5 F021          	movff	tablat,___ftmul@f1
  6021  0017C8  0009               	tblrd		*+
  6022  0017CA  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6023  0017CE  000A               	tblrd		*-
  6024  0017D0  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6025  0017D4  0E00               	movlw	0
  6026  0017D6  6E12               	movwf	___wmul@multiplicand+1,c
  6027  0017D8  0E03               	movlw	3
  6028  0017DA  6E11               	movwf	___wmul@multiplicand,c
  6029  0017DC  0E00               	movlw	0
  6030  0017DE  6E04               	movwf	___awmod@divisor+1,c
  6031  0017E0  0E0A               	movlw	10
  6032  0017E2  6E03               	movwf	___awmod@divisor,c
  6033  0017E4  5036               	movf	scale@scl,w,c
  6034  0017E6  6E01               	movwf	___awmod@dividend,c
  6035  0017E8  6A02               	clrf	___awmod@dividend+1,c
  6036  0017EA  BE01               	btfsc	___awmod@dividend,7,c
  6037  0017EC  0602               	decf	___awmod@dividend+1,f,c
  6038  0017EE  EC56  F015         	call	___awmod	;wreg free
  6039  0017F2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6040  0017F6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6041  0017FA  ECCB  F017         	call	___wmul	;wreg free
  6042  0017FE  0E29               	movlw	low __npowers_
  6043  001800  240F               	addwf	?___wmul,w,c
  6044  001802  6EF6               	movwf	tblptrl,c
  6045  001804  0E06               	movlw	high __npowers_
  6046  001806  2010               	addwfc	?___wmul+1,w,c
  6047  001808  6EF7               	movwf	tblptrh,c
  6048  00180A                     	if	0	;There are less than 3 active tblptr bytes
  6049  00180A                     	endif
  6050  00180A  0009               	tblrd		*+
  6051  00180C  CFF5 F024          	movff	tablat,___ftmul@f2
  6052  001810  0009               	tblrd		*+
  6053  001812  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6054  001816  000A               	tblrd		*-
  6055  001818  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6056  00181C  EC91  F012         	call	___ftmul	;wreg free
  6057  001820  D7A7               	goto	L3
  6058  001822                     i2l2886:
  6059                           
  6060                           ;doprnt.c: 434: return _npowers_[scl];
  6061  001822  5036               	movf	scale@scl,w,c
  6062  001824  0D03               	mullw	3
  6063  001826  0E29               	movlw	low __npowers_
  6064  001828  24F3               	addwf	prodl,w,c
  6065  00182A  6EF6               	movwf	tblptrl,c
  6066  00182C  0E06               	movlw	high __npowers_
  6067  00182E  20F4               	addwfc	prodh,w,c
  6068  001830  6EF7               	movwf	tblptrh,c
  6069  001832                     	if	0	;There are less than 3 active tblptr bytes
  6070  001832                     	endif
  6071  001832  0009               	tblrd		*+
  6072  001834  CFF5 F030          	movff	tablat,?_scale
  6073  001838  0009               	tblrd		*+
  6074  00183A  CFF5 F031          	movff	tablat,?_scale+1
  6075  00183E  000A               	tblrd		*-
  6076  001840  CFF5 F032          	movff	tablat,?_scale+2
  6077  001844  0012               	return	
  6078  001846                     i2l2890:
  6079                           
  6080                           ;doprnt.c: 435: }
  6081                           ;doprnt.c: 436: if(scl>=110)
  6082  001846  5036               	movf	scale@scl,w,c
  6083  001848  0A80               	xorlw	128
  6084  00184A  0F12               	addlw	-238
  6085  00184C  A0D8               	btfss	status,0,c
  6086  00184E  D091               	goto	i2l2898
  6087                           
  6088                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6089  001850  0E00               	movlw	0
  6090  001852  6E12               	movwf	___wmul@multiplicand+1,c
  6091  001854  0E03               	movlw	3
  6092  001856  6E11               	movwf	___wmul@multiplicand,c
  6093  001858  0E00               	movlw	0
  6094  00185A  6E0A               	movwf	___awdiv@divisor+1,c
  6095  00185C  0E0A               	movlw	10
  6096  00185E  6E09               	movwf	___awdiv@divisor,c
  6097  001860  0E00               	movlw	0
  6098  001862  6E04               	movwf	___awmod@divisor+1,c
  6099  001864  0E64               	movlw	100
  6100  001866  6E03               	movwf	___awmod@divisor,c
  6101  001868  5036               	movf	scale@scl,w,c
  6102  00186A  6E01               	movwf	___awmod@dividend,c
  6103  00186C  6A02               	clrf	___awmod@dividend+1,c
  6104  00186E  BE01               	btfsc	___awmod@dividend,7,c
  6105  001870  0602               	decf	___awmod@dividend+1,f,c
  6106  001872  EC56  F015         	call	___awmod	;wreg free
  6107  001876  C001  F007         	movff	?___awmod,___awdiv@dividend
  6108  00187A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6109  00187E  EC97  F014         	call	___awdiv	;wreg free
  6110  001882  0E09               	movlw	9
  6111  001884  2407               	addwf	?___awdiv,w,c
  6112  001886  6E0F               	movwf	___wmul@multiplier,c
  6113  001888  0E00               	movlw	0
  6114  00188A  2008               	addwfc	?___awdiv+1,w,c
  6115  00188C  6E10               	movwf	___wmul@multiplier+1,c
  6116  00188E  ECCB  F017         	call	___wmul	;wreg free
  6117  001892  0E50               	movlw	low __powers_
  6118  001894  240F               	addwf	?___wmul,w,c
  6119  001896  6EF6               	movwf	tblptrl,c
  6120  001898  0E06               	movlw	high __powers_
  6121  00189A  2010               	addwfc	?___wmul+1,w,c
  6122  00189C  6EF7               	movwf	tblptrh,c
  6123  00189E                     	if	0	;There are less than 3 active tblptr bytes
  6124  00189E                     	endif
  6125  00189E  0009               	tblrd		*+
  6126  0018A0  CFF5 F024          	movff	tablat,___ftmul@f2
  6127  0018A4  0009               	tblrd		*+
  6128  0018A6  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6129  0018AA  000A               	tblrd		*-
  6130  0018AC  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6131  0018B0  0E00               	movlw	0
  6132  0018B2  6E0A               	movwf	___awdiv@divisor+1,c
  6133  0018B4  0E64               	movlw	100
  6134  0018B6  6E09               	movwf	___awdiv@divisor,c
  6135  0018B8  5036               	movf	scale@scl,w,c
  6136  0018BA  6E07               	movwf	___awdiv@dividend,c
  6137  0018BC  6A08               	clrf	___awdiv@dividend+1,c
  6138  0018BE  BE07               	btfsc	___awdiv@dividend,7,c
  6139  0018C0  0608               	decf	___awdiv@dividend+1,f,c
  6140  0018C2  EC97  F014         	call	___awdiv	;wreg free
  6141  0018C6  0E12               	movlw	18
  6142  0018C8  2407               	addwf	?___awdiv,w,c
  6143  0018CA  6E0F               	movwf	___wmul@multiplier,c
  6144  0018CC  0E00               	movlw	0
  6145  0018CE  2008               	addwfc	?___awdiv+1,w,c
  6146  0018D0  6E10               	movwf	___wmul@multiplier+1,c
  6147  0018D2  0E00               	movlw	0
  6148  0018D4  6E12               	movwf	___wmul@multiplicand+1,c
  6149  0018D6  0E03               	movlw	3
  6150  0018D8  6E11               	movwf	___wmul@multiplicand,c
  6151  0018DA  ECCB  F017         	call	___wmul	;wreg free
  6152  0018DE  0E50               	movlw	low __powers_
  6153  0018E0  240F               	addwf	?___wmul,w,c
  6154  0018E2  6EF6               	movwf	tblptrl,c
  6155  0018E4  0E06               	movlw	high __powers_
  6156  0018E6  2010               	addwfc	?___wmul+1,w,c
  6157  0018E8  6EF7               	movwf	tblptrh,c
  6158  0018EA                     	if	0	;There are less than 3 active tblptr bytes
  6159  0018EA                     	endif
  6160  0018EA  0009               	tblrd		*+
  6161  0018EC  CFF5 F021          	movff	tablat,___ftmul@f1
  6162  0018F0  0009               	tblrd		*+
  6163  0018F2  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6164  0018F6  000A               	tblrd		*-
  6165  0018F8  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6166  0018FC  EC91  F012         	call	___ftmul	;wreg free
  6167  001900  C021  F033         	movff	?___ftmul,_scale$1657
  6168  001904  C022  F034         	movff	?___ftmul+1,_scale$1657+1
  6169  001908  C023  F035         	movff	?___ftmul+2,_scale$1657+2
  6170                           
  6171                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6172  00190C  C033  F021         	movff	_scale$1657,___ftmul@f1
  6173  001910  C034  F022         	movff	_scale$1657+1,___ftmul@f1+1
  6174  001914  C035  F023         	movff	_scale$1657+2,___ftmul@f1+2
  6175  001918  0E00               	movlw	0
  6176  00191A  6E12               	movwf	___wmul@multiplicand+1,c
  6177  00191C  0E03               	movlw	3
  6178  00191E  6E11               	movwf	___wmul@multiplicand,c
  6179  001920  0E00               	movlw	0
  6180  001922  6E04               	movwf	___awmod@divisor+1,c
  6181  001924  0E0A               	movlw	10
  6182  001926  6E03               	movwf	___awmod@divisor,c
  6183  001928  5036               	movf	scale@scl,w,c
  6184  00192A  6E01               	movwf	___awmod@dividend,c
  6185  00192C  6A02               	clrf	___awmod@dividend+1,c
  6186  00192E  BE01               	btfsc	___awmod@dividend,7,c
  6187  001930  0602               	decf	___awmod@dividend+1,f,c
  6188  001932  EC56  F015         	call	___awmod	;wreg free
  6189  001936  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6190  00193A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6191  00193E  ECCB  F017         	call	___wmul	;wreg free
  6192  001942  0E50               	movlw	low __powers_
  6193  001944  240F               	addwf	?___wmul,w,c
  6194  001946  6EF6               	movwf	tblptrl,c
  6195  001948  0E06               	movlw	high __powers_
  6196  00194A  2010               	addwfc	?___wmul+1,w,c
  6197  00194C  6EF7               	movwf	tblptrh,c
  6198  00194E                     	if	0	;There are less than 3 active tblptr bytes
  6199  00194E                     	endif
  6200  00194E  0009               	tblrd		*+
  6201  001950  CFF5 F024          	movff	tablat,___ftmul@f2
  6202  001954  0009               	tblrd		*+
  6203  001956  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6204  00195A  000A               	tblrd		*-
  6205  00195C  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6206  001960  EC91  F012         	call	___ftmul	;wreg free
  6207  001964  C021  F030         	movff	?___ftmul,?_scale
  6208  001968  C022  F031         	movff	?___ftmul+1,?_scale+1
  6209  00196C  C023  F032         	movff	?___ftmul+2,?_scale+2
  6210  001970  0012               	return	
  6211  001972                     i2l2898:
  6212                           
  6213                           ;doprnt.c: 438: else if(scl > 10)
  6214  001972  5036               	movf	scale@scl,w,c
  6215  001974  0A80               	xorlw	128
  6216  001976  0F75               	addlw	-139
  6217  001978  A0D8               	btfss	status,0,c
  6218  00197A  D04D               	goto	i2l2904
  6219                           
  6220                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6221  00197C  0E00               	movlw	0
  6222  00197E  6E0A               	movwf	___awdiv@divisor+1,c
  6223  001980  0E0A               	movlw	10
  6224  001982  6E09               	movwf	___awdiv@divisor,c
  6225  001984  5036               	movf	scale@scl,w,c
  6226  001986  6E07               	movwf	___awdiv@dividend,c
  6227  001988  6A08               	clrf	___awdiv@dividend+1,c
  6228  00198A  BE07               	btfsc	___awdiv@dividend,7,c
  6229  00198C  0608               	decf	___awdiv@dividend+1,f,c
  6230  00198E  EC97  F014         	call	___awdiv	;wreg free
  6231  001992  0E09               	movlw	9
  6232  001994  2407               	addwf	?___awdiv,w,c
  6233  001996  6E0F               	movwf	___wmul@multiplier,c
  6234  001998  0E00               	movlw	0
  6235  00199A  2008               	addwfc	?___awdiv+1,w,c
  6236  00199C  6E10               	movwf	___wmul@multiplier+1,c
  6237  00199E  0E00               	movlw	0
  6238  0019A0  6E12               	movwf	___wmul@multiplicand+1,c
  6239  0019A2  0E03               	movlw	3
  6240  0019A4  6E11               	movwf	___wmul@multiplicand,c
  6241  0019A6  ECCB  F017         	call	___wmul	;wreg free
  6242  0019AA  0E50               	movlw	low __powers_
  6243  0019AC  240F               	addwf	?___wmul,w,c
  6244  0019AE  6EF6               	movwf	tblptrl,c
  6245  0019B0  0E06               	movlw	high __powers_
  6246  0019B2  2010               	addwfc	?___wmul+1,w,c
  6247  0019B4  6EF7               	movwf	tblptrh,c
  6248  0019B6                     	if	0	;There are less than 3 active tblptr bytes
  6249  0019B6                     	endif
  6250  0019B6  0009               	tblrd		*+
  6251  0019B8  CFF5 F021          	movff	tablat,___ftmul@f1
  6252  0019BC  0009               	tblrd		*+
  6253  0019BE  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6254  0019C2  000A               	tblrd		*-
  6255  0019C4  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6256  0019C8  0E00               	movlw	0
  6257  0019CA  6E12               	movwf	___wmul@multiplicand+1,c
  6258  0019CC  0E03               	movlw	3
  6259  0019CE  6E11               	movwf	___wmul@multiplicand,c
  6260  0019D0  0E00               	movlw	0
  6261  0019D2  6E04               	movwf	___awmod@divisor+1,c
  6262  0019D4  0E0A               	movlw	10
  6263  0019D6  6E03               	movwf	___awmod@divisor,c
  6264  0019D8  5036               	movf	scale@scl,w,c
  6265  0019DA  6E01               	movwf	___awmod@dividend,c
  6266  0019DC  6A02               	clrf	___awmod@dividend+1,c
  6267  0019DE  BE01               	btfsc	___awmod@dividend,7,c
  6268  0019E0  0602               	decf	___awmod@dividend+1,f,c
  6269  0019E2  EC56  F015         	call	___awmod	;wreg free
  6270  0019E6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6271  0019EA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6272  0019EE  ECCB  F017         	call	___wmul	;wreg free
  6273  0019F2  0E50               	movlw	low __powers_
  6274  0019F4  240F               	addwf	?___wmul,w,c
  6275  0019F6  6EF6               	movwf	tblptrl,c
  6276  0019F8  0E06               	movlw	high __powers_
  6277  0019FA  2010               	addwfc	?___wmul+1,w,c
  6278  0019FC  6EF7               	movwf	tblptrh,c
  6279  0019FE                     	if	0	;There are less than 3 active tblptr bytes
  6280  0019FE                     	endif
  6281  0019FE  0009               	tblrd		*+
  6282  001A00  CFF5 F024          	movff	tablat,___ftmul@f2
  6283  001A04  0009               	tblrd		*+
  6284  001A06  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6285  001A0A  000A               	tblrd		*-
  6286  001A0C  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6287  001A10  EC91  F012         	call	___ftmul	;wreg free
  6288  001A14  D7A7               	goto	L4
  6289  001A16                     i2l2904:
  6290                           
  6291                           ;doprnt.c: 440: return _powers_[scl];
  6292  001A16  5036               	movf	scale@scl,w,c
  6293  001A18  0D03               	mullw	3
  6294  001A1A  0E50               	movlw	low __powers_
  6295  001A1C  24F3               	addwf	prodl,w,c
  6296  001A1E  6EF6               	movwf	tblptrl,c
  6297  001A20  0E06               	movlw	high __powers_
  6298  001A22  20F4               	addwfc	prodh,w,c
  6299  001A24  6EF7               	movwf	tblptrh,c
  6300  001A26                     	if	0	;There are less than 3 active tblptr bytes
  6301  001A26                     	endif
  6302  001A26  0009               	tblrd		*+
  6303  001A28  CFF5 F030          	movff	tablat,?_scale
  6304  001A2C  0009               	tblrd		*+
  6305  001A2E  CFF5 F031          	movff	tablat,?_scale+1
  6306  001A32  000A               	tblrd		*-
  6307  001A34  CFF5 F032          	movff	tablat,?_scale+2
  6308  001A38  0012               	return	
  6309  001A3A                     __end_of_scale:
  6310                           	opt stack 0
  6311                           tosu	equ	0xFFF
  6312                           tosh	equ	0xFFE
  6313                           tosl	equ	0xFFD
  6314                           pclatu	equ	0xFFB
  6315                           pclath	equ	0xFFA
  6316                           tblptru	equ	0xFF8
  6317                           tblptrh	equ	0xFF7
  6318                           tblptrl	equ	0xFF6
  6319                           tablat	equ	0xFF5
  6320                           prodh	equ	0xFF4
  6321                           prodl	equ	0xFF3
  6322                           intcon	equ	0xFF2
  6323                           intcon2	equ	0xFF1
  6324                           intcon3	equ	0xFF0
  6325                           postinc0	equ	0xFEE
  6326                           fsr0h	equ	0xFEA
  6327                           fsr0l	equ	0xFE9
  6328                           wreg	equ	0xFE8
  6329                           fsr1h	equ	0xFE2
  6330                           fsr1l	equ	0xFE1
  6331                           indf2	equ	0xFDF
  6332                           postinc2	equ	0xFDE
  6333                           postdec2	equ	0xFDD
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8
  6337                           
  6338 ;; *************** function _putch *****************
  6339 ;; Defined at:
  6340 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  txData          1    wreg     unsigned char 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  txData          1    1[COMRAM] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6354 ;;      Params:         0       0       0       0       0       0       0
  6355 ;;      Locals:         1       0       0       0       0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0
  6357 ;;      Totals:         1       0       0       0       0       0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    1
  6361 ;; This function calls:
  6362 ;;		_EUSART1_Write
  6363 ;; This function is called by:
  6364 ;;		_printf
  6365 ;;		__doprnt
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text26
  6370  0030EA                     __ptext26:
  6371                           	opt stack 0
  6372  0030EA                     _putch:
  6373                           	opt stack 22
  6374                           
  6375                           ;incstack = 0
  6376                           ;putch@txData stored from wreg
  6377  0030EA  6E02               	movwf	putch@txData,c
  6378                           
  6379                           ;eusart1.c: 113: EUSART1_Write(txData);
  6380  0030EC  5002               	movf	putch@txData,w,c
  6381  0030EE  EC6A  F018         	call	_EUSART1_Write
  6382  0030F2  0012               	return		;funcret
  6383  0030F4                     __end_of_putch:
  6384                           	opt stack 0
  6385                           tosu	equ	0xFFF
  6386                           tosh	equ	0xFFE
  6387                           tosl	equ	0xFFD
  6388                           pclatu	equ	0xFFB
  6389                           pclath	equ	0xFFA
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           intcon	equ	0xFF2
  6397                           intcon2	equ	0xFF1
  6398                           intcon3	equ	0xFF0
  6399                           postinc0	equ	0xFEE
  6400                           fsr0h	equ	0xFEA
  6401                           fsr0l	equ	0xFE9
  6402                           wreg	equ	0xFE8
  6403                           fsr1h	equ	0xFE2
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           postinc2	equ	0xFDE
  6407                           postdec2	equ	0xFDD
  6408                           fsr2h	equ	0xFDA
  6409                           fsr2l	equ	0xFD9
  6410                           status	equ	0xFD8
  6411                           
  6412 ;; *************** function _EUSART1_Write *****************
  6413 ;; Defined at:
  6414 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;  txData          1    wreg     unsigned char 
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;  txData          1    0[COMRAM] unsigned char 
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6428 ;;      Params:         0       0       0       0       0       0       0
  6429 ;;      Locals:         1       0       0       0       0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0
  6431 ;;      Totals:         1       0       0       0       0       0       0
  6432 ;;Total ram usage:        1 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; This function calls:
  6435 ;;		Nothing
  6436 ;; This function is called by:
  6437 ;;		_putch
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text27
  6442  0030D4                     __ptext27:
  6443                           	opt stack 0
  6444  0030D4                     _EUSART1_Write:
  6445                           	opt stack 22
  6446                           
  6447                           ;incstack = 0
  6448                           ;EUSART1_Write@txData stored from wreg
  6449  0030D4  6E01               	movwf	EUSART1_Write@txData,c
  6450  0030D6                     i2l256:
  6451  0030D6  A89E               	btfss	3998,4,c	;volatile
  6452  0030D8  D7FE               	goto	i2l256
  6453                           
  6454                           ;eusart1.c: 101: }
  6455                           ;eusart1.c: 103: TXREG1 = txData;
  6456  0030DA  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6457  0030DE  0012               	return		;funcret
  6458  0030E0                     __end_of_EUSART1_Write:
  6459                           	opt stack 0
  6460                           tosu	equ	0xFFF
  6461                           tosh	equ	0xFFE
  6462                           tosl	equ	0xFFD
  6463                           pclatu	equ	0xFFB
  6464                           pclath	equ	0xFFA
  6465                           tblptru	equ	0xFF8
  6466                           tblptrh	equ	0xFF7
  6467                           tblptrl	equ	0xFF6
  6468                           tablat	equ	0xFF5
  6469                           prodh	equ	0xFF4
  6470                           prodl	equ	0xFF3
  6471                           intcon	equ	0xFF2
  6472                           intcon2	equ	0xFF1
  6473                           intcon3	equ	0xFF0
  6474                           postinc0	equ	0xFEE
  6475                           fsr0h	equ	0xFEA
  6476                           fsr0l	equ	0xFE9
  6477                           wreg	equ	0xFE8
  6478                           fsr1h	equ	0xFE2
  6479                           fsr1l	equ	0xFE1
  6480                           indf2	equ	0xFDF
  6481                           postinc2	equ	0xFDE
  6482                           postdec2	equ	0xFDD
  6483                           fsr2h	equ	0xFDA
  6484                           fsr2l	equ	0xFD9
  6485                           status	equ	0xFD8
  6486                           
  6487 ;; *************** function _isdigit *****************
  6488 ;; Defined at:
  6489 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;  c               1    wreg     unsigned char 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  c               1    2[COMRAM] unsigned char 
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, status,2, status,0
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6503 ;;      Params:         0       0       0       0       0       0       0
  6504 ;;      Locals:         2       0       0       0       0       0       0
  6505 ;;      Temps:          1       0       0       0       0       0       0
  6506 ;;      Totals:         3       0       0       0       0       0       0
  6507 ;;Total ram usage:        3 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; This function calls:
  6510 ;;		Nothing
  6511 ;; This function is called by:
  6512 ;;		__doprnt
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text28
  6517  003042                     __ptext28:
  6518                           	opt stack 0
  6519  003042                     _isdigit:
  6520                           	opt stack 23
  6521                           
  6522                           ;incstack = 0
  6523                           ;isdigit@c stored from wreg
  6524  003042  6E03               	movwf	isdigit@c,c
  6525  003044  0E00               	movlw	0
  6526  003046  6E02               	movwf	_isdigit$1202,c
  6527  003048  0E3A               	movlw	58
  6528  00304A  6003               	cpfslt	isdigit@c,c
  6529  00304C  D005               	goto	i2l2916
  6530  00304E  0E2F               	movlw	47
  6531  003050  6403               	cpfsgt	isdigit@c,c
  6532  003052  D002               	goto	i2l2916
  6533  003054  0E01               	movlw	1
  6534  003056  6E02               	movwf	_isdigit$1202,c
  6535  003058                     i2l2916:
  6536  003058  C002  F001         	movff	_isdigit$1202,??_isdigit
  6537  00305C  3001               	rrcf	??_isdigit,w,c
  6538  00305E  0012               	return	
  6539  003060                     __end_of_isdigit:
  6540                           	opt stack 0
  6541                           tosu	equ	0xFFF
  6542                           tosh	equ	0xFFE
  6543                           tosl	equ	0xFFD
  6544                           pclatu	equ	0xFFB
  6545                           pclath	equ	0xFFA
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           intcon	equ	0xFF2
  6553                           intcon2	equ	0xFF1
  6554                           intcon3	equ	0xFF0
  6555                           postinc0	equ	0xFEE
  6556                           fsr0h	equ	0xFEA
  6557                           fsr0l	equ	0xFE9
  6558                           wreg	equ	0xFE8
  6559                           fsr1h	equ	0xFE2
  6560                           fsr1l	equ	0xFE1
  6561                           indf2	equ	0xFDF
  6562                           postinc2	equ	0xFDE
  6563                           postdec2	equ	0xFDD
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function _fround *****************
  6569 ;; Defined at:
  6570 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  prec            1    wreg     unsigned char 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  prec            1   56[COMRAM] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  3   47[COMRAM] unsigned char 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6584 ;;      Params:         3       0       0       0       0       0       0
  6585 ;;      Locals:         7       0       0       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0
  6587 ;;      Totals:        10       0       0       0       0       0       0
  6588 ;;Total ram usage:       10 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    2
  6591 ;; This function calls:
  6592 ;;		___awdiv
  6593 ;;		___awmod
  6594 ;;		___ftmul
  6595 ;;		___wmul
  6596 ;; This function is called by:
  6597 ;;		__doprnt
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text29
  6602  001A3A                     __ptext29:
  6603                           	opt stack 0
  6604  001A3A                     _fround:
  6605                           	opt stack 21
  6606                           
  6607                           ;incstack = 0
  6608                           ;fround@prec stored from wreg
  6609  001A3A  6E39               	movwf	fround@prec,c
  6610                           
  6611                           ;doprnt.c: 413: if(prec>=110)
  6612  001A3C  0E6D               	movlw	109
  6613  001A3E  6439               	cpfsgt	fround@prec,c
  6614  001A40  D09F               	goto	i2l2858
  6615                           
  6616                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6617  001A42  0E00               	movlw	0
  6618  001A44  6E12               	movwf	___wmul@multiplicand+1,c
  6619  001A46  0E03               	movlw	3
  6620  001A48  6E11               	movwf	___wmul@multiplicand,c
  6621  001A4A  0E00               	movlw	0
  6622  001A4C  6E0A               	movwf	___awdiv@divisor+1,c
  6623  001A4E  0E0A               	movlw	10
  6624  001A50  6E09               	movwf	___awdiv@divisor,c
  6625  001A52  0E00               	movlw	0
  6626  001A54  6E04               	movwf	___awmod@divisor+1,c
  6627  001A56  0E64               	movlw	100
  6628  001A58  6E03               	movwf	___awmod@divisor,c
  6629  001A5A  C039  F001         	movff	fround@prec,___awmod@dividend
  6630  001A5E  6A02               	clrf	___awmod@dividend+1,c
  6631  001A60  EC56  F015         	call	___awmod	;wreg free
  6632  001A64  C001  F007         	movff	?___awmod,___awdiv@dividend
  6633  001A68  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6634  001A6C  EC97  F014         	call	___awdiv	;wreg free
  6635  001A70  0E09               	movlw	9
  6636  001A72  2407               	addwf	?___awdiv,w,c
  6637  001A74  6E0F               	movwf	___wmul@multiplier,c
  6638  001A76  0E00               	movlw	0
  6639  001A78  2008               	addwfc	?___awdiv+1,w,c
  6640  001A7A  6E10               	movwf	___wmul@multiplier+1,c
  6641  001A7C  ECCB  F017         	call	___wmul	;wreg free
  6642  001A80  0E29               	movlw	low __npowers_
  6643  001A82  240F               	addwf	?___wmul,w,c
  6644  001A84  6EF6               	movwf	tblptrl,c
  6645  001A86  0E06               	movlw	high __npowers_
  6646  001A88  2010               	addwfc	?___wmul+1,w,c
  6647  001A8A  6EF7               	movwf	tblptrh,c
  6648  001A8C                     	if	0	;There are less than 3 active tblptr bytes
  6649  001A8C                     	endif
  6650  001A8C  0009               	tblrd		*+
  6651  001A8E  CFF5 F024          	movff	tablat,___ftmul@f2
  6652  001A92  0009               	tblrd		*+
  6653  001A94  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6654  001A98  000A               	tblrd		*-
  6655  001A9A  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6656  001A9E  0E00               	movlw	0
  6657  001AA0  6E0A               	movwf	___awdiv@divisor+1,c
  6658  001AA2  0E64               	movlw	100
  6659  001AA4  6E09               	movwf	___awdiv@divisor,c
  6660  001AA6  C039  F007         	movff	fround@prec,___awdiv@dividend
  6661  001AAA  6A08               	clrf	___awdiv@dividend+1,c
  6662  001AAC  EC97  F014         	call	___awdiv	;wreg free
  6663  001AB0  0E12               	movlw	18
  6664  001AB2  2407               	addwf	?___awdiv,w,c
  6665  001AB4  6E0F               	movwf	___wmul@multiplier,c
  6666  001AB6  0E00               	movlw	0
  6667  001AB8  2008               	addwfc	?___awdiv+1,w,c
  6668  001ABA  6E10               	movwf	___wmul@multiplier+1,c
  6669  001ABC  0E00               	movlw	0
  6670  001ABE  6E12               	movwf	___wmul@multiplicand+1,c
  6671  001AC0  0E03               	movlw	3
  6672  001AC2  6E11               	movwf	___wmul@multiplicand,c
  6673  001AC4  ECCB  F017         	call	___wmul	;wreg free
  6674  001AC8  0E29               	movlw	low __npowers_
  6675  001ACA  240F               	addwf	?___wmul,w,c
  6676  001ACC  6EF6               	movwf	tblptrl,c
  6677  001ACE  0E06               	movlw	high __npowers_
  6678  001AD0  2010               	addwfc	?___wmul+1,w,c
  6679  001AD2  6EF7               	movwf	tblptrh,c
  6680  001AD4                     	if	0	;There are less than 3 active tblptr bytes
  6681  001AD4                     	endif
  6682  001AD4  0009               	tblrd		*+
  6683  001AD6  CFF5 F021          	movff	tablat,___ftmul@f1
  6684  001ADA  0009               	tblrd		*+
  6685  001ADC  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6686  001AE0  000A               	tblrd		*-
  6687  001AE2  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6688  001AE6  EC91  F012         	call	___ftmul	;wreg free
  6689  001AEA  C021  F036         	movff	?___ftmul,_fround$1655
  6690  001AEE  C022  F037         	movff	?___ftmul+1,_fround$1655+1
  6691  001AF2  C023  F038         	movff	?___ftmul+2,_fround$1655+2
  6692                           
  6693                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6694  001AF6  0E00               	movlw	0
  6695  001AF8  6E12               	movwf	___wmul@multiplicand+1,c
  6696  001AFA  0E03               	movlw	3
  6697  001AFC  6E11               	movwf	___wmul@multiplicand,c
  6698  001AFE  0E00               	movlw	0
  6699  001B00  6E04               	movwf	___awmod@divisor+1,c
  6700  001B02  0E0A               	movlw	10
  6701  001B04  6E03               	movwf	___awmod@divisor,c
  6702  001B06  C039  F001         	movff	fround@prec,___awmod@dividend
  6703  001B0A  6A02               	clrf	___awmod@dividend+1,c
  6704  001B0C  EC56  F015         	call	___awmod	;wreg free
  6705  001B10  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6706  001B14  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6707  001B18  ECCB  F017         	call	___wmul	;wreg free
  6708  001B1C  0E29               	movlw	low __npowers_
  6709  001B1E  240F               	addwf	?___wmul,w,c
  6710  001B20  6EF6               	movwf	tblptrl,c
  6711  001B22  0E06               	movlw	high __npowers_
  6712  001B24  2010               	addwfc	?___wmul+1,w,c
  6713  001B26  6EF7               	movwf	tblptrh,c
  6714  001B28                     	if	0	;There are less than 3 active tblptr bytes
  6715  001B28                     	endif
  6716  001B28  0009               	tblrd		*+
  6717  001B2A  CFF5 F024          	movff	tablat,___ftmul@f2
  6718  001B2E  0009               	tblrd		*+
  6719  001B30  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6720  001B34  000A               	tblrd		*-
  6721  001B36  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6722  001B3A  C036  F021         	movff	_fround$1655,___ftmul@f1
  6723  001B3E  C037  F022         	movff	_fround$1655+1,___ftmul@f1+1
  6724  001B42  C038  F023         	movff	_fround$1655+2,___ftmul@f1+2
  6725  001B46  EC91  F012         	call	___ftmul	;wreg free
  6726  001B4A  C021  F033         	movff	?___ftmul,_fround$1656
  6727  001B4E  C022  F034         	movff	?___ftmul+1,_fround$1656+1
  6728  001B52  C023  F035         	movff	?___ftmul+2,_fround$1656+2
  6729                           
  6730                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6731  001B56  C033  F021         	movff	_fround$1656,___ftmul@f1
  6732  001B5A  C034  F022         	movff	_fround$1656+1,___ftmul@f1+1
  6733  001B5E  C035  F023         	movff	_fround$1656+2,___ftmul@f1+2
  6734  001B62  0E00               	movlw	0
  6735  001B64  6E24               	movwf	___ftmul@f2,c
  6736  001B66  0E00               	movlw	0
  6737  001B68  6E25               	movwf	___ftmul@f2+1,c
  6738  001B6A  0E3F               	movlw	63
  6739  001B6C  6E26               	movwf	___ftmul@f2+2,c
  6740  001B6E  EC91  F012         	call	___ftmul	;wreg free
  6741  001B72  C021  F030         	movff	?___ftmul,?_fround
  6742  001B76  C022  F031         	movff	?___ftmul+1,?_fround+1
  6743  001B7A  C023  F032         	movff	?___ftmul+2,?_fround+2
  6744  001B7E  0012               	return	
  6745  001B80                     i2l2858:
  6746                           
  6747                           ;doprnt.c: 415: else if(prec > 10)
  6748  001B80  0E0A               	movlw	10
  6749  001B82  6439               	cpfsgt	fround@prec,c
  6750  001B84  D05D               	goto	i2l2866
  6751                           
  6752                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6753  001B86  0E00               	movlw	0
  6754  001B88  6E12               	movwf	___wmul@multiplicand+1,c
  6755  001B8A  0E03               	movlw	3
  6756  001B8C  6E11               	movwf	___wmul@multiplicand,c
  6757  001B8E  0E00               	movlw	0
  6758  001B90  6E04               	movwf	___awmod@divisor+1,c
  6759  001B92  0E0A               	movlw	10
  6760  001B94  6E03               	movwf	___awmod@divisor,c
  6761  001B96  C039  F001         	movff	fround@prec,___awmod@dividend
  6762  001B9A  6A02               	clrf	___awmod@dividend+1,c
  6763  001B9C  EC56  F015         	call	___awmod	;wreg free
  6764  001BA0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6765  001BA4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6766  001BA8  ECCB  F017         	call	___wmul	;wreg free
  6767  001BAC  0E29               	movlw	low __npowers_
  6768  001BAE  240F               	addwf	?___wmul,w,c
  6769  001BB0  6EF6               	movwf	tblptrl,c
  6770  001BB2  0E06               	movlw	high __npowers_
  6771  001BB4  2010               	addwfc	?___wmul+1,w,c
  6772  001BB6  6EF7               	movwf	tblptrh,c
  6773  001BB8                     	if	0	;There are less than 3 active tblptr bytes
  6774  001BB8                     	endif
  6775  001BB8  0009               	tblrd		*+
  6776  001BBA  CFF5 F024          	movff	tablat,___ftmul@f2
  6777  001BBE  0009               	tblrd		*+
  6778  001BC0  CFF5 F025          	movff	tablat,___ftmul@f2+1
  6779  001BC4  000A               	tblrd		*-
  6780  001BC6  CFF5 F026          	movff	tablat,___ftmul@f2+2
  6781  001BCA  0E00               	movlw	0
  6782  001BCC  6E0A               	movwf	___awdiv@divisor+1,c
  6783  001BCE  0E0A               	movlw	10
  6784  001BD0  6E09               	movwf	___awdiv@divisor,c
  6785  001BD2  C039  F007         	movff	fround@prec,___awdiv@dividend
  6786  001BD6  6A08               	clrf	___awdiv@dividend+1,c
  6787  001BD8  EC97  F014         	call	___awdiv	;wreg free
  6788  001BDC  0E09               	movlw	9
  6789  001BDE  2407               	addwf	?___awdiv,w,c
  6790  001BE0  6E0F               	movwf	___wmul@multiplier,c
  6791  001BE2  0E00               	movlw	0
  6792  001BE4  2008               	addwfc	?___awdiv+1,w,c
  6793  001BE6  6E10               	movwf	___wmul@multiplier+1,c
  6794  001BE8  0E00               	movlw	0
  6795  001BEA  6E12               	movwf	___wmul@multiplicand+1,c
  6796  001BEC  0E03               	movlw	3
  6797  001BEE  6E11               	movwf	___wmul@multiplicand,c
  6798  001BF0  ECCB  F017         	call	___wmul	;wreg free
  6799  001BF4  0E29               	movlw	low __npowers_
  6800  001BF6  240F               	addwf	?___wmul,w,c
  6801  001BF8  6EF6               	movwf	tblptrl,c
  6802  001BFA  0E06               	movlw	high __npowers_
  6803  001BFC  2010               	addwfc	?___wmul+1,w,c
  6804  001BFE  6EF7               	movwf	tblptrh,c
  6805  001C00                     	if	0	;There are less than 3 active tblptr bytes
  6806  001C00                     	endif
  6807  001C00  0009               	tblrd		*+
  6808  001C02  CFF5 F021          	movff	tablat,___ftmul@f1
  6809  001C06  0009               	tblrd		*+
  6810  001C08  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6811  001C0C  000A               	tblrd		*-
  6812  001C0E  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6813  001C12  EC91  F012         	call	___ftmul	;wreg free
  6814  001C16  C021  F036         	movff	?___ftmul,_fround$1655
  6815  001C1A  C022  F037         	movff	?___ftmul+1,_fround$1655+1
  6816  001C1E  C023  F038         	movff	?___ftmul+2,_fround$1655+2
  6817                           
  6818                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6819  001C22  C036  F021         	movff	_fround$1655,___ftmul@f1
  6820  001C26  C037  F022         	movff	_fround$1655+1,___ftmul@f1+1
  6821  001C2A  C038  F023         	movff	_fround$1655+2,___ftmul@f1+2
  6822  001C2E  0E00               	movlw	0
  6823  001C30  6E24               	movwf	___ftmul@f2,c
  6824  001C32  0E00               	movlw	0
  6825  001C34  6E25               	movwf	___ftmul@f2+1,c
  6826  001C36  0E3F               	movlw	63
  6827  001C38  6E26               	movwf	___ftmul@f2+2,c
  6828  001C3A  EC91  F012         	call	___ftmul	;wreg free
  6829  001C3E  D799               	goto	L5
  6830  001C40                     i2l2866:
  6831                           
  6832                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6833  001C40  5039               	movf	fround@prec,w,c
  6834  001C42  0D03               	mullw	3
  6835  001C44  0E29               	movlw	low __npowers_
  6836  001C46  24F3               	addwf	prodl,w,c
  6837  001C48  6EF6               	movwf	tblptrl,c
  6838  001C4A  0E06               	movlw	high __npowers_
  6839  001C4C  20F4               	addwfc	prodh,w,c
  6840  001C4E  6EF7               	movwf	tblptrh,c
  6841  001C50                     	if	0	;There are less than 3 active tblptr bytes
  6842  001C50                     	endif
  6843  001C50  0009               	tblrd		*+
  6844  001C52  CFF5 F021          	movff	tablat,___ftmul@f1
  6845  001C56  0009               	tblrd		*+
  6846  001C58  CFF5 F022          	movff	tablat,___ftmul@f1+1
  6847  001C5C  000A               	tblrd		*-
  6848  001C5E  CFF5 F023          	movff	tablat,___ftmul@f1+2
  6849  001C62  0E00               	movlw	0
  6850  001C64  6E24               	movwf	___ftmul@f2,c
  6851  001C66  0E00               	movlw	0
  6852  001C68  6E25               	movwf	___ftmul@f2+1,c
  6853  001C6A  0E3F               	movlw	63
  6854  001C6C  6E26               	movwf	___ftmul@f2+2,c
  6855  001C6E  EC91  F012         	call	___ftmul	;wreg free
  6856  001C72  C021  F030         	movff	?___ftmul,?_fround
  6857  001C76  C022  F031         	movff	?___ftmul+1,?_fround+1
  6858  001C7A  C023  F032         	movff	?___ftmul+2,?_fround+2
  6859  001C7E  0012               	return	
  6860  001C80                     __end_of_fround:
  6861                           	opt stack 0
  6862                           tosu	equ	0xFFF
  6863                           tosh	equ	0xFFE
  6864                           tosl	equ	0xFFD
  6865                           pclatu	equ	0xFFB
  6866                           pclath	equ	0xFFA
  6867                           tblptru	equ	0xFF8
  6868                           tblptrh	equ	0xFF7
  6869                           tblptrl	equ	0xFF6
  6870                           tablat	equ	0xFF5
  6871                           prodh	equ	0xFF4
  6872                           prodl	equ	0xFF3
  6873                           intcon	equ	0xFF2
  6874                           intcon2	equ	0xFF1
  6875                           intcon3	equ	0xFF0
  6876                           postinc0	equ	0xFEE
  6877                           fsr0h	equ	0xFEA
  6878                           fsr0l	equ	0xFE9
  6879                           wreg	equ	0xFE8
  6880                           fsr1h	equ	0xFE2
  6881                           fsr1l	equ	0xFE1
  6882                           indf2	equ	0xFDF
  6883                           postinc2	equ	0xFDE
  6884                           postdec2	equ	0xFDD
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           
  6889 ;; *************** function ___wmul *****************
  6890 ;; Defined at:
  6891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  multiplier      2   14[COMRAM] unsigned int 
  6894 ;;  multiplicand    2   16[COMRAM] unsigned int 
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;  product         2   18[COMRAM] unsigned int 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  2   14[COMRAM] unsigned int 
  6899 ;; Registers used:
  6900 ;;		wreg, status,2, status,0, prodl, prodh
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6906 ;;      Params:         4       0       0       0       0       0       0
  6907 ;;      Locals:         2       0       0       0       0       0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0
  6909 ;;      Totals:         6       0       0       0       0       0       0
  6910 ;;Total ram usage:        6 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; This function calls:
  6913 ;;		Nothing
  6914 ;; This function is called by:
  6915 ;;		_INT0_ISR
  6916 ;;		_fround
  6917 ;;		_scale
  6918 ;;		__doprnt
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text30
  6923  002F96                     __ptext30:
  6924                           	opt stack 0
  6925  002F96                     ___wmul:
  6926                           	opt stack 22
  6927                           
  6928                           ;incstack = 0
  6929  002F96  500F               	movf	___wmul@multiplier,w,c
  6930  002F98  0211               	mulwf	___wmul@multiplicand,c
  6931  002F9A  CFF3 F013          	movff	prodl,___wmul@product
  6932  002F9E  CFF4 F014          	movff	prodh,___wmul@product+1
  6933  002FA2  500F               	movf	___wmul@multiplier,w,c
  6934  002FA4  0212               	mulwf	___wmul@multiplicand+1,c
  6935  002FA6  50F3               	movf	prodl,w,c
  6936  002FA8  2614               	addwf	___wmul@product+1,f,c
  6937  002FAA  5010               	movf	___wmul@multiplier+1,w,c
  6938  002FAC  0211               	mulwf	___wmul@multiplicand,c
  6939  002FAE  50F3               	movf	prodl,w,c
  6940  002FB0  2614               	addwf	___wmul@product+1,f,c
  6941  002FB2  C013  F00F         	movff	___wmul@product,?___wmul
  6942  002FB6  C014  F010         	movff	___wmul@product+1,?___wmul+1
  6943  002FBA  0012               	return	
  6944  002FBC                     __end_of___wmul:
  6945                           	opt stack 0
  6946                           tosu	equ	0xFFF
  6947                           tosh	equ	0xFFE
  6948                           tosl	equ	0xFFD
  6949                           pclatu	equ	0xFFB
  6950                           pclath	equ	0xFFA
  6951                           tblptru	equ	0xFF8
  6952                           tblptrh	equ	0xFF7
  6953                           tblptrl	equ	0xFF6
  6954                           tablat	equ	0xFF5
  6955                           prodh	equ	0xFF4
  6956                           prodl	equ	0xFF3
  6957                           intcon	equ	0xFF2
  6958                           intcon2	equ	0xFF1
  6959                           intcon3	equ	0xFF0
  6960                           postinc0	equ	0xFEE
  6961                           fsr0h	equ	0xFEA
  6962                           fsr0l	equ	0xFE9
  6963                           wreg	equ	0xFE8
  6964                           fsr1h	equ	0xFE2
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function ___ftmul *****************
  6974 ;; Defined at:
  6975 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  f1              3   32[COMRAM] float 
  6978 ;;  f2              3   35[COMRAM] float 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  6981 ;;  sign            1   46[COMRAM] unsigned char 
  6982 ;;  cntr            1   45[COMRAM] unsigned char 
  6983 ;;  exp             1   41[COMRAM] unsigned char 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  3   32[COMRAM] float 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         6       0       0       0       0       0       0
  6994 ;;      Locals:         6       0       0       0       0       0       0
  6995 ;;      Temps:          3       0       0       0       0       0       0
  6996 ;;      Totals:        15       0       0       0       0       0       0
  6997 ;;Total ram usage:       15 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    1
  7000 ;; This function calls:
  7001 ;;		___ftpack
  7002 ;; This function is called by:
  7003 ;;		_INT0_ISR
  7004 ;;		_fround
  7005 ;;		_scale
  7006 ;;		__doprnt
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text31
  7011  002522                     __ptext31:
  7012                           	opt stack 0
  7013  002522                     ___ftmul:
  7014                           	opt stack 21
  7015                           
  7016                           ;incstack = 0
  7017  002522  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  7018  002526  6A28               	clrf	(??___ftmul+1)& (0+255),c
  7019  002528  6A29               	clrf	(??___ftmul+2)& (0+255),c
  7020  00252A  3422               	rlcf	___ftmul@f1+1,w,c
  7021  00252C  3627               	rlcf	??___ftmul& (0+255),f,c
  7022  00252E  E301               	bnc	u253_41
  7023  002530  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  7024  002532                     u253_41:
  7025  002532  5027               	movf	??___ftmul,w,c
  7026  002534  6E2A               	movwf	___ftmul@exp,c
  7027  002536  502A               	movf	___ftmul@exp,w,c
  7028  002538  A4D8               	btfss	status,2,c
  7029  00253A  D007               	goto	i2l2688
  7030  00253C  0E00               	movlw	0
  7031  00253E  6E21               	movwf	?___ftmul,c
  7032  002540  0E00               	movlw	0
  7033  002542  6E22               	movwf	?___ftmul+1,c
  7034  002544  0E00               	movlw	0
  7035  002546  6E23               	movwf	?___ftmul+2,c
  7036  002548  0012               	return	
  7037  00254A                     i2l2688:
  7038  00254A  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  7039  00254E  6A28               	clrf	(??___ftmul+1)& (0+255),c
  7040  002550  6A29               	clrf	(??___ftmul+2)& (0+255),c
  7041  002552  3425               	rlcf	___ftmul@f2+1,w,c
  7042  002554  3627               	rlcf	??___ftmul& (0+255),f,c
  7043  002556  E301               	bnc	u255_41
  7044  002558  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  7045  00255A                     u255_41:
  7046  00255A  5027               	movf	??___ftmul,w,c
  7047  00255C  6E2F               	movwf	___ftmul@sign,c
  7048  00255E  502F               	movf	___ftmul@sign,w,c
  7049  002560  A4D8               	btfss	status,2,c
  7050  002562  D007               	goto	i2l2694
  7051  002564  0E00               	movlw	0
  7052  002566  6E21               	movwf	?___ftmul,c
  7053  002568  0E00               	movlw	0
  7054  00256A  6E22               	movwf	?___ftmul+1,c
  7055  00256C  0E00               	movlw	0
  7056  00256E  6E23               	movwf	?___ftmul+2,c
  7057  002570  0012               	return	
  7058  002572                     i2l2694:
  7059  002572  502F               	movf	___ftmul@sign,w,c
  7060  002574  0F7B               	addlw	123
  7061  002576  262A               	addwf	___ftmul@exp,f,c
  7062  002578  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  7063  00257C  5026               	movf	___ftmul@f2+2,w,c
  7064  00257E  1A2F               	xorwf	___ftmul@sign,f,c
  7065  002580  0E80               	movlw	128
  7066  002582  162F               	andwf	___ftmul@sign,f,c
  7067  002584  8E22               	bsf	___ftmul@f1+1,7,c
  7068  002586  8E25               	bsf	___ftmul@f2+1,7,c
  7069  002588  0EFF               	movlw	255
  7070  00258A  1624               	andwf	___ftmul@f2,f,c
  7071  00258C  0EFF               	movlw	255
  7072  00258E  1625               	andwf	___ftmul@f2+1,f,c
  7073  002590  0E00               	movlw	0
  7074  002592  1626               	andwf	___ftmul@f2+2,f,c
  7075  002594  0E00               	movlw	0
  7076  002596  6E2B               	movwf	___ftmul@f3_as_product,c
  7077  002598  0E00               	movlw	0
  7078  00259A  6E2C               	movwf	___ftmul@f3_as_product+1,c
  7079  00259C  0E00               	movlw	0
  7080  00259E  6E2D               	movwf	___ftmul@f3_as_product+2,c
  7081  0025A0  0E07               	movlw	7
  7082  0025A2  6E2E               	movwf	___ftmul@cntr,c
  7083  0025A4                     i2l2708:
  7084  0025A4  A021               	btfss	___ftmul@f1,0,c
  7085  0025A6  D006               	goto	i2l2712
  7086  0025A8  5024               	movf	___ftmul@f2,w,c
  7087  0025AA  262B               	addwf	___ftmul@f3_as_product,f,c
  7088  0025AC  5025               	movf	___ftmul@f2+1,w,c
  7089  0025AE  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  7090  0025B0  5026               	movf	___ftmul@f2+2,w,c
  7091  0025B2  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  7092  0025B4                     i2l2712:
  7093  0025B4  90D8               	bcf	status,0,c
  7094  0025B6  3223               	rrcf	___ftmul@f1+2,f,c
  7095  0025B8  3222               	rrcf	___ftmul@f1+1,f,c
  7096  0025BA  3221               	rrcf	___ftmul@f1,f,c
  7097  0025BC  90D8               	bcf	status,0,c
  7098  0025BE  3624               	rlcf	___ftmul@f2,f,c
  7099  0025C0  3625               	rlcf	___ftmul@f2+1,f,c
  7100  0025C2  3626               	rlcf	___ftmul@f2+2,f,c
  7101  0025C4  2E2E               	decfsz	___ftmul@cntr,f,c
  7102  0025C6  D7EE               	goto	i2l2708
  7103  0025C8  0E09               	movlw	9
  7104  0025CA  6E2E               	movwf	___ftmul@cntr,c
  7105  0025CC                     i2l2718:
  7106  0025CC  A021               	btfss	___ftmul@f1,0,c
  7107  0025CE  D006               	goto	i2l2722
  7108  0025D0  5024               	movf	___ftmul@f2,w,c
  7109  0025D2  262B               	addwf	___ftmul@f3_as_product,f,c
  7110  0025D4  5025               	movf	___ftmul@f2+1,w,c
  7111  0025D6  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  7112  0025D8  5026               	movf	___ftmul@f2+2,w,c
  7113  0025DA  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  7114  0025DC                     i2l2722:
  7115  0025DC  90D8               	bcf	status,0,c
  7116  0025DE  3223               	rrcf	___ftmul@f1+2,f,c
  7117  0025E0  3222               	rrcf	___ftmul@f1+1,f,c
  7118  0025E2  3221               	rrcf	___ftmul@f1,f,c
  7119  0025E4  90D8               	bcf	status,0,c
  7120  0025E6  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  7121  0025E8  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  7122  0025EA  322B               	rrcf	___ftmul@f3_as_product,f,c
  7123  0025EC  2E2E               	decfsz	___ftmul@cntr,f,c
  7124  0025EE  D7EE               	goto	i2l2718
  7125  0025F0  C02B  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7126  0025F4  C02C  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7127  0025F8  C02D  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7128  0025FC  C02A  F004         	movff	___ftmul@exp,___ftpack@exp
  7129  002600  C02F  F005         	movff	___ftmul@sign,___ftpack@sign
  7130  002604  ECF8  F013         	call	___ftpack	;wreg free
  7131  002608  C001  F021         	movff	?___ftpack,?___ftmul
  7132  00260C  C002  F022         	movff	?___ftpack+1,?___ftmul+1
  7133  002610  C003  F023         	movff	?___ftpack+2,?___ftmul+2
  7134  002614  0012               	return	
  7135  002616                     __end_of___ftmul:
  7136                           	opt stack 0
  7137                           tosu	equ	0xFFF
  7138                           tosh	equ	0xFFE
  7139                           tosl	equ	0xFFD
  7140                           pclatu	equ	0xFFB
  7141                           pclath	equ	0xFFA
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           intcon	equ	0xFF2
  7149                           intcon2	equ	0xFF1
  7150                           intcon3	equ	0xFF0
  7151                           postinc0	equ	0xFEE
  7152                           fsr0h	equ	0xFEA
  7153                           fsr0l	equ	0xFE9
  7154                           wreg	equ	0xFE8
  7155                           fsr1h	equ	0xFE2
  7156                           fsr1l	equ	0xFE1
  7157                           indf2	equ	0xFDF
  7158                           postinc2	equ	0xFDE
  7159                           postdec2	equ	0xFDD
  7160                           fsr2h	equ	0xFDA
  7161                           fsr2l	equ	0xFD9
  7162                           status	equ	0xFD8
  7163                           
  7164 ;; *************** function ___awmod *****************
  7165 ;; Defined at:
  7166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  dividend        2    0[COMRAM] int 
  7169 ;;  divisor         2    2[COMRAM] int 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  sign            1    5[COMRAM] unsigned char 
  7172 ;;  counter         1    4[COMRAM] unsigned char 
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  2    0[COMRAM] int 
  7175 ;; Registers used:
  7176 ;;		wreg, status,2, status,0
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7182 ;;      Params:         4       0       0       0       0       0       0
  7183 ;;      Locals:         2       0       0       0       0       0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0
  7185 ;;      Totals:         6       0       0       0       0       0       0
  7186 ;;Total ram usage:        6 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_fround
  7192 ;;		_scale
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text32
  7197  002AAC                     __ptext32:
  7198                           	opt stack 0
  7199  002AAC                     ___awmod:
  7200                           	opt stack 22
  7201                           
  7202                           ;incstack = 0
  7203  002AAC  0E00               	movlw	0
  7204  002AAE  6E06               	movwf	___awmod@sign,c
  7205  002AB0  AE02               	btfss	___awmod@dividend+1,7,c
  7206  002AB2  D006               	goto	i2l2782
  7207  002AB4  6C01               	negf	___awmod@dividend,c
  7208  002AB6  1E02               	comf	___awmod@dividend+1,f,c
  7209  002AB8  B0D8               	btfsc	status,0,c
  7210  002ABA  2A02               	incf	___awmod@dividend+1,f,c
  7211  002ABC  0E01               	movlw	1
  7212  002ABE  6E06               	movwf	___awmod@sign,c
  7213  002AC0                     i2l2782:
  7214  002AC0  AE04               	btfss	___awmod@divisor+1,7,c
  7215  002AC2  D004               	goto	i2l2786
  7216  002AC4  6C03               	negf	___awmod@divisor,c
  7217  002AC6  1E04               	comf	___awmod@divisor+1,f,c
  7218  002AC8  B0D8               	btfsc	status,0,c
  7219  002ACA  2A04               	incf	___awmod@divisor+1,f,c
  7220  002ACC                     i2l2786:
  7221  002ACC  5003               	movf	___awmod@divisor,w,c
  7222  002ACE  1004               	iorwf	___awmod@divisor+1,w,c
  7223  002AD0  B4D8               	btfsc	status,2,c
  7224  002AD2  D018               	goto	i2l2802
  7225  002AD4  0E01               	movlw	1
  7226  002AD6  6E05               	movwf	___awmod@counter,c
  7227  002AD8  D004               	goto	i2l2792
  7228  002ADA                     i2l2790:
  7229  002ADA  90D8               	bcf	status,0,c
  7230  002ADC  3603               	rlcf	___awmod@divisor,f,c
  7231  002ADE  3604               	rlcf	___awmod@divisor+1,f,c
  7232  002AE0  2A05               	incf	___awmod@counter,f,c
  7233  002AE2                     i2l2792:
  7234  002AE2  AE04               	btfss	___awmod@divisor+1,7,c
  7235  002AE4  D7FA               	goto	i2l2790
  7236  002AE6                     i2l2794:
  7237  002AE6  5003               	movf	___awmod@divisor,w,c
  7238  002AE8  5C01               	subwf	___awmod@dividend,w,c
  7239  002AEA  5004               	movf	___awmod@divisor+1,w,c
  7240  002AEC  5802               	subwfb	___awmod@dividend+1,w,c
  7241  002AEE  A0D8               	btfss	status,0,c
  7242  002AF0  D004               	goto	i2l2798
  7243  002AF2  5003               	movf	___awmod@divisor,w,c
  7244  002AF4  5E01               	subwf	___awmod@dividend,f,c
  7245  002AF6  5004               	movf	___awmod@divisor+1,w,c
  7246  002AF8  5A02               	subwfb	___awmod@dividend+1,f,c
  7247  002AFA                     i2l2798:
  7248  002AFA  90D8               	bcf	status,0,c
  7249  002AFC  3204               	rrcf	___awmod@divisor+1,f,c
  7250  002AFE  3203               	rrcf	___awmod@divisor,f,c
  7251  002B00  2E05               	decfsz	___awmod@counter,f,c
  7252  002B02  D7F1               	goto	i2l2794
  7253  002B04                     i2l2802:
  7254  002B04  5006               	movf	___awmod@sign,w,c
  7255  002B06  B4D8               	btfsc	status,2,c
  7256  002B08  D004               	goto	i2l2806
  7257  002B0A  6C01               	negf	___awmod@dividend,c
  7258  002B0C  1E02               	comf	___awmod@dividend+1,f,c
  7259  002B0E  B0D8               	btfsc	status,0,c
  7260  002B10  2A02               	incf	___awmod@dividend+1,f,c
  7261  002B12                     i2l2806:
  7262  002B12  C001  F001         	movff	___awmod@dividend,?___awmod
  7263  002B16  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7264  002B1A  0012               	return	
  7265  002B1C                     __end_of___awmod:
  7266                           	opt stack 0
  7267                           tosu	equ	0xFFF
  7268                           tosh	equ	0xFFE
  7269                           tosl	equ	0xFFD
  7270                           pclatu	equ	0xFFB
  7271                           pclath	equ	0xFFA
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           intcon3	equ	0xFF0
  7281                           postinc0	equ	0xFEE
  7282                           fsr0h	equ	0xFEA
  7283                           fsr0l	equ	0xFE9
  7284                           wreg	equ	0xFE8
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function ___awdiv *****************
  7295 ;; Defined at:
  7296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  dividend        2    6[COMRAM] int 
  7299 ;;  divisor         2    8[COMRAM] int 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  quotient        2   12[COMRAM] int 
  7302 ;;  sign            1   11[COMRAM] unsigned char 
  7303 ;;  counter         1   10[COMRAM] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  2    6[COMRAM] int 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2, status,0
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7313 ;;      Params:         4       0       0       0       0       0       0
  7314 ;;      Locals:         4       0       0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0
  7316 ;;      Totals:         8       0       0       0       0       0       0
  7317 ;;Total ram usage:        8 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_fround
  7323 ;;		_scale
  7324 ;;		__doprnt
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text33
  7329  00292E                     __ptext33:
  7330                           	opt stack 0
  7331  00292E                     ___awdiv:
  7332                           	opt stack 22
  7333                           
  7334                           ;incstack = 0
  7335  00292E  0E00               	movlw	0
  7336  002930  6E0C               	movwf	___awdiv@sign,c
  7337  002932  AE0A               	btfss	___awdiv@divisor+1,7,c
  7338  002934  D006               	goto	i2l2738
  7339  002936  6C09               	negf	___awdiv@divisor,c
  7340  002938  1E0A               	comf	___awdiv@divisor+1,f,c
  7341  00293A  B0D8               	btfsc	status,0,c
  7342  00293C  2A0A               	incf	___awdiv@divisor+1,f,c
  7343  00293E  0E01               	movlw	1
  7344  002940  6E0C               	movwf	___awdiv@sign,c
  7345  002942                     i2l2738:
  7346  002942  AE08               	btfss	___awdiv@dividend+1,7,c
  7347  002944  D006               	goto	i2l2744
  7348  002946  6C07               	negf	___awdiv@dividend,c
  7349  002948  1E08               	comf	___awdiv@dividend+1,f,c
  7350  00294A  B0D8               	btfsc	status,0,c
  7351  00294C  2A08               	incf	___awdiv@dividend+1,f,c
  7352  00294E  0E01               	movlw	1
  7353  002950  1A0C               	xorwf	___awdiv@sign,f,c
  7354  002952                     i2l2744:
  7355  002952  0E00               	movlw	0
  7356  002954  6E0E               	movwf	___awdiv@quotient+1,c
  7357  002956  0E00               	movlw	0
  7358  002958  6E0D               	movwf	___awdiv@quotient,c
  7359  00295A  5009               	movf	___awdiv@divisor,w,c
  7360  00295C  100A               	iorwf	___awdiv@divisor+1,w,c
  7361  00295E  B4D8               	btfsc	status,2,c
  7362  002960  D01C               	goto	i2l2766
  7363  002962  0E01               	movlw	1
  7364  002964  6E0B               	movwf	___awdiv@counter,c
  7365  002966  D004               	goto	i2l2752
  7366  002968                     i2l2750:
  7367  002968  90D8               	bcf	status,0,c
  7368  00296A  3609               	rlcf	___awdiv@divisor,f,c
  7369  00296C  360A               	rlcf	___awdiv@divisor+1,f,c
  7370  00296E  2A0B               	incf	___awdiv@counter,f,c
  7371  002970                     i2l2752:
  7372  002970  AE0A               	btfss	___awdiv@divisor+1,7,c
  7373  002972  D7FA               	goto	i2l2750
  7374  002974                     i2l2754:
  7375  002974  90D8               	bcf	status,0,c
  7376  002976  360D               	rlcf	___awdiv@quotient,f,c
  7377  002978  360E               	rlcf	___awdiv@quotient+1,f,c
  7378  00297A  5009               	movf	___awdiv@divisor,w,c
  7379  00297C  5C07               	subwf	___awdiv@dividend,w,c
  7380  00297E  500A               	movf	___awdiv@divisor+1,w,c
  7381  002980  5808               	subwfb	___awdiv@dividend+1,w,c
  7382  002982  A0D8               	btfss	status,0,c
  7383  002984  D005               	goto	i2l2762
  7384  002986  5009               	movf	___awdiv@divisor,w,c
  7385  002988  5E07               	subwf	___awdiv@dividend,f,c
  7386  00298A  500A               	movf	___awdiv@divisor+1,w,c
  7387  00298C  5A08               	subwfb	___awdiv@dividend+1,f,c
  7388  00298E  800D               	bsf	___awdiv@quotient,0,c
  7389  002990                     i2l2762:
  7390  002990  90D8               	bcf	status,0,c
  7391  002992  320A               	rrcf	___awdiv@divisor+1,f,c
  7392  002994  3209               	rrcf	___awdiv@divisor,f,c
  7393  002996  2E0B               	decfsz	___awdiv@counter,f,c
  7394  002998  D7ED               	goto	i2l2754
  7395  00299A                     i2l2766:
  7396  00299A  500C               	movf	___awdiv@sign,w,c
  7397  00299C  B4D8               	btfsc	status,2,c
  7398  00299E  D004               	goto	i2l2770
  7399  0029A0  6C0D               	negf	___awdiv@quotient,c
  7400  0029A2  1E0E               	comf	___awdiv@quotient+1,f,c
  7401  0029A4  B0D8               	btfsc	status,0,c
  7402  0029A6  2A0E               	incf	___awdiv@quotient+1,f,c
  7403  0029A8                     i2l2770:
  7404  0029A8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  7405  0029AC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  7406  0029B0  0012               	return	
  7407  0029B2                     __end_of___awdiv:
  7408                           	opt stack 0
  7409                           tosu	equ	0xFFF
  7410                           tosh	equ	0xFFE
  7411                           tosl	equ	0xFFD
  7412                           pclatu	equ	0xFFB
  7413                           pclath	equ	0xFFA
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           intcon	equ	0xFF2
  7421                           intcon2	equ	0xFF1
  7422                           intcon3	equ	0xFF0
  7423                           postinc0	equ	0xFEE
  7424                           fsr0h	equ	0xFEA
  7425                           fsr0l	equ	0xFE9
  7426                           wreg	equ	0xFE8
  7427                           fsr1h	equ	0xFE2
  7428                           fsr1l	equ	0xFE1
  7429                           indf2	equ	0xFDF
  7430                           postinc2	equ	0xFDE
  7431                           postdec2	equ	0xFDD
  7432                           fsr2h	equ	0xFDA
  7433                           fsr2l	equ	0xFD9
  7434                           status	equ	0xFD8
  7435                           
  7436 ;; *************** function __tdiv_to_l_ *****************
  7437 ;; Defined at:
  7438 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  f1              3    0[COMRAM] float 
  7441 ;;  f2              3    3[COMRAM] float 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  quot            4    9[COMRAM] unsigned long 
  7444 ;;  exp1            1   14[COMRAM] unsigned char 
  7445 ;;  cntr            1   13[COMRAM] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  4    0[COMRAM] unsigned long 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7455 ;;      Params:         6       0       0       0       0       0       0
  7456 ;;      Locals:         6       0       0       0       0       0       0
  7457 ;;      Temps:          3       0       0       0       0       0       0
  7458 ;;      Totals:        15       0       0       0       0       0       0
  7459 ;;Total ram usage:       15 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; This function calls:
  7462 ;;		Nothing
  7463 ;; This function is called by:
  7464 ;;		__doprnt
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text34
  7469  0022C8                     __ptext34:
  7470                           	opt stack 0
  7471  0022C8                     __tdiv_to_l_:
  7472                           	opt stack 23
  7473                           
  7474                           ;incstack = 0
  7475  0022C8  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7476  0022CC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7477  0022CE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7478  0022D0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  7479  0022D2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7480  0022D4  E301               	bnc	u284_41
  7481  0022D6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7482  0022D8                     u284_41:
  7483  0022D8  5007               	movf	??__tdiv_to_l_,w,c
  7484  0022DA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  7485  0022DC  500F               	movf	__tdiv_to_l_@exp1,w,c
  7486  0022DE  A4D8               	btfss	status,2,c
  7487  0022E0  D009               	goto	i2l2926
  7488  0022E2  0E00               	movlw	0
  7489  0022E4  6E01               	movwf	?__tdiv_to_l_,c
  7490  0022E6  0E00               	movlw	0
  7491  0022E8  6E02               	movwf	?__tdiv_to_l_+1,c
  7492  0022EA  0E00               	movlw	0
  7493  0022EC  6E03               	movwf	?__tdiv_to_l_+2,c
  7494  0022EE  0E00               	movlw	0
  7495  0022F0  6E04               	movwf	?__tdiv_to_l_+3,c
  7496  0022F2  0012               	return	
  7497  0022F4                     i2l2926:
  7498  0022F4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7499  0022F8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7500  0022FA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7501  0022FC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  7502  0022FE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7503  002300  E301               	bnc	u286_41
  7504  002302  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7505  002304                     u286_41:
  7506  002304  5007               	movf	??__tdiv_to_l_,w,c
  7507  002306  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7508  002308  500E               	movf	__tdiv_to_l_@cntr,w,c
  7509  00230A  A4D8               	btfss	status,2,c
  7510  00230C  D009               	goto	i2l2932
  7511  00230E  0E00               	movlw	0
  7512  002310  6E01               	movwf	?__tdiv_to_l_,c
  7513  002312  0E00               	movlw	0
  7514  002314  6E02               	movwf	?__tdiv_to_l_+1,c
  7515  002316  0E00               	movlw	0
  7516  002318  6E03               	movwf	?__tdiv_to_l_+2,c
  7517  00231A  0E00               	movlw	0
  7518  00231C  6E04               	movwf	?__tdiv_to_l_+3,c
  7519  00231E  0012               	return	
  7520  002320                     i2l2932:
  7521  002320  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  7522  002322  0EFF               	movlw	255
  7523  002324  1601               	andwf	__tdiv_to_l_@f1,f,c
  7524  002326  0EFF               	movlw	255
  7525  002328  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  7526  00232A  0E00               	movlw	0
  7527  00232C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  7528  00232E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  7529  002330  0EFF               	movlw	255
  7530  002332  1604               	andwf	__tdiv_to_l_@f2,f,c
  7531  002334  0EFF               	movlw	255
  7532  002336  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  7533  002338  0E00               	movlw	0
  7534  00233A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  7535  00233C  0E00               	movlw	0
  7536  00233E  6E0A               	movwf	__tdiv_to_l_@quot,c
  7537  002340  0E00               	movlw	0
  7538  002342  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  7539  002344  0E00               	movlw	0
  7540  002346  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  7541  002348  0E00               	movlw	0
  7542  00234A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  7543  00234C  0E7F               	movlw	127
  7544  00234E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7545  002350  500E               	movf	__tdiv_to_l_@cntr,w,c
  7546  002352  0F98               	addlw	152
  7547  002354  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7548  002356  0E18               	movlw	24
  7549  002358  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7550  00235A                     i2l812:
  7551  00235A  90D8               	bcf	status,0,c
  7552  00235C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7553  00235E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7554  002360  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7555  002362  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7556  002364  5004               	movf	__tdiv_to_l_@f2,w,c
  7557  002366  5C01               	subwf	__tdiv_to_l_@f1,w,c
  7558  002368  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7559  00236A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  7560  00236C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7561  00236E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  7562  002370  A0D8               	btfss	status,0,c
  7563  002372  D007               	goto	i2l813
  7564  002374  5004               	movf	__tdiv_to_l_@f2,w,c
  7565  002376  5E01               	subwf	__tdiv_to_l_@f1,f,c
  7566  002378  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7567  00237A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  7568  00237C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7569  00237E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  7570  002380  800A               	bsf	__tdiv_to_l_@quot,0,c
  7571  002382                     i2l813:
  7572  002382  90D8               	bcf	status,0,c
  7573  002384  3601               	rlcf	__tdiv_to_l_@f1,f,c
  7574  002386  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  7575  002388  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  7576  00238A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  7577  00238C  D7E6               	goto	i2l812
  7578  00238E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  7579  002390  D016               	goto	i2l2966
  7580  002392  500F               	movf	__tdiv_to_l_@exp1,w,c
  7581  002394  0A80               	xorlw	128
  7582  002396  0F97               	addlw	151
  7583  002398  B0D8               	btfsc	status,0,c
  7584  00239A  D009               	goto	i2l2962
  7585  00239C  0E00               	movlw	0
  7586  00239E  6E01               	movwf	?__tdiv_to_l_,c
  7587  0023A0  0E00               	movlw	0
  7588  0023A2  6E02               	movwf	?__tdiv_to_l_+1,c
  7589  0023A4  0E00               	movlw	0
  7590  0023A6  6E03               	movwf	?__tdiv_to_l_+2,c
  7591  0023A8  0E00               	movlw	0
  7592  0023AA  6E04               	movwf	?__tdiv_to_l_+3,c
  7593  0023AC  0012               	return	
  7594  0023AE                     i2l2962:
  7595  0023AE  90D8               	bcf	status,0,c
  7596  0023B0  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7597  0023B2  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7598  0023B4  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7599  0023B6  320A               	rrcf	__tdiv_to_l_@quot,f,c
  7600  0023B8  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  7601  0023BA  D7F9               	goto	i2l2962
  7602  0023BC  D015               	goto	i2l819
  7603  0023BE                     i2l2966:
  7604  0023BE  0E17               	movlw	23
  7605  0023C0  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  7606  0023C2  D00F               	goto	i2l2974
  7607  0023C4  0E00               	movlw	0
  7608  0023C6  6E01               	movwf	?__tdiv_to_l_,c
  7609  0023C8  0E00               	movlw	0
  7610  0023CA  6E02               	movwf	?__tdiv_to_l_+1,c
  7611  0023CC  0E00               	movlw	0
  7612  0023CE  6E03               	movwf	?__tdiv_to_l_+2,c
  7613  0023D0  0E00               	movlw	0
  7614  0023D2  6E04               	movwf	?__tdiv_to_l_+3,c
  7615  0023D4  0012               	return	
  7616  0023D6                     i2l2972:
  7617  0023D6  90D8               	bcf	status,0,c
  7618  0023D8  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7619  0023DA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7620  0023DC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7621  0023DE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7622  0023E0  060F               	decf	__tdiv_to_l_@exp1,f,c
  7623  0023E2                     i2l2974:
  7624  0023E2  500F               	movf	__tdiv_to_l_@exp1,w,c
  7625  0023E4  A4D8               	btfss	status,2,c
  7626  0023E6  D7F7               	goto	i2l2972
  7627  0023E8                     i2l819:
  7628  0023E8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7629  0023EC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7630  0023F0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7631  0023F4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7632  0023F8  0012               	return		;funcret
  7633  0023FA                     __end_of__tdiv_to_l_:
  7634                           	opt stack 0
  7635                           tosu	equ	0xFFF
  7636                           tosh	equ	0xFFE
  7637                           tosl	equ	0xFFD
  7638                           pclatu	equ	0xFFB
  7639                           pclath	equ	0xFFA
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           intcon2	equ	0xFF1
  7648                           intcon3	equ	0xFF0
  7649                           postinc0	equ	0xFEE
  7650                           fsr0h	equ	0xFEA
  7651                           fsr0l	equ	0xFE9
  7652                           wreg	equ	0xFE8
  7653                           fsr1h	equ	0xFE2
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           fsr2h	equ	0xFDA
  7659                           fsr2l	equ	0xFD9
  7660                           status	equ	0xFD8
  7661                           
  7662 ;; *************** function __div_to_l_ *****************
  7663 ;; Defined at:
  7664 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  f1              3    0[COMRAM] unsigned long 
  7667 ;;  f2              3    3[COMRAM] unsigned long 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  quot            4    6[COMRAM] unsigned long 
  7670 ;;  exp1            1   11[COMRAM] unsigned char 
  7671 ;;  cntr            1   10[COMRAM] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  4    0[COMRAM] unsigned long 
  7674 ;; Registers used:
  7675 ;;		wreg, status,2, status,0
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7681 ;;      Params:         6       0       0       0       0       0       0
  7682 ;;      Locals:         6       0       0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0
  7684 ;;      Totals:        12       0       0       0       0       0       0
  7685 ;;Total ram usage:       12 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; This function calls:
  7688 ;;		Nothing
  7689 ;; This function is called by:
  7690 ;;		__doprnt
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text35
  7695  0023FA                     __ptext35:
  7696                           	opt stack 0
  7697  0023FA                     __div_to_l_:
  7698                           	opt stack 23
  7699                           
  7700                           ;incstack = 0
  7701  0023FA  3403               	rlcf	__div_to_l_@f1+2,w,c
  7702  0023FC  3404               	rlcf	__div_to_l_@f1+3,w,c
  7703  0023FE  6E0C               	movwf	__div_to_l_@exp1,c
  7704  002400  500C               	movf	__div_to_l_@exp1,w,c
  7705  002402  A4D8               	btfss	status,2,c
  7706  002404  D009               	goto	i2l2982
  7707  002406  0E00               	movlw	0
  7708  002408  6E01               	movwf	?__div_to_l_,c
  7709  00240A  0E00               	movlw	0
  7710  00240C  6E02               	movwf	?__div_to_l_+1,c
  7711  00240E  0E00               	movlw	0
  7712  002410  6E03               	movwf	?__div_to_l_+2,c
  7713  002412  0E00               	movlw	0
  7714  002414  6E04               	movwf	?__div_to_l_+3,c
  7715  002416  0012               	return	
  7716  002418                     i2l2982:
  7717  002418  3406               	rlcf	__div_to_l_@f2+2,w,c
  7718  00241A  3407               	rlcf	__div_to_l_@f2+3,w,c
  7719  00241C  6E0B               	movwf	__div_to_l_@cntr,c
  7720  00241E  500B               	movf	__div_to_l_@cntr,w,c
  7721  002420  A4D8               	btfss	status,2,c
  7722  002422  D009               	goto	i2l2988
  7723  002424  0E00               	movlw	0
  7724  002426  6E01               	movwf	?__div_to_l_,c
  7725  002428  0E00               	movlw	0
  7726  00242A  6E02               	movwf	?__div_to_l_+1,c
  7727  00242C  0E00               	movlw	0
  7728  00242E  6E03               	movwf	?__div_to_l_+2,c
  7729  002430  0E00               	movlw	0
  7730  002432  6E04               	movwf	?__div_to_l_+3,c
  7731  002434  0012               	return	
  7732  002436                     i2l2988:
  7733  002436  8E03               	bsf	__div_to_l_@f1+2,7,c
  7734  002438  0EFF               	movlw	255
  7735  00243A  1601               	andwf	__div_to_l_@f1,f,c
  7736  00243C  0EFF               	movlw	255
  7737  00243E  1602               	andwf	__div_to_l_@f1+1,f,c
  7738  002440  0EFF               	movlw	255
  7739  002442  1603               	andwf	__div_to_l_@f1+2,f,c
  7740  002444  0E00               	movlw	0
  7741  002446  1604               	andwf	__div_to_l_@f1+3,f,c
  7742  002448  8E06               	bsf	__div_to_l_@f2+2,7,c
  7743  00244A  0EFF               	movlw	255
  7744  00244C  1604               	andwf	__div_to_l_@f2,f,c
  7745  00244E  0EFF               	movlw	255
  7746  002450  1605               	andwf	__div_to_l_@f2+1,f,c
  7747  002452  0EFF               	movlw	255
  7748  002454  1606               	andwf	__div_to_l_@f2+2,f,c
  7749  002456  0E00               	movlw	0
  7750  002458  1607               	andwf	__div_to_l_@f2+3,f,c
  7751  00245A  0E00               	movlw	0
  7752  00245C  6E07               	movwf	__div_to_l_@quot,c
  7753  00245E  0E00               	movlw	0
  7754  002460  6E08               	movwf	__div_to_l_@quot+1,c
  7755  002462  0E00               	movlw	0
  7756  002464  6E09               	movwf	__div_to_l_@quot+2,c
  7757  002466  0E00               	movlw	0
  7758  002468  6E0A               	movwf	__div_to_l_@quot+3,c
  7759  00246A  0E7F               	movlw	127
  7760  00246C  5E0C               	subwf	__div_to_l_@exp1,f,c
  7761  00246E  500B               	movf	__div_to_l_@cntr,w,c
  7762  002470  0FA0               	addlw	160
  7763  002472  5E0C               	subwf	__div_to_l_@exp1,f,c
  7764  002474  0E20               	movlw	32
  7765  002476  6E0B               	movwf	__div_to_l_@cntr,c
  7766  002478                     i2l3002:
  7767  002478  90D8               	bcf	status,0,c
  7768  00247A  3607               	rlcf	__div_to_l_@quot,f,c
  7769  00247C  3608               	rlcf	__div_to_l_@quot+1,f,c
  7770  00247E  3609               	rlcf	__div_to_l_@quot+2,f,c
  7771  002480  360A               	rlcf	__div_to_l_@quot+3,f,c
  7772  002482  5004               	movf	__div_to_l_@f2,w,c
  7773  002484  5C01               	subwf	__div_to_l_@f1,w,c
  7774  002486  5005               	movf	__div_to_l_@f2+1,w,c
  7775  002488  5802               	subwfb	__div_to_l_@f1+1,w,c
  7776  00248A  5006               	movf	__div_to_l_@f2+2,w,c
  7777  00248C  5803               	subwfb	__div_to_l_@f1+2,w,c
  7778  00248E  5007               	movf	__div_to_l_@f2+3,w,c
  7779  002490  5804               	subwfb	__div_to_l_@f1+3,w,c
  7780  002492  A0D8               	btfss	status,0,c
  7781  002494  D009               	goto	i2l3010
  7782  002496  5004               	movf	__div_to_l_@f2,w,c
  7783  002498  5E01               	subwf	__div_to_l_@f1,f,c
  7784  00249A  5005               	movf	__div_to_l_@f2+1,w,c
  7785  00249C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  7786  00249E  5006               	movf	__div_to_l_@f2+2,w,c
  7787  0024A0  5A03               	subwfb	__div_to_l_@f1+2,f,c
  7788  0024A2  5007               	movf	__div_to_l_@f2+3,w,c
  7789  0024A4  5A04               	subwfb	__div_to_l_@f1+3,f,c
  7790  0024A6  8007               	bsf	__div_to_l_@quot,0,c
  7791  0024A8                     i2l3010:
  7792  0024A8  90D8               	bcf	status,0,c
  7793  0024AA  3601               	rlcf	__div_to_l_@f1,f,c
  7794  0024AC  3602               	rlcf	__div_to_l_@f1+1,f,c
  7795  0024AE  3603               	rlcf	__div_to_l_@f1+2,f,c
  7796  0024B0  3604               	rlcf	__div_to_l_@f1+3,f,c
  7797  0024B2  2E0B               	decfsz	__div_to_l_@cntr,f,c
  7798  0024B4  D7E1               	goto	i2l3002
  7799  0024B6  AE0C               	btfss	__div_to_l_@exp1,7,c
  7800  0024B8  D016               	goto	i2l3026
  7801  0024BA  500C               	movf	__div_to_l_@exp1,w,c
  7802  0024BC  0A80               	xorlw	128
  7803  0024BE  0F9F               	addlw	159
  7804  0024C0  B0D8               	btfsc	status,0,c
  7805  0024C2  D009               	goto	i2l3022
  7806  0024C4  0E00               	movlw	0
  7807  0024C6  6E01               	movwf	?__div_to_l_,c
  7808  0024C8  0E00               	movlw	0
  7809  0024CA  6E02               	movwf	?__div_to_l_+1,c
  7810  0024CC  0E00               	movlw	0
  7811  0024CE  6E03               	movwf	?__div_to_l_+2,c
  7812  0024D0  0E00               	movlw	0
  7813  0024D2  6E04               	movwf	?__div_to_l_+3,c
  7814  0024D4  0012               	return	
  7815  0024D6                     i2l3022:
  7816  0024D6  90D8               	bcf	status,0,c
  7817  0024D8  320A               	rrcf	__div_to_l_@quot+3,f,c
  7818  0024DA  3209               	rrcf	__div_to_l_@quot+2,f,c
  7819  0024DC  3208               	rrcf	__div_to_l_@quot+1,f,c
  7820  0024DE  3207               	rrcf	__div_to_l_@quot,f,c
  7821  0024E0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  7822  0024E2  D7F9               	goto	i2l3022
  7823  0024E4  D015               	goto	i2l715
  7824  0024E6                     i2l3026:
  7825  0024E6  0E1F               	movlw	31
  7826  0024E8  640C               	cpfsgt	__div_to_l_@exp1,c
  7827  0024EA  D00F               	goto	i2l3034
  7828  0024EC  0E00               	movlw	0
  7829  0024EE  6E01               	movwf	?__div_to_l_,c
  7830  0024F0  0E00               	movlw	0
  7831  0024F2  6E02               	movwf	?__div_to_l_+1,c
  7832  0024F4  0E00               	movlw	0
  7833  0024F6  6E03               	movwf	?__div_to_l_+2,c
  7834  0024F8  0E00               	movlw	0
  7835  0024FA  6E04               	movwf	?__div_to_l_+3,c
  7836  0024FC  0012               	return	
  7837  0024FE                     i2l3032:
  7838  0024FE  90D8               	bcf	status,0,c
  7839  002500  3607               	rlcf	__div_to_l_@quot,f,c
  7840  002502  3608               	rlcf	__div_to_l_@quot+1,f,c
  7841  002504  3609               	rlcf	__div_to_l_@quot+2,f,c
  7842  002506  360A               	rlcf	__div_to_l_@quot+3,f,c
  7843  002508  060C               	decf	__div_to_l_@exp1,f,c
  7844  00250A                     i2l3034:
  7845  00250A  500C               	movf	__div_to_l_@exp1,w,c
  7846  00250C  A4D8               	btfss	status,2,c
  7847  00250E  D7F7               	goto	i2l3032
  7848  002510                     i2l715:
  7849  002510  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  7850  002514  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7851  002518  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7852  00251C  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7853  002520  0012               	return		;funcret
  7854  002522                     __end_of__div_to_l_:
  7855                           	opt stack 0
  7856                           tosu	equ	0xFFF
  7857                           tosh	equ	0xFFE
  7858                           tosl	equ	0xFFD
  7859                           pclatu	equ	0xFFB
  7860                           pclath	equ	0xFFA
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodh	equ	0xFF4
  7866                           prodl	equ	0xFF3
  7867                           intcon	equ	0xFF2
  7868                           intcon2	equ	0xFF1
  7869                           intcon3	equ	0xFF0
  7870                           postinc0	equ	0xFEE
  7871                           fsr0h	equ	0xFEA
  7872                           fsr0l	equ	0xFE9
  7873                           wreg	equ	0xFE8
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function ___lltoft *****************
  7884 ;; Defined at:
  7885 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  c               4    8[COMRAM] unsigned long 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  exp             1   16[COMRAM] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  3    8[COMRAM] float 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7899 ;;      Params:         4       0       0       0       0       0       0
  7900 ;;      Locals:         1       0       0       0       0       0       0
  7901 ;;      Temps:          4       0       0       0       0       0       0
  7902 ;;      Totals:         9       0       0       0       0       0       0
  7903 ;;Total ram usage:        9 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    1
  7906 ;; This function calls:
  7907 ;;		___ftpack
  7908 ;; This function is called by:
  7909 ;;		__doprnt
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text36
  7914  002BE0                     __ptext36:
  7915                           	opt stack 0
  7916  002BE0                     ___lltoft:
  7917                           	opt stack 22
  7918                           
  7919                           ;incstack = 0
  7920  002BE0  0E8E               	movlw	142
  7921  002BE2  6E11               	movwf	___lltoft@exp,c
  7922  002BE4  D006               	goto	i2l3154
  7923  002BE6                     i2l3152:
  7924  002BE6  90D8               	bcf	status,0,c
  7925  002BE8  320C               	rrcf	___lltoft@c+3,f,c
  7926  002BEA  320B               	rrcf	___lltoft@c+2,f,c
  7927  002BEC  320A               	rrcf	___lltoft@c+1,f,c
  7928  002BEE  3209               	rrcf	___lltoft@c,f,c
  7929  002BF0  2A11               	incf	___lltoft@exp,f,c
  7930  002BF2                     i2l3154:
  7931  002BF2  0E00               	movlw	0
  7932  002BF4  1409               	andwf	___lltoft@c,w,c
  7933  002BF6  6E0D               	movwf	??___lltoft& (0+255),c
  7934  002BF8  0E00               	movlw	0
  7935  002BFA  140A               	andwf	___lltoft@c+1,w,c
  7936  002BFC  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7937  002BFE  0E00               	movlw	0
  7938  002C00  140B               	andwf	___lltoft@c+2,w,c
  7939  002C02  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7940  002C04  0EFF               	movlw	255
  7941  002C06  140C               	andwf	___lltoft@c+3,w,c
  7942  002C08  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7943  002C0A  500D               	movf	??___lltoft,w,c
  7944  002C0C  100E               	iorwf	??___lltoft+1,w,c
  7945  002C0E  100F               	iorwf	??___lltoft+2,w,c
  7946  002C10  1010               	iorwf	??___lltoft+3,w,c
  7947  002C12  A4D8               	btfss	status,2,c
  7948  002C14  D7E8               	goto	i2l3152
  7949  002C16  C009  F001         	movff	___lltoft@c,___ftpack@arg
  7950  002C1A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  7951  002C1E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  7952  002C22  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  7953  002C26  0E00               	movlw	0
  7954  002C28  6E05               	movwf	___ftpack@sign,c
  7955  002C2A  ECF8  F013         	call	___ftpack	;wreg free
  7956  002C2E  C001  F009         	movff	?___ftpack,?___lltoft
  7957  002C32  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7958  002C36  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7959  002C3A  0012               	return	
  7960  002C3C                     __end_of___lltoft:
  7961                           	opt stack 0
  7962                           tosu	equ	0xFFF
  7963                           tosh	equ	0xFFE
  7964                           tosl	equ	0xFFD
  7965                           pclatu	equ	0xFFB
  7966                           pclath	equ	0xFFA
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           intcon2	equ	0xFF1
  7975                           intcon3	equ	0xFF0
  7976                           postinc0	equ	0xFEE
  7977                           fsr0h	equ	0xFEA
  7978                           fsr0l	equ	0xFE9
  7979                           wreg	equ	0xFE8
  7980                           fsr1h	equ	0xFE2
  7981                           fsr1l	equ	0xFE1
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           fsr2h	equ	0xFDA
  7986                           fsr2l	equ	0xFD9
  7987                           status	equ	0xFD8
  7988                           
  7989 ;; *************** function ___llmod *****************
  7990 ;; Defined at:
  7991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  dividend        4   13[COMRAM] unsigned long 
  7994 ;;  divisor         4   17[COMRAM] unsigned long 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  counter         1   21[COMRAM] unsigned char 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  4   13[COMRAM] unsigned long 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8006 ;;      Params:         8       0       0       0       0       0       0
  8007 ;;      Locals:         1       0       0       0       0       0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0
  8009 ;;      Totals:         9       0       0       0       0       0       0
  8010 ;;Total ram usage:        9 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; This function calls:
  8013 ;;		Nothing
  8014 ;; This function is called by:
  8015 ;;		__doprnt
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text37
  8020  002B1C                     __ptext37:
  8021                           	opt stack 0
  8022  002B1C                     ___llmod:
  8023                           	opt stack 23
  8024                           
  8025                           ;incstack = 0
  8026  002B1C  5012               	movf	___llmod@divisor,w,c
  8027  002B1E  1013               	iorwf	___llmod@divisor+1,w,c
  8028  002B20  1014               	iorwf	___llmod@divisor+2,w,c
  8029  002B22  1015               	iorwf	___llmod@divisor+3,w,c
  8030  002B24  B4D8               	btfsc	status,2,c
  8031  002B26  D024               	goto	i2l926
  8032  002B28  0E01               	movlw	1
  8033  002B2A  6E16               	movwf	___llmod@counter,c
  8034  002B2C  D006               	goto	i2l3140
  8035  002B2E                     i2l3138:
  8036  002B2E  90D8               	bcf	status,0,c
  8037  002B30  3612               	rlcf	___llmod@divisor,f,c
  8038  002B32  3613               	rlcf	___llmod@divisor+1,f,c
  8039  002B34  3614               	rlcf	___llmod@divisor+2,f,c
  8040  002B36  3615               	rlcf	___llmod@divisor+3,f,c
  8041  002B38  2A16               	incf	___llmod@counter,f,c
  8042  002B3A                     i2l3140:
  8043  002B3A  AE15               	btfss	___llmod@divisor+3,7,c
  8044  002B3C  D7F8               	goto	i2l3138
  8045  002B3E                     i2l3142:
  8046  002B3E  5012               	movf	___llmod@divisor,w,c
  8047  002B40  5C0E               	subwf	___llmod@dividend,w,c
  8048  002B42  5013               	movf	___llmod@divisor+1,w,c
  8049  002B44  580F               	subwfb	___llmod@dividend+1,w,c
  8050  002B46  5014               	movf	___llmod@divisor+2,w,c
  8051  002B48  5810               	subwfb	___llmod@dividend+2,w,c
  8052  002B4A  5015               	movf	___llmod@divisor+3,w,c
  8053  002B4C  5811               	subwfb	___llmod@dividend+3,w,c
  8054  002B4E  A0D8               	btfss	status,0,c
  8055  002B50  D008               	goto	i2l3146
  8056  002B52  5012               	movf	___llmod@divisor,w,c
  8057  002B54  5E0E               	subwf	___llmod@dividend,f,c
  8058  002B56  5013               	movf	___llmod@divisor+1,w,c
  8059  002B58  5A0F               	subwfb	___llmod@dividend+1,f,c
  8060  002B5A  5014               	movf	___llmod@divisor+2,w,c
  8061  002B5C  5A10               	subwfb	___llmod@dividend+2,f,c
  8062  002B5E  5015               	movf	___llmod@divisor+3,w,c
  8063  002B60  5A11               	subwfb	___llmod@dividend+3,f,c
  8064  002B62                     i2l3146:
  8065  002B62  90D8               	bcf	status,0,c
  8066  002B64  3215               	rrcf	___llmod@divisor+3,f,c
  8067  002B66  3214               	rrcf	___llmod@divisor+2,f,c
  8068  002B68  3213               	rrcf	___llmod@divisor+1,f,c
  8069  002B6A  3212               	rrcf	___llmod@divisor,f,c
  8070  002B6C  2E16               	decfsz	___llmod@counter,f,c
  8071  002B6E  D7E7               	goto	i2l3142
  8072  002B70                     i2l926:
  8073  002B70  C00E  F00E         	movff	___llmod@dividend,?___llmod
  8074  002B74  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  8075  002B78  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  8076  002B7C  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  8077  002B80  0012               	return		;funcret
  8078  002B82                     __end_of___llmod:
  8079                           	opt stack 0
  8080                           tosu	equ	0xFFF
  8081                           tosh	equ	0xFFE
  8082                           tosl	equ	0xFFD
  8083                           pclatu	equ	0xFFB
  8084                           pclath	equ	0xFFA
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon	equ	0xFF2
  8092                           intcon2	equ	0xFF1
  8093                           intcon3	equ	0xFF0
  8094                           postinc0	equ	0xFEE
  8095                           fsr0h	equ	0xFEA
  8096                           fsr0l	equ	0xFE9
  8097                           wreg	equ	0xFE8
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           fsr2h	equ	0xFDA
  8104                           fsr2l	equ	0xFD9
  8105                           status	equ	0xFD8
  8106                           
  8107 ;; *************** function ___lldiv *****************
  8108 ;; Defined at:
  8109 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  dividend        4    0[COMRAM] unsigned long 
  8112 ;;  divisor         4    4[COMRAM] unsigned long 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  quotient        4    8[COMRAM] unsigned long 
  8115 ;;  counter         1   12[COMRAM] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  4    0[COMRAM] unsigned long 
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, status,0
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8125 ;;      Params:         8       0       0       0       0       0       0
  8126 ;;      Locals:         5       0       0       0       0       0       0
  8127 ;;      Temps:          0       0       0       0       0       0       0
  8128 ;;      Totals:        13       0       0       0       0       0       0
  8129 ;;Total ram usage:       13 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		__doprnt
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text38
  8139  0029B2                     __ptext38:
  8140                           	opt stack 0
  8141  0029B2                     ___lldiv:
  8142                           	opt stack 23
  8143                           
  8144                           ;incstack = 0
  8145  0029B2  0E00               	movlw	0
  8146  0029B4  6E09               	movwf	___lldiv@quotient,c
  8147  0029B6  0E00               	movlw	0
  8148  0029B8  6E0A               	movwf	___lldiv@quotient+1,c
  8149  0029BA  0E00               	movlw	0
  8150  0029BC  6E0B               	movwf	___lldiv@quotient+2,c
  8151  0029BE  0E00               	movlw	0
  8152  0029C0  6E0C               	movwf	___lldiv@quotient+3,c
  8153  0029C2  5005               	movf	___lldiv@divisor,w,c
  8154  0029C4  1006               	iorwf	___lldiv@divisor+1,w,c
  8155  0029C6  1007               	iorwf	___lldiv@divisor+2,w,c
  8156  0029C8  1008               	iorwf	___lldiv@divisor+3,w,c
  8157  0029CA  B4D8               	btfsc	status,2,c
  8158  0029CC  D02A               	goto	i2l916
  8159  0029CE  0E01               	movlw	1
  8160  0029D0  6E0D               	movwf	___lldiv@counter,c
  8161  0029D2  D006               	goto	i2l3120
  8162  0029D4                     i2l3118:
  8163  0029D4  90D8               	bcf	status,0,c
  8164  0029D6  3605               	rlcf	___lldiv@divisor,f,c
  8165  0029D8  3606               	rlcf	___lldiv@divisor+1,f,c
  8166  0029DA  3607               	rlcf	___lldiv@divisor+2,f,c
  8167  0029DC  3608               	rlcf	___lldiv@divisor+3,f,c
  8168  0029DE  2A0D               	incf	___lldiv@counter,f,c
  8169  0029E0                     i2l3120:
  8170  0029E0  AE08               	btfss	___lldiv@divisor+3,7,c
  8171  0029E2  D7F8               	goto	i2l3118
  8172  0029E4                     i2l3122:
  8173  0029E4  90D8               	bcf	status,0,c
  8174  0029E6  3609               	rlcf	___lldiv@quotient,f,c
  8175  0029E8  360A               	rlcf	___lldiv@quotient+1,f,c
  8176  0029EA  360B               	rlcf	___lldiv@quotient+2,f,c
  8177  0029EC  360C               	rlcf	___lldiv@quotient+3,f,c
  8178  0029EE  5005               	movf	___lldiv@divisor,w,c
  8179  0029F0  5C01               	subwf	___lldiv@dividend,w,c
  8180  0029F2  5006               	movf	___lldiv@divisor+1,w,c
  8181  0029F4  5802               	subwfb	___lldiv@dividend+1,w,c
  8182  0029F6  5007               	movf	___lldiv@divisor+2,w,c
  8183  0029F8  5803               	subwfb	___lldiv@dividend+2,w,c
  8184  0029FA  5008               	movf	___lldiv@divisor+3,w,c
  8185  0029FC  5804               	subwfb	___lldiv@dividend+3,w,c
  8186  0029FE  A0D8               	btfss	status,0,c
  8187  002A00  D009               	goto	i2l3130
  8188  002A02  5005               	movf	___lldiv@divisor,w,c
  8189  002A04  5E01               	subwf	___lldiv@dividend,f,c
  8190  002A06  5006               	movf	___lldiv@divisor+1,w,c
  8191  002A08  5A02               	subwfb	___lldiv@dividend+1,f,c
  8192  002A0A  5007               	movf	___lldiv@divisor+2,w,c
  8193  002A0C  5A03               	subwfb	___lldiv@dividend+2,f,c
  8194  002A0E  5008               	movf	___lldiv@divisor+3,w,c
  8195  002A10  5A04               	subwfb	___lldiv@dividend+3,f,c
  8196  002A12  8009               	bsf	___lldiv@quotient,0,c
  8197  002A14                     i2l3130:
  8198  002A14  90D8               	bcf	status,0,c
  8199  002A16  3208               	rrcf	___lldiv@divisor+3,f,c
  8200  002A18  3207               	rrcf	___lldiv@divisor+2,f,c
  8201  002A1A  3206               	rrcf	___lldiv@divisor+1,f,c
  8202  002A1C  3205               	rrcf	___lldiv@divisor,f,c
  8203  002A1E  2E0D               	decfsz	___lldiv@counter,f,c
  8204  002A20  D7E1               	goto	i2l3122
  8205  002A22                     i2l916:
  8206  002A22  C009  F001         	movff	___lldiv@quotient,?___lldiv
  8207  002A26  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  8208  002A2A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  8209  002A2E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  8210  002A32  0012               	return		;funcret
  8211  002A34                     __end_of___lldiv:
  8212                           	opt stack 0
  8213                           tosu	equ	0xFFF
  8214                           tosh	equ	0xFFE
  8215                           tosl	equ	0xFFD
  8216                           pclatu	equ	0xFFB
  8217                           pclath	equ	0xFFA
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           intcon	equ	0xFF2
  8225                           intcon2	equ	0xFF1
  8226                           intcon3	equ	0xFF0
  8227                           postinc0	equ	0xFEE
  8228                           fsr0h	equ	0xFEA
  8229                           fsr0l	equ	0xFE9
  8230                           wreg	equ	0xFE8
  8231                           fsr1h	equ	0xFE2
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function ___fttol *****************
  8241 ;; Defined at:
  8242 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;  f1              3   47[COMRAM] float 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  lval            4   57[COMRAM] unsigned long 
  8247 ;;  exp1            1   61[COMRAM] unsigned char 
  8248 ;;  sign1           1   56[COMRAM] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  4   47[COMRAM] long 
  8251 ;; Registers used:
  8252 ;;		wreg, status,2, status,0
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8258 ;;      Params:         4       0       0       0       0       0       0
  8259 ;;      Locals:         6       0       0       0       0       0       0
  8260 ;;      Temps:          5       0       0       0       0       0       0
  8261 ;;      Totals:        15       0       0       0       0       0       0
  8262 ;;Total ram usage:       15 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; This function calls:
  8265 ;;		Nothing
  8266 ;; This function is called by:
  8267 ;;		__doprnt
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text39
  8272  002616                     __ptext39:
  8273                           	opt stack 0
  8274  002616                     ___fttol:
  8275                           	opt stack 23
  8276                           
  8277                           ;incstack = 0
  8278  002616  C032  F034         	movff	___fttol@f1+2,??___fttol
  8279  00261A  6A35               	clrf	(??___fttol+1)& (0+255),c
  8280  00261C  6A36               	clrf	(??___fttol+2)& (0+255),c
  8281  00261E  3431               	rlcf	___fttol@f1+1,w,c
  8282  002620  3634               	rlcf	??___fttol& (0+255),f,c
  8283  002622  E301               	bnc	u305_41
  8284  002624  8035               	bsf	(??___fttol+1)& (0+255),0,c
  8285  002626                     u305_41:
  8286  002626  5034               	movf	??___fttol,w,c
  8287  002628  6E3E               	movwf	___fttol@exp1,c
  8288  00262A  503E               	movf	___fttol@exp1,w,c
  8289  00262C  A4D8               	btfss	status,2,c
  8290  00262E  D009               	goto	i2l3072
  8291  002630  0E00               	movlw	0
  8292  002632  6E30               	movwf	?___fttol,c
  8293  002634  0E00               	movlw	0
  8294  002636  6E31               	movwf	?___fttol+1,c
  8295  002638  0E00               	movlw	0
  8296  00263A  6E32               	movwf	?___fttol+2,c
  8297  00263C  0E00               	movlw	0
  8298  00263E  6E33               	movwf	?___fttol+3,c
  8299  002640  0012               	return	
  8300  002642                     i2l3072:
  8301  002642  0E17               	movlw	23
  8302  002644  6E34               	movwf	??___fttol& (0+255),c
  8303  002646  C030  F035         	movff	___fttol@f1,??___fttol+1
  8304  00264A  C031  F036         	movff	___fttol@f1+1,??___fttol+2
  8305  00264E  C032  F037         	movff	___fttol@f1+2,??___fttol+3
  8306  002652  2834               	incf	??___fttol,w,c
  8307  002654  6E38               	movwf	(??___fttol+4)& (0+255),c
  8308  002656  D004               	goto	i2u307_40
  8309  002658                     i2u307_45:
  8310  002658  90D8               	bcf	status,0,c
  8311  00265A  3237               	rrcf	??___fttol+3,f,c
  8312  00265C  3236               	rrcf	??___fttol+2,f,c
  8313  00265E  3235               	rrcf	??___fttol+1,f,c
  8314  002660                     i2u307_40:
  8315  002660  2E38               	decfsz	(??___fttol+4)& (0+255),f,c
  8316  002662  D7FA               	goto	i2u307_45
  8317  002664  5035               	movf	??___fttol+1,w,c
  8318  002666  6E39               	movwf	___fttol@sign1,c
  8319  002668  8E31               	bsf	___fttol@f1+1,7,c
  8320  00266A  0EFF               	movlw	255
  8321  00266C  1630               	andwf	___fttol@f1,f,c
  8322  00266E  0EFF               	movlw	255
  8323  002670  1631               	andwf	___fttol@f1+1,f,c
  8324  002672  0E00               	movlw	0
  8325  002674  1632               	andwf	___fttol@f1+2,f,c
  8326  002676  5030               	movf	___fttol@f1,w,c
  8327  002678  6E3A               	movwf	___fttol@lval,c
  8328  00267A  5031               	movf	___fttol@f1+1,w,c
  8329  00267C  6E3B               	movwf	___fttol@lval+1,c
  8330  00267E  5032               	movf	___fttol@f1+2,w,c
  8331  002680  6E3C               	movwf	___fttol@lval+2,c
  8332  002682  6A3D               	clrf	___fttol@lval+3,c
  8333  002684  0E8E               	movlw	142
  8334  002686  5E3E               	subwf	___fttol@exp1,f,c
  8335  002688  AE3E               	btfss	___fttol@exp1,7,c
  8336  00268A  D016               	goto	i2l3094
  8337  00268C  503E               	movf	___fttol@exp1,w,c
  8338  00268E  0A80               	xorlw	128
  8339  002690  0F8F               	addlw	143
  8340  002692  B0D8               	btfsc	status,0,c
  8341  002694  D009               	goto	i2l3090
  8342  002696  0E00               	movlw	0
  8343  002698  6E30               	movwf	?___fttol,c
  8344  00269A  0E00               	movlw	0
  8345  00269C  6E31               	movwf	?___fttol+1,c
  8346  00269E  0E00               	movlw	0
  8347  0026A0  6E32               	movwf	?___fttol+2,c
  8348  0026A2  0E00               	movlw	0
  8349  0026A4  6E33               	movwf	?___fttol+3,c
  8350  0026A6  0012               	return	
  8351  0026A8                     i2l3090:
  8352  0026A8  90D8               	bcf	status,0,c
  8353  0026AA  323D               	rrcf	___fttol@lval+3,f,c
  8354  0026AC  323C               	rrcf	___fttol@lval+2,f,c
  8355  0026AE  323B               	rrcf	___fttol@lval+1,f,c
  8356  0026B0  323A               	rrcf	___fttol@lval,f,c
  8357  0026B2  3E3E               	incfsz	___fttol@exp1,f,c
  8358  0026B4  D7F9               	goto	i2l3090
  8359  0026B6  D015               	goto	i2l3104
  8360  0026B8                     i2l3094:
  8361  0026B8  0E17               	movlw	23
  8362  0026BA  643E               	cpfsgt	___fttol@exp1,c
  8363  0026BC  D00F               	goto	i2l3102
  8364  0026BE  0E00               	movlw	0
  8365  0026C0  6E30               	movwf	?___fttol,c
  8366  0026C2  0E00               	movlw	0
  8367  0026C4  6E31               	movwf	?___fttol+1,c
  8368  0026C6  0E00               	movlw	0
  8369  0026C8  6E32               	movwf	?___fttol+2,c
  8370  0026CA  0E00               	movlw	0
  8371  0026CC  6E33               	movwf	?___fttol+3,c
  8372  0026CE  0012               	return	
  8373  0026D0                     i2l3100:
  8374  0026D0  90D8               	bcf	status,0,c
  8375  0026D2  363A               	rlcf	___fttol@lval,f,c
  8376  0026D4  363B               	rlcf	___fttol@lval+1,f,c
  8377  0026D6  363C               	rlcf	___fttol@lval+2,f,c
  8378  0026D8  363D               	rlcf	___fttol@lval+3,f,c
  8379  0026DA  063E               	decf	___fttol@exp1,f,c
  8380  0026DC                     i2l3102:
  8381  0026DC  503E               	movf	___fttol@exp1,w,c
  8382  0026DE  A4D8               	btfss	status,2,c
  8383  0026E0  D7F7               	goto	i2l3100
  8384  0026E2                     i2l3104:
  8385  0026E2  5039               	movf	___fttol@sign1,w,c
  8386  0026E4  B4D8               	btfsc	status,2,c
  8387  0026E6  D008               	goto	i2l3108
  8388  0026E8  1E3D               	comf	___fttol@lval+3,f,c
  8389  0026EA  1E3C               	comf	___fttol@lval+2,f,c
  8390  0026EC  1E3B               	comf	___fttol@lval+1,f,c
  8391  0026EE  6C3A               	negf	___fttol@lval,c
  8392  0026F0  0E00               	movlw	0
  8393  0026F2  223B               	addwfc	___fttol@lval+1,f,c
  8394  0026F4  223C               	addwfc	___fttol@lval+2,f,c
  8395  0026F6  223D               	addwfc	___fttol@lval+3,f,c
  8396  0026F8                     i2l3108:
  8397  0026F8  C03A  F030         	movff	___fttol@lval,?___fttol
  8398  0026FC  C03B  F031         	movff	___fttol@lval+1,?___fttol+1
  8399  002700  C03C  F032         	movff	___fttol@lval+2,?___fttol+2
  8400  002704  C03D  F033         	movff	___fttol@lval+3,?___fttol+3
  8401  002708  0012               	return	
  8402  00270A                     __end_of___fttol:
  8403                           	opt stack 0
  8404                           tosu	equ	0xFFF
  8405                           tosh	equ	0xFFE
  8406                           tosl	equ	0xFFD
  8407                           pclatu	equ	0xFFB
  8408                           pclath	equ	0xFFA
  8409                           tblptru	equ	0xFF8
  8410                           tblptrh	equ	0xFF7
  8411                           tblptrl	equ	0xFF6
  8412                           tablat	equ	0xFF5
  8413                           prodh	equ	0xFF4
  8414                           prodl	equ	0xFF3
  8415                           intcon	equ	0xFF2
  8416                           intcon2	equ	0xFF1
  8417                           intcon3	equ	0xFF0
  8418                           postinc0	equ	0xFEE
  8419                           fsr0h	equ	0xFEA
  8420                           fsr0l	equ	0xFE9
  8421                           wreg	equ	0xFE8
  8422                           fsr1h	equ	0xFE2
  8423                           fsr1l	equ	0xFE1
  8424                           indf2	equ	0xFDF
  8425                           postinc2	equ	0xFDE
  8426                           postdec2	equ	0xFDD
  8427                           fsr2h	equ	0xFDA
  8428                           fsr2l	equ	0xFD9
  8429                           status	equ	0xFD8
  8430                           
  8431 ;; *************** function ___ftsub *****************
  8432 ;; Defined at:
  8433 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;  f1              3   32[COMRAM] float 
  8436 ;;  f2              3   35[COMRAM] float 
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;		None
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  3   32[COMRAM] float 
  8441 ;; Registers used:
  8442 ;;		wreg, status,2, status,0, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8448 ;;      Params:         6       0       0       0       0       0       0
  8449 ;;      Locals:         0       0       0       0       0       0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0
  8451 ;;      Totals:         6       0       0       0       0       0       0
  8452 ;;Total ram usage:        6 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    2
  8455 ;; This function calls:
  8456 ;;		___ftadd
  8457 ;; This function is called by:
  8458 ;;		__doprnt
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           	psect	text40
  8463  002D98                     __ptext40:
  8464                           	opt stack 0
  8465  002D98                     ___ftsub:
  8466                           	opt stack 21
  8467                           
  8468                           ;incstack = 0
  8469  002D98  5024               	movf	___ftsub@f2,w,c
  8470  002D9A  1025               	iorwf	___ftsub@f2+1,w,c
  8471  002D9C  1026               	iorwf	___ftsub@f2+2,w,c
  8472  002D9E  B4D8               	btfsc	status,2,c
  8473  002DA0  D006               	goto	i2l3040
  8474  002DA2  0E00               	movlw	0
  8475  002DA4  1A24               	xorwf	___ftsub@f2,f,c
  8476  002DA6  0E00               	movlw	0
  8477  002DA8  1A25               	xorwf	___ftsub@f2+1,f,c
  8478  002DAA  0E80               	movlw	128
  8479  002DAC  1A26               	xorwf	___ftsub@f2+2,f,c
  8480  002DAE                     i2l3040:
  8481  002DAE  C021  F015         	movff	___ftsub@f1,___ftadd@f1
  8482  002DB2  C022  F016         	movff	___ftsub@f1+1,___ftadd@f1+1
  8483  002DB6  C023  F017         	movff	___ftsub@f1+2,___ftadd@f1+2
  8484  002DBA  C024  F018         	movff	___ftsub@f2,___ftadd@f2
  8485  002DBE  C025  F019         	movff	___ftsub@f2+1,___ftadd@f2+1
  8486  002DC2  C026  F01A         	movff	___ftsub@f2+2,___ftadd@f2+2
  8487  002DC6  EC40  F00E         	call	___ftadd	;wreg free
  8488  002DCA  C015  F021         	movff	?___ftadd,?___ftsub
  8489  002DCE  C016  F022         	movff	?___ftadd+1,?___ftsub+1
  8490  002DD2  C017  F023         	movff	?___ftadd+2,?___ftsub+2
  8491  002DD6  0012               	return	
  8492  002DD8                     __end_of___ftsub:
  8493                           	opt stack 0
  8494                           tosu	equ	0xFFF
  8495                           tosh	equ	0xFFE
  8496                           tosl	equ	0xFFD
  8497                           pclatu	equ	0xFFB
  8498                           pclath	equ	0xFFA
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           intcon2	equ	0xFF1
  8507                           intcon3	equ	0xFF0
  8508                           postinc0	equ	0xFEE
  8509                           fsr0h	equ	0xFEA
  8510                           fsr0l	equ	0xFE9
  8511                           wreg	equ	0xFE8
  8512                           fsr1h	equ	0xFE2
  8513                           fsr1l	equ	0xFE1
  8514                           indf2	equ	0xFDF
  8515                           postinc2	equ	0xFDE
  8516                           postdec2	equ	0xFDD
  8517                           fsr2h	equ	0xFDA
  8518                           fsr2l	equ	0xFD9
  8519                           status	equ	0xFD8
  8520                           
  8521 ;; *************** function ___ftadd *****************
  8522 ;; Defined at:
  8523 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;  f1              3   20[COMRAM] float 
  8526 ;;  f2              3   23[COMRAM] float 
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  exp1            1   31[COMRAM] unsigned char 
  8529 ;;  exp2            1   30[COMRAM] unsigned char 
  8530 ;;  sign            1   29[COMRAM] unsigned char 
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  3   20[COMRAM] float 
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8540 ;;      Params:         6       0       0       0       0       0       0
  8541 ;;      Locals:         3       0       0       0       0       0       0
  8542 ;;      Temps:          3       0       0       0       0       0       0
  8543 ;;      Totals:        12       0       0       0       0       0       0
  8544 ;;Total ram usage:       12 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    1
  8547 ;; This function calls:
  8548 ;;		___ftpack
  8549 ;; This function is called by:
  8550 ;;		_INT0_ISR
  8551 ;;		__doprnt
  8552 ;;		___ftsub
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           	psect	text41
  8557  001C80                     __ptext41:
  8558                           	opt stack 0
  8559  001C80                     ___ftadd:
  8560                           	opt stack 21
  8561                           
  8562                           ;incstack = 0
  8563  001C80  C017  F01B         	movff	___ftadd@f1+2,??___ftadd
  8564  001C84  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  8565  001C86  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  8566  001C88  3416               	rlcf	___ftadd@f1+1,w,c
  8567  001C8A  361B               	rlcf	??___ftadd& (0+255),f,c
  8568  001C8C  E301               	bnc	u232_41
  8569  001C8E  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  8570  001C90                     u232_41:
  8571  001C90  501B               	movf	??___ftadd,w,c
  8572  001C92  6E20               	movwf	___ftadd@exp1,c
  8573  001C94  C01A  F01B         	movff	___ftadd@f2+2,??___ftadd
  8574  001C98  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  8575  001C9A  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  8576  001C9C  3419               	rlcf	___ftadd@f2+1,w,c
  8577  001C9E  361B               	rlcf	??___ftadd& (0+255),f,c
  8578  001CA0  E301               	bnc	u233_41
  8579  001CA2  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  8580  001CA4                     u233_41:
  8581  001CA4  501B               	movf	??___ftadd,w,c
  8582  001CA6  6E1F               	movwf	___ftadd@exp2,c
  8583  001CA8  5020               	movf	___ftadd@exp1,w,c
  8584  001CAA  B4D8               	btfsc	status,2,c
  8585  001CAC  D00B               	goto	i2l770
  8586  001CAE  501F               	movf	___ftadd@exp2,w,c
  8587  001CB0  5C20               	subwf	___ftadd@exp1,w,c
  8588  001CB2  B0D8               	btfsc	status,0,c
  8589  001CB4  D00E               	goto	i2l2620
  8590  001CB6  5020               	movf	___ftadd@exp1,w,c
  8591  001CB8  0800               	sublw	0
  8592  001CBA  241F               	addwf	___ftadd@exp2,w,c
  8593  001CBC  6E1B               	movwf	??___ftadd& (0+255),c
  8594  001CBE  0E18               	movlw	24
  8595  001CC0  641B               	cpfsgt	??___ftadd,c
  8596  001CC2  D007               	goto	i2l2620
  8597  001CC4                     i2l770:
  8598  001CC4  C018  F015         	movff	___ftadd@f2,?___ftadd
  8599  001CC8  C019  F016         	movff	___ftadd@f2+1,?___ftadd+1
  8600  001CCC  C01A  F017         	movff	___ftadd@f2+2,?___ftadd+2
  8601  001CD0  0012               	return	
  8602  001CD2                     i2l2620:
  8603  001CD2  501F               	movf	___ftadd@exp2,w,c
  8604  001CD4  B4D8               	btfsc	status,2,c
  8605  001CD6  D00B               	goto	i2l774
  8606  001CD8  5020               	movf	___ftadd@exp1,w,c
  8607  001CDA  5C1F               	subwf	___ftadd@exp2,w,c
  8608  001CDC  B0D8               	btfsc	status,0,c
  8609  001CDE  D00E               	goto	i2l2626
  8610  001CE0  501F               	movf	___ftadd@exp2,w,c
  8611  001CE2  0800               	sublw	0
  8612  001CE4  2420               	addwf	___ftadd@exp1,w,c
  8613  001CE6  6E1B               	movwf	??___ftadd& (0+255),c
  8614  001CE8  0E18               	movlw	24
  8615  001CEA  641B               	cpfsgt	??___ftadd,c
  8616  001CEC  D007               	goto	i2l2626
  8617  001CEE                     i2l774:
  8618  001CEE  C015  F015         	movff	___ftadd@f1,?___ftadd
  8619  001CF2  C016  F016         	movff	___ftadd@f1+1,?___ftadd+1
  8620  001CF6  C017  F017         	movff	___ftadd@f1+2,?___ftadd+2
  8621  001CFA  0012               	return	
  8622  001CFC                     i2l2626:
  8623  001CFC  0E06               	movlw	6
  8624  001CFE  6E1E               	movwf	___ftadd@sign,c
  8625  001D00  BE17               	btfsc	___ftadd@f1+2,7,c
  8626  001D02  8E1E               	bsf	___ftadd@sign,7,c
  8627  001D04  BE1A               	btfsc	___ftadd@f2+2,7,c
  8628  001D06  8C1E               	bsf	___ftadd@sign,6,c
  8629  001D08  8E16               	bsf	___ftadd@f1+1,7,c
  8630  001D0A  0EFF               	movlw	255
  8631  001D0C  1615               	andwf	___ftadd@f1,f,c
  8632  001D0E  0EFF               	movlw	255
  8633  001D10  1616               	andwf	___ftadd@f1+1,f,c
  8634  001D12  0E00               	movlw	0
  8635  001D14  1617               	andwf	___ftadd@f1+2,f,c
  8636  001D16  8E19               	bsf	___ftadd@f2+1,7,c
  8637  001D18  0EFF               	movlw	255
  8638  001D1A  1618               	andwf	___ftadd@f2,f,c
  8639  001D1C  0EFF               	movlw	255
  8640  001D1E  1619               	andwf	___ftadd@f2+1,f,c
  8641  001D20  0E00               	movlw	0
  8642  001D22  161A               	andwf	___ftadd@f2+2,f,c
  8643  001D24  501F               	movf	___ftadd@exp2,w,c
  8644  001D26  5C20               	subwf	___ftadd@exp1,w,c
  8645  001D28  B0D8               	btfsc	status,0,c
  8646  001D2A  D01B               	goto	i2l2652
  8647  001D2C                     i2l2642:
  8648  001D2C  90D8               	bcf	status,0,c
  8649  001D2E  3618               	rlcf	___ftadd@f2,f,c
  8650  001D30  3619               	rlcf	___ftadd@f2+1,f,c
  8651  001D32  361A               	rlcf	___ftadd@f2+2,f,c
  8652  001D34  061F               	decf	___ftadd@exp2,f,c
  8653  001D36  5020               	movf	___ftadd@exp1,w,c
  8654  001D38  181F               	xorwf	___ftadd@exp2,w,c
  8655  001D3A  B4D8               	btfsc	status,2,c
  8656  001D3C  D00D               	goto	i2l2650
  8657  001D3E  061E               	decf	___ftadd@sign,f,c
  8658  001D40  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  8659  001D44  0E07               	movlw	7
  8660  001D46  161B               	andwf	??___ftadd,f,c
  8661  001D48  B4D8               	btfsc	status,2,c
  8662  001D4A  D006               	goto	i2l2650
  8663  001D4C  D7EF               	goto	i2l2642
  8664  001D4E                     i2l2648:
  8665  001D4E  90D8               	bcf	status,0,c
  8666  001D50  3217               	rrcf	___ftadd@f1+2,f,c
  8667  001D52  3216               	rrcf	___ftadd@f1+1,f,c
  8668  001D54  3215               	rrcf	___ftadd@f1,f,c
  8669  001D56  2A20               	incf	___ftadd@exp1,f,c
  8670  001D58                     i2l2650:
  8671  001D58  501F               	movf	___ftadd@exp2,w,c
  8672  001D5A  1820               	xorwf	___ftadd@exp1,w,c
  8673  001D5C  B4D8               	btfsc	status,2,c
  8674  001D5E  D01F               	goto	i2l785
  8675  001D60  D7F6               	goto	i2l2648
  8676  001D62                     i2l2652:
  8677  001D62  5020               	movf	___ftadd@exp1,w,c
  8678  001D64  5C1F               	subwf	___ftadd@exp2,w,c
  8679  001D66  B0D8               	btfsc	status,0,c
  8680  001D68  D01A               	goto	i2l785
  8681  001D6A                     i2l2654:
  8682  001D6A  90D8               	bcf	status,0,c
  8683  001D6C  3615               	rlcf	___ftadd@f1,f,c
  8684  001D6E  3616               	rlcf	___ftadd@f1+1,f,c
  8685  001D70  3617               	rlcf	___ftadd@f1+2,f,c
  8686  001D72  0620               	decf	___ftadd@exp1,f,c
  8687  001D74  5020               	movf	___ftadd@exp1,w,c
  8688  001D76  181F               	xorwf	___ftadd@exp2,w,c
  8689  001D78  B4D8               	btfsc	status,2,c
  8690  001D7A  D00D               	goto	i2l2662
  8691  001D7C  061E               	decf	___ftadd@sign,f,c
  8692  001D7E  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  8693  001D82  0E07               	movlw	7
  8694  001D84  161B               	andwf	??___ftadd,f,c
  8695  001D86  B4D8               	btfsc	status,2,c
  8696  001D88  D006               	goto	i2l2662
  8697  001D8A  D7EF               	goto	i2l2654
  8698  001D8C                     i2l2660:
  8699  001D8C  90D8               	bcf	status,0,c
  8700  001D8E  321A               	rrcf	___ftadd@f2+2,f,c
  8701  001D90  3219               	rrcf	___ftadd@f2+1,f,c
  8702  001D92  3218               	rrcf	___ftadd@f2,f,c
  8703  001D94  2A1F               	incf	___ftadd@exp2,f,c
  8704  001D96                     i2l2662:
  8705  001D96  501F               	movf	___ftadd@exp2,w,c
  8706  001D98  1820               	xorwf	___ftadd@exp1,w,c
  8707  001D9A  A4D8               	btfss	status,2,c
  8708  001D9C  D7F7               	goto	i2l2660
  8709  001D9E                     i2l785:
  8710  001D9E  AE1E               	btfss	___ftadd@sign,7,c
  8711  001DA0  D00C               	goto	i2l794
  8712  001DA2  0EFF               	movlw	255
  8713  001DA4  1A15               	xorwf	___ftadd@f1,f,c
  8714  001DA6  0EFF               	movlw	255
  8715  001DA8  1A16               	xorwf	___ftadd@f1+1,f,c
  8716  001DAA  0EFF               	movlw	255
  8717  001DAC  1A17               	xorwf	___ftadd@f1+2,f,c
  8718  001DAE  0E01               	movlw	1
  8719  001DB0  2615               	addwf	___ftadd@f1,f,c
  8720  001DB2  0E00               	movlw	0
  8721  001DB4  2216               	addwfc	___ftadd@f1+1,f,c
  8722  001DB6  0E00               	movlw	0
  8723  001DB8  2217               	addwfc	___ftadd@f1+2,f,c
  8724  001DBA                     i2l794:
  8725  001DBA  AC1E               	btfss	___ftadd@sign,6,c
  8726  001DBC  D00C               	goto	i2l2668
  8727  001DBE  0EFF               	movlw	255
  8728  001DC0  1A18               	xorwf	___ftadd@f2,f,c
  8729  001DC2  0EFF               	movlw	255
  8730  001DC4  1A19               	xorwf	___ftadd@f2+1,f,c
  8731  001DC6  0EFF               	movlw	255
  8732  001DC8  1A1A               	xorwf	___ftadd@f2+2,f,c
  8733  001DCA  0E01               	movlw	1
  8734  001DCC  2618               	addwf	___ftadd@f2,f,c
  8735  001DCE  0E00               	movlw	0
  8736  001DD0  2219               	addwfc	___ftadd@f2+1,f,c
  8737  001DD2  0E00               	movlw	0
  8738  001DD4  221A               	addwfc	___ftadd@f2+2,f,c
  8739  001DD6                     i2l2668:
  8740  001DD6  0E00               	movlw	0
  8741  001DD8  6E1E               	movwf	___ftadd@sign,c
  8742  001DDA  5015               	movf	___ftadd@f1,w,c
  8743  001DDC  2618               	addwf	___ftadd@f2,f,c
  8744  001DDE  5016               	movf	___ftadd@f1+1,w,c
  8745  001DE0  2219               	addwfc	___ftadd@f2+1,f,c
  8746  001DE2  5017               	movf	___ftadd@f1+2,w,c
  8747  001DE4  221A               	addwfc	___ftadd@f2+2,f,c
  8748  001DE6  AE1A               	btfss	___ftadd@f2+2,7,c
  8749  001DE8  D00E               	goto	i2l2678
  8750  001DEA  0EFF               	movlw	255
  8751  001DEC  1A18               	xorwf	___ftadd@f2,f,c
  8752  001DEE  0EFF               	movlw	255
  8753  001DF0  1A19               	xorwf	___ftadd@f2+1,f,c
  8754  001DF2  0EFF               	movlw	255
  8755  001DF4  1A1A               	xorwf	___ftadd@f2+2,f,c
  8756  001DF6  0E01               	movlw	1
  8757  001DF8  2618               	addwf	___ftadd@f2,f,c
  8758  001DFA  0E00               	movlw	0
  8759  001DFC  2219               	addwfc	___ftadd@f2+1,f,c
  8760  001DFE  0E00               	movlw	0
  8761  001E00  221A               	addwfc	___ftadd@f2+2,f,c
  8762  001E02  0E01               	movlw	1
  8763  001E04  6E1E               	movwf	___ftadd@sign,c
  8764  001E06                     i2l2678:
  8765  001E06  C018  F001         	movff	___ftadd@f2,___ftpack@arg
  8766  001E0A  C019  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8767  001E0E  C01A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8768  001E12  C020  F004         	movff	___ftadd@exp1,___ftpack@exp
  8769  001E16  C01E  F005         	movff	___ftadd@sign,___ftpack@sign
  8770  001E1A  ECF8  F013         	call	___ftpack	;wreg free
  8771  001E1E  C001  F015         	movff	?___ftpack,?___ftadd
  8772  001E22  C002  F016         	movff	?___ftpack+1,?___ftadd+1
  8773  001E26  C003  F017         	movff	?___ftpack+2,?___ftadd+2
  8774  001E2A  0012               	return	
  8775  001E2C                     __end_of___ftadd:
  8776                           	opt stack 0
  8777                           tosu	equ	0xFFF
  8778                           tosh	equ	0xFFE
  8779                           tosl	equ	0xFFD
  8780                           pclatu	equ	0xFFB
  8781                           pclath	equ	0xFFA
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon	equ	0xFF2
  8789                           intcon2	equ	0xFF1
  8790                           intcon3	equ	0xFF0
  8791                           postinc0	equ	0xFEE
  8792                           fsr0h	equ	0xFEA
  8793                           fsr0l	equ	0xFE9
  8794                           wreg	equ	0xFE8
  8795                           fsr1h	equ	0xFE2
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           fsr2h	equ	0xFDA
  8801                           fsr2l	equ	0xFD9
  8802                           status	equ	0xFD8
  8803                           
  8804 ;; *************** function ___ftneg *****************
  8805 ;; Defined at:
  8806 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  f1              3    0[COMRAM] float 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;		None
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  3    0[COMRAM] float 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8820 ;;      Params:         3       0       0       0       0       0       0
  8821 ;;      Locals:         0       0       0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0
  8823 ;;      Totals:         3       0       0       0       0       0       0
  8824 ;;Total ram usage:        3 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		__doprnt
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text42
  8834  002FE0                     __ptext42:
  8835                           	opt stack 0
  8836  002FE0                     ___ftneg:
  8837                           	opt stack 23
  8838                           
  8839                           ;incstack = 0
  8840  002FE0  5001               	movf	___ftneg@f1,w,c
  8841  002FE2  1002               	iorwf	___ftneg@f1+1,w,c
  8842  002FE4  1003               	iorwf	___ftneg@f1+2,w,c
  8843  002FE6  B4D8               	btfsc	status,2,c
  8844  002FE8  D006               	goto	i2l844
  8845  002FEA  0E00               	movlw	0
  8846  002FEC  1A01               	xorwf	___ftneg@f1,f,c
  8847  002FEE  0E00               	movlw	0
  8848  002FF0  1A02               	xorwf	___ftneg@f1+1,f,c
  8849  002FF2  0E80               	movlw	128
  8850  002FF4  1A03               	xorwf	___ftneg@f1+2,f,c
  8851  002FF6                     i2l844:
  8852  002FF6  C001  F001         	movff	___ftneg@f1,?___ftneg
  8853  002FFA  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8854  002FFE  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8855  003002  0012               	return		;funcret
  8856  003004                     __end_of___ftneg:
  8857                           	opt stack 0
  8858                           tosu	equ	0xFFF
  8859                           tosh	equ	0xFFE
  8860                           tosl	equ	0xFFD
  8861                           pclatu	equ	0xFFB
  8862                           pclath	equ	0xFFA
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           prodh	equ	0xFF4
  8868                           prodl	equ	0xFF3
  8869                           intcon	equ	0xFF2
  8870                           intcon2	equ	0xFF1
  8871                           intcon3	equ	0xFF0
  8872                           postinc0	equ	0xFEE
  8873                           fsr0h	equ	0xFEA
  8874                           fsr0l	equ	0xFE9
  8875                           wreg	equ	0xFE8
  8876                           fsr1h	equ	0xFE2
  8877                           fsr1l	equ	0xFE1
  8878                           indf2	equ	0xFDF
  8879                           postinc2	equ	0xFDE
  8880                           postdec2	equ	0xFDD
  8881                           fsr2h	equ	0xFDA
  8882                           fsr2l	equ	0xFD9
  8883                           status	equ	0xFD8
  8884                           
  8885 ;; *************** function ___ftge *****************
  8886 ;; Defined at:
  8887 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  ff1             3    0[COMRAM] float 
  8890 ;;  ff2             3    3[COMRAM] float 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;		None
  8893 ;; Return value:  Size  Location     Type
  8894 ;;		None               void
  8895 ;; Registers used:
  8896 ;;		wreg, status,2, status,0
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8902 ;;      Params:         6       0       0       0       0       0       0
  8903 ;;      Locals:         0       0       0       0       0       0       0
  8904 ;;      Temps:          3       0       0       0       0       0       0
  8905 ;;      Totals:         9       0       0       0       0       0       0
  8906 ;;Total ram usage:        9 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; This function calls:
  8909 ;;		Nothing
  8910 ;; This function is called by:
  8911 ;;		_UpdateDisplay
  8912 ;;		__doprnt
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text43
  8917  00289E                     __ptext43:
  8918                           	opt stack 0
  8919  00289E                     ___ftge:
  8920                           	opt stack 23
  8921                           
  8922                           ;incstack = 0
  8923  00289E  AE03               	btfss	___ftge@ff1+2,7,c
  8924  0028A0  D016               	goto	i2l3048
  8925  0028A2  C001  F007         	movff	___ftge@ff1,??___ftge
  8926  0028A6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8927  0028AA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8928  0028AE  1E07               	comf	??___ftge,f,c
  8929  0028B0  1E08               	comf	??___ftge+1,f,c
  8930  0028B2  1E09               	comf	??___ftge+2,f,c
  8931  0028B4  2A07               	incf	??___ftge,f,c
  8932  0028B6  0E00               	movlw	0
  8933  0028B8  2208               	addwfc	??___ftge+1,f,c
  8934  0028BA  2209               	addwfc	??___ftge+2,f,c
  8935  0028BC  0E00               	movlw	0
  8936  0028BE  2407               	addwf	??___ftge,w,c
  8937  0028C0  6E01               	movwf	___ftge@ff1,c
  8938  0028C2  0E00               	movlw	0
  8939  0028C4  2008               	addwfc	??___ftge+1,w,c
  8940  0028C6  6E02               	movwf	___ftge@ff1+1,c
  8941  0028C8  0E80               	movlw	128
  8942  0028CA  2009               	addwfc	??___ftge+2,w,c
  8943  0028CC  6E03               	movwf	___ftge@ff1+2,c
  8944  0028CE                     i2l3048:
  8945  0028CE  AE06               	btfss	___ftge@ff2+2,7,c
  8946  0028D0  D016               	goto	i2l3052
  8947  0028D2  C004  F007         	movff	___ftge@ff2,??___ftge
  8948  0028D6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8949  0028DA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8950  0028DE  1E07               	comf	??___ftge,f,c
  8951  0028E0  1E08               	comf	??___ftge+1,f,c
  8952  0028E2  1E09               	comf	??___ftge+2,f,c
  8953  0028E4  2A07               	incf	??___ftge,f,c
  8954  0028E6  0E00               	movlw	0
  8955  0028E8  2208               	addwfc	??___ftge+1,f,c
  8956  0028EA  2209               	addwfc	??___ftge+2,f,c
  8957  0028EC  0E00               	movlw	0
  8958  0028EE  2407               	addwf	??___ftge,w,c
  8959  0028F0  6E04               	movwf	___ftge@ff2,c
  8960  0028F2  0E00               	movlw	0
  8961  0028F4  2008               	addwfc	??___ftge+1,w,c
  8962  0028F6  6E05               	movwf	___ftge@ff2+1,c
  8963  0028F8  0E80               	movlw	128
  8964  0028FA  2009               	addwfc	??___ftge+2,w,c
  8965  0028FC  6E06               	movwf	___ftge@ff2+2,c
  8966  0028FE                     i2l3052:
  8967  0028FE  0E00               	movlw	0
  8968  002900  1A01               	xorwf	___ftge@ff1,f,c
  8969  002902  0E00               	movlw	0
  8970  002904  1A02               	xorwf	___ftge@ff1+1,f,c
  8971  002906  0E80               	movlw	128
  8972  002908  1A03               	xorwf	___ftge@ff1+2,f,c
  8973  00290A  0E00               	movlw	0
  8974  00290C  1A04               	xorwf	___ftge@ff2,f,c
  8975  00290E  0E00               	movlw	0
  8976  002910  1A05               	xorwf	___ftge@ff2+1,f,c
  8977  002912  0E80               	movlw	128
  8978  002914  1A06               	xorwf	___ftge@ff2+2,f,c
  8979  002916  5004               	movf	___ftge@ff2,w,c
  8980  002918  5C01               	subwf	___ftge@ff1,w,c
  8981  00291A  5005               	movf	___ftge@ff2+1,w,c
  8982  00291C  5802               	subwfb	___ftge@ff1+1,w,c
  8983  00291E  5006               	movf	___ftge@ff2+2,w,c
  8984  002920  5803               	subwfb	___ftge@ff1+2,w,c
  8985  002922  B0D8               	btfsc	status,0,c
  8986  002924  D002               	goto	i2l3058
  8987  002926  90D8               	bcf	status,0,c
  8988  002928  0012               	return	
  8989  00292A                     i2l3058:
  8990  00292A  80D8               	bsf	status,0,c
  8991  00292C  0012               	return	
  8992  00292E                     __end_of___ftge:
  8993                           	opt stack 0
  8994                           tosu	equ	0xFFF
  8995                           tosh	equ	0xFFE
  8996                           tosl	equ	0xFFD
  8997                           pclatu	equ	0xFFB
  8998                           pclath	equ	0xFFA
  8999                           tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon	equ	0xFF2
  9006                           intcon2	equ	0xFF1
  9007                           intcon3	equ	0xFF0
  9008                           postinc0	equ	0xFEE
  9009                           fsr0h	equ	0xFEA
  9010                           fsr0l	equ	0xFE9
  9011                           wreg	equ	0xFE8
  9012                           fsr1h	equ	0xFE2
  9013                           fsr1l	equ	0xFE1
  9014                           indf2	equ	0xFDF
  9015                           postinc2	equ	0xFDE
  9016                           postdec2	equ	0xFDD
  9017                           fsr2h	equ	0xFDA
  9018                           fsr2l	equ	0xFD9
  9019                           status	equ	0xFD8
  9020                           
  9021 ;; *************** function _lcd_sendStringToPos *****************
  9022 ;; Defined at:
  9023 ;;		line 81 in file "lcd.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  x               1    wreg     unsigned char 
  9026 ;;  y               1    8[COMRAM] unsigned char 
  9027 ;;  charString      2    9[COMRAM] PTR const unsigned char 
  9028 ;;		 -> UpdateDisplay@range_string(16), UpdateDisplay@cap_string(16), 
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;  x               1   11[COMRAM] unsigned char 
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      void 
  9033 ;; Registers used:
  9034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9040 ;;      Params:         3       0       0       0       0       0       0
  9041 ;;      Locals:         1       0       0       0       0       0       0
  9042 ;;      Temps:          0       0       0       0       0       0       0
  9043 ;;      Totals:         4       0       0       0       0       0       0
  9044 ;;Total ram usage:        4 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    3
  9047 ;; This function calls:
  9048 ;;		_lcd_sendString
  9049 ;;		_lcd_setPosition
  9050 ;; This function is called by:
  9051 ;;		_UpdateDisplay
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text44
  9056  00307A                     __ptext44:
  9057                           	opt stack 0
  9058  00307A                     _lcd_sendStringToPos:
  9059                           	opt stack 21
  9060                           
  9061                           ;incstack = 0
  9062                           ;lcd_sendStringToPos@x stored from wreg
  9063  00307A  6E0C               	movwf	lcd_sendStringToPos@x,c
  9064                           
  9065                           ;lcd.c: 83: lcd_setPosition(x, y);
  9066  00307C  C009  F004         	movff	lcd_sendStringToPos@y,lcd_setPosition@y
  9067  003080  500C               	movf	lcd_sendStringToPos@x,w,c
  9068  003082  EC1E  F016         	call	_lcd_setPosition
  9069                           
  9070                           ;lcd.c: 84: lcd_sendString(charString);
  9071  003086  C00A  F005         	movff	lcd_sendStringToPos@charString,lcd_sendString@a
  9072  00308A  C00B  F006         	movff	lcd_sendStringToPos@charString+1,lcd_sendString@a+1
  9073  00308E  EC58  F017         	call	_lcd_sendString	;wreg free
  9074  003092  0012               	return		;funcret
  9075  003094                     __end_of_lcd_sendStringToPos:
  9076                           	opt stack 0
  9077                           tosu	equ	0xFFF
  9078                           tosh	equ	0xFFE
  9079                           tosl	equ	0xFFD
  9080                           pclatu	equ	0xFFB
  9081                           pclath	equ	0xFFA
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           intcon	equ	0xFF2
  9089                           intcon2	equ	0xFF1
  9090                           intcon3	equ	0xFF0
  9091                           postinc0	equ	0xFEE
  9092                           fsr0h	equ	0xFEA
  9093                           fsr0l	equ	0xFE9
  9094                           wreg	equ	0xFE8
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _lcd_setPosition *****************
  9105 ;; Defined at:
  9106 ;;		line 18 in file "lcd.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  x               1    wreg     unsigned char 
  9109 ;;  y               1    3[COMRAM] unsigned char 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  x               1    4[COMRAM] unsigned char 
  9112 ;;  temp            1    7[COMRAM] unsigned char 
  9113 ;;  j               1    6[COMRAM] unsigned char 
  9114 ;;  i               1    5[COMRAM] unsigned char 
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      void 
  9117 ;; Registers used:
  9118 ;;		wreg, status,2, status,0, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9124 ;;      Params:         1       0       0       0       0       0       0
  9125 ;;      Locals:         4       0       0       0       0       0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0
  9127 ;;      Totals:         5       0       0       0       0       0       0
  9128 ;;Total ram usage:        5 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:    2
  9131 ;; This function calls:
  9132 ;;		i2_lcd_sendCommand
  9133 ;; This function is called by:
  9134 ;;		_lcd_sendStringToPos
  9135 ;;		_lcd_sendIntToPos
  9136 ;;		_lcd_sendFloatToPos
  9137 ;;		_lcd_sendUIntToPos
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text45
  9142  002C3C                     __ptext45:
  9143                           	opt stack 0
  9144  002C3C                     _lcd_setPosition:
  9145                           	opt stack 21
  9146                           
  9147                           ;incstack = 0
  9148                           ;lcd_setPosition@x stored from wreg
  9149  002C3C  6E05               	movwf	lcd_setPosition@x,c
  9150                           
  9151                           ;lcd.c: 20: unsigned char temp, i, j;
  9152                           ;lcd.c: 21: if(y == 1)
  9153  002C3E  0404               	decf	lcd_setPosition@y,w,c
  9154  002C40  A4D8               	btfss	status,2,c
  9155  002C42  D010               	goto	i2l3178
  9156                           
  9157                           ;lcd.c: 22: {
  9158                           ;lcd.c: 23: temp = 0x80 + x - 1;
  9159  002C44  5005               	movf	lcd_setPosition@x,w,c
  9160  002C46  0F7F               	addlw	127
  9161  002C48  6E08               	movwf	lcd_setPosition@temp,c
  9162                           
  9163                           ;lcd.c: 24: i = temp>>4;
  9164  002C4A  3808               	swapf	lcd_setPosition@temp,w,c
  9165  002C4C  0B0F               	andlw	15
  9166  002C4E  6E06               	movwf	lcd_setPosition@i,c
  9167                           
  9168                           ;lcd.c: 25: j = temp & 0x0F;
  9169  002C50  5008               	movf	lcd_setPosition@temp,w,c
  9170  002C52  0B0F               	andlw	15
  9171  002C54  6E07               	movwf	lcd_setPosition@j,c
  9172                           
  9173                           ;lcd.c: 26: lcd_sendCommand(i);
  9174  002C56  5006               	movf	lcd_setPosition@i,w,c
  9175  002C58  EC02  F018         	call	i2_lcd_sendCommand
  9176                           
  9177                           ;lcd.c: 27: lcd_sendCommand(j);
  9178  002C5C  5007               	movf	lcd_setPosition@j,w,c
  9179  002C5E  EC02  F018         	call	i2_lcd_sendCommand
  9180                           
  9181                           ;lcd.c: 28: }
  9182  002C62  0012               	return	
  9183  002C64                     i2l3178:
  9184                           
  9185                           ;lcd.c: 29: else if(y == 2)
  9186  002C64  0E02               	movlw	2
  9187  002C66  1804               	xorwf	lcd_setPosition@y,w,c
  9188  002C68  A4D8               	btfss	status,2,c
  9189  002C6A  0012               	return	
  9190                           
  9191                           ;lcd.c: 30: {
  9192                           ;lcd.c: 31: temp = 0xC0 + x - 1;
  9193  002C6C  5005               	movf	lcd_setPosition@x,w,c
  9194  002C6E  0FBF               	addlw	191
  9195  002C70  6E08               	movwf	lcd_setPosition@temp,c
  9196                           
  9197                           ;lcd.c: 32: i = temp>>4;
  9198  002C72  3808               	swapf	lcd_setPosition@temp,w,c
  9199  002C74  0B0F               	andlw	15
  9200  002C76  6E06               	movwf	lcd_setPosition@i,c
  9201                           
  9202                           ;lcd.c: 33: j = temp & 0x0F;
  9203  002C78  5008               	movf	lcd_setPosition@temp,w,c
  9204  002C7A  0B0F               	andlw	15
  9205  002C7C  6E07               	movwf	lcd_setPosition@j,c
  9206                           
  9207                           ;lcd.c: 34: lcd_sendCommand(i);
  9208  002C7E  5006               	movf	lcd_setPosition@i,w,c
  9209  002C80  EC02  F018         	call	i2_lcd_sendCommand
  9210                           
  9211                           ;lcd.c: 35: lcd_sendCommand(j);
  9212  002C84  5007               	movf	lcd_setPosition@j,w,c
  9213  002C86  EC02  F018         	call	i2_lcd_sendCommand
  9214  002C8A  0012               	return	
  9215  002C8C                     __end_of_lcd_setPosition:
  9216                           	opt stack 0
  9217                           tosu	equ	0xFFF
  9218                           tosh	equ	0xFFE
  9219                           tosl	equ	0xFFD
  9220                           pclatu	equ	0xFFB
  9221                           pclath	equ	0xFFA
  9222                           tblptru	equ	0xFF8
  9223                           tblptrh	equ	0xFF7
  9224                           tblptrl	equ	0xFF6
  9225                           tablat	equ	0xFF5
  9226                           prodh	equ	0xFF4
  9227                           prodl	equ	0xFF3
  9228                           intcon	equ	0xFF2
  9229                           intcon2	equ	0xFF1
  9230                           intcon3	equ	0xFF0
  9231                           postinc0	equ	0xFEE
  9232                           fsr0h	equ	0xFEA
  9233                           fsr0l	equ	0xFE9
  9234                           wreg	equ	0xFE8
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function i2_lcd_sendCommand *****************
  9245 ;; Defined at:
  9246 ;;		line 3 in file "lcd.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;  a               1    wreg     unsigned char 
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;  a               1    2[COMRAM] unsigned char 
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      void 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9260 ;;      Params:         0       0       0       0       0       0       0
  9261 ;;      Locals:         1       0       0       0       0       0       0
  9262 ;;      Temps:          1       0       0       0       0       0       0
  9263 ;;      Totals:         2       0       0       0       0       0       0
  9264 ;;Total ram usage:        2 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    1
  9267 ;; This function calls:
  9268 ;;		i2__lcd_Port
  9269 ;; This function is called by:
  9270 ;;		_lcd_setPosition
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text46
  9275  003004                     __ptext46:
  9276                           	opt stack 0
  9277  003004                     i2_lcd_sendCommand:
  9278                           	opt stack 21
  9279                           
  9280                           ;incstack = 0
  9281                           ;i2lcd_sendCommand@a stored from wreg
  9282  003004  6E03               	movwf	i2lcd_sendCommand@a,c
  9283                           
  9284                           ;lcd.c: 5: LATAbits.LA5 = 0;
  9285  003006  9A89               	bcf	3977,5,c	;volatile
  9286                           
  9287                           ;lcd.c: 6: _lcd_Port(a);
  9288  003008  5003               	movf	i2lcd_sendCommand@a,w,c
  9289  00300A  ECA2  F017         	call	i2__lcd_Port
  9290                           
  9291                           ;lcd.c: 7: LATAbits.LA4 = 1;
  9292  00300E  8889               	bsf	3977,4,c	;volatile
  9293                           
  9294                           ;lcd.c: 8: _delay((unsigned long)((4)*(16000000UL/4000.0)));
  9295  003010  0E15               	movlw	21
  9296  003012  6E02               	movwf	??i2_lcd_sendCommand& (0+255),c
  9297  003014  0EC6               	movlw	198
  9298  003016                     i2u452_47:
  9299  003016  2EE8               	decfsz	wreg,f,c
  9300  003018  D7FE               	bra	i2u452_47
  9301  00301A  2E02               	decfsz	??i2_lcd_sendCommand& (0+255),f,c
  9302  00301C  D7FC               	bra	i2u452_47
  9303  00301E  D000               	nop2	
  9304                           
  9305                           ;lcd.c: 9: LATAbits.LA4 = 0;
  9306  003020  9889               	bcf	3977,4,c	;volatile
  9307  003022  0012               	return		;funcret
  9308  003024                     __end_ofi2_lcd_sendCommand:
  9309                           	opt stack 0
  9310                           tosu	equ	0xFFF
  9311                           tosh	equ	0xFFE
  9312                           tosl	equ	0xFFD
  9313                           pclatu	equ	0xFFB
  9314                           pclath	equ	0xFFA
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon	equ	0xFF2
  9322                           intcon2	equ	0xFF1
  9323                           intcon3	equ	0xFF0
  9324                           postinc0	equ	0xFEE
  9325                           fsr0h	equ	0xFEA
  9326                           fsr0l	equ	0xFE9
  9327                           wreg	equ	0xFE8
  9328                           fsr1h	equ	0xFE2
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           fsr2h	equ	0xFDA
  9334                           fsr2l	equ	0xFD9
  9335                           status	equ	0xFD8
  9336                           
  9337 ;; *************** function _lcd_sendString *****************
  9338 ;; Defined at:
  9339 ;;		line 74 in file "lcd.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  a               2    4[COMRAM] PTR const unsigned char 
  9342 ;;		 -> ftoa@buf(17), lcd_sendUInt@displayString(10), lcd_sendInt@displayString(10), UpdateDisplay@range_string(16), 
  9343 ;;		 -> UpdateDisplay@cap_string(16), 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  i               2    6[COMRAM] int 
  9346 ;; Return value:  Size  Location     Type
  9347 ;;                  1    wreg      void 
  9348 ;; Registers used:
  9349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9350 ;; Tracked objects:
  9351 ;;		On entry : 0/0
  9352 ;;		On exit  : 0/0
  9353 ;;		Unchanged: 0/0
  9354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9355 ;;      Params:         2       0       0       0       0       0       0
  9356 ;;      Locals:         2       0       0       0       0       0       0
  9357 ;;      Temps:          0       0       0       0       0       0       0
  9358 ;;      Totals:         4       0       0       0       0       0       0
  9359 ;;Total ram usage:        4 bytes
  9360 ;; Hardware stack levels used:    1
  9361 ;; Hardware stack levels required when called:    2
  9362 ;; This function calls:
  9363 ;;		_lcd_sendChar
  9364 ;; This function is called by:
  9365 ;;		_lcd_sendStringToPos
  9366 ;;		_lcd_sendInt
  9367 ;;		_lcd_sendFloat
  9368 ;;		_lcd_sendUInt
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text47
  9373  002EB0                     __ptext47:
  9374                           	opt stack 0
  9375  002EB0                     _lcd_sendString:
  9376                           	opt stack 21
  9377                           
  9378                           ;lcd.c: 76: int i;
  9379                           ;lcd.c: 77: for(i=0;a[i]!='\0';i++)
  9380                           
  9381                           ;incstack = 0
  9382  002EB0  0E00               	movlw	0
  9383  002EB2  6E08               	movwf	lcd_sendString@i+1,c
  9384  002EB4  0E00               	movlw	0
  9385  002EB6  6E07               	movwf	lcd_sendString@i,c
  9386  002EB8  D00B               	goto	i2l3192
  9387  002EBA                     i2l3188:
  9388                           
  9389                           ;lcd.c: 78: lcd_sendChar(a[i]);
  9390  002EBA  5007               	movf	lcd_sendString@i,w,c
  9391  002EBC  2405               	addwf	lcd_sendString@a,w,c
  9392  002EBE  6ED9               	movwf	fsr2l,c
  9393  002EC0  5008               	movf	lcd_sendString@i+1,w,c
  9394  002EC2  2006               	addwfc	lcd_sendString@a+1,w,c
  9395  002EC4  6EDA               	movwf	fsr2h,c
  9396  002EC6  50DF               	movf	indf2,w,c
  9397  002EC8  ECEC  F016         	call	_lcd_sendChar
  9398  002ECC  4A07               	infsnz	lcd_sendString@i,f,c
  9399  002ECE  2A08               	incf	lcd_sendString@i+1,f,c
  9400  002ED0                     i2l3192:
  9401  002ED0  5007               	movf	lcd_sendString@i,w,c
  9402  002ED2  2405               	addwf	lcd_sendString@a,w,c
  9403  002ED4  6ED9               	movwf	fsr2l,c
  9404  002ED6  5008               	movf	lcd_sendString@i+1,w,c
  9405  002ED8  2006               	addwfc	lcd_sendString@a+1,w,c
  9406  002EDA  6EDA               	movwf	fsr2h,c
  9407  002EDC  50DF               	movf	indf2,w,c
  9408  002EDE  B4D8               	btfsc	status,2,c
  9409  002EE0  0012               	return	
  9410  002EE2  D7EB               	goto	i2l3188
  9411  002EE4                     __end_of_lcd_sendString:
  9412                           	opt stack 0
  9413                           tosu	equ	0xFFF
  9414                           tosh	equ	0xFFE
  9415                           tosl	equ	0xFFD
  9416                           pclatu	equ	0xFFB
  9417                           pclath	equ	0xFFA
  9418                           tblptru	equ	0xFF8
  9419                           tblptrh	equ	0xFF7
  9420                           tblptrl	equ	0xFF6
  9421                           tablat	equ	0xFF5
  9422                           prodh	equ	0xFF4
  9423                           prodl	equ	0xFF3
  9424                           intcon	equ	0xFF2
  9425                           intcon2	equ	0xFF1
  9426                           intcon3	equ	0xFF0
  9427                           postinc0	equ	0xFEE
  9428                           fsr0h	equ	0xFEA
  9429                           fsr0l	equ	0xFE9
  9430                           wreg	equ	0xFE8
  9431                           fsr1h	equ	0xFE2
  9432                           fsr1l	equ	0xFE1
  9433                           indf2	equ	0xFDF
  9434                           postinc2	equ	0xFDE
  9435                           postdec2	equ	0xFDD
  9436                           fsr2h	equ	0xFDA
  9437                           fsr2l	equ	0xFD9
  9438                           status	equ	0xFD8
  9439                           
  9440 ;; *************** function _lcd_sendChar *****************
  9441 ;; Defined at:
  9442 ;;		line 58 in file "lcd.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;  a               1    wreg     const unsigned char 
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  a               1    3[COMRAM] const unsigned char 
  9447 ;;  y               1    2[COMRAM] unsigned char 
  9448 ;;  temp            1    1[COMRAM] unsigned char 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  1    wreg      void 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0, cstack
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9458 ;;      Params:         0       0       0       0       0       0       0
  9459 ;;      Locals:         3       0       0       0       0       0       0
  9460 ;;      Temps:          0       0       0       0       0       0       0
  9461 ;;      Totals:         3       0       0       0       0       0       0
  9462 ;;Total ram usage:        3 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    1
  9465 ;; This function calls:
  9466 ;;		i2__lcd_Port
  9467 ;; This function is called by:
  9468 ;;		_lcd_sendString
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           	psect	text48
  9473  002DD8                     __ptext48:
  9474                           	opt stack 0
  9475  002DD8                     _lcd_sendChar:
  9476                           	opt stack 21
  9477                           
  9478                           ;incstack = 0
  9479                           ;lcd_sendChar@a stored from wreg
  9480  002DD8  6E04               	movwf	lcd_sendChar@a,c
  9481                           
  9482                           ;lcd.c: 60: char temp,y;
  9483                           ;lcd.c: 61: temp = a&0x0F;
  9484  002DDA  5004               	movf	lcd_sendChar@a,w,c
  9485  002DDC  0B0F               	andlw	15
  9486  002DDE  6E02               	movwf	lcd_sendChar@temp,c
  9487                           
  9488                           ;lcd.c: 62: y = a&0xF0;
  9489  002DE0  5004               	movf	lcd_sendChar@a,w,c
  9490  002DE2  0BF0               	andlw	240
  9491  002DE4  6E03               	movwf	lcd_sendChar@y,c
  9492                           
  9493                           ;lcd.c: 63: LATAbits.LA5 = 1;
  9494  002DE6  8A89               	bsf	3977,5,c	;volatile
  9495                           
  9496                           ;lcd.c: 64: _lcd_Port(y>>4);
  9497  002DE8  3803               	swapf	lcd_sendChar@y,w,c
  9498  002DEA  0B0F               	andlw	15
  9499  002DEC  ECA2  F017         	call	i2__lcd_Port
  9500                           
  9501                           ;lcd.c: 65: LATAbits.LA4 = 1;
  9502  002DF0  8889               	bsf	3977,4,c	;volatile
  9503                           
  9504                           ;lcd.c: 66: _delay((unsigned long)((40)*(16000000UL/4000000.0)));
  9505  002DF2  0E35               	movlw	53
  9506  002DF4                     i2u453_47:
  9507  002DF4  2EE8               	decfsz	wreg,f,c
  9508  002DF6  D7FE               	bra	i2u453_47
  9509  002DF8  F000               	nop	
  9510                           
  9511                           ;lcd.c: 67: LATAbits.LA4 = 0;
  9512  002DFA  9889               	bcf	3977,4,c	;volatile
  9513                           
  9514                           ;lcd.c: 68: _lcd_Port(temp);
  9515  002DFC  5002               	movf	lcd_sendChar@temp,w,c
  9516  002DFE  ECA2  F017         	call	i2__lcd_Port
  9517                           
  9518                           ;lcd.c: 69: LATAbits.LA4 = 1;
  9519  002E02  8889               	bsf	3977,4,c	;volatile
  9520                           
  9521                           ;lcd.c: 70: _delay((unsigned long)((40)*(16000000UL/4000000.0)));
  9522  002E04  0E35               	movlw	53
  9523  002E06                     i2u454_47:
  9524  002E06  2EE8               	decfsz	wreg,f,c
  9525  002E08  D7FE               	bra	i2u454_47
  9526  002E0A  F000               	nop	
  9527                           
  9528                           ;lcd.c: 71: LATAbits.LA4 = 0;
  9529  002E0C  9889               	bcf	3977,4,c	;volatile
  9530  002E0E  0012               	return		;funcret
  9531  002E10                     __end_of_lcd_sendChar:
  9532                           	opt stack 0
  9533                           tosu	equ	0xFFF
  9534                           tosh	equ	0xFFE
  9535                           tosl	equ	0xFFD
  9536                           pclatu	equ	0xFFB
  9537                           pclath	equ	0xFFA
  9538                           tblptru	equ	0xFF8
  9539                           tblptrh	equ	0xFF7
  9540                           tblptrl	equ	0xFF6
  9541                           tablat	equ	0xFF5
  9542                           prodh	equ	0xFF4
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           intcon2	equ	0xFF1
  9546                           intcon3	equ	0xFF0
  9547                           postinc0	equ	0xFEE
  9548                           fsr0h	equ	0xFEA
  9549                           fsr0l	equ	0xFE9
  9550                           wreg	equ	0xFE8
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function i2__lcd_Port *****************
  9561 ;; Defined at:
  9562 ;;		line 139 in file "lcd.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  a               1    wreg     unsigned char 
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;  a               1    0[COMRAM] unsigned char 
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  1    wreg      void 
  9569 ;; Registers used:
  9570 ;;		wreg
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9576 ;;      Params:         0       0       0       0       0       0       0
  9577 ;;      Locals:         1       0       0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0
  9579 ;;      Totals:         1       0       0       0       0       0       0
  9580 ;;Total ram usage:        1 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_lcd_sendChar
  9586 ;;		i2_lcd_sendCommand
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text49
  9591  002F44                     __ptext49:
  9592                           	opt stack 0
  9593  002F44                     i2__lcd_Port:
  9594                           	opt stack 21
  9595                           
  9596                           ;incstack = 0
  9597                           ;i2__lcd_Port@a stored from wreg
  9598  002F44  6E01               	movwf	i2__lcd_Port@a,c
  9599                           
  9600                           ;lcd.c: 141: if(a & 1)
  9601  002F46  A001               	btfss	i2__lcd_Port@a,0,c
  9602  002F48  D002               	goto	i2l349
  9603                           
  9604                           ;lcd.c: 142: LATAbits.LA3 = 1;
  9605  002F4A  8689               	bsf	3977,3,c	;volatile
  9606  002F4C  D001               	goto	i2l2814
  9607  002F4E                     i2l349:
  9608                           
  9609                           ;lcd.c: 143: else
  9610                           ;lcd.c: 144: LATAbits.LA3 = 0;
  9611  002F4E  9689               	bcf	3977,3,c	;volatile
  9612  002F50                     i2l2814:
  9613                           
  9614                           ;lcd.c: 146: if(a & 2)
  9615  002F50  A201               	btfss	i2__lcd_Port@a,1,c
  9616  002F52  D002               	goto	i2l351
  9617                           
  9618                           ;lcd.c: 147: LATAbits.LA2 = 1;
  9619  002F54  8489               	bsf	3977,2,c	;volatile
  9620  002F56  D001               	goto	i2l2818
  9621  002F58                     i2l351:
  9622                           
  9623                           ;lcd.c: 148: else
  9624                           ;lcd.c: 149: LATAbits.LA2 = 0;
  9625  002F58  9489               	bcf	3977,2,c	;volatile
  9626  002F5A                     i2l2818:
  9627                           
  9628                           ;lcd.c: 151: if(a & 4)
  9629  002F5A  A401               	btfss	i2__lcd_Port@a,2,c
  9630  002F5C  D002               	goto	i2l353
  9631                           
  9632                           ;lcd.c: 152: LATAbits.LA1 = 1;
  9633  002F5E  8289               	bsf	3977,1,c	;volatile
  9634  002F60  D001               	goto	i2l2822
  9635  002F62                     i2l353:
  9636                           
  9637                           ;lcd.c: 153: else
  9638                           ;lcd.c: 154: LATAbits.LA1 = 0;
  9639  002F62  9289               	bcf	3977,1,c	;volatile
  9640  002F64                     i2l2822:
  9641                           
  9642                           ;lcd.c: 156: if(a & 8)
  9643  002F64  A601               	btfss	i2__lcd_Port@a,3,c
  9644  002F66  D002               	goto	i2l355
  9645                           
  9646                           ;lcd.c: 157: LATAbits.LA0 = 1;
  9647  002F68  8089               	bsf	3977,0,c	;volatile
  9648  002F6A  0012               	return	
  9649  002F6C                     i2l355:
  9650                           
  9651                           ;lcd.c: 158: else
  9652                           ;lcd.c: 159: LATAbits.LA0 = 0;
  9653  002F6C  9089               	bcf	3977,0,c	;volatile
  9654  002F6E  0012               	return	
  9655  002F70                     __end_ofi2__lcd_Port:
  9656                           	opt stack 0
  9657                           tosu	equ	0xFFF
  9658                           tosh	equ	0xFFE
  9659                           tosl	equ	0xFFD
  9660                           pclatu	equ	0xFFB
  9661                           pclath	equ	0xFFA
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           intcon	equ	0xFF2
  9669                           intcon2	equ	0xFF1
  9670                           intcon3	equ	0xFF0
  9671                           postinc0	equ	0xFEE
  9672                           fsr0h	equ	0xFEA
  9673                           fsr0l	equ	0xFE9
  9674                           wreg	equ	0xFE8
  9675                           fsr1h	equ	0xFE2
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function ___ftdiv *****************
  9685 ;; Defined at:
  9686 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  f1              3   47[COMRAM] float 
  9689 ;;  f2              3   50[COMRAM] float 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  f3              3   57[COMRAM] float 
  9692 ;;  sign            1   61[COMRAM] unsigned char 
  9693 ;;  exp             1   60[COMRAM] unsigned char 
  9694 ;;  cntr            1   56[COMRAM] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  3   47[COMRAM] float 
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9704 ;;      Params:         6       0       0       0       0       0       0
  9705 ;;      Locals:         6       0       0       0       0       0       0
  9706 ;;      Temps:          3       0       0       0       0       0       0
  9707 ;;      Totals:        15       0       0       0       0       0       0
  9708 ;;Total ram usage:       15 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    1
  9711 ;; This function calls:
  9712 ;;		___ftpack
  9713 ;; This function is called by:
  9714 ;;		_UpdateDisplay
  9715 ;;		_INT0_ISR
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text50
  9720  00270A                     __ptext50:
  9721                           	opt stack 0
  9722  00270A                     ___ftdiv:
  9723                           	opt stack 24
  9724                           
  9725                           ;incstack = 0
  9726  00270A  C032  F036         	movff	___ftdiv@f1+2,??___ftdiv
  9727  00270E  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  9728  002710  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  9729  002712  3431               	rlcf	___ftdiv@f1+1,w,c
  9730  002714  3636               	rlcf	??___ftdiv& (0+255),f,c
  9731  002716  E301               	bnc	u413_41
  9732  002718  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  9733  00271A                     u413_41:
  9734  00271A  5036               	movf	??___ftdiv,w,c
  9735  00271C  6E3D               	movwf	___ftdiv@exp,c
  9736  00271E  503D               	movf	___ftdiv@exp,w,c
  9737  002720  A4D8               	btfss	status,2,c
  9738  002722  D007               	goto	i2l3576
  9739  002724  0E00               	movlw	0
  9740  002726  6E30               	movwf	?___ftdiv,c
  9741  002728  0E00               	movlw	0
  9742  00272A  6E31               	movwf	?___ftdiv+1,c
  9743  00272C  0E00               	movlw	0
  9744  00272E  6E32               	movwf	?___ftdiv+2,c
  9745  002730  0012               	return	
  9746  002732                     i2l3576:
  9747  002732  C035  F036         	movff	___ftdiv@f2+2,??___ftdiv
  9748  002736  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  9749  002738  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  9750  00273A  3434               	rlcf	___ftdiv@f2+1,w,c
  9751  00273C  3636               	rlcf	??___ftdiv& (0+255),f,c
  9752  00273E  E301               	bnc	u415_41
  9753  002740  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  9754  002742                     u415_41:
  9755  002742  5036               	movf	??___ftdiv,w,c
  9756  002744  6E3E               	movwf	___ftdiv@sign,c
  9757  002746  503E               	movf	___ftdiv@sign,w,c
  9758  002748  A4D8               	btfss	status,2,c
  9759  00274A  D007               	goto	i2l3582
  9760  00274C  0E00               	movlw	0
  9761  00274E  6E30               	movwf	?___ftdiv,c
  9762  002750  0E00               	movlw	0
  9763  002752  6E31               	movwf	?___ftdiv+1,c
  9764  002754  0E00               	movlw	0
  9765  002756  6E32               	movwf	?___ftdiv+2,c
  9766  002758  0012               	return	
  9767  00275A                     i2l3582:
  9768  00275A  0E00               	movlw	0
  9769  00275C  6E3A               	movwf	___ftdiv@f3,c
  9770  00275E  0E00               	movlw	0
  9771  002760  6E3B               	movwf	___ftdiv@f3+1,c
  9772  002762  0E00               	movlw	0
  9773  002764  6E3C               	movwf	___ftdiv@f3+2,c
  9774  002766  503E               	movf	___ftdiv@sign,w,c
  9775  002768  0F89               	addlw	137
  9776  00276A  5E3D               	subwf	___ftdiv@exp,f,c
  9777  00276C  C032  F03E         	movff	___ftdiv@f1+2,___ftdiv@sign
  9778  002770  5035               	movf	___ftdiv@f2+2,w,c
  9779  002772  1A3E               	xorwf	___ftdiv@sign,f,c
  9780  002774  0E80               	movlw	128
  9781  002776  163E               	andwf	___ftdiv@sign,f,c
  9782  002778  8E31               	bsf	___ftdiv@f1+1,7,c
  9783  00277A  0EFF               	movlw	255
  9784  00277C  1630               	andwf	___ftdiv@f1,f,c
  9785  00277E  0EFF               	movlw	255
  9786  002780  1631               	andwf	___ftdiv@f1+1,f,c
  9787  002782  0E00               	movlw	0
  9788  002784  1632               	andwf	___ftdiv@f1+2,f,c
  9789  002786  8E34               	bsf	___ftdiv@f2+1,7,c
  9790  002788  0EFF               	movlw	255
  9791  00278A  1633               	andwf	___ftdiv@f2,f,c
  9792  00278C  0EFF               	movlw	255
  9793  00278E  1634               	andwf	___ftdiv@f2+1,f,c
  9794  002790  0E00               	movlw	0
  9795  002792  1635               	andwf	___ftdiv@f2+2,f,c
  9796  002794  0E18               	movlw	24
  9797  002796  6E39               	movwf	___ftdiv@cntr,c
  9798  002798                     i2l3602:
  9799  002798  90D8               	bcf	status,0,c
  9800  00279A  363A               	rlcf	___ftdiv@f3,f,c
  9801  00279C  363B               	rlcf	___ftdiv@f3+1,f,c
  9802  00279E  363C               	rlcf	___ftdiv@f3+2,f,c
  9803  0027A0  5033               	movf	___ftdiv@f2,w,c
  9804  0027A2  5C30               	subwf	___ftdiv@f1,w,c
  9805  0027A4  5034               	movf	___ftdiv@f2+1,w,c
  9806  0027A6  5831               	subwfb	___ftdiv@f1+1,w,c
  9807  0027A8  5035               	movf	___ftdiv@f2+2,w,c
  9808  0027AA  5832               	subwfb	___ftdiv@f1+2,w,c
  9809  0027AC  A0D8               	btfss	status,0,c
  9810  0027AE  D007               	goto	i2l805
  9811  0027B0  5033               	movf	___ftdiv@f2,w,c
  9812  0027B2  5E30               	subwf	___ftdiv@f1,f,c
  9813  0027B4  5034               	movf	___ftdiv@f2+1,w,c
  9814  0027B6  5A31               	subwfb	___ftdiv@f1+1,f,c
  9815  0027B8  5035               	movf	___ftdiv@f2+2,w,c
  9816  0027BA  5A32               	subwfb	___ftdiv@f1+2,f,c
  9817  0027BC  803A               	bsf	___ftdiv@f3,0,c
  9818  0027BE                     i2l805:
  9819  0027BE  90D8               	bcf	status,0,c
  9820  0027C0  3630               	rlcf	___ftdiv@f1,f,c
  9821  0027C2  3631               	rlcf	___ftdiv@f1+1,f,c
  9822  0027C4  3632               	rlcf	___ftdiv@f1+2,f,c
  9823  0027C6  2E39               	decfsz	___ftdiv@cntr,f,c
  9824  0027C8  D7E7               	goto	i2l3602
  9825  0027CA  C03A  F001         	movff	___ftdiv@f3,___ftpack@arg
  9826  0027CE  C03B  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9827  0027D2  C03C  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9828  0027D6  C03D  F004         	movff	___ftdiv@exp,___ftpack@exp
  9829  0027DA  C03E  F005         	movff	___ftdiv@sign,___ftpack@sign
  9830  0027DE  ECF8  F013         	call	___ftpack	;wreg free
  9831  0027E2  C001  F030         	movff	?___ftpack,?___ftdiv
  9832  0027E6  C002  F031         	movff	?___ftpack+1,?___ftdiv+1
  9833  0027EA  C003  F032         	movff	?___ftpack+2,?___ftdiv+2
  9834  0027EE  0012               	return	
  9835  0027F0                     __end_of___ftdiv:
  9836                           	opt stack 0
  9837                           tosu	equ	0xFFF
  9838                           tosh	equ	0xFFE
  9839                           tosl	equ	0xFFD
  9840                           pclatu	equ	0xFFB
  9841                           pclath	equ	0xFFA
  9842                           tblptru	equ	0xFF8
  9843                           tblptrh	equ	0xFF7
  9844                           tblptrl	equ	0xFF6
  9845                           tablat	equ	0xFF5
  9846                           prodh	equ	0xFF4
  9847                           prodl	equ	0xFF3
  9848                           intcon	equ	0xFF2
  9849                           intcon2	equ	0xFF1
  9850                           intcon3	equ	0xFF0
  9851                           postinc0	equ	0xFEE
  9852                           fsr0h	equ	0xFEA
  9853                           fsr0l	equ	0xFE9
  9854                           wreg	equ	0xFE8
  9855                           fsr1h	equ	0xFE2
  9856                           fsr1l	equ	0xFE1
  9857                           indf2	equ	0xFDF
  9858                           postinc2	equ	0xFDE
  9859                           postdec2	equ	0xFDD
  9860                           fsr2h	equ	0xFDA
  9861                           fsr2l	equ	0xFD9
  9862                           status	equ	0xFD8
  9863                           
  9864 ;; *************** function ___ftpack *****************
  9865 ;; Defined at:
  9866 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;  arg             3    0[COMRAM] unsigned um
  9869 ;;  exp             1    3[COMRAM] unsigned char 
  9870 ;;  sign            1    4[COMRAM] unsigned char 
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  3    0[COMRAM] float 
  9875 ;; Registers used:
  9876 ;;		wreg, status,2, status,0
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9882 ;;      Params:         5       0       0       0       0       0       0
  9883 ;;      Locals:         0       0       0       0       0       0       0
  9884 ;;      Temps:          3       0       0       0       0       0       0
  9885 ;;      Totals:         8       0       0       0       0       0       0
  9886 ;;Total ram usage:        8 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		___ftadd
  9892 ;;		___ftdiv
  9893 ;;		___ftmul
  9894 ;;		___lltoft
  9895 ;;		___lwtoft
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text51
  9900  0027F0                     __ptext51:
  9901                           	opt stack 0
  9902  0027F0                     ___ftpack:
  9903                           	opt stack 21
  9904                           
  9905                           ;incstack = 0
  9906  0027F0  5004               	movf	___ftpack@exp,w,c
  9907  0027F2  B4D8               	btfsc	status,2,c
  9908  0027F4  D005               	goto	i2l2570
  9909  0027F6  5001               	movf	___ftpack@arg,w,c
  9910  0027F8  1002               	iorwf	___ftpack@arg+1,w,c
  9911  0027FA  1003               	iorwf	___ftpack@arg+2,w,c
  9912  0027FC  A4D8               	btfss	status,2,c
  9913  0027FE  D00C               	goto	i2l2576
  9914  002800                     i2l2570:
  9915  002800  0E00               	movlw	0
  9916  002802  6E01               	movwf	?___ftpack,c
  9917  002804  0E00               	movlw	0
  9918  002806  6E02               	movwf	?___ftpack+1,c
  9919  002808  0E00               	movlw	0
  9920  00280A  6E03               	movwf	?___ftpack+2,c
  9921  00280C  0012               	return	
  9922  00280E                     i2l2574:
  9923  00280E  2A04               	incf	___ftpack@exp,f,c
  9924  002810  90D8               	bcf	status,0,c
  9925  002812  3203               	rrcf	___ftpack@arg+2,f,c
  9926  002814  3202               	rrcf	___ftpack@arg+1,f,c
  9927  002816  3201               	rrcf	___ftpack@arg,f,c
  9928  002818                     i2l2576:
  9929  002818  0E00               	movlw	0
  9930  00281A  1401               	andwf	___ftpack@arg,w,c
  9931  00281C  6E06               	movwf	??___ftpack& (0+255),c
  9932  00281E  0E00               	movlw	0
  9933  002820  1402               	andwf	___ftpack@arg+1,w,c
  9934  002822  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9935  002824  0EFE               	movlw	254
  9936  002826  1403               	andwf	___ftpack@arg+2,w,c
  9937  002828  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9938  00282A  5006               	movf	??___ftpack,w,c
  9939  00282C  1007               	iorwf	??___ftpack+1,w,c
  9940  00282E  1008               	iorwf	??___ftpack+2,w,c
  9941  002830  B4D8               	btfsc	status,2,c
  9942  002832  D00C               	goto	i2l2582
  9943  002834  D7EC               	goto	i2l2574
  9944  002836                     i2l2578:
  9945  002836  2A04               	incf	___ftpack@exp,f,c
  9946  002838  0E01               	movlw	1
  9947  00283A  2601               	addwf	___ftpack@arg,f,c
  9948  00283C  0E00               	movlw	0
  9949  00283E  2202               	addwfc	___ftpack@arg+1,f,c
  9950  002840  0E00               	movlw	0
  9951  002842  2203               	addwfc	___ftpack@arg+2,f,c
  9952  002844  90D8               	bcf	status,0,c
  9953  002846  3203               	rrcf	___ftpack@arg+2,f,c
  9954  002848  3202               	rrcf	___ftpack@arg+1,f,c
  9955  00284A  3201               	rrcf	___ftpack@arg,f,c
  9956  00284C                     i2l2582:
  9957  00284C  0E00               	movlw	0
  9958  00284E  1401               	andwf	___ftpack@arg,w,c
  9959  002850  6E06               	movwf	??___ftpack& (0+255),c
  9960  002852  0E00               	movlw	0
  9961  002854  1402               	andwf	___ftpack@arg+1,w,c
  9962  002856  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9963  002858  0EFF               	movlw	255
  9964  00285A  1403               	andwf	___ftpack@arg+2,w,c
  9965  00285C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9966  00285E  5006               	movf	??___ftpack,w,c
  9967  002860  1007               	iorwf	??___ftpack+1,w,c
  9968  002862  1008               	iorwf	??___ftpack+2,w,c
  9969  002864  B4D8               	btfsc	status,2,c
  9970  002866  D006               	goto	i2l2586
  9971  002868  D7E6               	goto	i2l2578
  9972  00286A                     i2l2584:
  9973  00286A  0604               	decf	___ftpack@exp,f,c
  9974  00286C  90D8               	bcf	status,0,c
  9975  00286E  3601               	rlcf	___ftpack@arg,f,c
  9976  002870  3602               	rlcf	___ftpack@arg+1,f,c
  9977  002872  3603               	rlcf	___ftpack@arg+2,f,c
  9978  002874                     i2l2586:
  9979  002874  BE02               	btfsc	___ftpack@arg+1,7,c
  9980  002876  D003               	goto	i2l747
  9981  002878  0E02               	movlw	2
  9982  00287A  6004               	cpfslt	___ftpack@exp,c
  9983  00287C  D7F6               	goto	i2l2584
  9984  00287E                     i2l747:
  9985  00287E  A004               	btfss	___ftpack@exp,0,c
  9986  002880  9E02               	bcf	___ftpack@arg+1,7,c
  9987  002882  90D8               	bcf	status,0,c
  9988  002884  3204               	rrcf	___ftpack@exp,f,c
  9989  002886  5004               	movf	___ftpack@exp,w,c
  9990  002888  1203               	iorwf	___ftpack@arg+2,f,c
  9991  00288A  5005               	movf	___ftpack@sign,w,c
  9992  00288C  A4D8               	btfss	status,2,c
  9993  00288E  8E03               	bsf	___ftpack@arg+2,7,c
  9994  002890  C001  F001         	movff	___ftpack@arg,?___ftpack
  9995  002894  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9996  002898  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9997  00289C  0012               	return	
  9998  00289E                     __end_of___ftpack:
  9999                           	opt stack 0
 10000                           tosu	equ	0xFFF
 10001                           tosh	equ	0xFFE
 10002                           tosl	equ	0xFFD
 10003                           pclatu	equ	0xFFB
 10004                           pclath	equ	0xFFA
 10005                           tblptru	equ	0xFF8
 10006                           tblptrh	equ	0xFF7
 10007                           tblptrl	equ	0xFF6
 10008                           tablat	equ	0xFF5
 10009                           prodh	equ	0xFF4
 10010                           prodl	equ	0xFF3
 10011                           intcon	equ	0xFF2
 10012                           intcon2	equ	0xFF1
 10013                           intcon3	equ	0xFF0
 10014                           postinc0	equ	0xFEE
 10015                           fsr0h	equ	0xFEA
 10016                           fsr0l	equ	0xFE9
 10017                           wreg	equ	0xFE8
 10018                           fsr1h	equ	0xFE2
 10019                           fsr1l	equ	0xFE1
 10020                           indf2	equ	0xFDF
 10021                           postinc2	equ	0xFDE
 10022                           postdec2	equ	0xFDD
 10023                           fsr2h	equ	0xFDA
 10024                           fsr2l	equ	0xFD9
 10025                           status	equ	0xFD8
 10026                           
 10027 ;; *************** function _TMR0_StopTimer *****************
 10028 ;; Defined at:
 10029 ;;		line 57 in file "mcc_generated_files/tmr0.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;		None
 10032 ;; Auto vars:     Size  Location     Type
 10033 ;;		None
 10034 ;; Return value:  Size  Location     Type
 10035 ;;                  1    wreg      void 
 10036 ;; Registers used:
 10037 ;;		None
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10043 ;;      Params:         0       0       0       0       0       0       0
 10044 ;;      Locals:         0       0       0       0       0       0       0
 10045 ;;      Temps:          0       0       0       0       0       0       0
 10046 ;;      Totals:         0       0       0       0       0       0       0
 10047 ;;Total ram usage:        0 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; This function calls:
 10050 ;;		Nothing
 10051 ;; This function is called by:
 10052 ;;		_INT0_ISR
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text52
 10057  00310A                     __ptext52:
 10058                           	opt stack 0
 10059  00310A                     _TMR0_StopTimer:
 10060                           	opt stack 25
 10061                           
 10062                           ;tmr0.c: 60: T0CONbits.TMR0ON = 0;
 10063                           
 10064                           ;incstack = 0
 10065  00310A  9ED5               	bcf	4053,7,c	;volatile
 10066  00310C  0012               	return		;funcret
 10067  00310E                     __end_of_TMR0_StopTimer:
 10068                           	opt stack 0
 10069                           tosu	equ	0xFFF
 10070                           tosh	equ	0xFFE
 10071                           tosl	equ	0xFFD
 10072                           pclatu	equ	0xFFB
 10073                           pclath	equ	0xFFA
 10074                           tblptru	equ	0xFF8
 10075                           tblptrh	equ	0xFF7
 10076                           tblptrl	equ	0xFF6
 10077                           tablat	equ	0xFF5
 10078                           prodh	equ	0xFF4
 10079                           prodl	equ	0xFF3
 10080                           intcon	equ	0xFF2
 10081                           intcon2	equ	0xFF1
 10082                           intcon3	equ	0xFF0
 10083                           postinc0	equ	0xFEE
 10084                           fsr0h	equ	0xFEA
 10085                           fsr0l	equ	0xFE9
 10086                           wreg	equ	0xFE8
 10087                           fsr1h	equ	0xFE2
 10088                           fsr1l	equ	0xFE1
 10089                           indf2	equ	0xFDF
 10090                           postinc2	equ	0xFDE
 10091                           postdec2	equ	0xFDD
 10092                           fsr2h	equ	0xFDA
 10093                           fsr2l	equ	0xFD9
 10094                           status	equ	0xFD8
 10095                           
 10096 ;; *************** function _TMR0_Reload *****************
 10097 ;; Defined at:
 10098 ;;		line 85 in file "mcc_generated_files/tmr0.c"
 10099 ;; Parameters:    Size  Location     Type
 10100 ;;		None
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;		None
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      void 
 10105 ;; Registers used:
 10106 ;;		wreg, status,2
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10112 ;;      Params:         0       0       0       0       0       0       0
 10113 ;;      Locals:         0       0       0       0       0       0       0
 10114 ;;      Temps:          0       0       0       0       0       0       0
 10115 ;;      Totals:         0       0       0       0       0       0       0
 10116 ;;Total ram usage:        0 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_INT0_ISR
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           	psect	text53
 10126  0030F4                     __ptext53:
 10127                           	opt stack 0
 10128  0030F4                     _TMR0_Reload:
 10129                           	opt stack 25
 10130                           
 10131                           ;tmr0.c: 88: TMR0H = timer0ReloadVal >> 8;
 10132                           
 10133                           ;incstack = 0
 10134  0030F4  5056               	movf	_timer0ReloadVal+1,w,c	;volatile
 10135  0030F6  6ED7               	movwf	4055,c	;volatile
 10136                           
 10137                           ;tmr0.c: 89: TMR0L = (uint8_t) timer0ReloadVal;
 10138  0030F8  C055  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 10139  0030FC  0012               	return		;funcret
 10140  0030FE                     __end_of_TMR0_Reload:
 10141                           	opt stack 0
 10142                           tosu	equ	0xFFF
 10143                           tosh	equ	0xFFE
 10144                           tosl	equ	0xFFD
 10145                           pclatu	equ	0xFFB
 10146                           pclath	equ	0xFFA
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           intcon	equ	0xFF2
 10154                           intcon2	equ	0xFF1
 10155                           intcon3	equ	0xFF0
 10156                           postinc0	equ	0xFEE
 10157                           fsr0h	equ	0xFEA
 10158                           fsr0l	equ	0xFE9
 10159                           wreg	equ	0xFE8
 10160                           fsr1h	equ	0xFE2
 10161                           fsr1l	equ	0xFE1
 10162                           indf2	equ	0xFDF
 10163                           postinc2	equ	0xFDE
 10164                           postdec2	equ	0xFDD
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function _TMR0_ReadTimer *****************
 10170 ;; Defined at:
 10171 ;;		line 63 in file "mcc_generated_files/tmr0.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;  readVal         2    6[COMRAM] unsigned int 
 10176 ;;  readValHigh     1    9[COMRAM] unsigned char 
 10177 ;;  readValLow      1    8[COMRAM] unsigned char 
 10178 ;; Return value:  Size  Location     Type
 10179 ;;                  2    0[COMRAM] unsigned int 
 10180 ;; Registers used:
 10181 ;;		wreg, status,2, status,0
 10182 ;; Tracked objects:
 10183 ;;		On entry : 0/0
 10184 ;;		On exit  : 0/0
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10187 ;;      Params:         2       0       0       0       0       0       0
 10188 ;;      Locals:         4       0       0       0       0       0       0
 10189 ;;      Temps:          4       0       0       0       0       0       0
 10190 ;;      Totals:        10       0       0       0       0       0       0
 10191 ;;Total ram usage:       10 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; This function calls:
 10194 ;;		Nothing
 10195 ;; This function is called by:
 10196 ;;		_INT0_ISR
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           	psect	text54
 10201  002D56                     __ptext54:
 10202                           	opt stack 0
 10203  002D56                     _TMR0_ReadTimer:
 10204                           	opt stack 25
 10205                           
 10206                           ;tmr0.c: 65: uint16_t readVal;
 10207                           ;tmr0.c: 66: uint8_t readValLow;
 10208                           ;tmr0.c: 67: uint8_t readValHigh;
 10209                           ;tmr0.c: 69: readValLow = TMR0L;
 10210                           
 10211                           ;incstack = 0
 10212  002D56  CFD6 F009          	movff	4054,TMR0_ReadTimer@readValLow	;volatile
 10213                           
 10214                           ;tmr0.c: 70: readValHigh = TMR0H;
 10215  002D5A  CFD7 F00A          	movff	4055,TMR0_ReadTimer@readValHigh	;volatile
 10216                           
 10217                           ;tmr0.c: 73: readVal = ((uint16_t)readValHigh << 8) + readValLow - (timer0ReloadVal);
 10218  002D5E  C055  F003         	movff	_timer0ReloadVal,??_TMR0_ReadTimer	;volatile
 10219  002D62  C056  F004         	movff	_timer0ReloadVal+1,??_TMR0_ReadTimer+1	;volatile
 10220  002D66  1E03               	comf	??_TMR0_ReadTimer,f,c
 10221  002D68  1E04               	comf	??_TMR0_ReadTimer+1,f,c
 10222  002D6A  4A03               	infsnz	??_TMR0_ReadTimer,f,c
 10223  002D6C  2A04               	incf	??_TMR0_ReadTimer+1,f,c
 10224  002D6E  5009               	movf	TMR0_ReadTimer@readValLow,w,c
 10225  002D70  C00A  F005         	movff	TMR0_ReadTimer@readValHigh,??_TMR0_ReadTimer+2
 10226  002D74  6A06               	clrf	(??_TMR0_ReadTimer+3)& (0+255),c
 10227  002D76  C005  F006         	movff	??_TMR0_ReadTimer+2,??_TMR0_ReadTimer+3
 10228  002D7A  6A05               	clrf	??_TMR0_ReadTimer+2,c
 10229  002D7C  2605               	addwf	??_TMR0_ReadTimer+2,f,c
 10230  002D7E  0E00               	movlw	0
 10231  002D80  2206               	addwfc	??_TMR0_ReadTimer+3,f,c
 10232  002D82  5003               	movf	??_TMR0_ReadTimer,w,c
 10233  002D84  2405               	addwf	??_TMR0_ReadTimer+2,w,c
 10234  002D86  6E07               	movwf	TMR0_ReadTimer@readVal,c
 10235  002D88  5004               	movf	??_TMR0_ReadTimer+1,w,c
 10236  002D8A  2006               	addwfc	??_TMR0_ReadTimer+3,w,c
 10237  002D8C  6E08               	movwf	TMR0_ReadTimer@readVal+1,c
 10238                           
 10239                           ;tmr0.c: 75: return readVal;
 10240  002D8E  C007  F001         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
 10241  002D92  C008  F002         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
 10242  002D96  0012               	return	
 10243  002D98                     __end_of_TMR0_ReadTimer:
 10244                           	opt stack 0
 10245                           tosu	equ	0xFFF
 10246                           tosh	equ	0xFFE
 10247                           tosl	equ	0xFFD
 10248                           pclatu	equ	0xFFB
 10249                           pclath	equ	0xFFA
 10250                           tblptru	equ	0xFF8
 10251                           tblptrh	equ	0xFF7
 10252                           tblptrl	equ	0xFF6
 10253                           tablat	equ	0xFF5
 10254                           prodh	equ	0xFF4
 10255                           prodl	equ	0xFF3
 10256                           intcon	equ	0xFF2
 10257                           intcon2	equ	0xFF1
 10258                           intcon3	equ	0xFF0
 10259                           postinc0	equ	0xFEE
 10260                           fsr0h	equ	0xFEA
 10261                           fsr0l	equ	0xFE9
 10262                           wreg	equ	0xFE8
 10263                           fsr1h	equ	0xFE2
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _SetRange *****************
 10273 ;; Defined at:
 10274 ;;		line 45 in file "mcc_generated_files/ext_int.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;  new_range       1    wreg     unsigned char 
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;  new_range       1   10[COMRAM] unsigned char 
 10279 ;; Return value:  Size  Location     Type
 10280 ;;                  1    wreg      void 
 10281 ;; Registers used:
 10282 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/0
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10288 ;;      Params:         0       0       0       0       0       0       0
 10289 ;;      Locals:         1       0       0       0       0       0       0
 10290 ;;      Temps:         10       0       0       0       0       0       0
 10291 ;;      Totals:        11       0       0       0       0       0       0
 10292 ;;Total ram usage:       11 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; This function calls:
 10295 ;;		Nothing
 10296 ;; This function is called by:
 10297 ;;		_INT1_ISR
 10298 ;;		_INT0_ISR
 10299 ;;		_TMR0_DefaultInterruptHandler
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           	psect	text55
 10304  001E2C                     __ptext55:
 10305                           	opt stack 0
 10306  001E2C                     _SetRange:
 10307                           	opt stack 24
 10308                           
 10309                           ;incstack = 0
 10310                           ;SetRange@new_range stored from wreg
 10311  001E2C  6E0B               	movwf	SetRange@new_range,c
 10312                           
 10313                           ;ext_int.c: 48: LATC |= (1 << R1_BIT[0]) | (1 << R1_BIT[1]) | (1 << R1_BIT[2]) | (1 << R
      +                          1_BIT[3]) | (1 << R1_BIT[4]);
 10314  001E2E  0E8A               	movlw	low (_R1_BIT+4)
 10315  001E30  6EF6               	movwf	tblptrl,c
 10316  001E32  0E06               	movlw	high (_R1_BIT+4)
 10317  001E34  6EF7               	movwf	tblptrh,c
 10318  001E36                     	if	0	;tblptru may be non-zero
 10319  001E36                     	endif
 10320  001E36                     	if	0	;tblptru may be non-zero
 10321  001E36                     	endif
 10322  001E36  0008               	tblrd		*
 10323  001E38  CFF5 F001          	movff	tablat,??_SetRange
 10324  001E3C  0E01               	movlw	1
 10325  001E3E  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10326  001E40  2A01               	incf	??_SetRange,f,c
 10327  001E42  D002               	goto	i2u398_44
 10328  001E44                     i2u398_45:
 10329  001E44  90D8               	bcf	status,0,c
 10330  001E46  3602               	rlcf	??_SetRange+1,f,c
 10331  001E48                     i2u398_44:
 10332  001E48  2E01               	decfsz	??_SetRange,f,c
 10333  001E4A  D7FC               	goto	i2u398_45
 10334  001E4C  0E89               	movlw	low (_R1_BIT+3)
 10335  001E4E  6EF6               	movwf	tblptrl,c
 10336  001E50  0E06               	movlw	high (_R1_BIT+3)
 10337  001E52  6EF7               	movwf	tblptrh,c
 10338  001E54                     	if	0	;tblptru may be non-zero
 10339  001E54                     	endif
 10340  001E54                     	if	0	;tblptru may be non-zero
 10341  001E54                     	endif
 10342  001E54  0008               	tblrd		*
 10343  001E56  CFF5 F003          	movff	tablat,??_SetRange+2
 10344  001E5A  0E01               	movlw	1
 10345  001E5C  6E04               	movwf	(??_SetRange+3)& (0+255),c
 10346  001E5E  2A03               	incf	??_SetRange+2,f,c
 10347  001E60  D002               	goto	i2u399_44
 10348  001E62                     i2u399_45:
 10349  001E62  90D8               	bcf	status,0,c
 10350  001E64  3604               	rlcf	??_SetRange+3,f,c
 10351  001E66                     i2u399_44:
 10352  001E66  2E03               	decfsz	??_SetRange+2,f,c
 10353  001E68  D7FC               	goto	i2u399_45
 10354  001E6A  0E88               	movlw	low (_R1_BIT+2)
 10355  001E6C  6EF6               	movwf	tblptrl,c
 10356  001E6E  0E06               	movlw	high (_R1_BIT+2)
 10357  001E70  6EF7               	movwf	tblptrh,c
 10358  001E72                     	if	0	;tblptru may be non-zero
 10359  001E72                     	endif
 10360  001E72                     	if	0	;tblptru may be non-zero
 10361  001E72                     	endif
 10362  001E72  0008               	tblrd		*
 10363  001E74  CFF5 F005          	movff	tablat,??_SetRange+4
 10364  001E78  0E01               	movlw	1
 10365  001E7A  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10366  001E7C  2A05               	incf	??_SetRange+4,f,c
 10367  001E7E  D002               	goto	i2u400_44
 10368  001E80                     i2u400_45:
 10369  001E80  90D8               	bcf	status,0,c
 10370  001E82  3606               	rlcf	??_SetRange+5,f,c
 10371  001E84                     i2u400_44:
 10372  001E84  2E05               	decfsz	??_SetRange+4,f,c
 10373  001E86  D7FC               	goto	i2u400_45
 10374  001E88  0E87               	movlw	low (_R1_BIT+1)
 10375  001E8A  6EF6               	movwf	tblptrl,c
 10376  001E8C  0E06               	movlw	high (_R1_BIT+1)
 10377  001E8E  6EF7               	movwf	tblptrh,c
 10378  001E90                     	if	0	;tblptru may be non-zero
 10379  001E90                     	endif
 10380  001E90                     	if	0	;tblptru may be non-zero
 10381  001E90                     	endif
 10382  001E90  0008               	tblrd		*
 10383  001E92  CFF5 F007          	movff	tablat,??_SetRange+6
 10384  001E96  0E01               	movlw	1
 10385  001E98  6E08               	movwf	(??_SetRange+7)& (0+255),c
 10386  001E9A  2A07               	incf	??_SetRange+6,f,c
 10387  001E9C  D002               	goto	i2u401_44
 10388  001E9E                     i2u401_45:
 10389  001E9E  90D8               	bcf	status,0,c
 10390  001EA0  3608               	rlcf	??_SetRange+7,f,c
 10391  001EA2                     i2u401_44:
 10392  001EA2  2E07               	decfsz	??_SetRange+6,f,c
 10393  001EA4  D7FC               	goto	i2u401_45
 10394  001EA6  0E86               	movlw	low _R1_BIT
 10395  001EA8  6EF6               	movwf	tblptrl,c
 10396  001EAA                     	if	1	;There is more than 1 active tblptr byte
 10397  001EAA  0E06               	movlw	high _R1_BIT
 10398  001EAC  6EF7               	movwf	tblptrh,c
 10399  001EAE                     	endif
 10400  001EAE                     	if	0	;There are less than 3 active tblptr bytes
 10401  001EAE                     	endif
 10402  001EAE  0008               	tblrd		*
 10403  001EB0  CFF5 F009          	movff	tablat,??_SetRange+8
 10404  001EB4  0E01               	movlw	1
 10405  001EB6  6E0A               	movwf	(??_SetRange+9)& (0+255),c
 10406  001EB8  2A09               	incf	??_SetRange+8,f,c
 10407  001EBA  D002               	goto	i2u402_44
 10408  001EBC                     i2u402_45:
 10409  001EBC  90D8               	bcf	status,0,c
 10410  001EBE  360A               	rlcf	??_SetRange+9,f,c
 10411  001EC0                     i2u402_44:
 10412  001EC0  2E09               	decfsz	??_SetRange+8,f,c
 10413  001EC2  D7FC               	goto	i2u402_45
 10414  001EC4  500A               	movf	??_SetRange+9,w,c
 10415  001EC6  1008               	iorwf	??_SetRange+7,w,c
 10416  001EC8  1006               	iorwf	??_SetRange+5,w,c
 10417  001ECA  1004               	iorwf	??_SetRange+3,w,c
 10418  001ECC  1002               	iorwf	??_SetRange+1,w,c
 10419  001ECE  128B               	iorwf	3979,f,c	;volatile
 10420                           
 10421                           ;ext_int.c: 49: LATB |= (1 << RSET_BIT[0]) | (1 << RSET_BIT[1]) | (1 << RSET_BIT[3]) | (
      +                          1 << RSET_BIT[4]);
 10422  001ED0  0E8F               	movlw	low (_RSET_BIT+4)
 10423  001ED2  6EF6               	movwf	tblptrl,c
 10424  001ED4  0E06               	movlw	high (_RSET_BIT+4)
 10425  001ED6  6EF7               	movwf	tblptrh,c
 10426  001ED8                     	if	0	;tblptru may be non-zero
 10427  001ED8                     	endif
 10428  001ED8                     	if	0	;tblptru may be non-zero
 10429  001ED8                     	endif
 10430  001ED8  0008               	tblrd		*
 10431  001EDA  CFF5 F001          	movff	tablat,??_SetRange
 10432  001EDE  0E01               	movlw	1
 10433  001EE0  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10434  001EE2  2A01               	incf	??_SetRange,f,c
 10435  001EE4  D002               	goto	i2u403_44
 10436  001EE6                     i2u403_45:
 10437  001EE6  90D8               	bcf	status,0,c
 10438  001EE8  3602               	rlcf	??_SetRange+1,f,c
 10439  001EEA                     i2u403_44:
 10440  001EEA  2E01               	decfsz	??_SetRange,f,c
 10441  001EEC  D7FC               	goto	i2u403_45
 10442  001EEE  0E8E               	movlw	low (_RSET_BIT+3)
 10443  001EF0  6EF6               	movwf	tblptrl,c
 10444  001EF2  0E06               	movlw	high (_RSET_BIT+3)
 10445  001EF4  6EF7               	movwf	tblptrh,c
 10446  001EF6                     	if	0	;tblptru may be non-zero
 10447  001EF6                     	endif
 10448  001EF6                     	if	0	;tblptru may be non-zero
 10449  001EF6                     	endif
 10450  001EF6  0008               	tblrd		*
 10451  001EF8  CFF5 F003          	movff	tablat,??_SetRange+2
 10452  001EFC  0E01               	movlw	1
 10453  001EFE  6E04               	movwf	(??_SetRange+3)& (0+255),c
 10454  001F00  2A03               	incf	??_SetRange+2,f,c
 10455  001F02  D002               	goto	i2u404_44
 10456  001F04                     i2u404_45:
 10457  001F04  90D8               	bcf	status,0,c
 10458  001F06  3604               	rlcf	??_SetRange+3,f,c
 10459  001F08                     i2u404_44:
 10460  001F08  2E03               	decfsz	??_SetRange+2,f,c
 10461  001F0A  D7FC               	goto	i2u404_45
 10462  001F0C  0E8C               	movlw	low (_RSET_BIT+1)
 10463  001F0E  6EF6               	movwf	tblptrl,c
 10464  001F10  0E06               	movlw	high (_RSET_BIT+1)
 10465  001F12  6EF7               	movwf	tblptrh,c
 10466  001F14                     	if	0	;tblptru may be non-zero
 10467  001F14                     	endif
 10468  001F14                     	if	0	;tblptru may be non-zero
 10469  001F14                     	endif
 10470  001F14  0008               	tblrd		*
 10471  001F16  CFF5 F005          	movff	tablat,??_SetRange+4
 10472  001F1A  0E01               	movlw	1
 10473  001F1C  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10474  001F1E  2A05               	incf	??_SetRange+4,f,c
 10475  001F20  D002               	goto	i2u405_44
 10476  001F22                     i2u405_45:
 10477  001F22  90D8               	bcf	status,0,c
 10478  001F24  3606               	rlcf	??_SetRange+5,f,c
 10479  001F26                     i2u405_44:
 10480  001F26  2E05               	decfsz	??_SetRange+4,f,c
 10481  001F28  D7FC               	goto	i2u405_45
 10482  001F2A  0E8B               	movlw	low _RSET_BIT
 10483  001F2C  6EF6               	movwf	tblptrl,c
 10484  001F2E                     	if	1	;There is more than 1 active tblptr byte
 10485  001F2E  0E06               	movlw	high _RSET_BIT
 10486  001F30  6EF7               	movwf	tblptrh,c
 10487  001F32                     	endif
 10488  001F32                     	if	0	;There are less than 3 active tblptr bytes
 10489  001F32                     	endif
 10490  001F32  0008               	tblrd		*
 10491  001F34  CFF5 F007          	movff	tablat,??_SetRange+6
 10492  001F38  0E01               	movlw	1
 10493  001F3A  6E08               	movwf	(??_SetRange+7)& (0+255),c
 10494  001F3C  2A07               	incf	??_SetRange+6,f,c
 10495  001F3E  D002               	goto	i2u406_44
 10496  001F40                     i2u406_45:
 10497  001F40  90D8               	bcf	status,0,c
 10498  001F42  3608               	rlcf	??_SetRange+7,f,c
 10499  001F44                     i2u406_44:
 10500  001F44  2E07               	decfsz	??_SetRange+6,f,c
 10501  001F46  D7FC               	goto	i2u406_45
 10502  001F48  5008               	movf	??_SetRange+7,w,c
 10503  001F4A  1006               	iorwf	??_SetRange+5,w,c
 10504  001F4C  1004               	iorwf	??_SetRange+3,w,c
 10505  001F4E  1002               	iorwf	??_SetRange+1,w,c
 10506  001F50  128A               	iorwf	3978,f,c	;volatile
 10507                           
 10508                           ;ext_int.c: 51: LATC &= ~(1 << R1_BIT[new_range - 1]);
 10509  001F52  0EFF               	movlw	255
 10510  001F54  6E01               	movwf	??_SetRange& (0+255),c
 10511  001F56  0EFF               	movlw	255
 10512  001F58  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10513  001F5A  500B               	movf	SetRange@new_range,w,c
 10514  001F5C  6E03               	movwf	(??_SetRange+2)& (0+255),c
 10515  001F5E  6A04               	clrf	(??_SetRange+3)& (0+255),c
 10516  001F60  5001               	movf	??_SetRange,w,c
 10517  001F62  2603               	addwf	??_SetRange+2,f,c
 10518  001F64  5002               	movf	??_SetRange+1,w,c
 10519  001F66  2204               	addwfc	??_SetRange+3,f,c
 10520  001F68  0E86               	movlw	low _R1_BIT
 10521  001F6A  2403               	addwf	??_SetRange+2,w,c
 10522  001F6C  6EF6               	movwf	tblptrl,c
 10523  001F6E  0E06               	movlw	high _R1_BIT
 10524  001F70  2004               	addwfc	??_SetRange+3,w,c
 10525  001F72  6EF7               	movwf	tblptrh,c
 10526  001F74                     	if	0	;There are less than 3 active tblptr bytes
 10527  001F74                     	endif
 10528  001F74  0008               	tblrd		*
 10529  001F76  CFF5 F005          	movff	tablat,??_SetRange+4
 10530  001F7A  0E01               	movlw	1
 10531  001F7C  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10532  001F7E  2A05               	incf	??_SetRange+4,f,c
 10533  001F80  D002               	goto	i2u407_44
 10534  001F82                     i2u407_45:
 10535  001F82  90D8               	bcf	status,0,c
 10536  001F84  3606               	rlcf	??_SetRange+5,f,c
 10537  001F86                     i2u407_44:
 10538  001F86  2E05               	decfsz	??_SetRange+4,f,c
 10539  001F88  D7FC               	goto	i2u407_45
 10540  001F8A  5006               	movf	??_SetRange+5,w,c
 10541  001F8C  0AFF               	xorlw	255
 10542  001F8E  168B               	andwf	3979,f,c	;volatile
 10543                           
 10544                           ;ext_int.c: 52: LATB &= ~(1 << RSET_BIT[new_range - 1]);
 10545  001F90  0EFF               	movlw	255
 10546  001F92  6E01               	movwf	??_SetRange& (0+255),c
 10547  001F94  0EFF               	movlw	255
 10548  001F96  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10549  001F98  500B               	movf	SetRange@new_range,w,c
 10550  001F9A  6E03               	movwf	(??_SetRange+2)& (0+255),c
 10551  001F9C  6A04               	clrf	(??_SetRange+3)& (0+255),c
 10552  001F9E  5001               	movf	??_SetRange,w,c
 10553  001FA0  2603               	addwf	??_SetRange+2,f,c
 10554  001FA2  5002               	movf	??_SetRange+1,w,c
 10555  001FA4  2204               	addwfc	??_SetRange+3,f,c
 10556  001FA6  0E8B               	movlw	low _RSET_BIT
 10557  001FA8  2403               	addwf	??_SetRange+2,w,c
 10558  001FAA  6EF6               	movwf	tblptrl,c
 10559  001FAC  0E06               	movlw	high _RSET_BIT
 10560  001FAE  2004               	addwfc	??_SetRange+3,w,c
 10561  001FB0  6EF7               	movwf	tblptrh,c
 10562  001FB2                     	if	0	;There are less than 3 active tblptr bytes
 10563  001FB2                     	endif
 10564  001FB2  0008               	tblrd		*
 10565  001FB4  CFF5 F005          	movff	tablat,??_SetRange+4
 10566  001FB8  0E01               	movlw	1
 10567  001FBA  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10568  001FBC  2A05               	incf	??_SetRange+4,f,c
 10569  001FBE  D002               	goto	i2u408_44
 10570  001FC0                     i2u408_45:
 10571  001FC0  90D8               	bcf	status,0,c
 10572  001FC2  3606               	rlcf	??_SetRange+5,f,c
 10573  001FC4                     i2u408_44:
 10574  001FC4  2E05               	decfsz	??_SetRange+4,f,c
 10575  001FC6  D7FC               	goto	i2u408_45
 10576  001FC8  5006               	movf	??_SetRange+5,w,c
 10577  001FCA  0AFF               	xorlw	255
 10578  001FCC  168A               	andwf	3978,f,c	;volatile
 10579  001FCE  0012               	return		;funcret
 10580  001FD0                     __end_of_SetRange:
 10581                           	opt stack 0
 10582                           tosu	equ	0xFFF
 10583                           tosh	equ	0xFFE
 10584                           tosl	equ	0xFFD
 10585                           pclatu	equ	0xFFB
 10586                           pclath	equ	0xFFA
 10587                           tblptru	equ	0xFF8
 10588                           tblptrh	equ	0xFF7
 10589                           tblptrl	equ	0xFF6
 10590                           tablat	equ	0xFF5
 10591                           prodh	equ	0xFF4
 10592                           prodl	equ	0xFF3
 10593                           intcon	equ	0xFF2
 10594                           intcon2	equ	0xFF1
 10595                           intcon3	equ	0xFF0
 10596                           postinc0	equ	0xFEE
 10597                           fsr0h	equ	0xFEA
 10598                           fsr0l	equ	0xFE9
 10599                           wreg	equ	0xFE8
 10600                           fsr1h	equ	0xFE2
 10601                           fsr1l	equ	0xFE1
 10602                           indf2	equ	0xFDF
 10603                           postinc2	equ	0xFDE
 10604                           postdec2	equ	0xFDD
 10605                           fsr2h	equ	0xFDA
 10606                           fsr2l	equ	0xFD9
 10607                           status	equ	0xFD8
 10608                           tosu	equ	0xFFF
 10609                           tosh	equ	0xFFE
 10610                           tosl	equ	0xFFD
 10611                           pclatu	equ	0xFFB
 10612                           pclath	equ	0xFFA
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           intcon2	equ	0xFF1
 10621                           intcon3	equ	0xFF0
 10622                           postinc0	equ	0xFEE
 10623                           fsr0h	equ	0xFEA
 10624                           fsr0l	equ	0xFE9
 10625                           wreg	equ	0xFE8
 10626                           fsr1h	equ	0xFE2
 10627                           fsr1l	equ	0xFE1
 10628                           indf2	equ	0xFDF
 10629                           postinc2	equ	0xFDE
 10630                           postdec2	equ	0xFDD
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635                           	psect	text56
 10636  000000                     __ptext56:
 10637                           	opt stack 0
 10638                           tosu	equ	0xFFF
 10639                           tosh	equ	0xFFE
 10640                           tosl	equ	0xFFD
 10641                           pclatu	equ	0xFFB
 10642                           pclath	equ	0xFFA
 10643                           tblptru	equ	0xFF8
 10644                           tblptrh	equ	0xFF7
 10645                           tblptrl	equ	0xFF6
 10646                           tablat	equ	0xFF5
 10647                           prodh	equ	0xFF4
 10648                           prodl	equ	0xFF3
 10649                           intcon	equ	0xFF2
 10650                           intcon2	equ	0xFF1
 10651                           intcon3	equ	0xFF0
 10652                           postinc0	equ	0xFEE
 10653                           fsr0h	equ	0xFEA
 10654                           fsr0l	equ	0xFE9
 10655                           wreg	equ	0xFE8
 10656                           fsr1h	equ	0xFE2
 10657                           fsr1l	equ	0xFE1
 10658                           indf2	equ	0xFDF
 10659                           postinc2	equ	0xFDE
 10660                           postdec2	equ	0xFDD
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665                           	psect	rparam
 10666  0000                     tosu	equ	0xFFF
 10667                           tosh	equ	0xFFE
 10668                           tosl	equ	0xFFD
 10669                           pclatu	equ	0xFFB
 10670                           pclath	equ	0xFFA
 10671                           tblptru	equ	0xFF8
 10672                           tblptrh	equ	0xFF7
 10673                           tblptrl	equ	0xFF6
 10674                           tablat	equ	0xFF5
 10675                           prodh	equ	0xFF4
 10676                           prodl	equ	0xFF3
 10677                           intcon	equ	0xFF2
 10678                           intcon2	equ	0xFF1
 10679                           intcon3	equ	0xFF0
 10680                           postinc0	equ	0xFEE
 10681                           fsr0h	equ	0xFEA
 10682                           fsr0l	equ	0xFE9
 10683                           wreg	equ	0xFE8
 10684                           fsr1h	equ	0xFE2
 10685                           fsr1l	equ	0xFE1
 10686                           indf2	equ	0xFDF
 10687                           postinc2	equ	0xFDE
 10688                           postdec2	equ	0xFDD
 10689                           fsr2h	equ	0xFDA
 10690                           fsr2l	equ	0xFD9
 10691                           status	equ	0xFD8
 10692                           
 10693                           	psect	temp
 10694  000058                     btemp:
 10695                           	opt stack 0
 10696  000058                     	ds	1
 10697  0000                     int$flags	set	btemp
 10698                           tosu	equ	0xFFF
 10699                           tosh	equ	0xFFE
 10700                           tosl	equ	0xFFD
 10701                           pclatu	equ	0xFFB
 10702                           pclath	equ	0xFFA
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           intcon	equ	0xFF2
 10710                           intcon2	equ	0xFF1
 10711                           intcon3	equ	0xFF0
 10712                           postinc0	equ	0xFEE
 10713                           fsr0h	equ	0xFEA
 10714                           fsr0l	equ	0xFE9
 10715                           wreg	equ	0xFE8
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8


Data Sizes:
    Strings     100
    Constant    143
    Data        2
    BSS         25
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     84      87
    BANK0           160     79     107
    BANK1           256      4       4
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[11]), STR_5(CODE[16]), STR_4(CODE[11]), STR_3(CODE[17]), 
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_6(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_7(CODE[11]), STR_6(CODE[23]), STR_5(CODE[16]), STR_4(CODE[11]), 
		 -> STR_3(CODE[17]), STR_2(CODE[11]), STR_1(CODE[11]), 

    S910__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S910__prbuf$ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendUInt@displayString(COMRAM[10]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    lcd_sendStringToPos@charString	PTR const unsigned char  size(2) Largest target is 16
		 -> UpdateDisplay@range_string(BANK0[16]), UpdateDisplay@cap_string(BANK0[16]), 

    lcd_sendString@a	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), lcd_sendUInt@displayString(COMRAM[10]), lcd_sendInt@displayString(COMRAM[10]), UpdateDisplay@range_string(BANK0[16]), 
		 -> UpdateDisplay@cap_string(BANK0[16]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_INT0_ISR
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->_SetRange
    _INT1_ISR->_printf
    _printf->__doprnt
    ___lwtoft->___ftpack
    _UpdateDisplay->_sprintf
    _sprintf->__doprnt
    __doprnt->___fttol
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftadd
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___wmul
    _lcd_sendStringToPos->_lcd_sendString
    _lcd_sendStringToPos->_lcd_setPosition
    _lcd_setPosition->i2_lcd_sendCommand
    i2_lcd_sendCommand->i2__lcd_Port
    _lcd_sendString->_lcd_sendChar
    _lcd_sendChar->i2__lcd_Port
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _printf->__doprnt
    _INT0_ISR->_UpdateDisplay
    _UpdateDisplay->_sprintf
    _sprintf->__doprnt

Critical Paths under _main in BANK1

    _main->_lcd_init
    _lcd_init->_lcd_sendCommand
    _lcd_clear->_lcd_sendCommand
    _lcd_sendCommand->__lcd_Port
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     542
                  _SYSTEM_Initialize
                          _lcd_clear
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     279
                                              3 BANK1      1     1      0
                          __lcd_Port
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     155
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (2) _lcd_sendCommand                                      2     2      0     155
                                              1 BANK1      2     2      0
                          __lcd_Port
 ---------------------------------------------------------------------------------
 (3) __lcd_Port                                            1     1      0     124
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     108
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     108
                                              2 BANK1      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0  118738
                                             65 BANK0     14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0      44
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         1     1      0      44
                                             11 COMRAM     1     1      0
                           _SetRange
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0   48181
                           _SetRange
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              10     6      4   48137
                                             74 COMRAM    10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             4     4      0   70513
                                             80 COMRAM     4     4      0
                           _SetRange
                     _TMR0_ReadTimer
                        _TMR0_Reload
                     _TMR0_StopTimer
                      _UpdateDisplay
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (6) i2_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) _UpdateDisplay                                       32    32      0   54466
                                             33 BANK0     32    32      0
                            ___ftdiv
                             ___ftge
                _lcd_sendStringToPos
                            _sprintf
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             16     6     10   48871
                                             74 COMRAM     6     6      0
                                             23 BANK0     10     0     10
                            ___ftdiv (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (7) __doprnt                                             41    35      6   47916
                                             62 COMRAM    12     6      6
                                              0 BANK0     23    23      0
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (8) _scale                                               10     7      3   10667
                                             47 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) _fround                                              13    10      3   10469
                                             47 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    4559
                                             32 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (8) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2293
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___llmod                                              9     1      8     773
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             13     5      8     750
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     546
                                             47 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    3962
                                             32 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    3563
                                             20 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     160
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     904
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lcd_sendStringToPos                                  4     1      3    1482
                                              8 COMRAM     4     1      3
                     _lcd_sendString
                    _lcd_setPosition
 ---------------------------------------------------------------------------------
 (8) _lcd_setPosition                                      5     4      1     636
                                              3 COMRAM     5     4      1
                  i2_lcd_sendCommand
 ---------------------------------------------------------------------------------
 (9) i2_lcd_sendCommand                                    2     2      0     110
                                              1 COMRAM     2     2      0
                        i2__lcd_Port
 ---------------------------------------------------------------------------------
 (8) _lcd_sendString                                       4     2      2     524
                                              4 COMRAM     4     2      2
                       _lcd_sendChar
 ---------------------------------------------------------------------------------
 (9) _lcd_sendChar                                         3     3      0     178
                                              1 COMRAM     3     3      0
                        i2__lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2__lcd_Port                                         1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3003
                                             47 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ReadTimer                                      10     8      2      69
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (7) _SetRange                                            11    11      0      44
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _lcd_clear
     _lcd_sendCommand
       __lcd_Port
   _lcd_init
     __lcd_Port
     _lcd_sendCommand
       __lcd_Port

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     _SetRange
     _TMR0_ReadTimer
     _TMR0_Reload
     _TMR0_StopTimer
     _UpdateDisplay
       ___ftdiv
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       _lcd_sendStringToPos
         _lcd_sendString
           _lcd_sendChar
             i2__lcd_Port
         _lcd_setPosition
           i2_lcd_sendCommand
             i2__lcd_Port
       _sprintf
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
           ___ftsub *
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
             _EUSART1_Write
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     i2_TMR0_StartTimer
   _INT1_ISR
     _SetRange
     _printf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
         ___ftsub *
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
           _EUSART1_Write
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _SetRange

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      4       4       6        1.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     4F      6B       4       66.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     54      57       1       92.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C6       9        0.0%
DATA                 0      0      C6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Jan 23 23:16:16 2017

                           ?_lcd_sendChar 0001                           ??_UpdateDisplay 0051  
                            ___awdiv@sign 000C                       ___wmul@multiplicand 0011  
                         _timer0ReloadVal 0055                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0020  
                            ___ftadd@exp2 001F                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 001E                           ?_lcd_sendString 0005  
                        ?_lcd_sendCommand 0001                                       l351 2E2A  
                                     l280 3040                                       l353 2E36  
                                     l355 2E42                                       l349 2E1E  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                            ___awmod@sign 0006                                       tosl 000FFD  
                                     wreg 000FE8                              ___ftdiv@cntr 0039  
                            ___ftdiv@sign 003E                                      l3902 2E38  
                                    l3894 2E20                                      l3898 2E2C  
                             i2__lcd_Port 2F44                                      STR_1 06E9  
                                    STR_2 06D3                                      STR_3 06A7  
                                    STR_4 06DE                                      STR_5 06B8  
                                    STR_6 0690                                      STR_7 06C8  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      u4507 2F88  
                                    u4477 2A42                                      u4487 2A5A  
                                    u4497 2A72                                      i2l55 2108  
                                    _WPUB 000F61                             _EUSART1_Write 30D4  
                                    _main 3024                              ___ftpack@arg 0001  
                        ?_lcd_setPosition 0004                              ___ftpack@exp 0004  
                         _TMR0_StartTimer 30FE                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0058                             __CFG_BORV$190 000000  
             __end_of_lcd_sendStringToPos 3094                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00A0  
                           __CFG_IESO$OFF 000000                            ??_lcd_sendChar 0002  
                            ___ftmul@cntr 002E                              ___param_bank 000000  
                            ___ftmul@sign 002F                              ___fttol@exp1 003E  
                            ___fttol@lval 003A                   __end_of_TMR0_Initialize 2CD0  
                        __end_of_INT0_ISR 22C8                          __end_of_INT1_ISR 2BE0  
          ??_TMR0_DefaultInterruptHandler 000C            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 30C6                                     ?_main 0001  
                         __end_of___awdiv 29B2                           __end_of___ftadd 1E2C  
                         __end_of___awmod 2B1C                 TMR0_ReadTimer@readValHigh 000A  
                         __end_of___ftdiv 27F0                           __end_of___ftneg 3004  
                         __end_of___lldiv 2A34                           __end_of___ftmul 2616  
                                   _T0CON 000FD5                           ___awdiv@divisor 0009  
                         __end_of___llmod 2B82                           __end_of___ftsub 2DD8  
                         __end_of___fttol 270A                            __CFG_DEBUG$OFF 000000  
                                   i2l131 0064                                     i2l125 004E  
                                   i2l127 005A                                     i2l414 11D2  
                                   i2l351 2F58                                     i2l256 30D6  
                                   i2l353 2F62                                     i2l193 2CF4  
                                   i2l355 2F6C                                     i2l349 2F4E  
                                   i2l471 1264                                     i2l456 0F36  
                                   i2l715 2510                                     i2l812 235A  
                                   i2l805 27BE                                     i2l813 2382  
                                   i2l770 1CC4                                     i2l747 287E  
                                   i2l819 23E8                                     i2l844 2FF6  
                                   i2l916 2A22                                     i2l774 1CEE  
                                   i2l926 2B70                                     i2l785 1D9E  
                                   i2l794 1DBA                           ___awdiv@counter 000B  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                         __end_of__doprnt 164A                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0100                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0011                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 2F44                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                          __end_of_RSET_BIT 0690  
                         __end_of_dpowers 0629                                     _scale 164A  
                                   _range 00CA                           __end_of_isdigit 3060  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   _putch 30EA                            ?_EUSART1_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                           __end_of_sprintf 2D56  
                          __CFG_HFOFST$ON 000000                            __CFG_FOSC$HSMP 000000  
                          __CFG_PBADEN$ON 000000                           __initialization 2E7C  
              __end_of_EUSART1_Initialize 30AA                              __end_of_main 3042  
                            _stored_range 00B5                      lcd_sendStringToPos@x 000C  
                    lcd_sendStringToPos@y 0009               ?_INTERRUPT_InterruptManager 0001  
                           lcd_sendChar@a 0004                             lcd_sendChar@y 0003  
                                  ??_main 0104                             ___fttol@sign1 0039  
                        __end_of_SetRange 1FD0                             __activetblptr 000002  
                    __size_of__tdiv_to_l_ 0132                   __end_of_TMR0_StartTimer 3102  
                        ___llmod@dividend 000E                                    ?_scale 0030  
                           i2__lcd_Port@a 0001                          ___awdiv@dividend 0007  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                        __end_of___ftpack 289E                          __end_of___lltoft 2C3C  
                                  _R1_BIT 0686                                    i2l3010 24A8  
                                  i2l3002 2478                                    i2l3100 26D0  
                                  i2l3102 26DC                                    i2l3022 24D6  
                                  i2l3040 2DAE                                    i2l3104 26E2  
                                  i2l3120 29E0                                    i2l3032 24FE  
                                  i2l3130 2A14                                    i2l3122 29E4  
                                  i2l3034 250A                                    i2l3026 24E6  
                                  i2l3202 0742                                    i2l3052 28FE  
                                  i2l3108 26F8                                    i2l3140 2B3A  
                                  i2l3300 0B18                                    i2l3212 07A2  
                                  i2l3220 0802                                    i2l3118 29D4  
                                  i2l3142 2B3E                                    i2l3230 0862  
                                  i2l3206 0770                                    i2l3048 28CE  
                                  i2l3072 2642                                    i2l3152 2BE6  
                                  i2l3320 0C08                                    i2l3304 0B3E  
                                  i2l3240 0894                                    i2l3232 0878  
                                  i2l3058 292A                                    i2l3090 26A8  
                                  i2l3146 2B62                                    i2l3138 2B2E  
                                  i2l3154 2BF2                                    i2l3402 0FBC  
                                  i2l3314 0B9C                                    i2l3226 0828  
                                  i2l2620 1CD2                                    i2l3420 1158  
                                  i2l3340 0CAA                                    i2l3332 0C4E  
                                  i2l3260 094A                                    i2l3252 08F6  
                                  i2l3236 0888                                    i2l3244 089A  
                                  i2l3094 26B8                                    i2l3502 1482  
                                  i2l3430 11C4                                    i2l3414 10CE  
                                  i2l3406 100E                                    i2l3350 0D16  
                                  i2l3318 0C02                                    i2l3246 08DA  
                                  i2l3238 088E                            __CFG_WDTEN$OFF 000000  
                                  i2l3192 2ED0                                    i2l2712 25B4  
                                  i2l3424 1192                                    i2l3416 10FC  
                                  i2l3360 0D98                                    i2l3352 0D2A  
                                  i2l3344 0CE4                                    i2l3336 0C90  
                                  i2l2570 2800                                    i2l3602 2798  
                                  i2l3178 2C64                                    i2l2650 1D58  
                                  i2l2642 1D2C                                    i2l2626 1CFC  
                                  i2l2802 2B04                                    i2l2722 25DC  
                                  i2l3514 1512                                    i2l3506 14AC  
                                  i2l3418 114A                                    i2l3370 0E68  
                                  i2l3362 0DA8                                    i2l3290 0A90  
                                  i2l3530 1624                                    i2l3188 2EBA  
                                  i2l2660 1D8C                                    i2l2652 1D62  
                                  i2l2708 25A4                                    i2l3524 15E4  
                                  i2l3508 14C0                                    i2l3436 1210  
                                  i2l3428 11BC                                    i2l3372 0E8A  
                                  i2l3348 0D0E                                    i2l3292 0AC0  
                                  i2l3284 0A54                                    i2l3276 09EC  
                                  i2l3532 1640                                    i2l3196 06FA  
                                  i2l3620 2036                                    i2l2582 284C  
                                  i2l2574 280E                                    i2l2822 2F64  
                                  i2l2814 2F50                                    i2l2662 1D96  
                                  i2l2654 1D6A                                    i2l2750 2968  
                                  i2l2806 2B12                                    i2l2718 25CC  
                                  i2l3526 1600                                    i2l3518 1530  
                                  i2l3454 12F8                                    i2l3446 129C  
                                  i2l3438 1244                                    i2l3390 0F3A  
                                  i2l3382 0EFC                                    i2l3374 0E98  
                                  i2l3358 0D7C                                    i2l3294 0AD6  
                                  i2l3630 20E0                                    i2l2584 286A  
                                  i2l2576 2818                                    i2l2648 1D4E  
                                  i2l2752 2970                                    i2l2744 2952  
                                  i2l2904 1A16                                    i2l3528 160E  
                                  i2l3472 1368                                    i2l3456 12FE  
                                  i2l3448 12D2                                    i2l3384 0F04  
                                  i2l3288 0A7A                                    i2l3720 2BA2  
                                  i2l2586 2874                                    i2l2578 2836  
                                  i2l2818 2F5A                                    i2l2770 29A8  
                                  i2l2762 2990                                    i2l2754 2974  
                                  i2l2738 2942                                    i2l3490 13FE  
                                  i2l3482 13C0                                    i2l3386 0F18  
                                  i2l3378 0ED2                                    i2l3626 20BC  
                                  i2l3722 2BA8                                    i2l2668 1DD6  
                                  i2l2932 2320                                    i2l2916 3058  
                                  i2l3476 1394                                    i2l3468 1344  
                                  i2l3716 2B94                                    i2l3582 275A  
                                  i2l2678 1E06                                    i2l2926 22F4  
                                  i2l2766 299A                                    i2l2790 2ADA  
                                  i2l2782 2AC0                                    i2l2694 2572  
                                  i2l3494 1432                                    i2l3398 0F92  
                                  i2l3576 2732                                    i2l2792 2AE2  
                                  i2l2688 254A                                    i2l2880 177E  
                                  i2l3496 143C                                    i2l3488 13F4  
                                  i2l3736 216C                                    i2l3728 2BC2  
                                  i2l2962 23AE                                    i2l2794 2AE6  
                                  i2l2786 2ACC                                    i2l2866 1C40  
                                  i2l2858 1B80                                    i2l2890 1846  
                                  i2l3498 1448                                    i2l2972 23D6  
                                  i2l3756 227E                                    u232_41 1C90  
                                  i2l2982 2418                                    i2l2974 23E2  
                                  i2l2966 23BE                                    i2l2798 2AFA  
                                  i2l2886 1822                                    i2l3766 22AA  
                                  i2l3686 2CF6                                    i2l2898 1972  
                                  i2l2988 2436                                    u233_41 1CA4  
                                  u305_41 2626                                    u413_41 271A  
                                  u253_41 2532                                    u415_41 2742  
                                  u255_41 255A                                    _RCREG1 000FAE  
                        __end_of___lwtoft 2FE0                                    u284_41 22D8  
                                  u286_41 2304                                    _RCSTA1 000FAB  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                            __doprnt$1658 0060                            __CFG_XINST$OFF 000000  
                        __end_of__powers_ 0677                          __end_of_lcd_init 2AAC  
                            ?_TMR0_Reload 0001                                    ___ftge 289E  
                        lcd_sendChar@temp 0002                                    ___wmul 2F96  
                               ??___awdiv 000B                                 ??___ftadd 001B  
                          __CFG_STVREN$ON 000000                                 ??___awmod 0005  
                               ??___ftdiv 0036                                 ??___ftneg 0004  
                               ??___lldiv 0009                                 ??___ftmul 0027  
                               ??___llmod 0016                                 ??___ftsub 0027  
                               ??___fttol 0034                                 ??__doprnt 0045  
                        ?_TMR0_Initialize 0001                                    _fround 1A3A  
                                  clear_0 2E9A                          ___awdiv@quotient 000D  
                         ___awmod@divisor 0003                                    _result 00AF  
                            __doprnt@flag 0065                           ___awmod@counter 0005  
                                  _printf 2E46                              __doprnt@fval 0071  
                            __doprnt@prec 0074                     ___ftmul@f3_as_product 002B  
                               ??_isdigit 0001                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                      __end_of_lcd_sendChar 2E10  
                        lcd_sendCommand@a 0102                           ??_EUSART1_Write 0001  
TMR0_SetInterruptHandler@InterruptHandler 0100                                 ??_sprintf 004B  
           __size_of_INTERRUPT_Initialize 0004                         _SYSTEM_Initialize 3060  
                              __accesstop 0060                   __end_of__initialization 2EA2  
                               ?_INT0_ISR 0001                                 ?_INT1_ISR 0001  
                              ___ftadd@f1 0015                                ___ftadd@f2 0018  
                              ___ftge@ff1 0001                                ___ftge@ff2 0004  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                              ___ftdiv@f1 0030                                ___ftdiv@f2 0033  
                              ___ftdiv@f3 003A                                ___ftneg@f1 0001  
                      __size_of__lcd_Port 0036                                ___ftmul@f1 0021  
                              ___ftmul@f2 0024                                ___ftsub@f1 0021  
                              ___ftsub@f2 0024                                ___fttol@f1 0030  
                          __pcstackCOMRAM 0001                              __pidataBANK0 310E  
                     ??_SYSTEM_Initialize 0104                          ??_lcd_sendString 0007  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0009  
                           __end_of_scale 1A3A                             __end_of_putch 30F4  
                 __size_of_TMR0_ReadTimer 0042                                ___lwtoft@c 0009  
             __size_of_EXT_INT_Initialize 000E                                __div_to_l_ 23FA  
                      __size_of_lcd_clear 000E                                __doprnt@ap 0043  
                              __doprnt@pb 003F                           __div_to_l_@exp1 000C  
                        ?_TMR0_StartTimer 0001                           __div_to_l_@cntr 000B  
                                 ??_scale 0033                 __end_of_SYSTEM_Initialize 307A  
                         __div_to_l_@quot 0007                              ?i2__lcd_Port 0001  
                                 ??_putch 0002                                __pbssBANK0 00AF  
                         __CFG_PLLCFG$OFF 000000                                ??_INT0_ISR 0051  
               UpdateDisplay@range_string 0081                                ??_INT1_ISR 0055  
                              __pnvCOMRAM 0055                             __div_to_l_@f1 0001  
                           __div_to_l_@f2 0004                                 ?_SetRange 0001  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0001  
        __end_of_TMR0_SetInterruptHandler 30EA                   __size_of_TMR0_StopTimer 0004  
                                 ?___wmul 000F                                ??_TMR0_ISR 000D  
                      __CFG_CCP3MX$PORTB5 000000                     __end_of_UpdateDisplay 2162  
                                 ?_fround 0030                                 ?___ftpack 0001  
                                 ?_printf 004B                                 ?___lltoft 0009  
                               ?___lwtoft 0009                         __end_of__lcd_Port 2E46  
                                 _OSCCON2 000FD2                          lcd_setPosition@i 0006  
                        lcd_setPosition@j 0007                          lcd_setPosition@x 0005  
                        lcd_setPosition@y 0004                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                  __size_of_lcd_sendCommand 0026  
                               ?_lcd_init 0001                                ??_SetRange 0001  
                              _auto_range 00C9                           __CFG_PWRTEN$OFF 000000  
                       __end_of__npowers_ 0650                                   __Hparam 0000  
                              _scale$1657 0033                                   __Lparam 0000  
                       __end_of_lcd_clear 30B8                           __size_of___ftge 0090  
                                 ___awdiv 292E                  __size_of_lcd_setPosition 0050  
                                 ___ftadd 1C80                                   ___awmod 2AAC  
                                 ___ftdiv 270A                                   ___ftneg 2FE0  
                                 ___lldiv 29B2                           __size_of___wmul 0026  
                                 ___ftmul 2522                                   ___llmod 2B1C  
                                 ___ftsub 2D98                                   ___fttol 2616  
            __size_of_lcd_sendStringToPos 001A                              __psmallconst 0600  
                    __size_of_TMR0_Reload 000A                                   __doprnt 06F6  
                                 __pcinit 2E7C                                ??___ftpack 0006  
                         __size_of_fround 0246                                   __ramtop 0600  
                              ??___lltoft 000D                                   __ptext0 3024  
                                 __ptext1 2A34                                   __ptext2 30AA  
                                 __ptext3 2F70                                   __ptext4 2E10  
                                 __ptext5 3060                                   __ptext6 2C8C  
                                 __ptext7 30FE                                   __ptext8 30E0  
                                 __ptext9 2EE4                           __size_of_printf 0036  
                   __size_of_lcd_sendChar 0038                                ??___lwtoft 000C  
                               _T0CONbits 000FD5                               ?__div_to_l_ 0001  
                                 _dpowers 0601                     _OSCILLATOR_Initialize 30B8  
                                 _isdigit 3042                                   _reading 00B2  
                        ___awmod@dividend 0001                        _EUSART1_Initialize 3094  
                ??_PIN_MANAGER_Initialize 0100                __size_of_SYSTEM_Initialize 001A  
                                 _sprintf 2D14                             __doprnt@width 0063  
                              ??_lcd_init 0103                      end_of_initialization 2EA2  
                       i2_lcd_sendCommand 3004                                   ftoa@buf 00B6  
                     ?_EUSART1_Initialize 0001                        ?i2_lcd_sendCommand 0001  
                           __Lmediumconst 0000                           ___lldiv@divisor 0005  
                         ___lldiv@counter 000D                       ??i2_lcd_sendCommand 0002  
                   TMR0_ReadTimer@readVal 0007                                   printf@f 004B  
                            _lcd_sendChar 2DD8                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                          __tdiv_to_l_@f1 0001                            __tdiv_to_l_@f2 0004  
                          _TMR0_ReadTimer 2D56                      ??_EUSART1_Initialize 0100  
                     __end_of_cal_current 0686                             ??__tdiv_to_l_ 0007  
                _TMR0_SetInterruptHandler 30E0                 __end_ofi2_lcd_sendCommand 3024  
                     EUSART1_Write@txData 0001                      __size_ofi2__lcd_Port 002C  
                          __end_of_R1_BIT 068B                               ___ftdiv@exp 003D  
                       ??_lcd_sendCommand 0101                         __size_of_INT0_ISR 0166  
                     __size_of__div_to_l_ 0128                         __size_of_INT1_ISR 005E  
                             ___ftmul@exp 002A                            _TMR0_StopTimer 310A  
                  __end_of_TMR0_ReadTimer 2D98                         SetRange@new_range 000B  
            __end_of_INTERRUPT_Initialize 3106                            __end_of___ftge 292E  
                          __end_of___wmul 2FBC                         __size_of_TMR0_ISR 0030  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_fround 1C80  
                       ??_lcd_setPosition 0005                            __end_of_printf 2E7C  
                     start_initialization 2E7C                   UpdateDisplay@cap_string 0091  
                __size_of_TMR0_Initialize 0044           __size_of_PIN_MANAGER_Initialize 0030  
                     __end_of__tdiv_to_l_ 23FA                               __lcd_Port@a 0100  
                             putch@txData 0002                     __end_of_EUSART1_Write 30E0  
           lcd_sendStringToPos@charString 000A                        i2lcd_sendCommand@a 0003  
                         ___llmod@divisor 0012                           ___llmod@counter 0016  
                  __end_of_TMR0_StopTimer 310E                               _cal_current 0677  
                                ??___ftge 0007                         __size_of_SetRange 01A4  
                         ?_TMR0_ReadTimer 0001                                  ??___wmul 0013  
                             __doprnt@exp 0067                               __doprnt@val 0069  
                             __pdataBANK0 00C9                                  ??_fround 0033  
              __end_of_EXT_INT_Initialize 30D4                                  ??_printf 004F  
                              fround@prec 0039                         __size_of___ftpack 00AE  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0057  
                       __size_of___lwtoft 0024                             __pcstackBANK0 0060  
                           __pcstackBANK1 0100                __size_ofi2_lcd_sendCommand 0020  
                            _isdigit$1202 0002                                 __lcd_Port 2E10  
                     _lcd_sendStringToPos 307A                         __size_of_lcd_init 0078  
                               __doprnt@c 0076                                 __doprnt@f 0041  
                   _TMR0_InterruptHandler 00C7                                 __pnvBANK0 00C7  
                __size_of_TMR0_StartTimer 0004                           lcd_sendString@a 0005  
                         lcd_sendString@i 0007                           ?_TMR0_StopTimer 0001  
                  _PIN_MANAGER_Initialize 2EE4                                 __pintcode 0008  
                                ?___awdiv 0007                                  ?___ftadd 0015  
                                ?___awmod 0001                                  ?___ftdiv 0030  
                                ?___ftneg 0001                                  ?___lldiv 0001  
                    ?_lcd_sendStringToPos 0009                                  ?___ftmul 0021  
                                ?___llmod 000E                                  ?___ftsub 0021  
                               __npowers_ 0629                                  ?___fttol 0030  
                                ?__doprnt 003F                                 _lcd_clear 30AA  
            ??_INTERRUPT_InterruptManager 00A1                          __CFG_PRICLKEN$ON 000000  
                             __tdiv_to_l_ 22C8                              ??__div_to_l_ 0007  
                             __smallconst 0600                                  _BAUDCON1 000FB8  
                                ?_isdigit 0001                   __size_of_lcd_sendString 0034  
                                ?_sprintf 0077                            __size_of_scale 03F0  
                              ?__lcd_Port 0001                            __size_of_putch 000A  
                    _INTERRUPT_Initialize 3102                         ??_TMR0_Initialize 0102  
                  __size_of_UpdateDisplay 0192                                  _INT0_ISR 2162  
                                _INT1_ISR 2B82                            ___wmul@product 0013  
                                _LATAbits 000F89                                  _LATCbits 000F8B  
                       i2_TMR0_StartTimer 3106       __size_of_INTERRUPT_InterruptManager 0098  
                                i2u400_44 1E84                                  i2u400_45 1E80  
                                i2u401_44 1EA2                                  i2u401_45 1E9E  
                                i2u402_44 1EC0                                  i2u402_45 1EBC  
                                i2u307_40 2660                                  i2u403_44 1EEA  
                                i2u403_45 1EE6                                  i2u307_45 2658  
                                i2u404_44 1F08                                  i2u404_45 1F04  
              ??_TMR0_SetInterruptHandler 0102                                  i2u405_44 1F26  
                                i2u405_45 1F22                                  i2u334_40 098A  
                                i2u325_48 072A                                  i2u406_44 1F44  
                                i2u406_45 1F40                                  i2u334_45 0980  
                                i2u350_48 0CCE                                  i2u423_40 2CDE  
                                i2u407_44 1F86                                  i2u407_45 1F82  
                                i2u423_46 2CE0                                  i2u408_44 1FC4  
                                i2u408_45 1FC0                                  i2u361_40 0F2E  
                                _PIR1bits 000F9E                        __end_of__div_to_l_ 2522  
                                i2u354_48 0D66                                  i2u451_47 22B0  
                                i2u452_47 3016                                  i2u364_48 0F7C  
                                i2u356_48 0E4E                                  i2u436_48 2F2E  
                                i2u453_47 2DF4                                  i2u454_47 2E06  
                                i2u366_48 10B4                                  i2u359_48 0EBC  
                                i2u393_48 14FC                                  i2u369_48 117C  
                                i2u395_48 15CC                                  i2u389_48 146C  
                                i2u398_44 1E48                                  i2u398_45 1E44  
                                i2u399_44 1E66                                  i2u399_45 1E62  
                           ??_TMR0_Reload 0001                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                        ?i2_TMR0_StartTimer 0001  
                   ??_lcd_sendStringToPos 000C                                  _TMR0_ISR 2F14  
                                _RSET_BIT 068B                                ?_lcd_clear 0001  
                TMR0_ReadTimer@readValLow 0009                       ??i2_TMR0_StartTimer 0001  
                       ___wmul@multiplier 000F                           _lcd_sendCommand 2F70  
                             _INTCON2bits 000FF1                               _INTCON3bits 000FF0  
                   ?_INTERRUPT_Initialize 0001                 __end_ofi2_TMR0_StartTimer 310A  
                                _SetRange 1E2C                                  __Hrparam 0000  
                                __Lrparam 0000                           _lcd_setPosition 2C3C  
                      __CFG_BOREN$SBORDIS 000000                         __CFG_P2BMX$PORTB5 000000  
                 ??_OSCILLATOR_Initialize 0100                         ??_TMR0_StartTimer 0100  
                        __size_of___awdiv 0084                          __size_of___ftadd 01AC  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E6  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                        __size_of___ftmul 00F4                          __size_of___llmod 0066  
                        __size_of___ftsub 0040                          __size_of___fttol 00F4  
             __size_of_EUSART1_Initialize 0016                                  ___ftpack 27F0  
                           _UpdateDisplay 1FD0                          __size_of__doprnt 0F54  
                             _fround$1655 0036                               _fround$1656 0033  
                                ___lltoft 2BE0                       __end_of_TMR0_Reload 30FE  
                                ___lwtoft 2FBC                                  _cal_mode 0057  
                        __size_of_isdigit 001E                                  __ptext10 30B8  
                                __ptext11 3102                                  __ptext20 3106  
                                __ptext12 30C6                                  __ptext21 2FBC  
                                __ptext13 3094                                  __ptext30 2F96  
                                __ptext22 1FD0                                  __ptext31 2522  
                                __ptext23 2D14                                  __ptext15 2F14  
                                __ptext40 2D98                                  __ptext32 2AAC  
                                __ptext24 06F6                                  __ptext16 2CD0  
                                __ptext41 1C80                                  __ptext33 292E  
                                __ptext25 164A                                  __ptext17 2B82  
                                __ptext50 270A                                  __ptext42 2FE0  
                                __ptext34 22C8                                  __ptext26 30EA  
                                __ptext18 2E46                                  __ptext51 27F0  
                                __ptext43 289E                                  __ptext35 23FA  
                                __ptext27 30D4                                  __ptext19 2162  
                                __ptext52 310A                                  __ptext44 307A  
                                __ptext36 2BE0                                  __ptext28 3042  
                                __ptext53 30F4                                  __ptext45 2C3C  
                                __ptext37 2B1C                                  __ptext29 1A3A  
                                __ptext54 2D56                                  __ptext46 3004  
                                __ptext38 29B2                                  __ptext55 1E2C  
                                __ptext47 2EB0                                  __ptext39 2616  
                                __ptext56 0000                                  __ptext48 2DD8  
                                __ptext49 2F44                                  _av_count 00B4  
                                __powers_ 0650                             ??i2__lcd_Port 0001  
                                _lcd_init 2A34                               ??__lcd_Port 0100  
                        __size_of_sprintf 0042                             __size_of_main 001E  
                        ??_TMR0_ReadTimer 0003      __end_of_TMR0_DefaultInterruptHandler 2D14  
   __size_of_TMR0_DefaultInterruptHandler 0044              _TMR0_DefaultInterruptHandler 2CD0  
                                int$flags 0058        __end_of_INTERRUPT_InterruptManager 00A0  
              _INTERRUPT_InterruptManager 0008                               ??_lcd_clear 0103  
                          ?_UpdateDisplay 0001                            __doprnt@tmpval 006D  
                 __end_of_lcd_sendCommand 2F96                                _INTCONbits 000FF2  
                          _lcd_sendString 2EB0                                  isdigit@c 0003  
                  ??_INTERRUPT_Initialize 0100                                  scale@scl 0036  
                      _EXT_INT_Initialize 30C6                                  intlevel2 0000  
                               sprintf@ap 004B                                 sprintf@pb 004D  
                        ??_TMR0_StopTimer 0001                          __tdiv_to_l_@exp1 000F  
                        __tdiv_to_l_@cntr 000E                                 sprintf@wh 0077  
                        __tdiv_to_l_@quot 000A                   __end_of_lcd_setPosition 2C8C  
                        ___lldiv@dividend 0001                   ?_PIN_MANAGER_Initialize 0001  
              __size_ofi2_TMR0_StartTimer 0004                       ?_EXT_INT_Initialize 0001  
                              _RCSTA1bits 000FAB                       __end_ofi2__lcd_Port 2F70  
           ?_TMR0_DefaultInterruptHandler 0001                       lcd_setPosition@temp 0008  
                             _TMR0_Reload 30F4                                  printf@ap 004F  
                                printf@pb 0051                    __size_of_EUSART1_Write 000C  
                            ?__tdiv_to_l_ 0001                    __end_of_lcd_sendString 2EE4  
                    ??_EXT_INT_Initialize 0100                                  sprintf@f 0079  
                        ___lldiv@quotient 0009                           _TMR0_Initialize 2C8C  
                       __CFG_T3CMX$PORTC0 000000            __end_of_PIN_MANAGER_Initialize 2F14  
                           _INT0_ISR$1654 0052  
