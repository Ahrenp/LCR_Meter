

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Jan 23 22:07:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.40
    84                           ; Generated 01/12/2016 GMT
    85                           ; 
    86                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F25K22 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	idataCOMRAM
   119  0030E0                     __pidataCOMRAM:
   120                           	opt stack 0
   121                           
   122                           ;initializer for _auto_range
   123  0030E0  01                 	db	1
   124                           
   125                           ;initializer for _range
   126  0030E1  02                 	db	2
   127                           
   128                           	psect	idataBANK0
   129  0030E2                     __pidataBANK0:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _units
   133  0030E2  70                 	db	112
   134  0030E3  46                 	db	70
   135                           
   136                           	psect	smallconst
   137  000600                     __psmallconst:
   138                           	opt stack 0
   139  000600  00                 	db	0
   140  000601                     _dpowers:
   141                           	opt stack 0
   142  000601  0001               	dw	1
   143  000603  0000               	dw	0
   144  000605  000A               	dw	10
   145  000607  0000               	dw	0
   146  000609  0064               	dw	100
   147  00060B  0000               	dw	0
   148  00060D  03E8               	dw	1000
   149  00060F  0000               	dw	0
   150  000611  2710               	dw	10000
   151  000613  0000               	dw	0
   152  000615  86A0               	dw	34464
   153  000617  0001               	dw	1
   154  000619  4240               	dw	16960
   155  00061B  000F               	dw	15
   156  00061D  9680               	dw	38528
   157  00061F  0098               	dw	152
   158  000621  E100               	dw	57600
   159  000623  05F5               	dw	1525
   160  000625  CA00               	dw	51712
   161  000627  3B9A               	dw	15258
   162  000629                     __end_of_dpowers:
   163                           	opt stack 0
   164  000629                     __npowers_:
   165                           	opt stack 0
   166  000629  00                 	db	0
   167  00062A  80                 	db	128
   168  00062B  3F                 	db	63
   169  00062C  CD                 	db	205
   170  00062D  CC                 	db	204
   171  00062E  3D                 	db	61
   172  00062F  D7                 	db	215
   173  000630  23                 	db	35
   174  000631  3C                 	db	60
   175  000632  12                 	db	18
   176  000633  83                 	db	131
   177  000634  3A                 	db	58
   178  000635  B7                 	db	183
   179  000636  D1                 	db	209
   180  000637  38                 	db	56
   181  000638  C6                 	db	198
   182  000639  27                 	db	39
   183  00063A  37                 	db	55
   184  00063B  38                 	db	56
   185  00063C  86                 	db	134
   186  00063D  35                 	db	53
   187  00063E  C0                 	db	192
   188  00063F  D6                 	db	214
   189  000640  33                 	db	51
   190  000641  CC                 	db	204
   191  000642  2B                 	db	43
   192  000643  32                 	db	50
   193  000644  70                 	db	112
   194  000645  89                 	db	137
   195  000646  30                 	db	48
   196  000647  E7                 	db	231
   197  000648  DB                 	db	219
   198  000649  2E                 	db	46
   199  00064A  E5                 	db	229
   200  00064B  3C                 	db	60
   201  00064C  1E                 	db	30
   202  00064D  42                 	db	66
   203  00064E  A2                 	db	162
   204  00064F  0D                 	db	13
   205  000650                     __end_of__npowers_:
   206                           	opt stack 0
   207  000650                     __powers_:
   208                           	opt stack 0
   209  000650  00                 	db	0
   210  000651  80                 	db	128
   211  000652  3F                 	db	63
   212  000653  00                 	db	0
   213  000654  20                 	db	32
   214  000655  41                 	db	65
   215  000656  00                 	db	0
   216  000657  C8                 	db	200
   217  000658  42                 	db	66
   218  000659  00                 	db	0
   219  00065A  7A                 	db	122
   220  00065B  44                 	db	68
   221  00065C  40                 	db	64
   222  00065D  1C                 	db	28
   223  00065E  46                 	db	70
   224  00065F  50                 	db	80
   225  000660  C3                 	db	195
   226  000661  47                 	db	71
   227  000662  24                 	db	36
   228  000663  74                 	db	116
   229  000664  49                 	db	73
   230  000665  97                 	db	151
   231  000666  18                 	db	24
   232  000667  4B                 	db	75
   233  000668  BC                 	db	188
   234  000669  BE                 	db	190
   235  00066A  4C                 	db	76
   236  00066B  6B                 	db	107
   237  00066C  6E                 	db	110
   238  00066D  4E                 	db	78
   239  00066E  03                 	db	3
   240  00066F  15                 	db	21
   241  000670  50                 	db	80
   242  000671  79                 	db	121
   243  000672  AD                 	db	173
   244  000673  60                 	db	96
   245  000674  F3                 	db	243
   246  000675  49                 	db	73
   247  000676  71                 	db	113
   248  000677                     __end_of__powers_:
   249                           	opt stack 0
   250  000677                     _cal_current:
   251                           	opt stack 0
   252  000677  00                 	db	0
   253  000678  00                 	db	0
   254  000679  3F                 	db	63
   255  00067A  9A                 	db	154
   256  00067B  F9                 	db	249
   257  00067C  40                 	db	64
   258  00067D  DC                 	db	220
   259  00067E  D8                 	db	216
   260  00067F  42                 	db	66
   261  000680  70                 	db	112
   262  000681  8A                 	db	138
   263  000682  45                 	db	69
   264  000683  C0                 	db	192
   265  000684  DA                 	db	218
   266  000685  47                 	db	71
   267  000686                     __end_of_cal_current:
   268                           	opt stack 0
   269  000686                     _R1_BIT:
   270                           	opt stack 0
   271  000686  00                 	db	0
   272  000687  01                 	db	1
   273  000688  02                 	db	2
   274  000689  03                 	db	3
   275  00068A  04                 	db	4
   276  00068B                     __end_of_R1_BIT:
   277                           	opt stack 0
   278  00068B                     _RSET_BIT:
   279                           	opt stack 0
   280  00068B  02                 	db	2
   281  00068C  03                 	db	3
   282  00068D  03                 	db	3
   283  00068E  04                 	db	4
   284  00068F  05                 	db	5
   285  000690                     __end_of_RSET_BIT:
   286                           	opt stack 0
   287  000690                     STR_1:
   288  000690  0D                 	db	13
   289  000691  0A                 	db	10
   290  000692  53                 	db	83	;'S'
   291  000693  65                 	db	101	;'e'
   292  000694  74                 	db	116	;'t'
   293  000695  74                 	db	116	;'t'
   294  000696  69                 	db	105	;'i'
   295  000697  6E                 	db	110	;'n'
   296  000698  67                 	db	103	;'g'
   297  000699  20                 	db	32
   298  00069A  72                 	db	114	;'r'
   299  00069B  61                 	db	97	;'a'
   300  00069C  6E                 	db	110	;'n'
   301  00069D  67                 	db	103	;'g'
   302  00069E  65                 	db	101	;'e'
   303  00069F  20                 	db	32
   304  0006A0  3D                 	db	61	;'='
   305  0006A1  20                 	db	32
   306  0006A2  25                 	db	37
   307  0006A3  64                 	db	100	;'d'
   308  0006A4  0D                 	db	13
   309  0006A5  0A                 	db	10
   310  0006A6  00                 	db	0
   311  0006A7                     STR_4:
   312  0006A7  43                 	db	67	;'C'
   313  0006A8  3D                 	db	61	;'='
   314  0006A9  45                 	db	69	;'E'
   315  0006AA  52                 	db	82	;'R'
   316  0006AB  52                 	db	82	;'R'
   317  0006AC  4F                 	db	79	;'O'
   318  0006AD  52                 	db	82	;'R'
   319  0006AE  20                 	db	32
   320  0006AF  20                 	db	32
   321  0006B0  20                 	db	32
   322  0006B1  20                 	db	32
   323  0006B2  20                 	db	32
   324  0006B3  20                 	db	32
   325  0006B4  20                 	db	32
   326  0006B5  20                 	db	32
   327  0006B6  20                 	db	32
   328  0006B7  00                 	db	0
   329  0006B8                     STR_6:
   330  0006B8  52                 	db	82	;'R'
   331  0006B9  61                 	db	97	;'a'
   332  0006BA  6E                 	db	110	;'n'
   333  0006BB  67                 	db	103	;'g'
   334  0006BC  65                 	db	101	;'e'
   335  0006BD  20                 	db	32
   336  0006BE  25                 	db	37
   337  0006BF  64                 	db	100	;'d'
   338  0006C0  20                 	db	32
   339  0006C1  28                 	db	40
   340  0006C2  25                 	db	37
   341  0006C3  64                 	db	100	;'d'
   342  0006C4  29                 	db	41
   343  0006C5  20                 	db	32
   344  0006C6  20                 	db	32
   345  0006C7  20                 	db	32
   346  0006C8  00                 	db	0
   347  0006C9  25                 	db	37
   348  0006CA  6C                 	db	108	;'l'
   349  0006CB  75                 	db	117	;'u'
   350  0006CC  2E                 	db	46
   351  0006CD  25                 	db	37
   352  0006CE  36                 	db	54	;'6'
   353  0006CF  2E                 	db	46
   354  0006D0  36                 	db	54	;'6'
   355  0006D1  6C                 	db	108	;'l'
   356  0006D2  75                 	db	117	;'u'
   357  0006D3  00                 	db	0
   358  0006D4                     STR_3:
   359  0006D4  43                 	db	67	;'C'
   360  0006D5  3D                 	db	61	;'='
   361  0006D6  25                 	db	37
   362  0006D7  31                 	db	49	;'1'
   363  0006D8  32                 	db	50	;'2'
   364  0006D9  2E                 	db	46
   365  0006DA  33                 	db	51	;'3'
   366  0006DB  66                 	db	102	;'f'
   367  0006DC  6E                 	db	110	;'n'
   368  0006DD  46                 	db	70	;'F'
   369  0006DE  00                 	db	0
   370  0006DF                     STR_5:
   371  0006DF  43                 	db	67	;'C'
   372  0006E0  3D                 	db	61	;'='
   373  0006E1  25                 	db	37
   374  0006E2  31                 	db	49	;'1'
   375  0006E3  32                 	db	50	;'2'
   376  0006E4  2E                 	db	46
   377  0006E5  30                 	db	48	;'0'
   378  0006E6  66                 	db	102	;'f'
   379  0006E7  70                 	db	112	;'p'
   380  0006E8  46                 	db	70	;'F'
   381  0006E9  00                 	db	0
   382  0006EA                     STR_2:
   383  0006EA  43                 	db	67	;'C'
   384  0006EB  3D                 	db	61	;'='
   385  0006EC  25                 	db	37
   386  0006ED  31                 	db	49	;'1'
   387  0006EE  32                 	db	50	;'2'
   388  0006EF  2E                 	db	46
   389  0006F0  36                 	db	54	;'6'
   390  0006F1  66                 	db	102	;'f'
   391  0006F2  75                 	db	117	;'u'
   392  0006F3  46                 	db	70	;'F'
   393  0006F4  00                 	db	0
   394                           
   395                           ; #config settings
   396  0006F5  00                 	db	0	; dummy byte at the end
   397  0000                     
   398                           	psect	nvCOMRAM
   399  00005A                     __pnvCOMRAM:
   400                           	opt stack 0
   401  00005A                     _timer0ReloadVal:
   402                           	opt stack 0
   403  00005A                     	ds	2
   404                           
   405                           	psect	nvBANK0
   406  0000BC                     __pnvBANK0:
   407                           	opt stack 0
   408  0000BC                     _TMR0_InterruptHandler:
   409                           	opt stack 0
   410  0000BC                     	ds	2
   411  0000BE                     _TMR1_InterruptHandler:
   412                           	opt stack 0
   413  0000BE                     	ds	2
   414  0000C0                     _timer1ReloadVal:
   415                           	opt stack 0
   416  0000C0                     	ds	2
   417  0000                     _ANSELA	set	3896
   418  0000                     _ANSELB	set	3897
   419  0000                     _ANSELC	set	3898
   420  0000                     _TMR1	set	4046
   421  0000                     _BAUDCON1	set	4024
   422  0000                     _INTCON2bits	set	4081
   423  0000                     _INTCON3bits	set	4080
   424  0000                     _INTCONbits	set	4082
   425  0000                     _LATA	set	3977
   426  0000                     _LATAbits	set	3977
   427  0000                     _LATB	set	3978
   428  0000                     _LATC	set	3979
   429  0000                     _LATCbits	set	3979
   430  0000                     _OSCCON	set	4051
   431  0000                     _OSCCON2	set	4050
   432  0000                     _OSCTUNE	set	3995
   433  0000                     _PIE1bits	set	3997
   434  0000                     _PIR1bits	set	3998
   435  0000                     _RCONbits	set	4048
   436  0000                     _RCREG1	set	4014
   437  0000                     _RCSTA1	set	4011
   438  0000                     _RCSTA1bits	set	4011
   439  0000                     _SPBRG1	set	4015
   440  0000                     _SPBRGH1	set	4016
   441  0000                     _T0CON	set	4053
   442  0000                     _T0CONbits	set	4053
   443  0000                     _T1CON	set	4045
   444  0000                     _T1CONbits	set	4045
   445  0000                     _T1GCON	set	4044
   446  0000                     _T1GCONbits	set	4044
   447  0000                     _TMR0H	set	4055
   448  0000                     _TMR0L	set	4054
   449  0000                     _TMR1H	set	4047
   450  0000                     _TMR1L	set	4046
   451  0000                     _TRISA	set	3986
   452  0000                     _TRISB	set	3987
   453  0000                     _TRISC	set	3988
   454  0000                     _TXREG1	set	4013
   455  0000                     _TXSTA1	set	4012
   456  0000                     _WPUB	set	3937
   457                           
   458                           	psect	cinit
   459  002B8C                     __pcinit:
   460                           	opt stack 0
   461  002B8C                     start_initialization:
   462                           	opt stack 0
   463  002B8C                     __initialization:
   464                           	opt stack 0
   465                           
   466                           ; Initialize objects allocated to BANK0 (2 bytes)
   467                           ; load TBLPTR registers with __pidataBANK0
   468  002B8C  0EE2               	movlw	low __pidataBANK0
   469  002B8E  6EF6               	movwf	tblptrl,c
   470  002B90  0E30               	movlw	high __pidataBANK0
   471  002B92  6EF7               	movwf	tblptrh,c
   472  002B94  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   473  002B96  6EF8               	movwf	tblptru,c
   474  002B98  0009               	tblrd		*+	;fetch initializer
   475  002B9A  CFF5 F0C2          	movff	tablat,__pdataBANK0
   476  002B9E  0009               	tblrd		*+	;fetch initializer
   477  002BA0  CFF5 F0C3          	movff	tablat,__pdataBANK0+1
   478                           
   479                           ; Initialize objects allocated to COMRAM (2 bytes)
   480                           ; load TBLPTR registers with __pidataCOMRAM
   481  002BA4  0EE0               	movlw	low __pidataCOMRAM
   482  002BA6  6EF6               	movwf	tblptrl,c
   483  002BA8  0E30               	movlw	high __pidataCOMRAM
   484  002BAA  6EF7               	movwf	tblptrh,c
   485  002BAC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   486  002BAE  6EF8               	movwf	tblptru,c
   487  002BB0  0009               	tblrd		*+	;fetch initializer
   488  002BB2  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   489  002BB6  0009               	tblrd		*+	;fetch initializer
   490  002BB8  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   491                           
   492                           ; Clear objects allocated to BANK0 (23 bytes)
   493  002BBC  EE00  F0A5         	lfsr	0,__pbssBANK0
   494  002BC0  0E17               	movlw	23
   495  002BC2                     clear_0:
   496  002BC2  6AEE               	clrf	postinc0,c
   497  002BC4  06E8               	decf	wreg,f,c
   498  002BC6  E1FD               	bnz	clear_0
   499                           
   500                           ; Clear objects allocated to COMRAM (1 bytes)
   501  002BC8  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   502  002BCA                     end_of_initialization:
   503                           	opt stack 0
   504  002BCA                     __end_of__initialization:
   505                           	opt stack 0
   506  002BCA  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   507  002BCC  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   508  002BCE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   509  002BD0  6EF8               	movwf	tblptru,c
   510  002BD2  0100               	movlb	0
   511  002BD4  EFF2  F017         	goto	_main	;jump to C main() function
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           
   519                           	psect	bssCOMRAM
   520  00005E                     __pbssCOMRAM:
   521                           	opt stack 0
   522  00005E                     _cal_mode:
   523                           	opt stack 0
   524  00005E                     	ds	1
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           
   532                           	psect	dataCOMRAM
   533  00005C                     __pdataCOMRAM:
   534                           	opt stack 0
   535  00005C                     _auto_range:
   536                           	opt stack 0
   537  00005C                     	ds	1
   538  00005D                     _range:
   539                           	opt stack 0
   540  00005D                     	ds	1
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           
   548                           	psect	bssBANK0
   549  0000A5                     __pbssBANK0:
   550                           	opt stack 0
   551  0000A5                     _result:
   552                           	opt stack 0
   553  0000A5                     	ds	3
   554  0000A8                     _reading:
   555                           	opt stack 0
   556  0000A8                     	ds	2
   557  0000AA                     _stored_range:
   558                           	opt stack 0
   559  0000AA                     	ds	1
   560  0000AB                     ftoa@buf:
   561                           	opt stack 0
   562  0000AB                     	ds	17
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           
   570                           	psect	dataBANK0
   571  0000C2                     __pdataBANK0:
   572                           	opt stack 0
   573  0000C2                     _units:
   574                           	opt stack 0
   575  0000C2                     	ds	2
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           
   583                           	psect	cstackBANK1
   584  000100                     __pcstackBANK1:
   585                           	opt stack 0
   586  000100                     __lcd_Port@a:
   587                           	opt stack 0
   588  000100                     TMR0_SetInterruptHandler@InterruptHandler:
   589                           	opt stack 0
   590  000100                     TMR1_SetInterruptHandler@InterruptHandler:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x0
   594  000100                     	ds	1
   595  000101                     ??_lcd_sendCommand:
   596                           
   597                           ; 1 bytes @ 0x1
   598  000101                     	ds	1
   599  000102                     ??_TMR0_Initialize:
   600  000102                     lcd_sendCommand@a:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x2
   604  000102                     	ds	1
   605  000103                     ??_lcd_init:
   606  000103                     
   607                           ; 1 bytes @ 0x3
   608  000103                     	ds	1
   609  000104                     tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           
   616                           ; 1 bytes @ 0x4
   617                           
   618                           	psect	cstackBANK0
   619  000060                     __pcstackBANK0:
   620                           	opt stack 0
   621  000060                     __doprnt$1972:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x0
   625  000060                     	ds	3
   626  000063                     __doprnt@width:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x3
   630  000063                     	ds	2
   631  000065                     __doprnt@flag:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x5
   635  000065                     	ds	2
   636  000067                     __doprnt@exp:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x7
   640  000067                     	ds	2
   641  000069                     __doprnt@val:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x9
   645  000069                     	ds	4
   646  00006D                     __doprnt@tmpval:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0xD
   650  00006D                     	ds	4
   651  000071                     __doprnt@fval:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x11
   655  000071                     	ds	3
   656  000074                     __doprnt@prec:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x14
   660  000074                     	ds	2
   661  000076                     __doprnt@c:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x16
   665  000076                     	ds	1
   666  000077                     TMR1_DefaultInterruptHandler@range_string:
   667                           	opt stack 0
   668                           
   669                           ; 16 bytes @ 0x17
   670  000077                     	ds	16
   671  000087                     TMR1_DefaultInterruptHandler@cap_string:
   672                           	opt stack 0
   673                           
   674                           ; 16 bytes @ 0x27
   675  000087                     	ds	16
   676  000097                     ??_INTERRUPT_InterruptManager:
   677                           
   678                           ; 1 bytes @ 0x37
   679  000097                     	ds	14
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           
   687                           	psect	cstackCOMRAM
   688  000001                     __pcstackCOMRAM:
   689                           	opt stack 0
   690  000001                     ??_isdigit:
   691  000001                     ??_SetRange:
   692  000001                     ?_TMR0_ReadTimer:
   693                           	opt stack 0
   694  000001                     ?___awmod:
   695                           	opt stack 0
   696  000001                     ?___ftpack:
   697                           	opt stack 0
   698  000001                     ?___ftneg:
   699                           	opt stack 0
   700  000001                     ?__tdiv_to_l_:
   701                           	opt stack 0
   702  000001                     ?__div_to_l_:
   703                           	opt stack 0
   704  000001                     ?___lldiv:
   705                           	opt stack 0
   706  000001                     EUSART1_Write@txData:
   707                           	opt stack 0
   708  000001                     i2__lcd_Port@a:
   709                           	opt stack 0
   710  000001                     ___awmod@dividend:
   711                           	opt stack 0
   712  000001                     __div_to_l_@f1:
   713                           	opt stack 0
   714  000001                     ___ftpack@arg:
   715                           	opt stack 0
   716  000001                     __tdiv_to_l_@f1:
   717                           	opt stack 0
   718  000001                     ___ftge@ff1:
   719                           	opt stack 0
   720  000001                     ___ftneg@f1:
   721                           	opt stack 0
   722  000001                     ___lldiv@dividend:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x0
   726  000001                     	ds	1
   727  000002                     ??i2_lcd_sendCommand:
   728  000002                     putch@txData:
   729                           	opt stack 0
   730  000002                     lcd_sendChar@temp:
   731                           	opt stack 0
   732  000002                     _isdigit$1499:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x1
   736  000002                     	ds	1
   737  000003                     ??_TMR0_ReadTimer:
   738  000003                     lcd_sendChar@y:
   739                           	opt stack 0
   740  000003                     isdigit@c:
   741                           	opt stack 0
   742  000003                     i2lcd_sendCommand@a:
   743                           	opt stack 0
   744  000003                     ___awmod@divisor:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x2
   748  000003                     	ds	1
   749  000004                     lcd_setPosition@y:
   750                           	opt stack 0
   751  000004                     lcd_sendChar@a:
   752                           	opt stack 0
   753  000004                     ___ftpack@exp:
   754                           	opt stack 0
   755  000004                     __div_to_l_@f2:
   756                           	opt stack 0
   757  000004                     __tdiv_to_l_@f2:
   758                           	opt stack 0
   759  000004                     ___ftge@ff2:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x3
   763  000004                     	ds	1
   764  000005                     lcd_setPosition@x:
   765                           	opt stack 0
   766  000005                     ___awmod@counter:
   767                           	opt stack 0
   768  000005                     ___ftpack@sign:
   769                           	opt stack 0
   770  000005                     lcd_sendString@a:
   771                           	opt stack 0
   772  000005                     ___lldiv@divisor:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x4
   776  000005                     	ds	1
   777  000006                     ??___ftpack:
   778  000006                     lcd_setPosition@i:
   779                           	opt stack 0
   780  000006                     ___awmod@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x5
   784  000006                     	ds	1
   785  000007                     ??__tdiv_to_l_:
   786  000007                     ??___ftge:
   787  000007                     ?___awdiv:
   788                           	opt stack 0
   789  000007                     lcd_setPosition@j:
   790                           	opt stack 0
   791  000007                     TMR0_ReadTimer@readVal:
   792                           	opt stack 0
   793  000007                     lcd_sendString@i:
   794                           	opt stack 0
   795  000007                     ___awdiv@dividend:
   796                           	opt stack 0
   797  000007                     __div_to_l_@quot:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x6
   801  000007                     	ds	1
   802  000008                     lcd_setPosition@temp:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x7
   806  000008                     	ds	1
   807  000009                     ?___lltoft:
   808                           	opt stack 0
   809  000009                     ?___lwtoft:
   810                           	opt stack 0
   811  000009                     TMR0_ReadTimer@readValLow:
   812                           	opt stack 0
   813  000009                     lcd_sendStringToPos@y:
   814                           	opt stack 0
   815  000009                     ___awdiv@divisor:
   816                           	opt stack 0
   817  000009                     ___lwtoft@c:
   818                           	opt stack 0
   819  000009                     ___lldiv@quotient:
   820                           	opt stack 0
   821  000009                     ___lltoft@c:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x8
   825  000009                     	ds	1
   826  00000A                     TMR0_ReadTimer@readValHigh:
   827                           	opt stack 0
   828  00000A                     lcd_sendStringToPos@charString:
   829                           	opt stack 0
   830  00000A                     __tdiv_to_l_@quot:
   831                           	opt stack 0
   832                           
   833                           ; 4 bytes @ 0x9
   834  00000A                     	ds	1
   835  00000B                     SetRange@new_range:
   836                           	opt stack 0
   837  00000B                     ___awdiv@counter:
   838                           	opt stack 0
   839  00000B                     __div_to_l_@cntr:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0xA
   843  00000B                     	ds	1
   844  00000C                     ??_TMR0_DefaultInterruptHandler:
   845  00000C                     lcd_sendStringToPos@x:
   846                           	opt stack 0
   847  00000C                     ___awdiv@sign:
   848                           	opt stack 0
   849  00000C                     __div_to_l_@exp1:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0xB
   853  00000C                     	ds	1
   854  00000D                     ??___lltoft:
   855  00000D                     ___lldiv@counter:
   856                           	opt stack 0
   857  00000D                     ___awdiv@quotient:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0xC
   861  00000D                     	ds	1
   862  00000E                     ?___llmod:
   863                           	opt stack 0
   864  00000E                     __tdiv_to_l_@cntr:
   865                           	opt stack 0
   866  00000E                     ___llmod@dividend:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0xD
   870  00000E                     	ds	1
   871  00000F                     ?___wmul:
   872                           	opt stack 0
   873  00000F                     __tdiv_to_l_@exp1:
   874                           	opt stack 0
   875  00000F                     ___wmul@multiplier:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0xE
   879  00000F                     	ds	2
   880  000011                     ___lltoft@exp:
   881                           	opt stack 0
   882  000011                     ___wmul@multiplicand:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x10
   886  000011                     	ds	1
   887  000012                     ___llmod@divisor:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0x11
   891  000012                     	ds	1
   892  000013                     ___wmul@product:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x12
   896  000013                     	ds	2
   897  000015                     ?___ftmul:
   898                           	opt stack 0
   899  000015                     ___ftmul@f1:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x14
   903  000015                     	ds	1
   904  000016                     ___llmod@counter:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x15
   908  000016                     	ds	2
   909  000018                     ___ftmul@f2:
   910                           	opt stack 0
   911                           
   912                           ; 3 bytes @ 0x17
   913  000018                     	ds	3
   914  00001B                     ??___ftmul:
   915                           
   916                           ; 1 bytes @ 0x1A
   917  00001B                     	ds	3
   918  00001E                     ___ftmul@exp:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x1D
   922  00001E                     	ds	1
   923  00001F                     ___ftmul@f3_as_product:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x1E
   927  00001F                     	ds	3
   928  000022                     ___ftmul@cntr:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x21
   932  000022                     	ds	1
   933  000023                     ___ftmul@sign:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x22
   937  000023                     	ds	1
   938  000024                     ?_fround:
   939                           	opt stack 0
   940  000024                     ?_scale:
   941                           	opt stack 0
   942  000024                     ?___fttol:
   943                           	opt stack 0
   944  000024                     ___fttol@f1:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x23
   948  000024                     	ds	3
   949  000027                     _fround$1970:
   950                           	opt stack 0
   951  000027                     _scale$1971:
   952                           	opt stack 0
   953                           
   954                           ; 3 bytes @ 0x26
   955  000027                     	ds	1
   956  000028                     ??___fttol:
   957                           
   958                           ; 1 bytes @ 0x27
   959  000028                     	ds	2
   960  00002A                     scale@scl:
   961                           	opt stack 0
   962  00002A                     _fround$1969:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x29
   966  00002A                     	ds	3
   967  00002D                     fround@prec:
   968                           	opt stack 0
   969  00002D                     ___fttol@sign1:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x2C
   973  00002D                     	ds	1
   974  00002E                     ?___ftadd:
   975                           	opt stack 0
   976  00002E                     ___ftadd@f1:
   977                           	opt stack 0
   978  00002E                     ___fttol@lval:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x2D
   982  00002E                     	ds	3
   983  000031                     ___ftadd@f2:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x30
   987  000031                     	ds	1
   988  000032                     ___fttol@exp1:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x31
   992  000032                     	ds	2
   993  000034                     ??___ftadd:
   994                           
   995                           ; 1 bytes @ 0x33
   996  000034                     	ds	3
   997  000037                     ___ftadd@sign:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x36
  1001  000037                     	ds	1
  1002  000038                     ___ftadd@exp2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x37
  1006  000038                     	ds	1
  1007  000039                     ___ftadd@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x38
  1011  000039                     	ds	1
  1012  00003A                     ?___ftdiv:
  1013                           	opt stack 0
  1014  00003A                     ?___ftsub:
  1015                           	opt stack 0
  1016  00003A                     ___ftdiv@f1:
  1017                           	opt stack 0
  1018  00003A                     ___ftsub@f1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 3 bytes @ 0x39
  1022  00003A                     	ds	3
  1023  00003D                     ___ftdiv@f2:
  1024                           	opt stack 0
  1025  00003D                     ___ftsub@f2:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x3C
  1029  00003D                     	ds	3
  1030  000040                     ??___ftdiv:
  1031  000040                     ?__doprnt:
  1032                           	opt stack 0
  1033  000040                     __doprnt@pb:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x3F
  1037  000040                     	ds	2
  1038  000042                     __doprnt@f:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x41
  1042  000042                     	ds	1
  1043  000043                     ___ftdiv@cntr:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x42
  1047  000043                     	ds	1
  1048  000044                     __doprnt@ap:
  1049                           	opt stack 0
  1050  000044                     ___ftdiv@f3:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x43
  1054  000044                     	ds	2
  1055  000046                     ??__doprnt:
  1056                           
  1057                           ; 1 bytes @ 0x45
  1058  000046                     	ds	1
  1059  000047                     ___ftdiv@exp:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x46
  1063  000047                     	ds	1
  1064  000048                     ___ftdiv@sign:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x47
  1068  000048                     	ds	1
  1069  000049                     
  1070                           ; 1 bytes @ 0x48
  1071  000049                     	ds	3
  1072  00004C                     ?_printf:
  1073                           	opt stack 0
  1074  00004C                     ?_sprintf:
  1075                           	opt stack 0
  1076  00004C                     printf@f:
  1077                           	opt stack 0
  1078  00004C                     sprintf@wh:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x4B
  1082  00004C                     	ds	2
  1083  00004E                     sprintf@f:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x4D
  1087  00004E                     	ds	2
  1088  000050                     printf@ap:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x4F
  1092  000050                     	ds	2
  1093  000052                     printf@pb:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x51
  1097  000052                     	ds	2
  1098  000054                     sprintf@ap:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x53
  1102  000054                     	ds	2
  1103  000056                     sprintf@pb:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0x55
  1107  000056                     	ds	4
  1108  00005A                     tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           
  1115                           ; 1 bytes @ 0x59
  1116 ;;
  1117 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1118 ;;
  1119 ;; *************** function _main *****************
  1120 ;; Defined at:
  1121 ;;		line 4 in file "main.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;		None
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;		None
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg, status,2, status,0, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1135 ;;      Params:         0       0       0       0       0       0       0
  1136 ;;      Locals:         0       0       0       0       0       0       0
  1137 ;;      Temps:          0       0       0       0       0       0       0
  1138 ;;      Totals:         0       0       0       0       0       0       0
  1139 ;;Total ram usage:        0 bytes
  1140 ;; Hardware stack levels required when called:   11
  1141 ;; This function calls:
  1142 ;;		_SYSTEM_Initialize
  1143 ;;		_lcd_clear
  1144 ;;		_lcd_init
  1145 ;; This function is called by:
  1146 ;;		Startup code after reset
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text0
  1151  002FE4                     __ptext0:
  1152                           	opt stack 0
  1153  002FE4                     _main:
  1154                           	opt stack 20
  1155                           
  1156                           ;main.c: 7: SYSTEM_Initialize();
  1157                           
  1158                           ;incstack = 0
  1159  002FE4  EC01  F018         	call	_SYSTEM_Initialize	;wreg free
  1160                           
  1161                           ;main.c: 26: (INTCONbits.GIE = 1);
  1162  002FE8  8EF2               	bsf	intcon,7,c	;volatile
  1163                           
  1164                           ;main.c: 29: (INTCONbits.PEIE = 1);
  1165  002FEA  8CF2               	bsf	intcon,6,c	;volatile
  1166                           
  1167                           ;main.c: 37: lcd_init();
  1168  002FEC  ECC9  F014         	call	_lcd_init	;wreg free
  1169                           
  1170                           ;main.c: 38: lcd_clear();
  1171  002FF0  EC37  F018         	call	_lcd_clear	;wreg free
  1172                           
  1173                           ;main.c: 42: LATC |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4);
  1174  002FF4  0E1F               	movlw	31
  1175  002FF6  128B               	iorwf	3979,f,c	;volatile
  1176                           
  1177                           ;main.c: 43: LATB |= (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5);
  1178  002FF8  0E3C               	movlw	60
  1179  002FFA  128A               	iorwf	3978,f,c	;volatile
  1180                           
  1181                           ;main.c: 46: LATC &= ~(1 << 1);
  1182  002FFC  928B               	bcf	3979,1,c	;volatile
  1183                           
  1184                           ;main.c: 47: LATB &= ~(1 << 3);
  1185  002FFE  968A               	bcf	3978,3,c	;volatile
  1186  003000                     l272:
  1187                           
  1188                           ;main.c: 50: {
  1189  003000  D7FF               	goto	l272
  1190  003002                     __end_of_main:
  1191                           	opt stack 0
  1192                           tblptru	equ	0xFF8
  1193                           tblptrh	equ	0xFF7
  1194                           tblptrl	equ	0xFF6
  1195                           tablat	equ	0xFF5
  1196                           intcon	equ	0xFF2
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           
  1200 ;; *************** function _lcd_init *****************
  1201 ;; Defined at:
  1202 ;;		line 39 in file "lcd.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1216 ;;      Params:         0       0       0       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0       0       0
  1218 ;;      Temps:          0       0       1       0       0       0       0
  1219 ;;      Totals:         0       0       1       0       0       0       0
  1220 ;;Total ram usage:        1 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:   10
  1223 ;; This function calls:
  1224 ;;		__lcd_Port
  1225 ;;		_lcd_sendCommand
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text1
  1232  002992                     __ptext1:
  1233                           	opt stack 0
  1234  002992                     _lcd_init:
  1235                           	opt stack 20
  1236                           
  1237                           ;lcd.c: 41: _lcd_Port(0x00);
  1238                           
  1239                           ;incstack = 0
  1240  002992  0E00               	movlw	0
  1241  002994  ECD0  F016         	call	__lcd_Port
  1242                           
  1243                           ;lcd.c: 42: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1244  002998  0E68               	movlw	104
  1245  00299A  0101               	movlb	1	; () banked
  1246  00299C  6F03               	movwf	??_lcd_init& (0+255),b
  1247  00299E  0EE4               	movlw	228
  1248  0029A0                     u4567:
  1249  0029A0  2EE8               	decfsz	wreg,f,c
  1250  0029A2  D7FE               	bra	u4567
  1251  0029A4  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1252  0029A6  D7FC               	bra	u4567
  1253  0029A8  F000               	nop	
  1254                           
  1255                           ;lcd.c: 43: lcd_sendCommand(0x03);
  1256  0029AA  0E03               	movlw	3
  1257  0029AC  EC98  F017         	call	_lcd_sendCommand
  1258                           
  1259                           ;lcd.c: 44: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  1260  0029B0  0E1A               	movlw	26
  1261  0029B2  0101               	movlb	1	; () banked
  1262  0029B4  6F03               	movwf	??_lcd_init& (0+255),b
  1263  0029B6  0EF8               	movlw	248
  1264  0029B8                     u4577:
  1265  0029B8  2EE8               	decfsz	wreg,f,c
  1266  0029BA  D7FE               	bra	u4577
  1267  0029BC  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1268  0029BE  D7FC               	bra	u4577
  1269  0029C0  F000               	nop	
  1270                           
  1271                           ;lcd.c: 45: lcd_sendCommand(0x03);
  1272  0029C2  0E03               	movlw	3
  1273  0029C4  EC98  F017         	call	_lcd_sendCommand
  1274                           
  1275                           ;lcd.c: 46: _delay((unsigned long)((11)*(16000000UL/4000.0)));
  1276  0029C8  0E3A               	movlw	58
  1277  0029CA  0101               	movlb	1	; () banked
  1278  0029CC  6F03               	movwf	??_lcd_init& (0+255),b
  1279  0029CE  0E23               	movlw	35
  1280  0029D0                     u4587:
  1281  0029D0  2EE8               	decfsz	wreg,f,c
  1282  0029D2  D7FE               	bra	u4587
  1283  0029D4  2F03               	decfsz	??_lcd_init& (0+255),f,b
  1284  0029D6  D7FC               	bra	u4587
  1285                           
  1286                           ;lcd.c: 47: lcd_sendCommand(0x03);
  1287  0029D8  0E03               	movlw	3
  1288  0029DA  EC98  F017         	call	_lcd_sendCommand
  1289                           
  1290                           ;lcd.c: 49: lcd_sendCommand(0x02);
  1291  0029DE  0E02               	movlw	2
  1292  0029E0  EC98  F017         	call	_lcd_sendCommand
  1293                           
  1294                           ;lcd.c: 50: lcd_sendCommand(0x02);
  1295  0029E4  0E02               	movlw	2
  1296  0029E6  EC98  F017         	call	_lcd_sendCommand
  1297                           
  1298                           ;lcd.c: 51: lcd_sendCommand(0x08);
  1299  0029EA  0E08               	movlw	8
  1300  0029EC  EC98  F017         	call	_lcd_sendCommand
  1301                           
  1302                           ;lcd.c: 52: lcd_sendCommand(0x00);
  1303  0029F0  0E00               	movlw	0
  1304  0029F2  EC98  F017         	call	_lcd_sendCommand
  1305                           
  1306                           ;lcd.c: 53: lcd_sendCommand(0x0C);
  1307  0029F6  0E0C               	movlw	12
  1308  0029F8  EC98  F017         	call	_lcd_sendCommand
  1309                           
  1310                           ;lcd.c: 54: lcd_sendCommand(0x00);
  1311  0029FC  0E00               	movlw	0
  1312  0029FE  EC98  F017         	call	_lcd_sendCommand
  1313                           
  1314                           ;lcd.c: 55: lcd_sendCommand(0x06);
  1315  002A02  0E06               	movlw	6
  1316  002A04  EC98  F017         	call	_lcd_sendCommand
  1317  002A08  0012               	return		;funcret
  1318  002A0A                     __end_of_lcd_init:
  1319                           	opt stack 0
  1320                           tblptru	equ	0xFF8
  1321                           tblptrh	equ	0xFF7
  1322                           tblptrl	equ	0xFF6
  1323                           tablat	equ	0xFF5
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           
  1328 ;; *************** function _lcd_clear *****************
  1329 ;; Defined at:
  1330 ;;		line 12 in file "lcd.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg, status,2, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1344 ;;      Params:         0       0       0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0
  1347 ;;      Totals:         0       0       0       0       0       0       0
  1348 ;;Total ram usage:        0 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:   10
  1351 ;; This function calls:
  1352 ;;		_lcd_sendCommand
  1353 ;; This function is called by:
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text2
  1359  00306E                     __ptext2:
  1360                           	opt stack 0
  1361  00306E                     _lcd_clear:
  1362                           	opt stack 20
  1363                           
  1364                           ;lcd.c: 14: lcd_sendCommand(0);
  1365                           
  1366                           ;incstack = 0
  1367  00306E  0E00               	movlw	0
  1368  003070  EC98  F017         	call	_lcd_sendCommand
  1369                           
  1370                           ;lcd.c: 15: lcd_sendCommand(1);
  1371  003074  0E01               	movlw	1
  1372  003076  EC98  F017         	call	_lcd_sendCommand
  1373  00307A  0012               	return		;funcret
  1374  00307C                     __end_of_lcd_clear:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           intcon	equ	0xFF2
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           
  1384 ;; *************** function _lcd_sendCommand *****************
  1385 ;; Defined at:
  1386 ;;		line 3 in file "lcd.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  a               1    wreg     unsigned char 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  a               1    2[BANK1 ] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1400 ;;      Params:         0       0       0       0       0       0       0
  1401 ;;      Locals:         0       0       1       0       0       0       0
  1402 ;;      Temps:          0       0       1       0       0       0       0
  1403 ;;      Totals:         0       0       2       0       0       0       0
  1404 ;;Total ram usage:        2 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    9
  1407 ;; This function calls:
  1408 ;;		__lcd_Port
  1409 ;; This function is called by:
  1410 ;;		_lcd_clear
  1411 ;;		_lcd_init
  1412 ;;		_lcd_shiftRight
  1413 ;;		_lcd_shiftLeft
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text3
  1418  002F30                     __ptext3:
  1419                           	opt stack 0
  1420  002F30                     _lcd_sendCommand:
  1421                           	opt stack 20
  1422                           
  1423                           ;incstack = 0
  1424                           ;lcd_sendCommand@a stored from wreg
  1425  002F30  0101               	movlb	1	; () banked
  1426  002F32  6F02               	movwf	lcd_sendCommand@a& (0+255),b
  1427                           
  1428                           ;lcd.c: 5: LATAbits.LA5 = 0;
  1429  002F34  9A89               	bcf	3977,5,c	;volatile
  1430                           
  1431                           ;lcd.c: 6: _lcd_Port(a);
  1432  002F36  0101               	movlb	1	; () banked
  1433  002F38  5102               	movf	lcd_sendCommand@a& (0+255),w,b
  1434  002F3A  ECD0  F016         	call	__lcd_Port
  1435                           
  1436                           ;lcd.c: 7: LATAbits.LA4 = 1;
  1437  002F3E  8889               	bsf	3977,4,c	;volatile
  1438                           
  1439                           ;lcd.c: 8: _delay((unsigned long)((4)*(16000000UL/4000.0)));
  1440  002F40  0E15               	movlw	21
  1441  002F42  0101               	movlb	1	; () banked
  1442  002F44  6F01               	movwf	??_lcd_sendCommand& (0+255),b
  1443  002F46  0EC6               	movlw	198
  1444  002F48                     u4597:
  1445  002F48  2EE8               	decfsz	wreg,f,c
  1446  002F4A  D7FE               	bra	u4597
  1447  002F4C  2F01               	decfsz	??_lcd_sendCommand& (0+255),f,b
  1448  002F4E  D7FC               	bra	u4597
  1449  002F50  F000               	nop	
  1450                           
  1451                           ;lcd.c: 9: LATAbits.LA4 = 0;
  1452  002F52  9889               	bcf	3977,4,c	;volatile
  1453  002F54  0012               	return		;funcret
  1454  002F56                     __end_of_lcd_sendCommand:
  1455                           	opt stack 0
  1456                           tblptru	equ	0xFF8
  1457                           tblptrh	equ	0xFF7
  1458                           tblptrl	equ	0xFF6
  1459                           tablat	equ	0xFF5
  1460                           intcon	equ	0xFF2
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           
  1464 ;; *************** function __lcd_Port *****************
  1465 ;; Defined at:
  1466 ;;		line 139 in file "lcd.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  a               1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  a               1    0[BANK1 ] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1480 ;;      Params:         0       0       0       0       0       0       0
  1481 ;;      Locals:         0       0       1       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0       0       0
  1483 ;;      Totals:         0       0       1       0       0       0       0
  1484 ;;Total ram usage:        1 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    8
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_lcd_sendCommand
  1491 ;;		_lcd_init
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text4
  1496  002DA0                     __ptext4:
  1497                           	opt stack 0
  1498  002DA0                     __lcd_Port:
  1499                           	opt stack 20
  1500                           
  1501                           ;incstack = 0
  1502                           ;__lcd_Port@a stored from wreg
  1503  002DA0  0101               	movlb	1	; () banked
  1504  002DA2  6F00               	movwf	__lcd_Port@a& (0+255),b
  1505                           
  1506                           ;lcd.c: 141: if(a & 1)
  1507  002DA4  0101               	movlb	1	; () banked
  1508  002DA6  A100               	btfss	__lcd_Port@a& (0+255),0,b
  1509  002DA8  D002               	goto	l341
  1510                           
  1511                           ; BSR set to: 1
  1512                           ;lcd.c: 142: LATAbits.LA3 = 1;
  1513  002DAA  8689               	bsf	3977,3,c	;volatile
  1514  002DAC  D001               	goto	l4086
  1515  002DAE                     l341:
  1516                           
  1517                           ; BSR set to: 1
  1518                           ;lcd.c: 143: else
  1519                           ;lcd.c: 144: LATAbits.LA3 = 0;
  1520  002DAE  9689               	bcf	3977,3,c	;volatile
  1521  002DB0                     l4086:
  1522                           
  1523                           ; BSR set to: 1
  1524                           ;lcd.c: 146: if(a & 2)
  1525  002DB0  0101               	movlb	1	; () banked
  1526  002DB2  A300               	btfss	__lcd_Port@a& (0+255),1,b
  1527  002DB4  D002               	goto	l343
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;lcd.c: 147: LATAbits.LA2 = 1;
  1531  002DB6  8489               	bsf	3977,2,c	;volatile
  1532  002DB8  D001               	goto	l4090
  1533  002DBA                     l343:
  1534                           
  1535                           ; BSR set to: 1
  1536                           ;lcd.c: 148: else
  1537                           ;lcd.c: 149: LATAbits.LA2 = 0;
  1538  002DBA  9489               	bcf	3977,2,c	;volatile
  1539  002DBC                     l4090:
  1540                           
  1541                           ; BSR set to: 1
  1542                           ;lcd.c: 151: if(a & 4)
  1543  002DBC  0101               	movlb	1	; () banked
  1544  002DBE  A500               	btfss	__lcd_Port@a& (0+255),2,b
  1545  002DC0  D002               	goto	l345
  1546                           
  1547                           ; BSR set to: 1
  1548                           ;lcd.c: 152: LATAbits.LA1 = 1;
  1549  002DC2  8289               	bsf	3977,1,c	;volatile
  1550  002DC4  D001               	goto	l4094
  1551  002DC6                     l345:
  1552                           
  1553                           ; BSR set to: 1
  1554                           ;lcd.c: 153: else
  1555                           ;lcd.c: 154: LATAbits.LA1 = 0;
  1556  002DC6  9289               	bcf	3977,1,c	;volatile
  1557  002DC8                     l4094:
  1558                           
  1559                           ; BSR set to: 1
  1560                           ;lcd.c: 156: if(a & 8)
  1561  002DC8  0101               	movlb	1	; () banked
  1562  002DCA  A700               	btfss	__lcd_Port@a& (0+255),3,b
  1563  002DCC  D002               	goto	l347
  1564                           
  1565                           ; BSR set to: 1
  1566                           ;lcd.c: 157: LATAbits.LA0 = 1;
  1567  002DCE  8089               	bsf	3977,0,c	;volatile
  1568  002DD0  0012               	return	
  1569  002DD2                     l347:
  1570                           
  1571                           ; BSR set to: 1
  1572                           ;lcd.c: 158: else
  1573                           ;lcd.c: 159: LATAbits.LA0 = 0;
  1574  002DD2  9089               	bcf	3977,0,c	;volatile
  1575  002DD4  0012               	return	
  1576  002DD6                     __end_of__lcd_Port:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           intcon	equ	0xFF2
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           
  1586 ;; *************** function _SYSTEM_Initialize *****************
  1587 ;; Defined at:
  1588 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      void 
  1595 ;; Registers used:
  1596 ;;		wreg, status,2, status,0, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1602 ;;      Params:         0       0       0       0       0       0       0
  1603 ;;      Locals:         0       0       0       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0       0       0
  1605 ;;      Totals:         0       0       0       0       0       0       0
  1606 ;;Total ram usage:        0 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:   10
  1609 ;; This function calls:
  1610 ;;		_EUSART1_Initialize
  1611 ;;		_EXT_INT_Initialize
  1612 ;;		_INTERRUPT_Initialize
  1613 ;;		_OSCILLATOR_Initialize
  1614 ;;		_PIN_MANAGER_Initialize
  1615 ;;		_TMR0_Initialize
  1616 ;;		_TMR1_Initialize
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text5
  1623  003002                     __ptext5:
  1624                           	opt stack 0
  1625  003002                     _SYSTEM_Initialize:
  1626                           	opt stack 20
  1627                           
  1628                           ;mcc.c: 114: INTERRUPT_Initialize();
  1629                           
  1630                           ; BSR set to: 1
  1631                           ;incstack = 0
  1632  003002  EC6A  F018         	call	_INTERRUPT_Initialize	;wreg free
  1633                           
  1634                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1635  003006  EC52  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  1636                           
  1637                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1638  00300A  EC3E  F018         	call	_OSCILLATOR_Initialize	;wreg free
  1639                           
  1640                           ;mcc.c: 117: EXT_INT_Initialize();
  1641  00300E  EC45  F018         	call	_EXT_INT_Initialize	;wreg free
  1642                           
  1643                           ;mcc.c: 118: TMR1_Initialize();
  1644  003012  EC20  F017         	call	_TMR1_Initialize	;wreg free
  1645                           
  1646                           ;mcc.c: 119: TMR0_Initialize();
  1647  003016  EC12  F016         	call	_TMR0_Initialize	;wreg free
  1648                           
  1649                           ;mcc.c: 120: EUSART1_Initialize();
  1650  00301A  EC2C  F018         	call	_EUSART1_Initialize	;wreg free
  1651  00301E  0012               	return		;funcret
  1652  003020                     __end_of_SYSTEM_Initialize:
  1653                           	opt stack 0
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           intcon	equ	0xFF2
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           
  1662 ;; *************** function _TMR1_Initialize *****************
  1663 ;; Defined at:
  1664 ;;		line 29 in file "mcc_generated_files/tmr1.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1678 ;;      Params:         0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    9
  1685 ;; This function calls:
  1686 ;;		_TMR1_SetInterruptHandler
  1687 ;;		_TMR1_StartTimer
  1688 ;; This function is called by:
  1689 ;;		_SYSTEM_Initialize
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text6
  1694  002E40                     __ptext6:
  1695                           	opt stack 0
  1696  002E40                     _TMR1_Initialize:
  1697                           	opt stack 20
  1698                           
  1699                           ;tmr1.c: 34: T1CON = 0x30;
  1700                           
  1701                           ;incstack = 0
  1702  002E40  0E30               	movlw	48
  1703  002E42  6ECD               	movwf	4045,c	;volatile
  1704                           
  1705                           ;tmr1.c: 37: T1GCON = 0x00;
  1706  002E44  0E00               	movlw	0
  1707  002E46  6ECC               	movwf	4044,c	;volatile
  1708                           
  1709                           ;tmr1.c: 40: TMR1H = 0x02;
  1710  002E48  0E02               	movlw	2
  1711  002E4A  6ECF               	movwf	4047,c	;volatile
  1712                           
  1713                           ;tmr1.c: 43: TMR1L = 0x18;
  1714  002E4C  0E18               	movlw	24
  1715  002E4E  6ECE               	movwf	4046,c	;volatile
  1716                           
  1717                           ;tmr1.c: 46: timer1ReloadVal=TMR1;
  1718  002E50  CFCE F0C0          	movff	4046,_timer1ReloadVal	;volatile
  1719  002E54  CFCF F0C1          	movff	4047,_timer1ReloadVal+1	;volatile
  1720                           
  1721                           ;tmr1.c: 49: PIR1bits.TMR1IF = 0;
  1722  002E58  909E               	bcf	3998,0,c	;volatile
  1723                           
  1724                           ;tmr1.c: 52: PIE1bits.TMR1IE = 1;
  1725  002E5A  809D               	bsf	3997,0,c	;volatile
  1726                           
  1727                           ;tmr1.c: 55: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  1728  002E5C  0ED0               	movlw	low _TMR1_DefaultInterruptHandler
  1729  002E5E  0101               	movlb	1	; () banked
  1730  002E60  6F00               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  1731  002E62  0E1F               	movlw	high _TMR1_DefaultInterruptHandler
  1732  002E64  0101               	movlb	1	; () banked
  1733  002E66  6F01               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1734  002E68  EC52  F018         	call	_TMR1_SetInterruptHandler	;wreg free
  1735                           
  1736                           ;tmr1.c: 58: TMR1_StartTimer();
  1737  002E6C  EC66  F018         	call	_TMR1_StartTimer	;wreg free
  1738  002E70  0012               	return		;funcret
  1739  002E72                     __end_of_TMR1_Initialize:
  1740                           	opt stack 0
  1741                           tblptru	equ	0xFF8
  1742                           tblptrh	equ	0xFF7
  1743                           tblptrl	equ	0xFF6
  1744                           tablat	equ	0xFF5
  1745                           intcon	equ	0xFF2
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           
  1749 ;; *************** function _TMR1_StartTimer *****************
  1750 ;; Defined at:
  1751 ;;		line 61 in file "mcc_generated_files/tmr1.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		None
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1765 ;;      Params:         0       0       0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    8
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_TMR1_Initialize
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text7
  1780  0030CC                     __ptext7:
  1781                           	opt stack 0
  1782  0030CC                     _TMR1_StartTimer:
  1783                           	opt stack 20
  1784                           
  1785                           ;tmr1.c: 64: T1CONbits.TMR1ON = 1;
  1786                           
  1787                           ;incstack = 0
  1788  0030CC  80CD               	bsf	4045,0,c	;volatile
  1789  0030CE  0012               	return		;funcret
  1790  0030D0                     __end_of_TMR1_StartTimer:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           intcon	equ	0xFF2
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           
  1800 ;; *************** function _TMR1_SetInterruptHandler *****************
  1801 ;; Defined at:
  1802 ;;		line 143 in file "mcc_generated_files/tmr1.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  1805 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1817 ;;      Params:         0       0       2       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0
  1819 ;;      Temps:          0       0       0       0       0       0       0
  1820 ;;      Totals:         0       0       2       0       0       0       0
  1821 ;;Total ram usage:        2 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:    8
  1824 ;; This function calls:
  1825 ;;		Nothing
  1826 ;; This function is called by:
  1827 ;;		_TMR1_Initialize
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text8
  1832  0030A4                     __ptext8:
  1833                           	opt stack 0
  1834  0030A4                     _TMR1_SetInterruptHandler:
  1835                           	opt stack 20
  1836                           
  1837                           ;tmr1.c: 144: TMR1_InterruptHandler = InterruptHandler;
  1838                           
  1839                           ;incstack = 0
  1840  0030A4  C100  F0BE         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  1841  0030A8  C101  F0BF         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  1842  0030AC  0012               	return		;funcret
  1843  0030AE                     __end_of_TMR1_SetInterruptHandler:
  1844                           	opt stack 0
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           intcon	equ	0xFF2
  1850                           postinc0	equ	0xFEE
  1851                           wreg	equ	0xFE8
  1852                           
  1853 ;; *************** function _TMR0_Initialize *****************
  1854 ;; Defined at:
  1855 ;;		line 22 in file "mcc_generated_files/tmr0.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1869 ;;      Params:         0       0       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       2       0       0       0       0
  1872 ;;      Totals:         0       0       2       0       0       0       0
  1873 ;;Total ram usage:        2 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    9
  1876 ;; This function calls:
  1877 ;;		_TMR0_SetInterruptHandler
  1878 ;;		_TMR0_StartTimer
  1879 ;; This function is called by:
  1880 ;;		_SYSTEM_Initialize
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text9
  1885  002C24                     __ptext9:
  1886                           	opt stack 0
  1887  002C24                     _TMR0_Initialize:
  1888                           	opt stack 20
  1889                           
  1890                           ;tmr0.c: 27: T0CON = 0x11;
  1891                           
  1892                           ;incstack = 0
  1893  002C24  0E11               	movlw	17
  1894  002C26  6ED5               	movwf	4053,c	;volatile
  1895                           
  1896                           ;tmr0.c: 30: TMR0H = 0x15;
  1897  002C28  0E15               	movlw	21
  1898  002C2A  6ED7               	movwf	4055,c	;volatile
  1899                           
  1900                           ;tmr0.c: 33: TMR0L = 0x9F;
  1901  002C2C  0E9F               	movlw	159
  1902  002C2E  6ED6               	movwf	4054,c	;volatile
  1903                           
  1904                           ;tmr0.c: 36: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  1905  002C30  50D6               	movf	4054,w,c	;volatile
  1906  002C32  CFD7 F102          	movff	4055,??_TMR0_Initialize	;volatile
  1907  002C36  0101               	movlb	1	; () banked
  1908  002C38  6B03               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  1909  002C3A  C102  F103         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  1910  002C3E  0101               	movlb	1	; () banked
  1911  002C40  6B02               	clrf	??_TMR0_Initialize& (0+255),b
  1912  002C42  0101               	movlb	1	; () banked
  1913  002C44  1102               	iorwf	??_TMR0_Initialize& (0+255),w,b
  1914  002C46  6E5A               	movwf	_timer0ReloadVal,c	;volatile
  1915  002C48  0101               	movlb	1	; () banked
  1916  002C4A  5103               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  1917  002C4C  6E5B               	movwf	_timer0ReloadVal+1,c	;volatile
  1918                           
  1919                           ; BSR set to: 1
  1920                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  1921  002C4E  94F2               	bcf	intcon,2,c	;volatile
  1922                           
  1923                           ; BSR set to: 1
  1924                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  1925  002C50  8AF2               	bsf	intcon,5,c	;volatile
  1926                           
  1927                           ; BSR set to: 1
  1928                           ;tmr0.c: 45: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  1929  002C52  0E2C               	movlw	low _TMR0_DefaultInterruptHandler
  1930  002C54  0101               	movlb	1	; () banked
  1931  002C56  6F00               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1932  002C58  0E2D               	movlw	high _TMR0_DefaultInterruptHandler
  1933  002C5A  0101               	movlb	1	; () banked
  1934  002C5C  6F01               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1935  002C5E  EC57  F018         	call	_TMR0_SetInterruptHandler	;wreg free
  1936                           
  1937                           ;tmr0.c: 48: TMR0_StartTimer();
  1938  002C62  EC68  F018         	call	_TMR0_StartTimer	;wreg free
  1939  002C66  0012               	return		;funcret
  1940  002C68                     __end_of_TMR0_Initialize:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           intcon	equ	0xFF2
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           
  1950 ;; *************** function _TMR0_StartTimer *****************
  1951 ;; Defined at:
  1952 ;;		line 51 in file "mcc_generated_files/tmr0.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		None
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1966 ;;      Params:         0       0       0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    8
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_TMR0_Initialize
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text10
  1981  0030D0                     __ptext10:
  1982                           	opt stack 0
  1983  0030D0                     _TMR0_StartTimer:
  1984                           	opt stack 20
  1985                           
  1986                           ;tmr0.c: 54: T0CONbits.TMR0ON = 1;
  1987                           
  1988                           ;incstack = 0
  1989  0030D0  8ED5               	bsf	4053,7,c	;volatile
  1990  0030D2  0012               	return		;funcret
  1991  0030D4                     __end_of_TMR0_StartTimer:
  1992                           	opt stack 0
  1993                           tblptru	equ	0xFF8
  1994                           tblptrh	equ	0xFF7
  1995                           tblptrl	equ	0xFF6
  1996                           tablat	equ	0xFF5
  1997                           intcon	equ	0xFF2
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           
  2001 ;; *************** function _TMR0_SetInterruptHandler *****************
  2002 ;; Defined at:
  2003 ;;		line 109 in file "mcc_generated_files/tmr0.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  2006 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2018 ;;      Params:         0       0       2       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0       0       0
  2021 ;;      Totals:         0       0       2       0       0       0       0
  2022 ;;Total ram usage:        2 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    8
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_TMR0_Initialize
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text11
  2033  0030AE                     __ptext11:
  2034                           	opt stack 0
  2035  0030AE                     _TMR0_SetInterruptHandler:
  2036                           	opt stack 20
  2037                           
  2038                           ;tmr0.c: 110: TMR0_InterruptHandler = InterruptHandler;
  2039                           
  2040                           ;incstack = 0
  2041  0030AE  C100  F0BC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2042  0030B2  C101  F0BD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2043  0030B6  0012               	return		;funcret
  2044  0030B8                     __end_of_TMR0_SetInterruptHandler:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           intcon	equ	0xFF2
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           
  2054 ;; *************** function _PIN_MANAGER_Initialize *****************
  2055 ;; Defined at:
  2056 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2070 ;;      Params:         0       0       0       0       0       0       0
  2071 ;;      Locals:         0       0       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0
  2073 ;;      Totals:         0       0       0       0       0       0       0
  2074 ;;Total ram usage:        0 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    8
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_SYSTEM_Initialize
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text12
  2085  002EA4                     __ptext12:
  2086                           	opt stack 0
  2087  002EA4                     _PIN_MANAGER_Initialize:
  2088                           	opt stack 21
  2089                           
  2090                           ;pin_manager.c: 56: LATA = 0x00;
  2091                           
  2092                           ;incstack = 0
  2093  002EA4  0E00               	movlw	0
  2094  002EA6  6E89               	movwf	3977,c	;volatile
  2095                           
  2096                           ;pin_manager.c: 57: LATB = 0x3C;
  2097  002EA8  0E3C               	movlw	60
  2098  002EAA  6E8A               	movwf	3978,c	;volatile
  2099                           
  2100                           ;pin_manager.c: 58: LATC = 0x1F;
  2101  002EAC  0E1F               	movlw	31
  2102  002EAE  6E8B               	movwf	3979,c	;volatile
  2103                           
  2104                           ;pin_manager.c: 63: TRISA = 0xC0;
  2105  002EB0  0EC0               	movlw	192
  2106  002EB2  6E92               	movwf	3986,c	;volatile
  2107                           
  2108                           ;pin_manager.c: 64: TRISB = 0xC3;
  2109  002EB4  0EC3               	movlw	195
  2110  002EB6  6E93               	movwf	3987,c	;volatile
  2111                           
  2112                           ;pin_manager.c: 65: TRISC = 0x20;
  2113  002EB8  0E20               	movlw	32
  2114  002EBA  6E94               	movwf	3988,c	;volatile
  2115                           
  2116                           ;pin_manager.c: 70: ANSELC = 0x20;
  2117  002EBC  0E20               	movlw	32
  2118  002EBE  010F               	movlb	15	; () banked
  2119  002EC0  6F3A               	movwf	58,b	;volatile
  2120                           
  2121                           ;pin_manager.c: 71: ANSELB = 0x00;
  2122  002EC2  0E00               	movlw	0
  2123  002EC4  010F               	movlb	15	; () banked
  2124  002EC6  6F39               	movwf	57,b	;volatile
  2125                           
  2126                           ;pin_manager.c: 72: ANSELA = 0x00;
  2127  002EC8  0E00               	movlw	0
  2128  002ECA  010F               	movlb	15	; () banked
  2129  002ECC  6F38               	movwf	56,b	;volatile
  2130                           
  2131                           ; BSR set to: 15
  2132                           ;pin_manager.c: 77: WPUB = 0xFF;
  2133  002ECE  6861               	setf	3937,c	;volatile
  2134                           
  2135                           ; BSR set to: 15
  2136                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  2137  002ED0  9EF1               	bcf	intcon2,7,c	;volatile
  2138                           
  2139                           ; BSR set to: 15
  2140  002ED2  0012               	return		;funcret
  2141  002ED4                     __end_of_PIN_MANAGER_Initialize:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           intcon2	equ	0xFF1
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           
  2152 ;; *************** function _OSCILLATOR_Initialize *****************
  2153 ;; Defined at:
  2154 ;;		line 123 in file "mcc_generated_files/mcc.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2168 ;;      Params:         0       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0
  2171 ;;      Totals:         0       0       0       0       0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    8
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_SYSTEM_Initialize
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text13
  2183  00307C                     __ptext13:
  2184                           	opt stack 0
  2185  00307C                     _OSCILLATOR_Initialize:
  2186                           	opt stack 21
  2187                           
  2188                           ;mcc.c: 126: OSCCON = 0x70;
  2189                           
  2190                           ; BSR set to: 15
  2191                           ;incstack = 0
  2192  00307C  0E70               	movlw	112
  2193  00307E  6ED3               	movwf	4051,c	;volatile
  2194                           
  2195                           ;mcc.c: 128: OSCCON2 = 0x04;
  2196  003080  0E04               	movlw	4
  2197  003082  6ED2               	movwf	4050,c	;volatile
  2198                           
  2199                           ;mcc.c: 130: OSCTUNE = 0x00;
  2200  003084  0E00               	movlw	0
  2201  003086  6E9B               	movwf	3995,c	;volatile
  2202  003088  0012               	return		;funcret
  2203  00308A                     __end_of_OSCILLATOR_Initialize:
  2204                           	opt stack 0
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           intcon	equ	0xFF2
  2210                           intcon2	equ	0xFF1
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           
  2214 ;; *************** function _INTERRUPT_Initialize *****************
  2215 ;; Defined at:
  2216 ;;		line 4 in file "mcc_generated_files/interrupt_manager.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		None
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2230 ;;      Params:         0       0       0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0
  2233 ;;      Totals:         0       0       0       0       0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    8
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_SYSTEM_Initialize
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text14
  2245  0030D4                     __ptext14:
  2246                           	opt stack 0
  2247  0030D4                     _INTERRUPT_Initialize:
  2248                           	opt stack 21
  2249                           
  2250                           ;interrupt_manager.c: 7: RCONbits.IPEN = 0;
  2251                           
  2252                           ;incstack = 0
  2253  0030D4  9ED0               	bcf	4048,7,c	;volatile
  2254  0030D6  0012               	return		;funcret
  2255  0030D8                     __end_of_INTERRUPT_Initialize:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           intcon	equ	0xFF2
  2262                           intcon2	equ	0xFF1
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           
  2266 ;; *************** function _EXT_INT_Initialize *****************
  2267 ;; Defined at:
  2268 ;;		line 152 in file "mcc_generated_files/ext_int.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		None
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2282 ;;      Params:         0       0       0       0       0       0       0
  2283 ;;      Locals:         0       0       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0
  2285 ;;      Totals:         0       0       0       0       0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    8
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_SYSTEM_Initialize
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text15
  2297  00308A                     __ptext15:
  2298                           	opt stack 0
  2299  00308A                     _EXT_INT_Initialize:
  2300                           	opt stack 21
  2301                           
  2302                           ;ext_int.c: 160: (INTCON3bits.INT1IF = 0);
  2303                           
  2304                           ;incstack = 0
  2305  00308A  90F0               	bcf	intcon3,0,c	;volatile
  2306                           
  2307                           ;ext_int.c: 161: (INTCON2bits.INTEDG1 = 0);
  2308  00308C  9AF1               	bcf	intcon2,5,c	;volatile
  2309                           
  2310                           ;ext_int.c: 162: (INTCON3bits.INT1IE = 1);
  2311  00308E  86F0               	bsf	intcon3,3,c	;volatile
  2312                           
  2313                           ;ext_int.c: 170: (INTCONbits.INT0IF = 0);
  2314  003090  92F2               	bcf	intcon,1,c	;volatile
  2315                           
  2316                           ;ext_int.c: 171: (INTCON2bits.INTEDG0 = 0);
  2317  003092  9CF1               	bcf	intcon2,6,c	;volatile
  2318                           
  2319                           ;ext_int.c: 172: (INTCONbits.INT0IE = 1);
  2320  003094  88F2               	bsf	intcon,4,c	;volatile
  2321  003096  0012               	return		;funcret
  2322  003098                     __end_of_EXT_INT_Initialize:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           intcon	equ	0xFF2
  2329                           intcon2	equ	0xFF1
  2330                           intcon3	equ	0xFF0
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           
  2334 ;; *************** function _EUSART1_Initialize *****************
  2335 ;; Defined at:
  2336 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;		None
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;		None
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2350 ;;      Params:         0       0       0       0       0       0       0
  2351 ;;      Locals:         0       0       0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0
  2353 ;;      Totals:         0       0       0       0       0       0       0
  2354 ;;Total ram usage:        0 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    8
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_SYSTEM_Initialize
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text16
  2365  003058                     __ptext16:
  2366                           	opt stack 0
  2367  003058                     _EUSART1_Initialize:
  2368                           	opt stack 21
  2369                           
  2370                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  2371                           
  2372                           ;incstack = 0
  2373  003058  0E08               	movlw	8
  2374  00305A  6EB8               	movwf	4024,c	;volatile
  2375                           
  2376                           ;eusart1.c: 63: RCSTA1 = 0x80;
  2377  00305C  0E80               	movlw	128
  2378  00305E  6EAB               	movwf	4011,c	;volatile
  2379                           
  2380                           ;eusart1.c: 66: TXSTA1 = 0x24;
  2381  003060  0E24               	movlw	36
  2382  003062  6EAC               	movwf	4012,c	;volatile
  2383                           
  2384                           ;eusart1.c: 69: SPBRG1 = 0xA0;
  2385  003064  0EA0               	movlw	160
  2386  003066  6EAF               	movwf	4015,c	;volatile
  2387                           
  2388                           ;eusart1.c: 72: SPBRGH1 = 0x01;
  2389  003068  0E01               	movlw	1
  2390  00306A  6EB0               	movwf	4016,c	;volatile
  2391  00306C  0012               	return		;funcret
  2392  00306E                     __end_of_EUSART1_Initialize:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           intcon	equ	0xFF2
  2399                           intcon2	equ	0xFF1
  2400                           intcon3	equ	0xFF0
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           
  2404 ;; *************** function _INTERRUPT_InterruptManager *****************
  2405 ;; Defined at:
  2406 ;;		line 10 in file "mcc_generated_files/interrupt_manager.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2420 ;;      Params:         0       0       0       0       0       0       0
  2421 ;;      Locals:         0       0       0       0       0       0       0
  2422 ;;      Temps:          0      14       0       0       0       0       0
  2423 ;;      Totals:         0      14       0       0       0       0       0
  2424 ;;Total ram usage:       14 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    7
  2427 ;; This function calls:
  2428 ;;		_INT0_ISR
  2429 ;;		_INT1_ISR
  2430 ;;		_TMR0_ISR
  2431 ;;		_TMR1_ISR
  2432 ;; This function is called by:
  2433 ;;		Interrupt level 2
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	intcode
  2438  000008                     __pintcode:
  2439                           	opt stack 0
  2440  000008                     _INTERRUPT_InterruptManager:
  2441                           	opt stack 20
  2442                           
  2443                           ;incstack = 0
  2444  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2445  00000A  CFFA F097          	movff	pclath,??_INTERRUPT_InterruptManager
  2446  00000E  CFFB F098          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2447  000012  CFE9 F099          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2448  000016  CFEA F09A          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2449  00001A  CFE1 F09B          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2450  00001E  CFE2 F09C          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2451  000022  CFD9 F09D          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2452  000026  CFDA F09E          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2453  00002A  CFF3 F09F          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2454  00002E  CFF4 F0A0          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2455  000032  CFF6 F0A1          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2456  000036  CFF7 F0A2          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2457  00003A  CFF8 F0A3          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2458  00003E  CFF5 F0A4          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2459                           
  2460                           ;interrupt_manager.c: 13: if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bits.TM
      +                          R1IF == 1)
  2461  000042  BCF2               	btfsc	intcon,6,c	;volatile
  2462  000044  A09D               	btfss	3997,0,c	;volatile
  2463  000046  D005               	goto	i2l115
  2464  000048  A09E               	btfss	3998,0,c	;volatile
  2465  00004A  D003               	goto	i2l115
  2466                           
  2467                           ;interrupt_manager.c: 14: {
  2468                           ;interrupt_manager.c: 15: TMR1_ISR();
  2469  00004C  EC39  F017         	call	_TMR1_ISR	;wreg free
  2470                           
  2471                           ;interrupt_manager.c: 16: }
  2472  000050  D011               	goto	i2l123
  2473  000052                     i2l115:
  2474                           
  2475                           ;interrupt_manager.c: 17: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  2476  000052  B6F0               	btfsc	intcon3,3,c	;volatile
  2477  000054  A0F0               	btfss	intcon3,0,c	;volatile
  2478  000056  D003               	goto	i2l117
  2479                           
  2480                           ;interrupt_manager.c: 18: {
  2481                           ;interrupt_manager.c: 19: INT1_ISR();
  2482  000058  ECEC  F015         	call	_INT1_ISR	;wreg free
  2483                           
  2484                           ;interrupt_manager.c: 20: }
  2485  00005C  D00B               	goto	i2l123
  2486  00005E                     i2l117:
  2487                           
  2488                           ;interrupt_manager.c: 21: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  2489  00005E  B8F2               	btfsc	intcon,4,c	;volatile
  2490  000060  A2F2               	btfss	intcon,1,c	;volatile
  2491  000062  D003               	goto	i2l119
  2492                           
  2493                           ;interrupt_manager.c: 22: {
  2494                           ;interrupt_manager.c: 23: INT0_ISR();
  2495  000064  EC35  F013         	call	_INT0_ISR	;wreg free
  2496                           
  2497                           ;interrupt_manager.c: 24: }
  2498  000068  D005               	goto	i2l123
  2499  00006A                     i2l119:
  2500                           
  2501                           ;interrupt_manager.c: 25: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2502  00006A  BAF2               	btfsc	intcon,5,c	;volatile
  2503  00006C  A4F2               	btfss	intcon,2,c	;volatile
  2504  00006E  D002               	goto	i2l123
  2505                           
  2506                           ;interrupt_manager.c: 26: {
  2507                           ;interrupt_manager.c: 27: TMR0_ISR();
  2508  000070  EC6A  F017         	call	_TMR0_ISR	;wreg free
  2509  000074                     i2l123:
  2510  000074  C0A4  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2511  000078  C0A3  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2512  00007C  C0A2  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2513  000080  C0A1  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2514  000084  C0A0  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2515  000088  C09F  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2516  00008C  C09E  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2517  000090  C09D  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2518  000094  C09C  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2519  000098  C09B  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2520  00009C  C09A  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2521  0000A0  C099  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2522  0000A4  C098  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2523  0000A8  C097  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2524  0000AC  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2525  0000AE  0011               	retfie		f
  2526  0000B0                     __end_of_INTERRUPT_InterruptManager:
  2527                           	opt stack 0
  2528                           pclatu	equ	0xFFB
  2529                           pclath	equ	0xFFA
  2530                           tblptru	equ	0xFF8
  2531                           tblptrh	equ	0xFF7
  2532                           tblptrl	equ	0xFF6
  2533                           tablat	equ	0xFF5
  2534                           prodh	equ	0xFF4
  2535                           prodl	equ	0xFF3
  2536                           intcon	equ	0xFF2
  2537                           intcon2	equ	0xFF1
  2538                           intcon3	equ	0xFF0
  2539                           postinc0	equ	0xFEE
  2540                           fsr0h	equ	0xFEA
  2541                           fsr0l	equ	0xFE9
  2542                           wreg	equ	0xFE8
  2543                           fsr1h	equ	0xFE2
  2544                           fsr1l	equ	0xFE1
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           
  2548 ;; *************** function _TMR1_ISR *****************
  2549 ;; Defined at:
  2550 ;;		line 126 in file "mcc_generated_files/tmr1.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2564 ;;      Params:         0       0       0       0       0       0       0
  2565 ;;      Locals:         0       0       0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0
  2567 ;;      Totals:         0       0       0       0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    6
  2571 ;; This function calls:
  2572 ;;		Absolute function
  2573 ;;		_TMR1_DefaultInterruptHandler
  2574 ;; This function is called by:
  2575 ;;		_INTERRUPT_InterruptManager
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text18
  2580  002E72                     __ptext18:
  2581                           	opt stack 0
  2582  002E72                     _TMR1_ISR:
  2583                           	opt stack 20
  2584                           
  2585                           ;tmr1.c: 130: PIR1bits.TMR1IF = 0;
  2586                           
  2587                           ;incstack = 0
  2588  002E72  909E               	bcf	3998,0,c	;volatile
  2589                           
  2590                           ;tmr1.c: 133: TMR1H = (timer1ReloadVal >> 8);
  2591  002E74  0100               	movlb	0	; () banked
  2592  002E76  51C1               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  2593  002E78  6ECF               	movwf	4047,c	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;tmr1.c: 134: TMR1L = (uint8_t) timer1ReloadVal;
  2597  002E7A  C0C0  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;tmr1.c: 136: if(TMR1_InterruptHandler)
  2601  002E7E  0100               	movlb	0	; () banked
  2602  002E80  51BE               	movf	_TMR1_InterruptHandler& (0+255),w,b
  2603  002E82  0100               	movlb	0	; () banked
  2604  002E84  11BF               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
  2605  002E86  B4D8               	btfsc	status,2,c
  2606  002E88  0012               	return	
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;tmr1.c: 137: {
  2610                           ;tmr1.c: 138: TMR1_InterruptHandler();
  2611  002E8A  D801               	call	i2u440_48
  2612  002E8C  0012               	return	
  2613  002E8E                     i2u440_48:
  2614  002E8E  0005               	push	
  2615  002E90  0100               	movlb	0	; () banked
  2616  002E92  6EFA               	movwf	pclath,c
  2617  002E94  51BE               	movf	_TMR1_InterruptHandler& (0+255),w,b
  2618  002E96  6EFD               	movwf	tosl,c
  2619  002E98  51BF               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
  2620  002E9A  6EFE               	movwf	tosh,c
  2621  002E9C  50F8               	movf	tblptru,w,c
  2622  002E9E  6EFF               	movwf	tosu,c
  2623  002EA0  50FA               	movf	pclath,w,c
  2624  002EA2  0012               	return		;indir
  2625  002EA4                     __end_of_TMR1_ISR:
  2626                           	opt stack 0
  2627                           tosu	equ	0xFFF
  2628                           tosh	equ	0xFFE
  2629                           tosl	equ	0xFFD
  2630                           pclatu	equ	0xFFB
  2631                           pclath	equ	0xFFA
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           prodh	equ	0xFF4
  2637                           prodl	equ	0xFF3
  2638                           intcon	equ	0xFF2
  2639                           intcon2	equ	0xFF1
  2640                           intcon3	equ	0xFF0
  2641                           postinc0	equ	0xFEE
  2642                           fsr0h	equ	0xFEA
  2643                           fsr0l	equ	0xFE9
  2644                           wreg	equ	0xFE8
  2645                           fsr1h	equ	0xFE2
  2646                           fsr1l	equ	0xFE1
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  2652 ;; Defined at:
  2653 ;;		line 147 in file "mcc_generated_files/tmr1.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  cap_string     16   39[BANK0 ] unsigned char [16]
  2658 ;;  range_string   16   23[BANK0 ] unsigned char [16]
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2668 ;;      Params:         0       0       0       0       0       0       0
  2669 ;;      Locals:         0      32       0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0
  2671 ;;      Totals:         0      32       0       0       0       0       0
  2672 ;;Total ram usage:       32 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    5
  2675 ;; This function calls:
  2676 ;;		_TMR0_Reload
  2677 ;;		_TMR0_StopTimer
  2678 ;;		___ftdiv
  2679 ;;		___ftge
  2680 ;;		_lcd_sendStringToPos
  2681 ;;		_sprintf
  2682 ;;		i2_TMR0_StartTimer
  2683 ;; This function is called by:
  2684 ;;		_TMR1_Initialize
  2685 ;;		_TMR1_ISR
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text19
  2690  001FD0                     __ptext19:
  2691                           	opt stack 0
  2692  001FD0                     _TMR1_DefaultInterruptHandler:
  2693                           	opt stack 20
  2694                           
  2695                           ;tmr1.c: 150: TMR0_StopTimer();
  2696                           
  2697                           ;incstack = 0
  2698  001FD0  EC6E  F018         	call	_TMR0_StopTimer	;wreg free
  2699                           
  2700                           ;tmr1.c: 151: TMR0_Reload();
  2701  001FD4  EC61  F018         	call	_TMR0_Reload	;wreg free
  2702                           
  2703                           ;tmr1.c: 152: (INTCONbits.INT0IE = 0);
  2704  001FD8  98F2               	bcf	intcon,4,c	;volatile
  2705                           
  2706                           ;tmr1.c: 153: do { LATCbits.LATC7 = 1; } while(0);
  2707  001FDA  8E8B               	bsf	3979,7,c	;volatile
  2708                           
  2709                           ;tmr1.c: 156: char cap_string[16];
  2710                           ;tmr1.c: 157: char range_string[16];
  2711                           ;tmr1.c: 160: if (result >= 1000000.0)
  2712  001FDC  C0A5  F001         	movff	_result,___ftge@ff1
  2713  001FE0  C0A6  F002         	movff	_result+1,___ftge@ff1+1
  2714  001FE4  C0A7  F003         	movff	_result+2,___ftge@ff1+2
  2715  001FE8  0E24               	movlw	36
  2716  001FEA  6E04               	movwf	___ftge@ff2,c
  2717  001FEC  0E74               	movlw	116
  2718  001FEE  6E05               	movwf	___ftge@ff2+1,c
  2719  001FF0  0E49               	movlw	73
  2720  001FF2  6E06               	movwf	___ftge@ff2+2,c
  2721  001FF4  ECFE  F013         	call	___ftge	;wreg free
  2722  001FF8  A0D8               	btfss	status,0,c
  2723  001FFA  D01F               	goto	i2l3868
  2724                           
  2725                           ;tmr1.c: 161: {
  2726                           ;tmr1.c: 162: sprintf(cap_string, "C=%12.6fuF", result / 1000000.0);
  2727  001FFC  0E87               	movlw	low TMR1_DefaultInterruptHandler@cap_string
  2728  001FFE  6E4C               	movwf	sprintf@wh,c
  2729  002000  0E00               	movlw	high TMR1_DefaultInterruptHandler@cap_string
  2730  002002  6E4D               	movwf	sprintf@wh+1,c
  2731  002004  0EEA               	movlw	low STR_2
  2732  002006  6E4E               	movwf	sprintf@f,c
  2733  002008  0E06               	movlw	high STR_2
  2734  00200A  6E4F               	movwf	sprintf@f+1,c
  2735  00200C  C0A5  F03A         	movff	_result,___ftdiv@f1
  2736  002010  C0A6  F03B         	movff	_result+1,___ftdiv@f1+1
  2737  002014  C0A7  F03C         	movff	_result+2,___ftdiv@f1+2
  2738  002018  0E24               	movlw	36
  2739  00201A  6E3D               	movwf	___ftdiv@f2,c
  2740  00201C  0E74               	movlw	116
  2741  00201E  6E3E               	movwf	___ftdiv@f2+1,c
  2742  002020  0E49               	movlw	73
  2743  002022  6E3F               	movwf	___ftdiv@f2+2,c
  2744  002024  ECC2  F012         	call	___ftdiv	;wreg free
  2745  002028  C03A  F050         	movff	?___ftdiv,?_sprintf+4
  2746  00202C  C03B  F051         	movff	?___ftdiv+1,?_sprintf+5
  2747  002030  C03C  F052         	movff	?___ftdiv+2,?_sprintf+6
  2748  002034  EC34  F016         	call	_sprintf	;wreg free
  2749                           
  2750                           ;tmr1.c: 163: }
  2751  002038  D05D               	goto	i2l438
  2752  00203A                     i2l3868:
  2753                           
  2754                           ;tmr1.c: 164: else if (result < 1000000 && result >= 1000.0)
  2755  00203A  C0A5  F001         	movff	_result,___ftge@ff1
  2756  00203E  C0A6  F002         	movff	_result+1,___ftge@ff1+1
  2757  002042  C0A7  F003         	movff	_result+2,___ftge@ff1+2
  2758  002046  0E24               	movlw	36
  2759  002048  6E04               	movwf	___ftge@ff2,c
  2760  00204A  0E74               	movlw	116
  2761  00204C  6E05               	movwf	___ftge@ff2+1,c
  2762  00204E  0E49               	movlw	73
  2763  002050  6E06               	movwf	___ftge@ff2+2,c
  2764  002052  ECFE  F013         	call	___ftge	;wreg free
  2765  002056  B0D8               	btfsc	status,0,c
  2766  002058  D02F               	goto	i2l3874
  2767  00205A  C0A5  F001         	movff	_result,___ftge@ff1
  2768  00205E  C0A6  F002         	movff	_result+1,___ftge@ff1+1
  2769  002062  C0A7  F003         	movff	_result+2,___ftge@ff1+2
  2770  002066  0E00               	movlw	0
  2771  002068  6E04               	movwf	___ftge@ff2,c
  2772  00206A  0E7A               	movlw	122
  2773  00206C  6E05               	movwf	___ftge@ff2+1,c
  2774  00206E  0E44               	movlw	68
  2775  002070  6E06               	movwf	___ftge@ff2+2,c
  2776  002072  ECFE  F013         	call	___ftge	;wreg free
  2777  002076  A0D8               	btfss	status,0,c
  2778  002078  D01F               	goto	i2l3874
  2779                           
  2780                           ;tmr1.c: 165: {
  2781                           ;tmr1.c: 166: sprintf(cap_string, "C=%12.3fnF", result / 1000.0);
  2782  00207A  0E87               	movlw	low TMR1_DefaultInterruptHandler@cap_string
  2783  00207C  6E4C               	movwf	sprintf@wh,c
  2784  00207E  0E00               	movlw	high TMR1_DefaultInterruptHandler@cap_string
  2785  002080  6E4D               	movwf	sprintf@wh+1,c
  2786  002082  0ED4               	movlw	low STR_3
  2787  002084  6E4E               	movwf	sprintf@f,c
  2788  002086  0E06               	movlw	high STR_3
  2789  002088  6E4F               	movwf	sprintf@f+1,c
  2790  00208A  C0A5  F03A         	movff	_result,___ftdiv@f1
  2791  00208E  C0A6  F03B         	movff	_result+1,___ftdiv@f1+1
  2792  002092  C0A7  F03C         	movff	_result+2,___ftdiv@f1+2
  2793  002096  0E00               	movlw	0
  2794  002098  6E3D               	movwf	___ftdiv@f2,c
  2795  00209A  0E7A               	movlw	122
  2796  00209C  6E3E               	movwf	___ftdiv@f2+1,c
  2797  00209E  0E44               	movlw	68
  2798  0020A0  6E3F               	movwf	___ftdiv@f2+2,c
  2799  0020A2  ECC2  F012         	call	___ftdiv	;wreg free
  2800  0020A6  C03A  F050         	movff	?___ftdiv,?_sprintf+4
  2801  0020AA  C03B  F051         	movff	?___ftdiv+1,?_sprintf+5
  2802  0020AE  C03C  F052         	movff	?___ftdiv+2,?_sprintf+6
  2803  0020B2  EC34  F016         	call	_sprintf	;wreg free
  2804                           
  2805                           ;tmr1.c: 167: }
  2806  0020B6  D01E               	goto	i2l438
  2807  0020B8                     i2l3874:
  2808                           
  2809                           ;tmr1.c: 168: else if (result < 0)
  2810  0020B8  0100               	movlb	0	; () banked
  2811  0020BA  AFA7               	btfss	(_result+2)& (0+255),7,b
  2812  0020BC  D00B               	goto	i2l3878
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;tmr1.c: 169: {
  2816                           ;tmr1.c: 170: sprintf(cap_string, "C=ERROR         ");
  2817  0020BE  0E87               	movlw	low TMR1_DefaultInterruptHandler@cap_string
  2818  0020C0  6E4C               	movwf	sprintf@wh,c
  2819  0020C2  0E00               	movlw	high TMR1_DefaultInterruptHandler@cap_string
  2820  0020C4  6E4D               	movwf	sprintf@wh+1,c
  2821  0020C6  0EA7               	movlw	low STR_4
  2822  0020C8  6E4E               	movwf	sprintf@f,c
  2823  0020CA  0E06               	movlw	high STR_4
  2824  0020CC  6E4F               	movwf	sprintf@f+1,c
  2825  0020CE  EC34  F016         	call	_sprintf	;wreg free
  2826                           
  2827                           ;tmr1.c: 171: }
  2828  0020D2  D010               	goto	i2l438
  2829  0020D4                     i2l3878:
  2830                           
  2831                           ;tmr1.c: 172: else
  2832                           ;tmr1.c: 173: {
  2833                           ;tmr1.c: 174: sprintf(cap_string, "C=%12.0fpF", result);
  2834  0020D4  0E87               	movlw	low TMR1_DefaultInterruptHandler@cap_string
  2835  0020D6  6E4C               	movwf	sprintf@wh,c
  2836  0020D8  0E00               	movlw	high TMR1_DefaultInterruptHandler@cap_string
  2837  0020DA  6E4D               	movwf	sprintf@wh+1,c
  2838  0020DC  0EDF               	movlw	low STR_5
  2839  0020DE  6E4E               	movwf	sprintf@f,c
  2840  0020E0  0E06               	movlw	high STR_5
  2841  0020E2  6E4F               	movwf	sprintf@f+1,c
  2842  0020E4  C0A5  F050         	movff	_result,?_sprintf+4
  2843  0020E8  C0A6  F051         	movff	_result+1,?_sprintf+5
  2844  0020EC  C0A7  F052         	movff	_result+2,?_sprintf+6
  2845  0020F0  EC34  F016         	call	_sprintf	;wreg free
  2846  0020F4                     i2l438:
  2847                           
  2848                           ;tmr1.c: 175: }
  2849                           ;tmr1.c: 177: sprintf(range_string, "Range %d (%d)   ", range, auto_range);
  2850  0020F4  0E77               	movlw	low TMR1_DefaultInterruptHandler@range_string
  2851  0020F6  6E4C               	movwf	sprintf@wh,c
  2852  0020F8  0E00               	movlw	high TMR1_DefaultInterruptHandler@range_string
  2853  0020FA  6E4D               	movwf	sprintf@wh+1,c
  2854  0020FC  0EB8               	movlw	low STR_6
  2855  0020FE  6E4E               	movwf	sprintf@f,c
  2856  002100  0E06               	movlw	high STR_6
  2857  002102  6E4F               	movwf	sprintf@f+1,c
  2858  002104  C05D  F050         	movff	_range,?_sprintf+4
  2859  002108  6A51               	clrf	?_sprintf+5,c
  2860  00210A  C05C  F052         	movff	_auto_range,?_sprintf+6
  2861  00210E  6A53               	clrf	?_sprintf+7,c
  2862  002110  EC34  F016         	call	_sprintf	;wreg free
  2863                           
  2864                           ;tmr1.c: 179: lcd_sendStringToPos(1, 1, cap_string);
  2865  002114  0E01               	movlw	1
  2866  002116  6E09               	movwf	lcd_sendStringToPos@y,c
  2867  002118  0E87               	movlw	low TMR1_DefaultInterruptHandler@cap_string
  2868  00211A  6E0A               	movwf	lcd_sendStringToPos@charString,c
  2869  00211C  0E00               	movlw	high TMR1_DefaultInterruptHandler@cap_string
  2870  00211E  6E0B               	movwf	lcd_sendStringToPos@charString+1,c
  2871  002120  0E01               	movlw	1
  2872  002122  EC1F  F018         	call	_lcd_sendStringToPos
  2873                           
  2874                           ;tmr1.c: 180: lcd_sendStringToPos(1, 2, range_string);
  2875  002126  0E02               	movlw	2
  2876  002128  6E09               	movwf	lcd_sendStringToPos@y,c
  2877  00212A  0E77               	movlw	low TMR1_DefaultInterruptHandler@range_string
  2878  00212C  6E0A               	movwf	lcd_sendStringToPos@charString,c
  2879  00212E  0E00               	movlw	high TMR1_DefaultInterruptHandler@range_string
  2880  002130  6E0B               	movwf	lcd_sendStringToPos@charString+1,c
  2881  002132  0E01               	movlw	1
  2882  002134  EC1F  F018         	call	_lcd_sendStringToPos
  2883                           
  2884                           ;tmr1.c: 183: (INTCONbits.INT0IE = 1);
  2885  002138  88F2               	bsf	intcon,4,c	;volatile
  2886                           
  2887                           ;tmr1.c: 184: TMR0_StartTimer();
  2888  00213A  EC6C  F018         	call	i2_TMR0_StartTimer	;wreg free
  2889                           
  2890                           ;tmr1.c: 185: do { LATCbits.LATC7 = 0; } while(0);
  2891  00213E  9E8B               	bcf	3979,7,c	;volatile
  2892  002140  0012               	return	
  2893  002142                     __end_of_TMR1_DefaultInterruptHandler:
  2894                           	opt stack 0
  2895                           tosu	equ	0xFFF
  2896                           tosh	equ	0xFFE
  2897                           tosl	equ	0xFFD
  2898                           pclatu	equ	0xFFB
  2899                           pclath	equ	0xFFA
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           prodh	equ	0xFF4
  2905                           prodl	equ	0xFF3
  2906                           intcon	equ	0xFF2
  2907                           intcon2	equ	0xFF1
  2908                           intcon3	equ	0xFF0
  2909                           postinc0	equ	0xFEE
  2910                           fsr0h	equ	0xFEA
  2911                           fsr0l	equ	0xFE9
  2912                           wreg	equ	0xFE8
  2913                           fsr1h	equ	0xFE2
  2914                           fsr1l	equ	0xFE1
  2915                           fsr2h	equ	0xFDA
  2916                           fsr2l	equ	0xFD9
  2917                           status	equ	0xFD8
  2918                           
  2919 ;; *************** function _sprintf *****************
  2920 ;; Defined at:
  2921 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  wh              2   75[COMRAM] PTR unsigned char 
  2924 ;;		 -> ftoa@buf(17), TMR1_DefaultInterruptHandler@range_string(16), TMR1_DefaultInterruptHandler@cap_string(16), 
  2925 ;;  f               2   77[COMRAM] PTR const unsigned char 
  2926 ;;		 -> STR_7(11), STR_6(17), STR_5(11), STR_4(17), 
  2927 ;;		 -> STR_3(11), STR_2(11), 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  pb              4   85[COMRAM] struct __prbuf
  2930 ;;  ap              2   83[COMRAM] PTR void [1]
  2931 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  2   75[COMRAM] int 
  2934 ;; Registers used:
  2935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2941 ;;      Params:         8       0       0       0       0       0       0
  2942 ;;      Locals:         6       0       0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0
  2944 ;;      Totals:        14       0       0       0       0       0       0
  2945 ;;Total ram usage:       14 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    4
  2948 ;; This function calls:
  2949 ;;		__doprnt
  2950 ;; This function is called by:
  2951 ;;		_TMR1_DefaultInterruptHandler
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text20
  2956  002C68                     __ptext20:
  2957                           	opt stack 0
  2958  002C68                     _sprintf:
  2959                           	opt stack 20
  2960                           
  2961                           ;incstack = 0
  2962  002C68  C04C  F056         	movff	sprintf@wh,sprintf@pb
  2963  002C6C  C04D  F057         	movff	sprintf@wh+1,sprintf@pb+1
  2964  002C70  0E00               	movlw	0
  2965  002C72  6E58               	movwf	sprintf@pb+2,c
  2966  002C74  0E00               	movlw	0
  2967  002C76  6E59               	movwf	sprintf@pb+3,c
  2968  002C78  0E50               	movlw	low (?_sprintf+4)
  2969  002C7A  6E54               	movwf	sprintf@ap,c
  2970  002C7C  0E00               	movlw	high (?_sprintf+4)
  2971  002C7E  6E55               	movwf	sprintf@ap+1,c
  2972  002C80  0E56               	movlw	low sprintf@pb
  2973  002C82  6E40               	movwf	__doprnt@pb,c
  2974  002C84  0E00               	movlw	high sprintf@pb
  2975  002C86  6E41               	movwf	__doprnt@pb+1,c
  2976  002C88  C04E  F042         	movff	sprintf@f,__doprnt@f
  2977  002C8C  C04F  F043         	movff	sprintf@f+1,__doprnt@f+1
  2978  002C90  0E54               	movlw	low sprintf@ap
  2979  002C92  6E44               	movwf	__doprnt@ap,c
  2980  002C94  0E00               	movlw	high sprintf@ap
  2981  002C96  6E45               	movwf	__doprnt@ap+1,c
  2982  002C98  EC7B  F003         	call	__doprnt	;wreg free
  2983  002C9C  C056  FFD9         	movff	sprintf@pb,fsr2l
  2984  002CA0  C057  FFDA         	movff	sprintf@pb+1,fsr2h
  2985  002CA4  0E00               	movlw	0
  2986  002CA6  6EDF               	movwf	indf2,c
  2987  002CA8  0012               	return	
  2988  002CAA                     __end_of_sprintf:
  2989                           	opt stack 0
  2990                           tosu	equ	0xFFF
  2991                           tosh	equ	0xFFE
  2992                           tosl	equ	0xFFD
  2993                           pclatu	equ	0xFFB
  2994                           pclath	equ	0xFFA
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           intcon	equ	0xFF2
  3002                           intcon2	equ	0xFF1
  3003                           intcon3	equ	0xFF0
  3004                           postinc0	equ	0xFEE
  3005                           fsr0h	equ	0xFEA
  3006                           fsr0l	equ	0xFE9
  3007                           wreg	equ	0xFE8
  3008                           fsr1h	equ	0xFE2
  3009                           fsr1l	equ	0xFE1
  3010                           indf2	equ	0xFDF
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _lcd_sendStringToPos *****************
  3016 ;; Defined at:
  3017 ;;		line 81 in file "lcd.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  x               1    wreg     unsigned char 
  3020 ;;  y               1    8[COMRAM] unsigned char 
  3021 ;;  charString      2    9[COMRAM] PTR const unsigned char 
  3022 ;;		 -> TMR1_DefaultInterruptHandler@range_string(16), TMR1_DefaultInterruptHandler@cap_string(16), 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  x               1   11[COMRAM] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3034 ;;      Params:         3       0       0       0       0       0       0
  3035 ;;      Locals:         1       0       0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0
  3037 ;;      Totals:         4       0       0       0       0       0       0
  3038 ;;Total ram usage:        4 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    3
  3041 ;; This function calls:
  3042 ;;		_lcd_sendString
  3043 ;;		_lcd_setPosition
  3044 ;; This function is called by:
  3045 ;;		_TMR1_DefaultInterruptHandler
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text21
  3050  00303E                     __ptext21:
  3051                           	opt stack 0
  3052  00303E                     _lcd_sendStringToPos:
  3053                           	opt stack 21
  3054                           
  3055                           ;incstack = 0
  3056                           ;lcd_sendStringToPos@x stored from wreg
  3057  00303E  6E0C               	movwf	lcd_sendStringToPos@x,c
  3058                           
  3059                           ;lcd.c: 83: lcd_setPosition(x, y);
  3060  003040  C009  F004         	movff	lcd_sendStringToPos@y,lcd_setPosition@y
  3061  003044  500C               	movf	lcd_sendStringToPos@x,w,c
  3062  003046  EC9E  F015         	call	_lcd_setPosition
  3063                           
  3064                           ;lcd.c: 84: lcd_sendString(charString);
  3065  00304A  C00A  F005         	movff	lcd_sendStringToPos@charString,lcd_sendString@a
  3066  00304E  C00B  F006         	movff	lcd_sendStringToPos@charString+1,lcd_sendString@a+1
  3067  003052  EC06  F017         	call	_lcd_sendString	;wreg free
  3068  003056  0012               	return		;funcret
  3069  003058                     __end_of_lcd_sendStringToPos:
  3070                           	opt stack 0
  3071                           tosu	equ	0xFFF
  3072                           tosh	equ	0xFFE
  3073                           tosl	equ	0xFFD
  3074                           pclatu	equ	0xFFB
  3075                           pclath	equ	0xFFA
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           intcon2	equ	0xFF1
  3084                           intcon3	equ	0xFF0
  3085                           postinc0	equ	0xFEE
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           fsr1h	equ	0xFE2
  3090                           fsr1l	equ	0xFE1
  3091                           indf2	equ	0xFDF
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _lcd_setPosition *****************
  3097 ;; Defined at:
  3098 ;;		line 18 in file "lcd.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  x               1    wreg     unsigned char 
  3101 ;;  y               1    3[COMRAM] unsigned char 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  x               1    4[COMRAM] unsigned char 
  3104 ;;  temp            1    7[COMRAM] unsigned char 
  3105 ;;  j               1    6[COMRAM] unsigned char 
  3106 ;;  i               1    5[COMRAM] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3116 ;;      Params:         1       0       0       0       0       0       0
  3117 ;;      Locals:         4       0       0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0
  3119 ;;      Totals:         5       0       0       0       0       0       0
  3120 ;;Total ram usage:        5 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    2
  3123 ;; This function calls:
  3124 ;;		i2_lcd_sendCommand
  3125 ;; This function is called by:
  3126 ;;		_lcd_sendStringToPos
  3127 ;;		_lcd_sendIntToPos
  3128 ;;		_lcd_sendFloatToPos
  3129 ;;		_lcd_sendUIntToPos
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text22
  3134  002B3C                     __ptext22:
  3135                           	opt stack 0
  3136  002B3C                     _lcd_setPosition:
  3137                           	opt stack 21
  3138                           
  3139                           ;incstack = 0
  3140                           ;lcd_setPosition@x stored from wreg
  3141  002B3C  6E05               	movwf	lcd_setPosition@x,c
  3142                           
  3143                           ;lcd.c: 20: unsigned char temp, i, j;
  3144                           ;lcd.c: 21: if(y == 1)
  3145  002B3E  0404               	decf	lcd_setPosition@y,w,c
  3146  002B40  A4D8               	btfss	status,2,c
  3147  002B42  D010               	goto	i2l3332
  3148                           
  3149                           ;lcd.c: 22: {
  3150                           ;lcd.c: 23: temp = 0x80 + x - 1;
  3151  002B44  5005               	movf	lcd_setPosition@x,w,c
  3152  002B46  0F7F               	addlw	127
  3153  002B48  6E08               	movwf	lcd_setPosition@temp,c
  3154                           
  3155                           ;lcd.c: 24: i = temp>>4;
  3156  002B4A  3808               	swapf	lcd_setPosition@temp,w,c
  3157  002B4C  0B0F               	andlw	15
  3158  002B4E  6E06               	movwf	lcd_setPosition@i,c
  3159                           
  3160                           ;lcd.c: 25: j = temp & 0x0F;
  3161  002B50  5008               	movf	lcd_setPosition@temp,w,c
  3162  002B52  0B0F               	andlw	15
  3163  002B54  6E07               	movwf	lcd_setPosition@j,c
  3164                           
  3165                           ;lcd.c: 26: lcd_sendCommand(i);
  3166  002B56  5006               	movf	lcd_setPosition@i,w,c
  3167  002B58  ECE2  F017         	call	i2_lcd_sendCommand
  3168                           
  3169                           ;lcd.c: 27: lcd_sendCommand(j);
  3170  002B5C  5007               	movf	lcd_setPosition@j,w,c
  3171  002B5E  ECE2  F017         	call	i2_lcd_sendCommand
  3172                           
  3173                           ;lcd.c: 28: }
  3174  002B62  0012               	return	
  3175  002B64                     i2l3332:
  3176                           
  3177                           ;lcd.c: 29: else if(y == 2)
  3178  002B64  0E02               	movlw	2
  3179  002B66  1804               	xorwf	lcd_setPosition@y,w,c
  3180  002B68  A4D8               	btfss	status,2,c
  3181  002B6A  0012               	return	
  3182                           
  3183                           ;lcd.c: 30: {
  3184                           ;lcd.c: 31: temp = 0xC0 + x - 1;
  3185  002B6C  5005               	movf	lcd_setPosition@x,w,c
  3186  002B6E  0FBF               	addlw	191
  3187  002B70  6E08               	movwf	lcd_setPosition@temp,c
  3188                           
  3189                           ;lcd.c: 32: i = temp>>4;
  3190  002B72  3808               	swapf	lcd_setPosition@temp,w,c
  3191  002B74  0B0F               	andlw	15
  3192  002B76  6E06               	movwf	lcd_setPosition@i,c
  3193                           
  3194                           ;lcd.c: 33: j = temp & 0x0F;
  3195  002B78  5008               	movf	lcd_setPosition@temp,w,c
  3196  002B7A  0B0F               	andlw	15
  3197  002B7C  6E07               	movwf	lcd_setPosition@j,c
  3198                           
  3199                           ;lcd.c: 34: lcd_sendCommand(i);
  3200  002B7E  5006               	movf	lcd_setPosition@i,w,c
  3201  002B80  ECE2  F017         	call	i2_lcd_sendCommand
  3202                           
  3203                           ;lcd.c: 35: lcd_sendCommand(j);
  3204  002B84  5007               	movf	lcd_setPosition@j,w,c
  3205  002B86  ECE2  F017         	call	i2_lcd_sendCommand
  3206  002B8A  0012               	return	
  3207  002B8C                     __end_of_lcd_setPosition:
  3208                           	opt stack 0
  3209                           tosu	equ	0xFFF
  3210                           tosh	equ	0xFFE
  3211                           tosl	equ	0xFFD
  3212                           pclatu	equ	0xFFB
  3213                           pclath	equ	0xFFA
  3214                           tblptru	equ	0xFF8
  3215                           tblptrh	equ	0xFF7
  3216                           tblptrl	equ	0xFF6
  3217                           tablat	equ	0xFF5
  3218                           prodh	equ	0xFF4
  3219                           prodl	equ	0xFF3
  3220                           intcon	equ	0xFF2
  3221                           intcon2	equ	0xFF1
  3222                           intcon3	equ	0xFF0
  3223                           postinc0	equ	0xFEE
  3224                           fsr0h	equ	0xFEA
  3225                           fsr0l	equ	0xFE9
  3226                           wreg	equ	0xFE8
  3227                           fsr1h	equ	0xFE2
  3228                           fsr1l	equ	0xFE1
  3229                           indf2	equ	0xFDF
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function i2_lcd_sendCommand *****************
  3235 ;; Defined at:
  3236 ;;		line 3 in file "lcd.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  a               1    wreg     unsigned char 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  a               1    2[COMRAM] unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3250 ;;      Params:         0       0       0       0       0       0       0
  3251 ;;      Locals:         1       0       0       0       0       0       0
  3252 ;;      Temps:          1       0       0       0       0       0       0
  3253 ;;      Totals:         2       0       0       0       0       0       0
  3254 ;;Total ram usage:        2 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    1
  3257 ;; This function calls:
  3258 ;;		i2__lcd_Port
  3259 ;; This function is called by:
  3260 ;;		_lcd_setPosition
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text23
  3265  002FC4                     __ptext23:
  3266                           	opt stack 0
  3267  002FC4                     i2_lcd_sendCommand:
  3268                           	opt stack 21
  3269                           
  3270                           ;incstack = 0
  3271                           ;i2lcd_sendCommand@a stored from wreg
  3272  002FC4  6E03               	movwf	i2lcd_sendCommand@a,c
  3273                           
  3274                           ;lcd.c: 5: LATAbits.LA5 = 0;
  3275  002FC6  9A89               	bcf	3977,5,c	;volatile
  3276                           
  3277                           ;lcd.c: 6: _lcd_Port(a);
  3278  002FC8  5003               	movf	i2lcd_sendCommand@a,w,c
  3279  002FCA  EC82  F017         	call	i2__lcd_Port
  3280                           
  3281                           ;lcd.c: 7: LATAbits.LA4 = 1;
  3282  002FCE  8889               	bsf	3977,4,c	;volatile
  3283                           
  3284                           ;lcd.c: 8: _delay((unsigned long)((4)*(16000000UL/4000.0)));
  3285  002FD0  0E15               	movlw	21
  3286  002FD2  6E02               	movwf	??i2_lcd_sendCommand& (0+255),c
  3287  002FD4  0EC6               	movlw	198
  3288  002FD6                     i2u460_47:
  3289  002FD6  2EE8               	decfsz	wreg,f,c
  3290  002FD8  D7FE               	bra	i2u460_47
  3291  002FDA  2E02               	decfsz	??i2_lcd_sendCommand& (0+255),f,c
  3292  002FDC  D7FC               	bra	i2u460_47
  3293  002FDE  D000               	nop2	
  3294                           
  3295                           ;lcd.c: 9: LATAbits.LA4 = 0;
  3296  002FE0  9889               	bcf	3977,4,c	;volatile
  3297  002FE2  0012               	return		;funcret
  3298  002FE4                     __end_ofi2_lcd_sendCommand:
  3299                           	opt stack 0
  3300                           tosu	equ	0xFFF
  3301                           tosh	equ	0xFFE
  3302                           tosl	equ	0xFFD
  3303                           pclatu	equ	0xFFB
  3304                           pclath	equ	0xFFA
  3305                           tblptru	equ	0xFF8
  3306                           tblptrh	equ	0xFF7
  3307                           tblptrl	equ	0xFF6
  3308                           tablat	equ	0xFF5
  3309                           prodh	equ	0xFF4
  3310                           prodl	equ	0xFF3
  3311                           intcon	equ	0xFF2
  3312                           intcon2	equ	0xFF1
  3313                           intcon3	equ	0xFF0
  3314                           postinc0	equ	0xFEE
  3315                           fsr0h	equ	0xFEA
  3316                           fsr0l	equ	0xFE9
  3317                           wreg	equ	0xFE8
  3318                           fsr1h	equ	0xFE2
  3319                           fsr1l	equ	0xFE1
  3320                           indf2	equ	0xFDF
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function _lcd_sendString *****************
  3326 ;; Defined at:
  3327 ;;		line 74 in file "lcd.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  a               2    4[COMRAM] PTR const unsigned char 
  3330 ;;		 -> ftoa@buf(17), TMR1_DefaultInterruptHandler@range_string(16), TMR1_DefaultInterruptHandler@cap_string(16), lcd_se
      +ndUInt@displayString(10), 
  3331 ;;		 -> lcd_sendInt@displayString(10), 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  i               2    6[COMRAM] int 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3343 ;;      Params:         2       0       0       0       0       0       0
  3344 ;;      Locals:         2       0       0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0
  3346 ;;      Totals:         4       0       0       0       0       0       0
  3347 ;;Total ram usage:        4 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		_lcd_sendChar
  3352 ;; This function is called by:
  3353 ;;		_lcd_sendStringToPos
  3354 ;;		_lcd_sendInt
  3355 ;;		_lcd_sendFloat
  3356 ;;		_lcd_sendUInt
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text24
  3361  002E0C                     __ptext24:
  3362                           	opt stack 0
  3363  002E0C                     _lcd_sendString:
  3364                           	opt stack 21
  3365                           
  3366                           ;lcd.c: 76: int i;
  3367                           ;lcd.c: 77: for(i=0;a[i]!='\0';i++)
  3368                           
  3369                           ;incstack = 0
  3370  002E0C  0E00               	movlw	0
  3371  002E0E  6E08               	movwf	lcd_sendString@i+1,c
  3372  002E10  0E00               	movlw	0
  3373  002E12  6E07               	movwf	lcd_sendString@i,c
  3374  002E14  D00B               	goto	i2l3346
  3375  002E16                     i2l3342:
  3376                           
  3377                           ;lcd.c: 78: lcd_sendChar(a[i]);
  3378  002E16  5007               	movf	lcd_sendString@i,w,c
  3379  002E18  2405               	addwf	lcd_sendString@a,w,c
  3380  002E1A  6ED9               	movwf	fsr2l,c
  3381  002E1C  5008               	movf	lcd_sendString@i+1,w,c
  3382  002E1E  2006               	addwfc	lcd_sendString@a+1,w,c
  3383  002E20  6EDA               	movwf	fsr2h,c
  3384  002E22  50DF               	movf	indf2,w,c
  3385  002E24  ECB4  F016         	call	_lcd_sendChar
  3386  002E28  4A07               	infsnz	lcd_sendString@i,f,c
  3387  002E2A  2A08               	incf	lcd_sendString@i+1,f,c
  3388  002E2C                     i2l3346:
  3389  002E2C  5007               	movf	lcd_sendString@i,w,c
  3390  002E2E  2405               	addwf	lcd_sendString@a,w,c
  3391  002E30  6ED9               	movwf	fsr2l,c
  3392  002E32  5008               	movf	lcd_sendString@i+1,w,c
  3393  002E34  2006               	addwfc	lcd_sendString@a+1,w,c
  3394  002E36  6EDA               	movwf	fsr2h,c
  3395  002E38  50DF               	movf	indf2,w,c
  3396  002E3A  B4D8               	btfsc	status,2,c
  3397  002E3C  0012               	return	
  3398  002E3E  D7EB               	goto	i2l3342
  3399  002E40                     __end_of_lcd_sendString:
  3400                           	opt stack 0
  3401                           tosu	equ	0xFFF
  3402                           tosh	equ	0xFFE
  3403                           tosl	equ	0xFFD
  3404                           pclatu	equ	0xFFB
  3405                           pclath	equ	0xFFA
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           intcon2	equ	0xFF1
  3414                           intcon3	equ	0xFF0
  3415                           postinc0	equ	0xFEE
  3416                           fsr0h	equ	0xFEA
  3417                           fsr0l	equ	0xFE9
  3418                           wreg	equ	0xFE8
  3419                           fsr1h	equ	0xFE2
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _lcd_sendChar *****************
  3427 ;; Defined at:
  3428 ;;		line 58 in file "lcd.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  a               1    wreg     const unsigned char 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  a               1    3[COMRAM] const unsigned char 
  3433 ;;  y               1    2[COMRAM] unsigned char 
  3434 ;;  temp            1    1[COMRAM] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3444 ;;      Params:         0       0       0       0       0       0       0
  3445 ;;      Locals:         3       0       0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0
  3447 ;;      Totals:         3       0       0       0       0       0       0
  3448 ;;Total ram usage:        3 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    1
  3451 ;; This function calls:
  3452 ;;		i2__lcd_Port
  3453 ;; This function is called by:
  3454 ;;		_lcd_sendString
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text25
  3459  002D68                     __ptext25:
  3460                           	opt stack 0
  3461  002D68                     _lcd_sendChar:
  3462                           	opt stack 21
  3463                           
  3464                           ;incstack = 0
  3465                           ;lcd_sendChar@a stored from wreg
  3466  002D68  6E04               	movwf	lcd_sendChar@a,c
  3467                           
  3468                           ;lcd.c: 60: char temp,y;
  3469                           ;lcd.c: 61: temp = a&0x0F;
  3470  002D6A  5004               	movf	lcd_sendChar@a,w,c
  3471  002D6C  0B0F               	andlw	15
  3472  002D6E  6E02               	movwf	lcd_sendChar@temp,c
  3473                           
  3474                           ;lcd.c: 62: y = a&0xF0;
  3475  002D70  5004               	movf	lcd_sendChar@a,w,c
  3476  002D72  0BF0               	andlw	240
  3477  002D74  6E03               	movwf	lcd_sendChar@y,c
  3478                           
  3479                           ;lcd.c: 63: LATAbits.LA5 = 1;
  3480  002D76  8A89               	bsf	3977,5,c	;volatile
  3481                           
  3482                           ;lcd.c: 64: _lcd_Port(y>>4);
  3483  002D78  3803               	swapf	lcd_sendChar@y,w,c
  3484  002D7A  0B0F               	andlw	15
  3485  002D7C  EC82  F017         	call	i2__lcd_Port
  3486                           
  3487                           ;lcd.c: 65: LATAbits.LA4 = 1;
  3488  002D80  8889               	bsf	3977,4,c	;volatile
  3489                           
  3490                           ;lcd.c: 66: _delay((unsigned long)((40)*(16000000UL/4000000.0)));
  3491  002D82  0E35               	movlw	53
  3492  002D84                     i2u461_47:
  3493  002D84  2EE8               	decfsz	wreg,f,c
  3494  002D86  D7FE               	bra	i2u461_47
  3495  002D88  F000               	nop	
  3496                           
  3497                           ;lcd.c: 67: LATAbits.LA4 = 0;
  3498  002D8A  9889               	bcf	3977,4,c	;volatile
  3499                           
  3500                           ;lcd.c: 68: _lcd_Port(temp);
  3501  002D8C  5002               	movf	lcd_sendChar@temp,w,c
  3502  002D8E  EC82  F017         	call	i2__lcd_Port
  3503                           
  3504                           ;lcd.c: 69: LATAbits.LA4 = 1;
  3505  002D92  8889               	bsf	3977,4,c	;volatile
  3506                           
  3507                           ;lcd.c: 70: _delay((unsigned long)((40)*(16000000UL/4000000.0)));
  3508  002D94  0E35               	movlw	53
  3509  002D96                     i2u462_47:
  3510  002D96  2EE8               	decfsz	wreg,f,c
  3511  002D98  D7FE               	bra	i2u462_47
  3512  002D9A  F000               	nop	
  3513                           
  3514                           ;lcd.c: 71: LATAbits.LA4 = 0;
  3515  002D9C  9889               	bcf	3977,4,c	;volatile
  3516  002D9E  0012               	return		;funcret
  3517  002DA0                     __end_of_lcd_sendChar:
  3518                           	opt stack 0
  3519                           tosu	equ	0xFFF
  3520                           tosh	equ	0xFFE
  3521                           tosl	equ	0xFFD
  3522                           pclatu	equ	0xFFB
  3523                           pclath	equ	0xFFA
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           intcon2	equ	0xFF1
  3532                           intcon3	equ	0xFF0
  3533                           postinc0	equ	0xFEE
  3534                           fsr0h	equ	0xFEA
  3535                           fsr0l	equ	0xFE9
  3536                           wreg	equ	0xFE8
  3537                           fsr1h	equ	0xFE2
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           fsr2h	equ	0xFDA
  3541                           fsr2l	equ	0xFD9
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function i2__lcd_Port *****************
  3545 ;; Defined at:
  3546 ;;		line 139 in file "lcd.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  a               1    wreg     unsigned char 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  a               1    0[COMRAM] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3560 ;;      Params:         0       0       0       0       0       0       0
  3561 ;;      Locals:         1       0       0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0
  3563 ;;      Totals:         1       0       0       0       0       0       0
  3564 ;;Total ram usage:        1 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_lcd_sendChar
  3570 ;;		i2_lcd_sendCommand
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text26
  3575  002F04                     __ptext26:
  3576                           	opt stack 0
  3577  002F04                     i2__lcd_Port:
  3578                           	opt stack 21
  3579                           
  3580                           ;incstack = 0
  3581                           ;i2__lcd_Port@a stored from wreg
  3582  002F04  6E01               	movwf	i2__lcd_Port@a,c
  3583                           
  3584                           ;lcd.c: 141: if(a & 1)
  3585  002F06  A001               	btfss	i2__lcd_Port@a,0,c
  3586  002F08  D002               	goto	i2l341
  3587                           
  3588                           ;lcd.c: 142: LATAbits.LA3 = 1;
  3589  002F0A  8689               	bsf	3977,3,c	;volatile
  3590  002F0C  D001               	goto	i2l2968
  3591  002F0E                     i2l341:
  3592                           
  3593                           ;lcd.c: 143: else
  3594                           ;lcd.c: 144: LATAbits.LA3 = 0;
  3595  002F0E  9689               	bcf	3977,3,c	;volatile
  3596  002F10                     i2l2968:
  3597                           
  3598                           ;lcd.c: 146: if(a & 2)
  3599  002F10  A201               	btfss	i2__lcd_Port@a,1,c
  3600  002F12  D002               	goto	i2l343
  3601                           
  3602                           ;lcd.c: 147: LATAbits.LA2 = 1;
  3603  002F14  8489               	bsf	3977,2,c	;volatile
  3604  002F16  D001               	goto	i2l2972
  3605  002F18                     i2l343:
  3606                           
  3607                           ;lcd.c: 148: else
  3608                           ;lcd.c: 149: LATAbits.LA2 = 0;
  3609  002F18  9489               	bcf	3977,2,c	;volatile
  3610  002F1A                     i2l2972:
  3611                           
  3612                           ;lcd.c: 151: if(a & 4)
  3613  002F1A  A401               	btfss	i2__lcd_Port@a,2,c
  3614  002F1C  D002               	goto	i2l345
  3615                           
  3616                           ;lcd.c: 152: LATAbits.LA1 = 1;
  3617  002F1E  8289               	bsf	3977,1,c	;volatile
  3618  002F20  D001               	goto	i2l2976
  3619  002F22                     i2l345:
  3620                           
  3621                           ;lcd.c: 153: else
  3622                           ;lcd.c: 154: LATAbits.LA1 = 0;
  3623  002F22  9289               	bcf	3977,1,c	;volatile
  3624  002F24                     i2l2976:
  3625                           
  3626                           ;lcd.c: 156: if(a & 8)
  3627  002F24  A601               	btfss	i2__lcd_Port@a,3,c
  3628  002F26  D002               	goto	i2l347
  3629                           
  3630                           ;lcd.c: 157: LATAbits.LA0 = 1;
  3631  002F28  8089               	bsf	3977,0,c	;volatile
  3632  002F2A  0012               	return	
  3633  002F2C                     i2l347:
  3634                           
  3635                           ;lcd.c: 158: else
  3636                           ;lcd.c: 159: LATAbits.LA0 = 0;
  3637  002F2C  9089               	bcf	3977,0,c	;volatile
  3638  002F2E  0012               	return	
  3639  002F30                     __end_ofi2__lcd_Port:
  3640                           	opt stack 0
  3641                           tosu	equ	0xFFF
  3642                           tosh	equ	0xFFE
  3643                           tosl	equ	0xFFD
  3644                           pclatu	equ	0xFFB
  3645                           pclath	equ	0xFFA
  3646                           tblptru	equ	0xFF8
  3647                           tblptrh	equ	0xFF7
  3648                           tblptrl	equ	0xFF6
  3649                           tablat	equ	0xFF5
  3650                           prodh	equ	0xFF4
  3651                           prodl	equ	0xFF3
  3652                           intcon	equ	0xFF2
  3653                           intcon2	equ	0xFF1
  3654                           intcon3	equ	0xFF0
  3655                           postinc0	equ	0xFEE
  3656                           fsr0h	equ	0xFEA
  3657                           fsr0l	equ	0xFE9
  3658                           wreg	equ	0xFE8
  3659                           fsr1h	equ	0xFE2
  3660                           fsr1l	equ	0xFE1
  3661                           indf2	equ	0xFDF
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function _TMR0_ISR *****************
  3667 ;; Defined at:
  3668 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3682 ;;      Params:         0       0       0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0
  3685 ;;      Totals:         0       0       0       0       0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    2
  3689 ;; This function calls:
  3690 ;;		Absolute function
  3691 ;;		_TMR0_DefaultInterruptHandler
  3692 ;; This function is called by:
  3693 ;;		_INTERRUPT_InterruptManager
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text27
  3698  002ED4                     __ptext27:
  3699                           	opt stack 0
  3700  002ED4                     _TMR0_ISR:
  3701                           	opt stack 24
  3702                           
  3703                           ;tmr0.c: 95: INTCONbits.TMR0IF = 0;
  3704                           
  3705                           ;incstack = 0
  3706  002ED4  94F2               	bcf	intcon,2,c	;volatile
  3707                           
  3708                           ;tmr0.c: 99: TMR0H = timer0ReloadVal >> 8;
  3709  002ED6  505B               	movf	_timer0ReloadVal+1,w,c	;volatile
  3710  002ED8  6ED7               	movwf	4055,c	;volatile
  3711                           
  3712                           ;tmr0.c: 100: TMR0L = (uint8_t) timer0ReloadVal;
  3713  002EDA  C05A  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  3714                           
  3715                           ;tmr0.c: 102: if(TMR0_InterruptHandler)
  3716  002EDE  0100               	movlb	0	; () banked
  3717  002EE0  51BC               	movf	_TMR0_InterruptHandler& (0+255),w,b
  3718  002EE2  0100               	movlb	0	; () banked
  3719  002EE4  11BD               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  3720  002EE6  B4D8               	btfsc	status,2,c
  3721  002EE8  0012               	return	
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;tmr0.c: 103: {
  3725                           ;tmr0.c: 104: TMR0_InterruptHandler();
  3726  002EEA  D801               	call	i2u442_48
  3727  002EEC  0012               	return	
  3728  002EEE                     i2u442_48:
  3729  002EEE  0005               	push	
  3730  002EF0  0100               	movlb	0	; () banked
  3731  002EF2  6EFA               	movwf	pclath,c
  3732  002EF4  51BC               	movf	_TMR0_InterruptHandler& (0+255),w,b
  3733  002EF6  6EFD               	movwf	tosl,c
  3734  002EF8  51BD               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  3735  002EFA  6EFE               	movwf	tosh,c
  3736  002EFC  50F8               	movf	tblptru,w,c
  3737  002EFE  6EFF               	movwf	tosu,c
  3738  002F00  50FA               	movf	pclath,w,c
  3739  002F02  0012               	return		;indir
  3740  002F04                     __end_of_TMR0_ISR:
  3741                           	opt stack 0
  3742                           tosu	equ	0xFFF
  3743                           tosh	equ	0xFFE
  3744                           tosl	equ	0xFFD
  3745                           pclatu	equ	0xFFB
  3746                           pclath	equ	0xFFA
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           prodh	equ	0xFF4
  3752                           prodl	equ	0xFF3
  3753                           intcon	equ	0xFF2
  3754                           intcon2	equ	0xFF1
  3755                           intcon3	equ	0xFF0
  3756                           postinc0	equ	0xFEE
  3757                           fsr0h	equ	0xFEA
  3758                           fsr0l	equ	0xFE9
  3759                           wreg	equ	0xFE8
  3760                           fsr1h	equ	0xFE2
  3761                           fsr1l	equ	0xFE1
  3762                           indf2	equ	0xFDF
  3763                           fsr2h	equ	0xFDA
  3764                           fsr2l	equ	0xFD9
  3765                           status	equ	0xFD8
  3766                           
  3767 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3768 ;; Defined at:
  3769 ;;		line 113 in file "mcc_generated_files/tmr0.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3783 ;;      Params:         0       0       0       0       0       0       0
  3784 ;;      Locals:         0       0       0       0       0       0       0
  3785 ;;      Temps:          1       0       0       0       0       0       0
  3786 ;;      Totals:         1       0       0       0       0       0       0
  3787 ;;Total ram usage:        1 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    1
  3790 ;; This function calls:
  3791 ;;		_SetRange
  3792 ;; This function is called by:
  3793 ;;		_TMR0_Initialize
  3794 ;;		_TMR0_ISR
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text28
  3799  002D2C                     __ptext28:
  3800                           	opt stack 0
  3801  002D2C                     _TMR0_DefaultInterruptHandler:
  3802                           	opt stack 24
  3803                           
  3804                           ;tmr0.c: 116: if (cal_mode == 0)
  3805                           
  3806                           ;incstack = 0
  3807  002D2C  505E               	movf	_cal_mode,w,c
  3808  002D2E  A4D8               	btfss	status,2,c
  3809  002D30  D00F               	goto	i2l185
  3810                           
  3811                           ;tmr0.c: 117: {
  3812                           ;tmr0.c: 119: do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  3813  002D32  AE8B               	btfss	3979,7,c	;volatile
  3814  002D34  D002               	goto	i2u424_40
  3815  002D36  0E01               	movlw	1
  3816  002D38  D001               	goto	i2u424_46
  3817  002D3A                     i2u424_40:
  3818  002D3A  0E00               	movlw	0
  3819  002D3C                     i2u424_46:
  3820  002D3C  0AFF               	xorlw	255
  3821  002D3E  6E0C               	movwf	??_TMR0_DefaultInterruptHandler& (0+255),c
  3822  002D40  320C               	rrcf	??_TMR0_DefaultInterruptHandler,f,c
  3823  002D42  320C               	rrcf	??_TMR0_DefaultInterruptHandler,f,c
  3824  002D44  508B               	movf	3979,w,c	;volatile
  3825  002D46  180C               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  3826  002D48  0B7F               	andlw	-129
  3827  002D4A  180C               	xorwf	??_TMR0_DefaultInterruptHandler,w,c
  3828  002D4C  6E8B               	movwf	3979,c	;volatile
  3829                           
  3830                           ;tmr0.c: 120: }
  3831  002D4E  D001               	goto	i2l3838
  3832  002D50                     i2l185:
  3833  002D50  9E8B               	bcf	3979,7,c	;volatile
  3834  002D52                     i2l3838:
  3835                           
  3836                           ;tmr0.c: 125: }
  3837                           ;tmr0.c: 128: if (auto_range == 1)
  3838  002D52  045C               	decf	_auto_range,w,c
  3839  002D54  A4D8               	btfss	status,2,c
  3840  002D56  0012               	return	
  3841                           
  3842                           ;tmr0.c: 129: {
  3843                           ;tmr0.c: 130: if (range < 5)
  3844  002D58  0E05               	movlw	5
  3845  002D5A  605D               	cpfslt	_range,c
  3846  002D5C  0012               	return	
  3847                           
  3848                           ;tmr0.c: 131: {
  3849                           ;tmr0.c: 132: range += 1;
  3850  002D5E  2A5D               	incf	_range,f,c
  3851                           
  3852                           ;tmr0.c: 133: SetRange(range);
  3853  002D60  505D               	movf	_range,w,c
  3854  002D62  EC16  F00F         	call	_SetRange
  3855  002D66  0012               	return	
  3856  002D68                     __end_of_TMR0_DefaultInterruptHandler:
  3857                           	opt stack 0
  3858                           tosu	equ	0xFFF
  3859                           tosh	equ	0xFFE
  3860                           tosl	equ	0xFFD
  3861                           pclatu	equ	0xFFB
  3862                           pclath	equ	0xFFA
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           intcon2	equ	0xFF1
  3871                           intcon3	equ	0xFF0
  3872                           postinc0	equ	0xFEE
  3873                           fsr0h	equ	0xFEA
  3874                           fsr0l	equ	0xFE9
  3875                           wreg	equ	0xFE8
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           indf2	equ	0xFDF
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _INT1_ISR *****************
  3884 ;; Defined at:
  3885 ;;		line 57 in file "mcc_generated_files/ext_int.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3899 ;;      Params:         0       0       0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0
  3902 ;;      Totals:         0       0       0       0       0       0       0
  3903 ;;Total ram usage:        0 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    5
  3906 ;; This function calls:
  3907 ;;		_SetRange
  3908 ;;		_printf
  3909 ;; This function is called by:
  3910 ;;		_INTERRUPT_InterruptManager
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text29
  3915  002BD8                     __ptext29:
  3916                           	opt stack 0
  3917  002BD8                     _INT1_ISR:
  3918                           	opt stack 21
  3919                           
  3920                           ;ext_int.c: 61: if (auto_range == 1)
  3921                           
  3922                           ;incstack = 0
  3923  002BD8  045C               	decf	_auto_range,w,c
  3924  002BDA  A4D8               	btfss	status,2,c
  3925  002BDC  D004               	goto	i2l3900
  3926                           
  3927                           ;ext_int.c: 62: {
  3928                           ;ext_int.c: 63: stored_range = range;
  3929  002BDE  C05D  F0AA         	movff	_range,_stored_range
  3930                           
  3931                           ;ext_int.c: 64: auto_range = 0;
  3932  002BE2  0E00               	movlw	0
  3933  002BE4  6E5C               	movwf	_auto_range,c
  3934  002BE6                     i2l3900:
  3935                           
  3936                           ;ext_int.c: 65: }
  3937                           ;ext_int.c: 68: if (range < 5)
  3938  002BE6  0E05               	movlw	5
  3939  002BE8  605D               	cpfslt	_range,c
  3940  002BEA  D002               	goto	i2l3904
  3941                           
  3942                           ;ext_int.c: 69: {
  3943                           ;ext_int.c: 70: range += 1;
  3944  002BEC  2A5D               	incf	_range,f,c
  3945                           
  3946                           ;ext_int.c: 71: }
  3947  002BEE  D002               	goto	i2l3906
  3948  002BF0                     i2l3904:
  3949                           
  3950                           ;ext_int.c: 72: else
  3951                           ;ext_int.c: 74: {
  3952                           ;ext_int.c: 75: range -= (5 - 2);
  3953  002BF0  0E03               	movlw	3
  3954  002BF2  5E5D               	subwf	_range,f,c
  3955  002BF4                     i2l3906:
  3956                           
  3957                           ;ext_int.c: 76: }
  3958                           ;ext_int.c: 80: if (auto_range == 0 && range == stored_range)
  3959  002BF4  505C               	movf	_auto_range,w,c
  3960  002BF6  A4D8               	btfss	status,2,c
  3961  002BF8  D007               	goto	i2l3912
  3962  002BFA  0100               	movlb	0	; () banked
  3963  002BFC  51AA               	movf	_stored_range& (0+255),w,b
  3964  002BFE  185D               	xorwf	_range,w,c
  3965  002C00  A4D8               	btfss	status,2,c
  3966  002C02  D002               	goto	i2l3912
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;ext_int.c: 81: {
  3970                           ;ext_int.c: 82: auto_range = 1;
  3971  002C04  0E01               	movlw	1
  3972  002C06  6E5C               	movwf	_auto_range,c
  3973  002C08                     i2l3912:
  3974                           
  3975                           ;ext_int.c: 83: }
  3976                           ;ext_int.c: 86: printf("\r\nSetting range = %d\r\n", range);
  3977  002C08  0E90               	movlw	low STR_1
  3978  002C0A  6E4C               	movwf	printf@f,c
  3979  002C0C  0E06               	movlw	high STR_1
  3980  002C0E  6E4D               	movwf	printf@f+1,c
  3981  002C10  C05D  F04E         	movff	_range,?_printf+2
  3982  002C14  6A4F               	clrf	?_printf+3,c
  3983  002C16  ECEB  F016         	call	_printf	;wreg free
  3984                           
  3985                           ;ext_int.c: 88: SetRange(range);
  3986  002C1A  505D               	movf	_range,w,c
  3987  002C1C  EC16  F00F         	call	_SetRange
  3988                           
  3989                           ;ext_int.c: 92: (INTCON3bits.INT1IF = 0);
  3990  002C20  90F0               	bcf	intcon3,0,c	;volatile
  3991  002C22  0012               	return		;funcret
  3992  002C24                     __end_of_INT1_ISR:
  3993                           	opt stack 0
  3994                           tosu	equ	0xFFF
  3995                           tosh	equ	0xFFE
  3996                           tosl	equ	0xFFD
  3997                           pclatu	equ	0xFFB
  3998                           pclath	equ	0xFFA
  3999                           tblptru	equ	0xFF8
  4000                           tblptrh	equ	0xFF7
  4001                           tblptrl	equ	0xFF6
  4002                           tablat	equ	0xFF5
  4003                           prodh	equ	0xFF4
  4004                           prodl	equ	0xFF3
  4005                           intcon	equ	0xFF2
  4006                           intcon2	equ	0xFF1
  4007                           intcon3	equ	0xFF0
  4008                           postinc0	equ	0xFEE
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _printf *****************
  4020 ;; Defined at:
  4021 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  f               2   75[COMRAM] PTR const unsigned char 
  4024 ;;		 -> STR_1(23), 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  pb              4   81[COMRAM] struct __prbuf
  4027 ;;  ap              2   79[COMRAM] PTR void [1]
  4028 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  2   75[COMRAM] int 
  4031 ;; Registers used:
  4032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4038 ;;      Params:         4       0       0       0       0       0       0
  4039 ;;      Locals:         6       0       0       0       0       0       0
  4040 ;;      Temps:          0       0       0       0       0       0       0
  4041 ;;      Totals:        10       0       0       0       0       0       0
  4042 ;;Total ram usage:       10 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    4
  4045 ;; This function calls:
  4046 ;;		__doprnt
  4047 ;; This function is called by:
  4048 ;;		_INT1_ISR
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text30
  4053  002DD6                     __ptext30:
  4054                           	opt stack 0
  4055  002DD6                     _printf:
  4056                           	opt stack 21
  4057                           
  4058                           ;incstack = 0
  4059  002DD6  0E00               	movlw	0
  4060  002DD8  6E52               	movwf	printf@pb,c
  4061  002DDA  0E00               	movlw	0
  4062  002DDC  6E53               	movwf	printf@pb+1,c
  4063  002DDE  0EB8               	movlw	low _putch
  4064  002DE0  6E54               	movwf	printf@pb+2,c
  4065  002DE2  0E30               	movlw	high _putch
  4066  002DE4  6E55               	movwf	printf@pb+3,c
  4067  002DE6  0E4E               	movlw	low (?_printf+2)
  4068  002DE8  6E50               	movwf	printf@ap,c
  4069  002DEA  0E00               	movlw	high (?_printf+2)
  4070  002DEC  6E51               	movwf	printf@ap+1,c
  4071                           
  4072                           ;	Return value of _printf is never used
  4073  002DEE  0E52               	movlw	low printf@pb
  4074  002DF0  6E40               	movwf	__doprnt@pb,c
  4075  002DF2  0E00               	movlw	high printf@pb
  4076  002DF4  6E41               	movwf	__doprnt@pb+1,c
  4077  002DF6  C04C  F042         	movff	printf@f,__doprnt@f
  4078  002DFA  C04D  F043         	movff	printf@f+1,__doprnt@f+1
  4079  002DFE  0E50               	movlw	low printf@ap
  4080  002E00  6E44               	movwf	__doprnt@ap,c
  4081  002E02  0E00               	movlw	high printf@ap
  4082  002E04  6E45               	movwf	__doprnt@ap+1,c
  4083  002E06  EC7B  F003         	call	__doprnt	;wreg free
  4084  002E0A  0012               	return	
  4085  002E0C                     __end_of_printf:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclatu	equ	0xFFB
  4091                           pclath	equ	0xFFA
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           intcon2	equ	0xFF1
  4100                           intcon3	equ	0xFF0
  4101                           postinc0	equ	0xFEE
  4102                           fsr0h	equ	0xFEA
  4103                           fsr0l	equ	0xFE9
  4104                           wreg	equ	0xFE8
  4105                           fsr1h	equ	0xFE2
  4106                           fsr1l	equ	0xFE1
  4107                           indf2	equ	0xFDF
  4108                           fsr2h	equ	0xFDA
  4109                           fsr2l	equ	0xFD9
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function __doprnt *****************
  4113 ;; Defined at:
  4114 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  pb              2   63[COMRAM] PTR struct __prbuf
  4117 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4118 ;;  f               2   65[COMRAM] PTR const unsigned char 
  4119 ;;		 -> STR_7(11), STR_6(17), STR_5(11), STR_4(17), 
  4120 ;;		 -> STR_3(11), STR_2(11), STR_1(23), 
  4121 ;;  ap              2   67[COMRAM] PTR PTR void 
  4122 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  tmpval          4   13[BANK0 ] struct .
  4125 ;;  val             4    9[BANK0 ] unsigned long 
  4126 ;;  fval            3   17[BANK0 ] unsigned long 
  4127 ;;  cp              3    0        PTR const unsigned char 
  4128 ;;  prec            2   20[BANK0 ] int 
  4129 ;;  exp             2    7[BANK0 ] int 
  4130 ;;  flag            2    5[BANK0 ] unsigned short 
  4131 ;;  width           2    3[BANK0 ] int 
  4132 ;;  len             2    0        unsigned int 
  4133 ;;  c               1   22[BANK0 ] char 
  4134 ;;  d               1    0        unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  2   63[COMRAM] int 
  4137 ;; Registers used:
  4138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4144 ;;      Params:         6       0       0       0       0       0       0
  4145 ;;      Locals:         0      23       0       0       0       0       0
  4146 ;;      Temps:          6       0       0       0       0       0       0
  4147 ;;      Totals:        12      23       0       0       0       0       0
  4148 ;;Total ram usage:       35 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    3
  4151 ;; This function calls:
  4152 ;;		Absolute function
  4153 ;;		___awdiv
  4154 ;;		___ftadd
  4155 ;;		___ftge
  4156 ;;		___ftmul
  4157 ;;		___ftneg
  4158 ;;		___ftsub
  4159 ;;		___fttol
  4160 ;;		___lldiv
  4161 ;;		___llmod
  4162 ;;		___lltoft
  4163 ;;		___wmul
  4164 ;;		__div_to_l_
  4165 ;;		__tdiv_to_l_
  4166 ;;		_fround
  4167 ;;		_isdigit
  4168 ;;		_putch
  4169 ;;		_scale
  4170 ;; This function is called by:
  4171 ;;		_printf
  4172 ;;		_sprintf
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text31
  4177  0006F6                     __ptext31:
  4178                           	opt stack 0
  4179  0006F6                     __doprnt:
  4180                           	opt stack 20
  4181                           
  4182                           ;doprnt.c: 499: signed char c;
  4183                           ;doprnt.c: 501: int width;
  4184                           ;doprnt.c: 504: int prec;
  4185                           ;doprnt.c: 508: unsigned short flag;
  4186                           ;doprnt.c: 515: char d;
  4187                           ;doprnt.c: 516: double fval;
  4188                           ;doprnt.c: 517: int exp;
  4189                           ;doprnt.c: 523: union {
  4190                           ;doprnt.c: 524: unsigned long vd;
  4191                           ;doprnt.c: 525: double integ;
  4192                           ;doprnt.c: 526: } tmpval;
  4193                           ;doprnt.c: 528: unsigned long val;
  4194                           ;doprnt.c: 529: unsigned len;
  4195                           ;doprnt.c: 530: const char * cp;
  4196                           ;doprnt.c: 536: while(c = *f++) {
  4197                           
  4198                           ;incstack = 0
  4199  0006F6  EF12  F00B         	goto	i2l3684
  4200  0006FA                     i2l3350:
  4201                           
  4202                           ;doprnt.c: 538: if(c != '%')
  4203  0006FA  0E25               	movlw	37
  4204  0006FC  0100               	movlb	0	; () banked
  4205  0006FE  1976               	xorwf	__doprnt@c& (0+255),w,b
  4206  000700  B4D8               	btfsc	status,2,c
  4207  000702  D036               	goto	i2l3360
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;doprnt.c: 540: {
  4211                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4212  000704  EE20 F002          	lfsr	2,2
  4213  000708  5040               	movf	__doprnt@pb,w,c
  4214  00070A  26D9               	addwf	fsr2l,f,c
  4215  00070C  5041               	movf	__doprnt@pb+1,w,c
  4216  00070E  22DA               	addwfc	fsr2h,f,c
  4217  000710  50DE               	movf	postinc2,w,c
  4218  000712  10DE               	iorwf	postinc2,w,c
  4219  000714  B4D8               	btfsc	status,2,c
  4220  000716  D015               	goto	i2l3356
  4221                           
  4222                           ; BSR set to: 0
  4223  000718  EE20 F002          	lfsr	2,2
  4224  00071C  5040               	movf	__doprnt@pb,w,c
  4225  00071E  26D9               	addwf	fsr2l,f,c
  4226  000720  5041               	movf	__doprnt@pb+1,w,c
  4227  000722  22DA               	addwfc	fsr2h,f,c
  4228  000724  D802               	call	i2u330_48
  4229  000726  EF12  F00B         	goto	i2l3684
  4230  00072A                     i2u330_48:
  4231  00072A  0005               	push	
  4232  00072C  6EFA               	movwf	pclath,c
  4233  00072E  50DE               	movf	postinc2,w,c
  4234  000730  6EFD               	movwf	tosl,c
  4235  000732  50DE               	movf	postinc2,w,c
  4236  000734  6EFE               	movwf	tosh,c
  4237  000736  50F8               	movf	tblptru,w,c
  4238  000738  6EFF               	movwf	tosu,c
  4239  00073A  50FA               	movf	pclath,w,c
  4240  00073C  0100               	movlb	0	; () banked
  4241  00073E  5176               	movf	__doprnt@c& (0+255),w,b
  4242  000740  0012               	return		;indir
  4243  000742                     i2l3356:
  4244  000742  C040  FFD9         	movff	__doprnt@pb,fsr2l
  4245  000746  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  4246  00074A  CFDE F046          	movff	postinc2,??__doprnt
  4247  00074E  CFDD F047          	movff	postdec2,??__doprnt+1
  4248  000752  C046  FFD9         	movff	??__doprnt,fsr2l
  4249  000756  C047  FFDA         	movff	??__doprnt+1,fsr2h
  4250  00075A  C076  FFDF         	movff	__doprnt@c,indf2
  4251  00075E  C040  FFD9         	movff	__doprnt@pb,fsr2l
  4252  000762  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  4253  000766  2ADE               	incf	postinc2,f,c
  4254  000768  0E00               	movlw	0
  4255  00076A  22DD               	addwfc	postdec2,f,c
  4256                           
  4257                           ;doprnt.c: 542: continue;
  4258  00076C  EF12  F00B         	goto	i2l3684
  4259  000770                     i2l3360:
  4260                           
  4261                           ;doprnt.c: 543: }
  4262                           ;doprnt.c: 546: width = 0;
  4263  000770  0E00               	movlw	0
  4264  000772  0100               	movlb	0	; () banked
  4265  000774  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  4266  000776  0E00               	movlw	0
  4267  000778  6F63               	movwf	__doprnt@width& (0+255),b
  4268                           
  4269                           ;doprnt.c: 548: flag = 0;
  4270  00077A  0E00               	movlw	0
  4271  00077C  0100               	movlb	0	; () banked
  4272  00077E  6F66               	movwf	(__doprnt@flag+1)& (0+255),b
  4273  000780  0E00               	movlw	0
  4274  000782  6F65               	movwf	__doprnt@flag& (0+255),b
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4278  000784  C042  FFF6         	movff	__doprnt@f,tblptrl
  4279  000788  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4280  00078C                     	if	0	;tblptru may be non-zero
  4281  00078C                     	endif
  4282  00078C                     	if	0	;tblptru may be non-zero
  4283  00078C                     	endif
  4284  00078C  0008               	tblrd		*
  4285  00078E  50F5               	movf	tablat,w,c
  4286  000790  EC10  F018         	call	_isdigit
  4287  000794  A0D8               	btfss	status,0,c
  4288  000796  D035               	goto	i2l3374
  4289                           
  4290                           ;doprnt.c: 598: width = 0;
  4291  000798  0E00               	movlw	0
  4292  00079A  0100               	movlb	0	; () banked
  4293  00079C  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  4294  00079E  0E00               	movlw	0
  4295  0007A0  6F63               	movwf	__doprnt@width& (0+255),b
  4296  0007A2                     i2l3366:
  4297                           
  4298                           ;doprnt.c: 600: width *= 10;
  4299  0007A2  C063  F00F         	movff	__doprnt@width,___wmul@multiplier
  4300  0007A6  C064  F010         	movff	__doprnt@width+1,___wmul@multiplier+1
  4301  0007AA  0E00               	movlw	0
  4302  0007AC  6E12               	movwf	___wmul@multiplicand+1,c
  4303  0007AE  0E0A               	movlw	10
  4304  0007B0  6E11               	movwf	___wmul@multiplicand,c
  4305  0007B2  ECAB  F017         	call	___wmul	;wreg free
  4306  0007B6  C00F  F063         	movff	?___wmul,__doprnt@width
  4307  0007BA  C010  F064         	movff	?___wmul+1,__doprnt@width+1
  4308                           
  4309                           ;doprnt.c: 601: width += *f++ - '0';
  4310  0007BE  0ED0               	movlw	208
  4311  0007C0  6E46               	movwf	??__doprnt& (0+255),c
  4312  0007C2  0EFF               	movlw	255
  4313  0007C4  6E47               	movwf	(??__doprnt+1)& (0+255),c
  4314  0007C6  C042  FFF6         	movff	__doprnt@f,tblptrl
  4315  0007CA  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4316  0007CE                     	if	0	;tblptru may be non-zero
  4317  0007CE                     	endif
  4318  0007CE                     	if	0	;tblptru may be non-zero
  4319  0007CE                     	endif
  4320  0007CE  0008               	tblrd		*
  4321  0007D0  50F5               	movf	tablat,w,c
  4322  0007D2  6E48               	movwf	(??__doprnt+2)& (0+255),c
  4323  0007D4  6A49               	clrf	(??__doprnt+3)& (0+255),c
  4324  0007D6  5046               	movf	??__doprnt,w,c
  4325  0007D8  2648               	addwf	??__doprnt+2,f,c
  4326  0007DA  5047               	movf	??__doprnt+1,w,c
  4327  0007DC  2249               	addwfc	??__doprnt+3,f,c
  4328  0007DE  5048               	movf	??__doprnt+2,w,c
  4329  0007E0  0100               	movlb	0	; () banked
  4330  0007E2  2763               	addwf	__doprnt@width& (0+255),f,b
  4331  0007E4  5049               	movf	??__doprnt+3,w,c
  4332  0007E6  0100               	movlb	0	; () banked
  4333  0007E8  2364               	addwfc	(__doprnt@width+1)& (0+255),f,b
  4334                           
  4335                           ; BSR set to: 0
  4336  0007EA  4A42               	infsnz	__doprnt@f,f,c
  4337  0007EC  2A43               	incf	__doprnt@f+1,f,c
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4341  0007EE  C042  FFF6         	movff	__doprnt@f,tblptrl
  4342  0007F2  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4343  0007F6                     	if	0	;tblptru may be non-zero
  4344  0007F6                     	endif
  4345  0007F6                     	if	0	;tblptru may be non-zero
  4346  0007F6                     	endif
  4347  0007F6  0008               	tblrd		*
  4348  0007F8  50F5               	movf	tablat,w,c
  4349  0007FA  EC10  F018         	call	_isdigit
  4350  0007FE  B0D8               	btfsc	status,0,c
  4351  000800  D7D0               	goto	i2l3366
  4352  000802                     i2l3374:
  4353                           
  4354                           ;doprnt.c: 608: }
  4355                           ;doprnt.c: 611: if(*f == '.') {
  4356  000802  C042  FFF6         	movff	__doprnt@f,tblptrl
  4357  000806  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4358  00080A                     	if	0	;tblptru may be non-zero
  4359  00080A                     	endif
  4360  00080A                     	if	0	;tblptru may be non-zero
  4361  00080A                     	endif
  4362  00080A  0008               	tblrd		*
  4363  00080C  50F5               	movf	tablat,w,c
  4364  00080E  0A2E               	xorlw	46
  4365  000810  A4D8               	btfss	status,2,c
  4366  000812  D032               	goto	i2l3386
  4367                           
  4368                           ;doprnt.c: 612: flag |= 0x4000;
  4369  000814  0100               	movlb	0	; () banked
  4370  000816  8D66               	bsf	(__doprnt@flag+1)& (0+255),6,b
  4371                           
  4372                           ;doprnt.c: 613: f++;
  4373  000818  4A42               	infsnz	__doprnt@f,f,c
  4374  00081A  2A43               	incf	__doprnt@f+1,f,c
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;doprnt.c: 620: {
  4378                           ;doprnt.c: 621: prec = 0;
  4379  00081C  0E00               	movlw	0
  4380  00081E  0100               	movlb	0	; () banked
  4381  000820  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  4382  000822  0E00               	movlw	0
  4383  000824  6F74               	movwf	__doprnt@prec& (0+255),b
  4384                           
  4385                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4386  000826  D01D               	goto	i2l3384
  4387  000828                     i2l3380:
  4388                           
  4389                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4390  000828  C074  F00F         	movff	__doprnt@prec,___wmul@multiplier
  4391  00082C  C075  F010         	movff	__doprnt@prec+1,___wmul@multiplier+1
  4392  000830  0E00               	movlw	0
  4393  000832  6E12               	movwf	___wmul@multiplicand+1,c
  4394  000834  0E0A               	movlw	10
  4395  000836  6E11               	movwf	___wmul@multiplicand,c
  4396  000838  ECAB  F017         	call	___wmul	;wreg free
  4397  00083C  C042  FFF6         	movff	__doprnt@f,tblptrl
  4398  000840  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4399  000844                     	if	0	;tblptru may be non-zero
  4400  000844                     	endif
  4401  000844                     	if	0	;tblptru may be non-zero
  4402  000844                     	endif
  4403  000844  0008               	tblrd		*
  4404  000846  50F5               	movf	tablat,w,c
  4405  000848  260F               	addwf	?___wmul,f,c
  4406  00084A  0E00               	movlw	0
  4407  00084C  2210               	addwfc	?___wmul+1,f,c
  4408  00084E  0ED0               	movlw	208
  4409  000850  240F               	addwf	?___wmul,w,c
  4410  000852  0100               	movlb	0	; () banked
  4411  000854  6F74               	movwf	__doprnt@prec& (0+255),b
  4412  000856  0EFF               	movlw	255
  4413  000858  2010               	addwfc	?___wmul+1,w,c
  4414  00085A  0100               	movlb	0	; () banked
  4415  00085C  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  4416                           
  4417                           ; BSR set to: 0
  4418  00085E  4A42               	infsnz	__doprnt@f,f,c
  4419  000860  2A43               	incf	__doprnt@f+1,f,c
  4420  000862                     i2l3384:
  4421                           
  4422                           ; BSR set to: 0
  4423  000862  C042  FFF6         	movff	__doprnt@f,tblptrl
  4424  000866  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4425  00086A                     	if	0	;tblptru may be non-zero
  4426  00086A                     	endif
  4427  00086A                     	if	0	;tblptru may be non-zero
  4428  00086A                     	endif
  4429  00086A  0008               	tblrd		*
  4430  00086C  50F5               	movf	tablat,w,c
  4431  00086E  EC10  F018         	call	_isdigit
  4432  000872  A0D8               	btfss	status,0,c
  4433  000874  D012               	goto	i2l3398
  4434  000876  D7D8               	goto	i2l3380
  4435  000878                     i2l3386:
  4436                           
  4437                           ;doprnt.c: 626: prec = 0;
  4438  000878  0E00               	movlw	0
  4439  00087A  0100               	movlb	0	; () banked
  4440  00087C  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  4441  00087E  0E00               	movlw	0
  4442  000880  6F74               	movwf	__doprnt@prec& (0+255),b
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;doprnt.c: 628: flag |= 0x1000;
  4446  000882  0100               	movlb	0	; () banked
  4447  000884  8966               	bsf	(__doprnt@flag+1)& (0+255),4,b
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;doprnt.c: 635: switch(c = *f++) {
  4451                           
  4452                           ;doprnt.c: 630: }
  4453                           ;doprnt.c: 633: loop:
  4454                           
  4455                           ; BSR set to: 0
  4456  000886  D009               	goto	i2l3398
  4457  000888                     i2l3390:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;doprnt.c: 643: flag |= 0x10;
  4461  000888  0100               	movlb	0	; () banked
  4462  00088A  8965               	bsf	__doprnt@flag& (0+255),4,b
  4463                           
  4464                           ;doprnt.c: 644: goto loop;
  4465  00088C  D006               	goto	i2l3398
  4466  00088E                     i2l3392:
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;doprnt.c: 663: flag |= 0x400;
  4470  00088E  0100               	movlb	0	; () banked
  4471  000890  8566               	bsf	(__doprnt@flag+1)& (0+255),2,b
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;doprnt.c: 698: case 'i':
  4475                           ;doprnt.c: 699: break;
  4476                           
  4477                           ; BSR set to: 0
  4478                           
  4479                           ;doprnt.c: 697: case 'd':
  4480                           
  4481                           ;doprnt.c: 664: break;
  4482  000892  D023               	goto	i2l3400
  4483  000894                     i2l3394:
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;doprnt.c: 818: flag |= 0x40;
  4487  000894  0100               	movlb	0	; () banked
  4488  000896  8D65               	bsf	__doprnt@flag& (0+255),6,b
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;doprnt.c: 822: }
  4492                           
  4493                           ;doprnt.c: 819: break;
  4494  000898  D020               	goto	i2l3400
  4495  00089A                     i2l3398:
  4496  00089A  C042  FFF6         	movff	__doprnt@f,tblptrl
  4497  00089E  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  4498  0008A2  4A42               	infsnz	__doprnt@f,f,c
  4499  0008A4  2A43               	incf	__doprnt@f+1,f,c
  4500  0008A6                     	if	0	;tblptru may be non-zero
  4501  0008A6                     	endif
  4502  0008A6                     	if	0	;tblptru may be non-zero
  4503  0008A6                     	endif
  4504  0008A6  0008               	tblrd		*
  4505  0008A8  CFF5 F076          	movff	tablat,__doprnt@c
  4506  0008AC  0100               	movlb	0	; () banked
  4507  0008AE  5176               	movf	__doprnt@c& (0+255),w,b
  4508                           
  4509                           ; Switch size 1, requested type "space"
  4510                           ; Number of cases is 6, Range of values is 0 to 117
  4511                           ; switch strategies available:
  4512                           ; Name         Instructions Cycles
  4513                           ; simple_byte           19    10 (average)
  4514                           ;	Chosen strategy is simple_byte
  4515  0008B0  0A00               	xorlw	0	; case 0
  4516  0008B2  B4D8               	btfsc	status,2,c
  4517  0008B4  EF20  F00B         	goto	i2l3686
  4518  0008B8  0A64               	xorlw	100	; case 100
  4519  0008BA  B4D8               	btfsc	status,2,c
  4520  0008BC  D00E               	goto	i2l3400
  4521  0008BE  0A02               	xorlw	2	; case 102
  4522  0008C0  B4D8               	btfsc	status,2,c
  4523  0008C2  D7E5               	goto	i2l3392
  4524  0008C4  0A0F               	xorlw	15	; case 105
  4525  0008C6  B4D8               	btfsc	status,2,c
  4526  0008C8  D008               	goto	i2l3400
  4527  0008CA  0A05               	xorlw	5	; case 108
  4528  0008CC  B4D8               	btfsc	status,2,c
  4529  0008CE  D7DC               	goto	i2l3390
  4530  0008D0  0A19               	xorlw	25	; case 117
  4531  0008D2  B4D8               	btfsc	status,2,c
  4532  0008D4  D7DF               	goto	i2l3394
  4533  0008D6  EF12  F00B         	goto	i2l3684
  4534  0008DA                     i2l3400:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;doprnt.c: 825: if(flag & (0x700)) {
  4538  0008DA  0E07               	movlw	7
  4539  0008DC  0100               	movlb	0	; () banked
  4540  0008DE  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4541  0008E0  B4D8               	btfsc	status,2,c
  4542  0008E2  EFE9  F008         	goto	i2l502
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;doprnt.c: 827: if(flag & 0x1000)
  4546  0008E6  0100               	movlb	0	; () banked
  4547  0008E8  A966               	btfss	(__doprnt@flag+1)& (0+255),4,b
  4548  0008EA  D005               	goto	i2l3406
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;doprnt.c: 829: prec = 6;
  4552  0008EC  0E00               	movlw	0
  4553  0008EE  0100               	movlb	0	; () banked
  4554  0008F0  6F75               	movwf	(__doprnt@prec+1)& (0+255),b
  4555  0008F2  0E06               	movlw	6
  4556  0008F4  6F74               	movwf	__doprnt@prec& (0+255),b
  4557  0008F6                     i2l3406:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4561  0008F6  C044  FFD9         	movff	__doprnt@ap,fsr2l
  4562  0008FA  C045  FFDA         	movff	__doprnt@ap+1,fsr2h
  4563  0008FE  CFDF F046          	movff	indf2,??__doprnt
  4564  000902  0E03               	movlw	3
  4565  000904  26DE               	addwf	postinc2,f,c
  4566  000906  CFDF F047          	movff	indf2,??__doprnt+1
  4567  00090A  0E00               	movlw	0
  4568  00090C  22DD               	addwfc	postdec2,f,c
  4569  00090E  C046  FFD9         	movff	??__doprnt,fsr2l
  4570  000912  C047  FFDA         	movff	??__doprnt+1,fsr2h
  4571  000916  CFDE F071          	movff	postinc2,__doprnt@fval
  4572  00091A  CFDE F072          	movff	postinc2,__doprnt@fval+1
  4573  00091E  CFDD F073          	movff	postdec2,__doprnt@fval+2
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;doprnt.c: 831: if(fval < 0.0) {
  4577  000922  0100               	movlb	0	; () banked
  4578  000924  AF73               	btfss	(__doprnt@fval+2)& (0+255),7,b
  4579  000926  D011               	goto	i2l3414
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;doprnt.c: 832: fval = -fval;
  4583  000928  C071  F001         	movff	__doprnt@fval,___ftneg@f1
  4584  00092C  C072  F002         	movff	__doprnt@fval+1,___ftneg@f1+1
  4585  000930  C073  F003         	movff	__doprnt@fval+2,___ftneg@f1+2
  4586  000934  ECBE  F017         	call	___ftneg	;wreg free
  4587  000938  C001  F071         	movff	?___ftneg,__doprnt@fval
  4588  00093C  C002  F072         	movff	?___ftneg+1,__doprnt@fval+1
  4589  000940  C003  F073         	movff	?___ftneg+2,__doprnt@fval+2
  4590                           
  4591                           ;doprnt.c: 833: flag |= 0x03;
  4592  000944  0E03               	movlw	3
  4593  000946  0100               	movlb	0	; () banked
  4594  000948  1365               	iorwf	__doprnt@flag& (0+255),f,b
  4595  00094A                     i2l3414:
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;doprnt.c: 834: }
  4599                           ;doprnt.c: 835: exp = 0;
  4600  00094A  0E00               	movlw	0
  4601  00094C  0100               	movlb	0	; () banked
  4602  00094E  6F68               	movwf	(__doprnt@exp+1)& (0+255),b
  4603  000950  0E00               	movlw	0
  4604  000952  6F67               	movwf	__doprnt@exp& (0+255),b
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;doprnt.c: 836: if( fval!=0) {
  4608  000954  0100               	movlb	0	; () banked
  4609  000956  5171               	movf	__doprnt@fval& (0+255),w,b
  4610  000958  0100               	movlb	0	; () banked
  4611  00095A  1172               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  4612  00095C  0100               	movlb	0	; () banked
  4613  00095E  1173               	iorwf	(__doprnt@fval+2)& (0+255),w,b
  4614  000960  B4D8               	btfsc	status,2,c
  4615  000962  D08B               	goto	i2l3442
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4619  000964  0E82               	movlw	130
  4620  000966  6E46               	movwf	??__doprnt& (0+255),c
  4621  000968  0EFF               	movlw	255
  4622  00096A  6E47               	movwf	(??__doprnt+1)& (0+255),c
  4623  00096C  C071  F048         	movff	__doprnt@fval,??__doprnt+2
  4624  000970  C072  F049         	movff	__doprnt@fval+1,??__doprnt+3
  4625  000974  C073  F04A         	movff	__doprnt@fval+2,??__doprnt+4
  4626  000978  C074  F04B         	movff	__doprnt@fval+3,??__doprnt+5
  4627  00097C  0E10               	movlw	16
  4628  00097E  D005               	goto	i2u339_40
  4629  000980                     i2u339_45:
  4630  000980  90D8               	bcf	status,0,c
  4631  000982  324B               	rrcf	??__doprnt+5,f,c
  4632  000984  324A               	rrcf	??__doprnt+4,f,c
  4633  000986  3249               	rrcf	??__doprnt+3,f,c
  4634  000988  3248               	rrcf	??__doprnt+2,f,c
  4635  00098A                     i2u339_40:
  4636  00098A  2EE8               	decfsz	wreg,f,c
  4637  00098C  D7F9               	goto	i2u339_45
  4638  00098E  5048               	movf	??__doprnt+2,w,c
  4639  000990  2446               	addwf	??__doprnt,w,c
  4640  000992  0100               	movlb	0	; () banked
  4641  000994  6F67               	movwf	__doprnt@exp& (0+255),b
  4642  000996  0E00               	movlw	0
  4643  000998  2047               	addwfc	??__doprnt+1,w,c
  4644  00099A  0100               	movlb	0	; () banked
  4645  00099C  6F68               	movwf	(__doprnt@exp+1)& (0+255),b
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;doprnt.c: 838: exp--;
  4649  00099E  0100               	movlb	0	; () banked
  4650  0009A0  0767               	decf	__doprnt@exp& (0+255),f,b
  4651  0009A2  A0D8               	btfss	status,0,c
  4652  0009A4  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;doprnt.c: 839: exp *= 3;
  4656  0009A6  C067  F00F         	movff	__doprnt@exp,___wmul@multiplier
  4657  0009AA  C068  F010         	movff	__doprnt@exp+1,___wmul@multiplier+1
  4658  0009AE  0E00               	movlw	0
  4659  0009B0  6E12               	movwf	___wmul@multiplicand+1,c
  4660  0009B2  0E03               	movlw	3
  4661  0009B4  6E11               	movwf	___wmul@multiplicand,c
  4662  0009B6  ECAB  F017         	call	___wmul	;wreg free
  4663  0009BA  C00F  F067         	movff	?___wmul,__doprnt@exp
  4664  0009BE  C010  F068         	movff	?___wmul+1,__doprnt@exp+1
  4665                           
  4666                           ;doprnt.c: 840: exp /= 10;
  4667  0009C2  C067  F007         	movff	__doprnt@exp,___awdiv@dividend
  4668  0009C6  C068  F008         	movff	__doprnt@exp+1,___awdiv@dividend+1
  4669  0009CA  0E00               	movlw	0
  4670  0009CC  6E0A               	movwf	___awdiv@divisor+1,c
  4671  0009CE  0E0A               	movlw	10
  4672  0009D0  6E09               	movwf	___awdiv@divisor,c
  4673  0009D2  EC46  F014         	call	___awdiv	;wreg free
  4674  0009D6  C007  F067         	movff	?___awdiv,__doprnt@exp
  4675  0009DA  C008  F068         	movff	?___awdiv+1,__doprnt@exp+1
  4676                           
  4677                           ;doprnt.c: 841: if(exp < 0)
  4678  0009DE  0100               	movlb	0	; () banked
  4679  0009E0  AF68               	btfss	(__doprnt@exp+1)& (0+255),7,b
  4680  0009E2  D004               	goto	i2l3430
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 842: exp--;
  4684  0009E4  0100               	movlb	0	; () banked
  4685  0009E6  0767               	decf	__doprnt@exp& (0+255),f,b
  4686  0009E8  A0D8               	btfss	status,0,c
  4687  0009EA  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4688  0009EC                     i2l3430:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4692  0009EC  0100               	movlb	0	; () banked
  4693  0009EE  5167               	movf	__doprnt@exp& (0+255),w,b
  4694  0009F0  0800               	sublw	0
  4695  0009F2  EC25  F00B         	call	_scale
  4696  0009F6  C024  F06D         	movff	?_scale,__doprnt@tmpval
  4697  0009FA  C025  F06E         	movff	?_scale+1,__doprnt@tmpval+1
  4698  0009FE  C026  F06F         	movff	?_scale+2,__doprnt@tmpval+2
  4699                           
  4700                           ;doprnt.c: 847: tmpval.integ *= fval;
  4701  000A02  C06D  F015         	movff	__doprnt@tmpval,___ftmul@f1
  4702  000A06  C06E  F016         	movff	__doprnt@tmpval+1,___ftmul@f1+1
  4703  000A0A  C06F  F017         	movff	__doprnt@tmpval+2,___ftmul@f1+2
  4704  000A0E  C071  F018         	movff	__doprnt@fval,___ftmul@f2
  4705  000A12  C072  F019         	movff	__doprnt@fval+1,___ftmul@f2+1
  4706  000A16  C073  F01A         	movff	__doprnt@fval+2,___ftmul@f2+2
  4707  000A1A  EC48  F012         	call	___ftmul	;wreg free
  4708  000A1E  C015  F06D         	movff	?___ftmul,__doprnt@tmpval
  4709  000A22  C016  F06E         	movff	?___ftmul+1,__doprnt@tmpval+1
  4710  000A26  C017  F06F         	movff	?___ftmul+2,__doprnt@tmpval+2
  4711                           
  4712                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4713  000A2A  C06D  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4714  000A2E  C06E  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4715  000A32  C06F  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4716  000A36  0E00               	movlw	0
  4717  000A38  6E04               	movwf	___ftge@ff2,c
  4718  000A3A  0E80               	movlw	128
  4719  000A3C  6E05               	movwf	___ftge@ff2+1,c
  4720  000A3E  0E3F               	movlw	63
  4721  000A40  6E06               	movwf	___ftge@ff2+2,c
  4722  000A42  ECFE  F013         	call	___ftge	;wreg free
  4723  000A46  B0D8               	btfsc	status,0,c
  4724  000A48  D005               	goto	i2l3438
  4725                           
  4726                           ;doprnt.c: 849: exp--;
  4727  000A4A  0100               	movlb	0	; () banked
  4728  000A4C  0767               	decf	__doprnt@exp& (0+255),f,b
  4729  000A4E  A0D8               	btfss	status,0,c
  4730  000A50  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  4731  000A52  D013               	goto	i2l3442
  4732  000A54                     i2l3438:
  4733                           
  4734                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4735  000A54  C06D  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4736  000A58  C06E  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4737  000A5C  C06F  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4738  000A60  0E00               	movlw	0
  4739  000A62  6E04               	movwf	___ftge@ff2,c
  4740  000A64  0E20               	movlw	32
  4741  000A66  6E05               	movwf	___ftge@ff2+1,c
  4742  000A68  0E41               	movlw	65
  4743  000A6A  6E06               	movwf	___ftge@ff2+2,c
  4744  000A6C  ECFE  F013         	call	___ftge	;wreg free
  4745  000A70  A0D8               	btfss	status,0,c
  4746  000A72  D003               	goto	i2l3442
  4747                           
  4748                           ;doprnt.c: 851: exp++;
  4749  000A74  0100               	movlb	0	; () banked
  4750  000A76  4B67               	infsnz	__doprnt@exp& (0+255),f,b
  4751  000A78  2B68               	incf	(__doprnt@exp+1)& (0+255),f,b
  4752  000A7A                     i2l3442:
  4753                           
  4754                           ;doprnt.c: 852: }
  4755                           ;doprnt.c: 1112: if(prec <= 12)
  4756  000A7A  0100               	movlb	0	; () banked
  4757  000A7C  BF75               	btfsc	(__doprnt@prec+1)& (0+255),7,b
  4758  000A7E  D008               	goto	i2l3444
  4759  000A80  0100               	movlb	0	; () banked
  4760  000A82  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  4761  000A84  E11D               	bnz	i2l3446
  4762  000A86  0E0D               	movlw	13
  4763  000A88  0100               	movlb	0	; () banked
  4764  000A8A  5D74               	subwf	__doprnt@prec& (0+255),w,b
  4765  000A8C  B0D8               	btfsc	status,0,c
  4766  000A8E  D018               	goto	i2l3446
  4767  000A90                     i2l3444:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;doprnt.c: 1113: fval += fround(prec);
  4771  000A90  C071  F02E         	movff	__doprnt@fval,___ftadd@f1
  4772  000A94  C072  F02F         	movff	__doprnt@fval+1,___ftadd@f1+1
  4773  000A98  C073  F030         	movff	__doprnt@fval+2,___ftadd@f1+2
  4774  000A9C  0100               	movlb	0	; () banked
  4775  000A9E  5174               	movf	__doprnt@prec& (0+255),w,b
  4776  000AA0  EC1D  F00D         	call	_fround
  4777  000AA4  C024  F031         	movff	?_fround,___ftadd@f2
  4778  000AA8  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  4779  000AAC  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  4780  000AB0  EC40  F00E         	call	___ftadd	;wreg free
  4781  000AB4  C02E  F071         	movff	?___ftadd,__doprnt@fval
  4782  000AB8  C02F  F072         	movff	?___ftadd+1,__doprnt@fval+1
  4783  000ABC  C030  F073         	movff	?___ftadd+2,__doprnt@fval+2
  4784  000AC0                     i2l3446:
  4785                           
  4786                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4787  000AC0  0100               	movlb	0	; () banked
  4788  000AC2  BF68               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4789  000AC4  D008               	goto	i2l3448
  4790  000AC6  0100               	movlb	0	; () banked
  4791  000AC8  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  4792  000ACA  E126               	bnz	i2l3454
  4793  000ACC  0E0A               	movlw	10
  4794  000ACE  0100               	movlb	0	; () banked
  4795  000AD0  5D67               	subwf	__doprnt@exp& (0+255),w,b
  4796  000AD2  B0D8               	btfsc	status,0,c
  4797  000AD4  D021               	goto	i2l3454
  4798  000AD6                     i2l3448:
  4799                           
  4800                           ; BSR set to: 0
  4801  000AD6  0100               	movlb	0	; () banked
  4802  000AD8  5171               	movf	__doprnt@fval& (0+255),w,b
  4803  000ADA  0100               	movlb	0	; () banked
  4804  000ADC  1172               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  4805  000ADE  0100               	movlb	0	; () banked
  4806  000AE0  1173               	iorwf	(__doprnt@fval+2)& (0+255),w,b
  4807  000AE2  B4D8               	btfsc	status,2,c
  4808  000AE4  D05B               	goto	i2l3468
  4809                           
  4810                           ; BSR set to: 0
  4811  000AE6  C071  F024         	movff	__doprnt@fval,___fttol@f1
  4812  000AEA  C072  F025         	movff	__doprnt@fval+1,___fttol@f1+1
  4813  000AEE  C073  F026         	movff	__doprnt@fval+2,___fttol@f1+2
  4814  000AF2  ECCE  F011         	call	___fttol	;wreg free
  4815  000AF6  5024               	movf	?___fttol,w,c
  4816  000AF8  1025               	iorwf	?___fttol+1,w,c
  4817  000AFA  1026               	iorwf	?___fttol+2,w,c
  4818  000AFC  1027               	iorwf	?___fttol+3,w,c
  4819  000AFE  A4D8               	btfss	status,2,c
  4820  000B00  D04D               	goto	i2l3468
  4821  000B02  0100               	movlb	0	; () banked
  4822  000B04  BF68               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  4823  000B06  D04A               	goto	i2l3468
  4824  000B08  0100               	movlb	0	; () banked
  4825  000B0A  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  4826  000B0C  E105               	bnz	i2l3454
  4827  000B0E  0E02               	movlw	2
  4828  000B10  0100               	movlb	0	; () banked
  4829  000B12  5D67               	subwf	__doprnt@exp& (0+255),w,b
  4830  000B14  A0D8               	btfss	status,0,c
  4831  000B16  D042               	goto	i2l3468
  4832  000B18                     i2l3454:
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4836  000B18  C06D  F001         	movff	__doprnt@tmpval,___ftge@ff1
  4837  000B1C  C06E  F002         	movff	__doprnt@tmpval+1,___ftge@ff1+1
  4838  000B20  C06F  F003         	movff	__doprnt@tmpval+2,___ftge@ff1+2
  4839  000B24  0E70               	movlw	112
  4840  000B26  6E04               	movwf	___ftge@ff2,c
  4841  000B28  0E89               	movlw	137
  4842  000B2A  6E05               	movwf	___ftge@ff2+1,c
  4843  000B2C  0E40               	movlw	64
  4844  000B2E  6E06               	movwf	___ftge@ff2+2,c
  4845  000B30  ECFE  F013         	call	___ftge	;wreg free
  4846  000B34  B0D8               	btfsc	status,0,c
  4847  000B36  D003               	goto	i2l3458
  4848                           
  4849                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4850  000B38  0100               	movlb	0	; () banked
  4851  000B3A  0EF7               	movlw	247
  4852  000B3C  D002               	goto	L1
  4853  000B3E                     i2l3458:
  4854                           
  4855                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4856  000B3E  0100               	movlb	0	; () banked
  4857  000B40  0EF8               	movlw	248
  4858  000B42                     L1:
  4859  000B42  2767               	addwf	__doprnt@exp& (0+255),f,b
  4860  000B44  0EFF               	movlw	255
  4861  000B46  2368               	addwfc	(__doprnt@exp+1)& (0+255),f,b
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;doprnt.c: 1124: }
  4865                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4866                           
  4867                           ; BSR set to: 0
  4868  000B48  0100               	movlb	0	; () banked
  4869  000B4A  5167               	movf	__doprnt@exp& (0+255),w,b
  4870  000B4C  EC25  F00B         	call	_scale
  4871  000B50  C024  F06D         	movff	?_scale,__doprnt@tmpval
  4872  000B54  C025  F06E         	movff	?_scale+1,__doprnt@tmpval+1
  4873  000B58  C026  F06F         	movff	?_scale+2,__doprnt@tmpval+2
  4874                           
  4875                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4876  000B5C  C071  F001         	movff	__doprnt@fval,__tdiv_to_l_@f1
  4877  000B60  C072  F002         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
  4878  000B64  C073  F003         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
  4879  000B68  C06D  F004         	movff	__doprnt@tmpval,__tdiv_to_l_@f2
  4880  000B6C  C06E  F005         	movff	__doprnt@tmpval+1,__tdiv_to_l_@f2+1
  4881  000B70  C06F  F006         	movff	__doprnt@tmpval+2,__tdiv_to_l_@f2+2
  4882  000B74  ECA1  F010         	call	__tdiv_to_l_	;wreg free
  4883  000B78  C001  F069         	movff	?__tdiv_to_l_,__doprnt@val
  4884  000B7C  C002  F06A         	movff	?__tdiv_to_l_+1,__doprnt@val+1
  4885  000B80  C003  F06B         	movff	?__tdiv_to_l_+2,__doprnt@val+2
  4886  000B84  C004  F06C         	movff	?__tdiv_to_l_+3,__doprnt@val+3
  4887                           
  4888                           ;doprnt.c: 1129: fval = 0.0;
  4889  000B88  0E00               	movlw	0
  4890  000B8A  0100               	movlb	0	; () banked
  4891  000B8C  6F71               	movwf	__doprnt@fval& (0+255),b
  4892  000B8E  0E00               	movlw	0
  4893  000B90  0100               	movlb	0	; () banked
  4894  000B92  6F72               	movwf	(__doprnt@fval+1)& (0+255),b
  4895  000B94  0E00               	movlw	0
  4896  000B96  0100               	movlb	0	; () banked
  4897  000B98  6F73               	movwf	(__doprnt@fval+2)& (0+255),b
  4898                           
  4899                           ;doprnt.c: 1130: } else {
  4900  000B9A  D033               	goto	i2l3472
  4901  000B9C                     i2l3468:
  4902                           
  4903                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4904  000B9C  C071  F024         	movff	__doprnt@fval,___fttol@f1
  4905  000BA0  C072  F025         	movff	__doprnt@fval+1,___fttol@f1+1
  4906  000BA4  C073  F026         	movff	__doprnt@fval+2,___fttol@f1+2
  4907  000BA8  ECCE  F011         	call	___fttol	;wreg free
  4908  000BAC  C024  F069         	movff	?___fttol,__doprnt@val
  4909  000BB0  C025  F06A         	movff	?___fttol+1,__doprnt@val+1
  4910  000BB4  C026  F06B         	movff	?___fttol+2,__doprnt@val+2
  4911  000BB8  C027  F06C         	movff	?___fttol+3,__doprnt@val+3
  4912                           
  4913                           ;doprnt.c: 1132: fval -= (double)val;
  4914  000BBC  C071  F03A         	movff	__doprnt@fval,___ftsub@f1
  4915  000BC0  C072  F03B         	movff	__doprnt@fval+1,___ftsub@f1+1
  4916  000BC4  C073  F03C         	movff	__doprnt@fval+2,___ftsub@f1+2
  4917  000BC8  C069  F009         	movff	__doprnt@val,___lltoft@c
  4918  000BCC  C06A  F00A         	movff	__doprnt@val+1,___lltoft@c+1
  4919  000BD0  C06B  F00B         	movff	__doprnt@val+2,___lltoft@c+2
  4920  000BD4  C06C  F00C         	movff	__doprnt@val+3,___lltoft@c+3
  4921  000BD8  EC70  F015         	call	___lltoft	;wreg free
  4922  000BDC  C009  F03D         	movff	?___lltoft,___ftsub@f2
  4923  000BE0  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  4924  000BE4  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  4925  000BE8  EC76  F016         	call	___ftsub	;wreg free
  4926  000BEC  C03A  F071         	movff	?___ftsub,__doprnt@fval
  4927  000BF0  C03B  F072         	movff	?___ftsub+1,__doprnt@fval+1
  4928  000BF4  C03C  F073         	movff	?___ftsub+2,__doprnt@fval+2
  4929                           
  4930                           ;doprnt.c: 1133: exp = 0;
  4931  000BF8  0E00               	movlw	0
  4932  000BFA  0100               	movlb	0	; () banked
  4933  000BFC  6F68               	movwf	(__doprnt@exp+1)& (0+255),b
  4934  000BFE  0E00               	movlw	0
  4935  000C00  6F67               	movwf	__doprnt@exp& (0+255),b
  4936  000C02                     i2l3472:
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;doprnt.c: 1134: }
  4940                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4941  000C02  0E01               	movlw	1
  4942  000C04  0100               	movlb	0	; () banked
  4943  000C06  6F76               	movwf	__doprnt@c& (0+255),b
  4944  000C08                     i2l3474:
  4945                           
  4946                           ; BSR set to: 0
  4947  000C08  0E0A               	movlw	10
  4948  000C0A  0100               	movlb	0	; () banked
  4949  000C0C  1976               	xorwf	__doprnt@c& (0+255),w,b
  4950  000C0E  B4D8               	btfsc	status,2,c
  4951  000C10  D01E               	goto	i2l3486
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 1137: if(val < dpowers[c])
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  000C12  0100               	movlb	0	; () banked
  4960  000C14  5176               	movf	__doprnt@c& (0+255),w,b
  4961  000C16  0D04               	mullw	4
  4962  000C18  0E01               	movlw	low _dpowers
  4963  000C1A  24F3               	addwf	prodl,w,c
  4964  000C1C  6EF6               	movwf	tblptrl,c
  4965  000C1E  0E06               	movlw	high _dpowers
  4966  000C20  20F4               	addwfc	prodh,w,c
  4967  000C22  6EF7               	movwf	tblptrh,c
  4968  000C24                     	if	0	;There are less than 3 active tblptr bytes
  4969  000C24                     	endif
  4970  000C24  0009               	tblrd		*+
  4971  000C26  50F5               	movf	tablat,w,c
  4972  000C28  0100               	movlb	0	; () banked
  4973  000C2A  5D69               	subwf	__doprnt@val& (0+255),w,b
  4974  000C2C  0009               	tblrd		*+
  4975  000C2E  50F5               	movf	tablat,w,c
  4976  000C30  0100               	movlb	0	; () banked
  4977  000C32  596A               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4978  000C34  0009               	tblrd		*+
  4979  000C36  50F5               	movf	tablat,w,c
  4980  000C38  0100               	movlb	0	; () banked
  4981  000C3A  596B               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4982  000C3C  0009               	tblrd		*+
  4983  000C3E  50F5               	movf	tablat,w,c
  4984  000C40  0100               	movlb	0	; () banked
  4985  000C42  596C               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4986  000C44  A0D8               	btfss	status,0,c
  4987  000C46  D003               	goto	i2l3486
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ; BSR set to: 0
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;doprnt.c: 1138: break;
  4995  000C48  0100               	movlb	0	; () banked
  4996  000C4A  2B76               	incf	__doprnt@c& (0+255),f,b
  4997  000C4C  D7DD               	goto	i2l3474
  4998  000C4E                     i2l3486:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;doprnt.c: 1142: width -= prec + c + exp;
  5002  000C4E  C076  F046         	movff	__doprnt@c,??__doprnt
  5003  000C52  6A47               	clrf	(??__doprnt+1)& (0+255),c
  5004  000C54  BE46               	btfsc	??__doprnt& (0+255),7,c
  5005  000C56  0647               	decf	(??__doprnt+1)& (0+255),f,c
  5006  000C58  0100               	movlb	0	; () banked
  5007  000C5A  5174               	movf	__doprnt@prec& (0+255),w,b
  5008  000C5C  2646               	addwf	??__doprnt,f,c
  5009  000C5E  0100               	movlb	0	; () banked
  5010  000C60  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5011  000C62  2247               	addwfc	??__doprnt+1,f,c
  5012  000C64  0100               	movlb	0	; () banked
  5013  000C66  5167               	movf	__doprnt@exp& (0+255),w,b
  5014  000C68  2646               	addwf	??__doprnt,f,c
  5015  000C6A  0100               	movlb	0	; () banked
  5016  000C6C  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  5017  000C6E  2247               	addwfc	??__doprnt+1,f,c
  5018  000C70  5046               	movf	??__doprnt,w,c
  5019  000C72  0100               	movlb	0	; () banked
  5020  000C74  5F63               	subwf	__doprnt@width& (0+255),f,b
  5021  000C76  5047               	movf	??__doprnt+1,w,c
  5022  000C78  0100               	movlb	0	; () banked
  5023  000C7A  5B64               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5024                           
  5025                           ;doprnt.c: 1143: if(
  5026                           ;doprnt.c: 1147: prec)
  5027  000C7C  0100               	movlb	0	; () banked
  5028  000C7E  5174               	movf	__doprnt@prec& (0+255),w,b
  5029  000C80  0100               	movlb	0	; () banked
  5030  000C82  1175               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5031  000C84  B4D8               	btfsc	status,2,c
  5032  000C86  D004               	goto	i2l3490
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 1148: width--;
  5036  000C88  0100               	movlb	0	; () banked
  5037  000C8A  0763               	decf	__doprnt@width& (0+255),f,b
  5038  000C8C  A0D8               	btfss	status,0,c
  5039  000C8E  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  5040  000C90                     i2l3490:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;doprnt.c: 1149: if(flag & 0x03)
  5044  000C90  0E03               	movlw	3
  5045  000C92  0100               	movlb	0	; () banked
  5046  000C94  1565               	andwf	__doprnt@flag& (0+255),w,b
  5047  000C96  6E46               	movwf	??__doprnt& (0+255),c
  5048  000C98  0E00               	movlw	0
  5049  000C9A  0100               	movlb	0	; () banked
  5050  000C9C  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5051  000C9E  6E47               	movwf	(??__doprnt+1)& (0+255),c
  5052  000CA0  5046               	movf	??__doprnt,w,c
  5053  000CA2  1047               	iorwf	??__doprnt+1,w,c
  5054  000CA4  B4D8               	btfsc	status,2,c
  5055  000CA6  D037               	goto	i2l3504
  5056  000CA8  D032               	goto	i2l3502
  5057  000CAA                     i2l3494:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 1181: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5061  000CAA  EE20 F002          	lfsr	2,2
  5062  000CAE  5040               	movf	__doprnt@pb,w,c
  5063  000CB0  26D9               	addwf	fsr2l,f,c
  5064  000CB2  5041               	movf	__doprnt@pb+1,w,c
  5065  000CB4  22DA               	addwfc	fsr2h,f,c
  5066  000CB6  50DE               	movf	postinc2,w,c
  5067  000CB8  10DE               	iorwf	postinc2,w,c
  5068  000CBA  B4D8               	btfsc	status,2,c
  5069  000CBC  D013               	goto	i2l3498
  5070                           
  5071                           ; BSR set to: 0
  5072  000CBE  EE20 F002          	lfsr	2,2
  5073  000CC2  5040               	movf	__doprnt@pb,w,c
  5074  000CC4  26D9               	addwf	fsr2l,f,c
  5075  000CC6  5041               	movf	__doprnt@pb+1,w,c
  5076  000CC8  22DA               	addwfc	fsr2h,f,c
  5077  000CCA  D801               	call	i2u355_48
  5078  000CCC  D020               	goto	i2l3502
  5079  000CCE                     i2u355_48:
  5080  000CCE  0005               	push	
  5081  000CD0  6EFA               	movwf	pclath,c
  5082  000CD2  50DE               	movf	postinc2,w,c
  5083  000CD4  6EFD               	movwf	tosl,c
  5084  000CD6  50DE               	movf	postinc2,w,c
  5085  000CD8  6EFE               	movwf	tosh,c
  5086  000CDA  50F8               	movf	tblptru,w,c
  5087  000CDC  6EFF               	movwf	tosu,c
  5088  000CDE  50FA               	movf	pclath,w,c
  5089  000CE0  0E20               	movlw	32
  5090  000CE2  0012               	return		;indir
  5091  000CE4                     i2l3498:
  5092  000CE4  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5093  000CE8  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5094  000CEC  CFDE F046          	movff	postinc2,??__doprnt
  5095  000CF0  CFDD F047          	movff	postdec2,??__doprnt+1
  5096  000CF4  C046  FFD9         	movff	??__doprnt,fsr2l
  5097  000CF8  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5098  000CFC  0E20               	movlw	32
  5099  000CFE  6EDF               	movwf	indf2,c
  5100  000D00  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5101  000D04  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5102  000D08  2ADE               	incf	postinc2,f,c
  5103  000D0A  0E00               	movlw	0
  5104  000D0C  22DD               	addwfc	postdec2,f,c
  5105  000D0E                     i2l3502:
  5106                           
  5107                           ;doprnt.c: 1182: width--;
  5108  000D0E  0100               	movlb	0	; () banked
  5109  000D10  0763               	decf	__doprnt@width& (0+255),f,b
  5110  000D12  A0D8               	btfss	status,0,c
  5111  000D14  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  5112  000D16                     i2l3504:
  5113                           
  5114                           ; BSR set to: 0
  5115  000D16  0100               	movlb	0	; () banked
  5116  000D18  BF64               	btfsc	(__doprnt@width+1)& (0+255),7,b
  5117  000D1A  D007               	goto	i2l3506
  5118  000D1C  0100               	movlb	0	; () banked
  5119  000D1E  5164               	movf	(__doprnt@width+1)& (0+255),w,b
  5120  000D20  E1C4               	bnz	i2l3494
  5121  000D22  0100               	movlb	0	; () banked
  5122  000D24  0563               	decf	__doprnt@width& (0+255),w,b
  5123  000D26  B0D8               	btfsc	status,0,c
  5124  000D28  D7C0               	goto	i2l3494
  5125  000D2A                     i2l3506:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 1183: }
  5129                           ;doprnt.c: 1188: if(flag & 0x03)
  5130  000D2A  0E03               	movlw	3
  5131  000D2C  0100               	movlb	0	; () banked
  5132  000D2E  1565               	andwf	__doprnt@flag& (0+255),w,b
  5133  000D30  6E46               	movwf	??__doprnt& (0+255),c
  5134  000D32  0E00               	movlw	0
  5135  000D34  0100               	movlb	0	; () banked
  5136  000D36  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5137  000D38  6E47               	movwf	(??__doprnt+1)& (0+255),c
  5138  000D3A  5046               	movf	??__doprnt,w,c
  5139  000D3C  1047               	iorwf	??__doprnt+1,w,c
  5140  000D3E  B4D8               	btfsc	status,2,c
  5141  000D40  D0A4               	goto	i2l3526
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 1190: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5145  000D42  EE20 F002          	lfsr	2,2
  5146  000D46  5040               	movf	__doprnt@pb,w,c
  5147  000D48  26D9               	addwf	fsr2l,f,c
  5148  000D4A  5041               	movf	__doprnt@pb+1,w,c
  5149  000D4C  22DA               	addwfc	fsr2h,f,c
  5150  000D4E  50DE               	movf	postinc2,w,c
  5151  000D50  10DE               	iorwf	postinc2,w,c
  5152  000D52  B4D8               	btfsc	status,2,c
  5153  000D54  D013               	goto	i2l3512
  5154                           
  5155                           ; BSR set to: 0
  5156  000D56  EE20 F002          	lfsr	2,2
  5157  000D5A  5040               	movf	__doprnt@pb,w,c
  5158  000D5C  26D9               	addwf	fsr2l,f,c
  5159  000D5E  5041               	movf	__doprnt@pb+1,w,c
  5160  000D60  22DA               	addwfc	fsr2h,f,c
  5161  000D62  D801               	call	i2u359_48
  5162  000D64  D092               	goto	i2l3526
  5163  000D66                     i2u359_48:
  5164  000D66  0005               	push	
  5165  000D68  6EFA               	movwf	pclath,c
  5166  000D6A  50DE               	movf	postinc2,w,c
  5167  000D6C  6EFD               	movwf	tosl,c
  5168  000D6E  50DE               	movf	postinc2,w,c
  5169  000D70  6EFE               	movwf	tosh,c
  5170  000D72  50F8               	movf	tblptru,w,c
  5171  000D74  6EFF               	movwf	tosu,c
  5172  000D76  50FA               	movf	pclath,w,c
  5173  000D78  0E2D               	movlw	45
  5174  000D7A  0012               	return		;indir
  5175  000D7C                     i2l3512:
  5176  000D7C  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5177  000D80  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5178  000D84  CFDE F046          	movff	postinc2,??__doprnt
  5179  000D88  CFDD F047          	movff	postdec2,??__doprnt+1
  5180  000D8C  C046  FFD9         	movff	??__doprnt,fsr2l
  5181  000D90  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5182  000D94  0E2D               	movlw	45
  5183  000D96  D077               	goto	L2
  5184  000D98                     i2l3514:
  5185  000D98  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5186  000D9C  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5187  000DA0  2ADE               	incf	postinc2,f,c
  5188  000DA2  0E00               	movlw	0
  5189  000DA4  22DD               	addwfc	postdec2,f,c
  5190                           
  5191                           ;doprnt.c: 1195: }
  5192                           ;doprnt.c: 1196: while(c--) {
  5193  000DA6  D071               	goto	i2l3526
  5194  000DA8                     i2l3516:
  5195                           
  5196                           ;doprnt.c: 1200: {
  5197                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5198  000DA8  C069  F001         	movff	__doprnt@val,___lldiv@dividend
  5199  000DAC  C06A  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  5200  000DB0  C06B  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  5201  000DB4  C06C  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  5202  000DB8  0100               	movlb	0	; () banked
  5203  000DBA  5176               	movf	__doprnt@c& (0+255),w,b
  5204  000DBC  0D04               	mullw	4
  5205  000DBE  0E01               	movlw	low _dpowers
  5206  000DC0  24F3               	addwf	prodl,w,c
  5207  000DC2  6EF6               	movwf	tblptrl,c
  5208  000DC4  0E06               	movlw	high _dpowers
  5209  000DC6  20F4               	addwfc	prodh,w,c
  5210  000DC8  6EF7               	movwf	tblptrh,c
  5211  000DCA                     	if	0	;There are less than 3 active tblptr bytes
  5212  000DCA                     	endif
  5213  000DCA  0009               	tblrd		*+
  5214  000DCC  CFF5 F005          	movff	tablat,___lldiv@divisor
  5215  000DD0  0009               	tblrd		*+
  5216  000DD2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5217  000DD6  0009               	tblrd		*+
  5218  000DD8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5219  000DDC  000A               	tblrd		*-
  5220  000DDE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5221  000DE2  EC88  F014         	call	___lldiv
  5222  000DE6  C001  F06D         	movff	?___lldiv,__doprnt@tmpval
  5223  000DEA  C002  F06E         	movff	?___lldiv+1,__doprnt@tmpval+1
  5224  000DEE  C003  F06F         	movff	?___lldiv+2,__doprnt@tmpval+2
  5225  000DF2  C004  F070         	movff	?___lldiv+3,__doprnt@tmpval+3
  5226                           
  5227                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5228  000DF6  C06D  F00E         	movff	__doprnt@tmpval,___llmod@dividend
  5229  000DFA  C06E  F00F         	movff	__doprnt@tmpval+1,___llmod@dividend+1
  5230  000DFE  C06F  F010         	movff	__doprnt@tmpval+2,___llmod@dividend+2
  5231  000E02  C070  F011         	movff	__doprnt@tmpval+3,___llmod@dividend+3
  5232  000E06  0E0A               	movlw	10
  5233  000E08  6E12               	movwf	___llmod@divisor,c
  5234  000E0A  0E00               	movlw	0
  5235  000E0C  6E13               	movwf	___llmod@divisor+1,c
  5236  000E0E  0E00               	movlw	0
  5237  000E10  6E14               	movwf	___llmod@divisor+2,c
  5238  000E12  0E00               	movlw	0
  5239  000E14  6E15               	movwf	___llmod@divisor+3,c
  5240  000E16  EC3D  F015         	call	___llmod	;wreg free
  5241  000E1A  C00E  F06D         	movff	?___llmod,__doprnt@tmpval
  5242  000E1E  C00F  F06E         	movff	?___llmod+1,__doprnt@tmpval+1
  5243  000E22  C010  F06F         	movff	?___llmod+2,__doprnt@tmpval+2
  5244  000E26  C011  F070         	movff	?___llmod+3,__doprnt@tmpval+3
  5245                           
  5246                           ;doprnt.c: 1203: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmp
      +                          val.vd));
  5247  000E2A  EE20 F002          	lfsr	2,2
  5248  000E2E  5040               	movf	__doprnt@pb,w,c
  5249  000E30  26D9               	addwf	fsr2l,f,c
  5250  000E32  5041               	movf	__doprnt@pb+1,w,c
  5251  000E34  22DA               	addwfc	fsr2h,f,c
  5252  000E36  50DE               	movf	postinc2,w,c
  5253  000E38  10DE               	iorwf	postinc2,w,c
  5254  000E3A  B4D8               	btfsc	status,2,c
  5255  000E3C  D015               	goto	i2l3524
  5256  000E3E  EE20 F002          	lfsr	2,2
  5257  000E42  5040               	movf	__doprnt@pb,w,c
  5258  000E44  26D9               	addwf	fsr2l,f,c
  5259  000E46  5041               	movf	__doprnt@pb+1,w,c
  5260  000E48  22DA               	addwfc	fsr2h,f,c
  5261  000E4A  D801               	call	i2u361_48
  5262  000E4C  D01E               	goto	i2l3526
  5263  000E4E                     i2u361_48:
  5264  000E4E  0005               	push	
  5265  000E50  6EFA               	movwf	pclath,c
  5266  000E52  50DE               	movf	postinc2,w,c
  5267  000E54  6EFD               	movwf	tosl,c
  5268  000E56  50DE               	movf	postinc2,w,c
  5269  000E58  6EFE               	movwf	tosh,c
  5270  000E5A  50F8               	movf	tblptru,w,c
  5271  000E5C  6EFF               	movwf	tosu,c
  5272  000E5E  50FA               	movf	pclath,w,c
  5273  000E60  0100               	movlb	0	; () banked
  5274  000E62  516D               	movf	__doprnt@tmpval& (0+255),w,b
  5275  000E64  0F30               	addlw	48
  5276  000E66  0012               	return		;indir
  5277  000E68                     i2l3524:
  5278  000E68  0100               	movlb	0	; () banked
  5279  000E6A  516D               	movf	__doprnt@tmpval& (0+255),w,b
  5280  000E6C  0F30               	addlw	48
  5281  000E6E  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5282  000E72  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5283  000E76  CFDE F046          	movff	postinc2,??__doprnt
  5284  000E7A  CFDD F047          	movff	postdec2,??__doprnt+1
  5285  000E7E  C046  FFD9         	movff	??__doprnt,fsr2l
  5286  000E82  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5287  000E86                     L2:
  5288  000E86  6EDF               	movwf	indf2,c
  5289  000E88  D787               	goto	i2l3514
  5290  000E8A                     i2l3526:
  5291  000E8A  0100               	movlb	0	; () banked
  5292  000E8C  0776               	decf	__doprnt@c& (0+255),f,b
  5293  000E8E  0100               	movlb	0	; () banked
  5294  000E90  2976               	incf	__doprnt@c& (0+255),w,b
  5295  000E92  B4D8               	btfsc	status,2,c
  5296  000E94  D037               	goto	i2l3538
  5297  000E96  D788               	goto	i2l3516
  5298  000E98                     i2l3528:
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 1208: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5302  000E98  EE20 F002          	lfsr	2,2
  5303  000E9C  5040               	movf	__doprnt@pb,w,c
  5304  000E9E  26D9               	addwf	fsr2l,f,c
  5305  000EA0  5041               	movf	__doprnt@pb+1,w,c
  5306  000EA2  22DA               	addwfc	fsr2h,f,c
  5307  000EA4  50DE               	movf	postinc2,w,c
  5308  000EA6  10DE               	iorwf	postinc2,w,c
  5309  000EA8  B4D8               	btfsc	status,2,c
  5310  000EAA  D013               	goto	i2l3532
  5311                           
  5312                           ; BSR set to: 0
  5313  000EAC  EE20 F002          	lfsr	2,2
  5314  000EB0  5040               	movf	__doprnt@pb,w,c
  5315  000EB2  26D9               	addwf	fsr2l,f,c
  5316  000EB4  5041               	movf	__doprnt@pb+1,w,c
  5317  000EB6  22DA               	addwfc	fsr2h,f,c
  5318  000EB8  D801               	call	i2u364_48
  5319  000EBA  D020               	goto	i2l3536
  5320  000EBC                     i2u364_48:
  5321  000EBC  0005               	push	
  5322  000EBE  6EFA               	movwf	pclath,c
  5323  000EC0  50DE               	movf	postinc2,w,c
  5324  000EC2  6EFD               	movwf	tosl,c
  5325  000EC4  50DE               	movf	postinc2,w,c
  5326  000EC6  6EFE               	movwf	tosh,c
  5327  000EC8  50F8               	movf	tblptru,w,c
  5328  000ECA  6EFF               	movwf	tosu,c
  5329  000ECC  50FA               	movf	pclath,w,c
  5330  000ECE  0E30               	movlw	48
  5331  000ED0  0012               	return		;indir
  5332  000ED2                     i2l3532:
  5333  000ED2  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5334  000ED6  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5335  000EDA  CFDE F046          	movff	postinc2,??__doprnt
  5336  000EDE  CFDD F047          	movff	postdec2,??__doprnt+1
  5337  000EE2  C046  FFD9         	movff	??__doprnt,fsr2l
  5338  000EE6  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5339  000EEA  0E30               	movlw	48
  5340  000EEC  6EDF               	movwf	indf2,c
  5341  000EEE  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5342  000EF2  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5343  000EF6  2ADE               	incf	postinc2,f,c
  5344  000EF8  0E00               	movlw	0
  5345  000EFA  22DD               	addwfc	postdec2,f,c
  5346  000EFC                     i2l3536:
  5347                           
  5348                           ;doprnt.c: 1209: exp--;
  5349  000EFC  0100               	movlb	0	; () banked
  5350  000EFE  0767               	decf	__doprnt@exp& (0+255),f,b
  5351  000F00  A0D8               	btfss	status,0,c
  5352  000F02  0768               	decf	(__doprnt@exp+1)& (0+255),f,b
  5353  000F04                     i2l3538:
  5354                           
  5355                           ; BSR set to: 0
  5356  000F04  0100               	movlb	0	; () banked
  5357  000F06  BF68               	btfsc	(__doprnt@exp+1)& (0+255),7,b
  5358  000F08  D007               	goto	i2l3540
  5359  000F0A  0100               	movlb	0	; () banked
  5360  000F0C  5168               	movf	(__doprnt@exp+1)& (0+255),w,b
  5361  000F0E  E1C4               	bnz	i2l3528
  5362  000F10  0100               	movlb	0	; () banked
  5363  000F12  0567               	decf	__doprnt@exp& (0+255),w,b
  5364  000F14  B0D8               	btfsc	status,0,c
  5365  000F16  D7C0               	goto	i2l3528
  5366  000F18                     i2l3540:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;doprnt.c: 1210: }
  5370                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5371  000F18  0100               	movlb	0	; () banked
  5372  000F1A  BF75               	btfsc	(__doprnt@prec+1)& (0+255),7,b
  5373  000F1C  D00C               	goto	i2l544
  5374  000F1E  0100               	movlb	0	; () banked
  5375  000F20  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5376  000F22  E105               	bnz	i2u366_40
  5377  000F24  0E09               	movlw	9
  5378  000F26  0100               	movlb	0	; () banked
  5379  000F28  5D74               	subwf	__doprnt@prec& (0+255),w,b
  5380  000F2A  A0D8               	btfss	status,0,c
  5381  000F2C  D004               	goto	i2l544
  5382  000F2E                     i2u366_40:
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5386  000F2E  0E08               	movlw	8
  5387  000F30  0100               	movlb	0	; () banked
  5388  000F32  6F76               	movwf	__doprnt@c& (0+255),b
  5389  000F34  D002               	goto	i2l3544
  5390  000F36                     i2l544:
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;doprnt.c: 1213: else
  5394                           ;doprnt.c: 1214: c = prec;
  5395  000F36  C074  F076         	movff	__doprnt@prec,__doprnt@c
  5396  000F3A                     i2l3544:
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 1215: prec -= c;
  5400  000F3A  0100               	movlb	0	; () banked
  5401  000F3C  5176               	movf	__doprnt@c& (0+255),w,b
  5402  000F3E  0100               	movlb	0	; () banked
  5403  000F40  5F74               	subwf	__doprnt@prec& (0+255),f,b
  5404  000F42  0E00               	movlw	0
  5405  000F44  0100               	movlb	0	; () banked
  5406  000F46  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5407  000F48  0EFF               	movlw	255
  5408  000F4A  0100               	movlb	0	; () banked
  5409  000F4C  5B75               	subwfb	(__doprnt@prec+1)& (0+255),f,b
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;doprnt.c: 1219: if(c)
  5413  000F4E  0100               	movlb	0	; () banked
  5414  000F50  5176               	movf	__doprnt@c& (0+255),w,b
  5415  000F52  0100               	movlb	0	; () banked
  5416  000F54  B4D8               	btfsc	status,2,c
  5417  000F56  D032               	goto	i2l3556
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;doprnt.c: 1221: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
  5421  000F58  EE20 F002          	lfsr	2,2
  5422  000F5C  5040               	movf	__doprnt@pb,w,c
  5423  000F5E  26D9               	addwf	fsr2l,f,c
  5424  000F60  5041               	movf	__doprnt@pb+1,w,c
  5425  000F62  22DA               	addwfc	fsr2h,f,c
  5426  000F64  50DE               	movf	postinc2,w,c
  5427  000F66  10DE               	iorwf	postinc2,w,c
  5428  000F68  B4D8               	btfsc	status,2,c
  5429  000F6A  D013               	goto	i2l3552
  5430                           
  5431                           ; BSR set to: 0
  5432  000F6C  EE20 F002          	lfsr	2,2
  5433  000F70  5040               	movf	__doprnt@pb,w,c
  5434  000F72  26D9               	addwf	fsr2l,f,c
  5435  000F74  5041               	movf	__doprnt@pb+1,w,c
  5436  000F76  22DA               	addwfc	fsr2h,f,c
  5437  000F78  D801               	call	i2u369_48
  5438  000F7A  D020               	goto	i2l3556
  5439  000F7C                     i2u369_48:
  5440  000F7C  0005               	push	
  5441  000F7E  6EFA               	movwf	pclath,c
  5442  000F80  50DE               	movf	postinc2,w,c
  5443  000F82  6EFD               	movwf	tosl,c
  5444  000F84  50DE               	movf	postinc2,w,c
  5445  000F86  6EFE               	movwf	tosh,c
  5446  000F88  50F8               	movf	tblptru,w,c
  5447  000F8A  6EFF               	movwf	tosu,c
  5448  000F8C  50FA               	movf	pclath,w,c
  5449  000F8E  0E2E               	movlw	46
  5450  000F90  0012               	return		;indir
  5451  000F92                     i2l3552:
  5452  000F92  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5453  000F96  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5454  000F9A  CFDE F046          	movff	postinc2,??__doprnt
  5455  000F9E  CFDD F047          	movff	postdec2,??__doprnt+1
  5456  000FA2  C046  FFD9         	movff	??__doprnt,fsr2l
  5457  000FA6  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5458  000FAA  0E2E               	movlw	46
  5459  000FAC  6EDF               	movwf	indf2,c
  5460  000FAE  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5461  000FB2  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5462  000FB6  2ADE               	incf	postinc2,f,c
  5463  000FB8  0E00               	movlw	0
  5464  000FBA  22DD               	addwfc	postdec2,f,c
  5465  000FBC                     i2l3556:
  5466                           
  5467                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5468  000FBC  0100               	movlb	0	; () banked
  5469  000FBE  5176               	movf	__doprnt@c& (0+255),w,b
  5470  000FC0  EC25  F00B         	call	_scale
  5471  000FC4  C024  F060         	movff	?_scale,__doprnt$1972
  5472  000FC8  C025  F061         	movff	?_scale+1,__doprnt$1972+1
  5473  000FCC  C026  F062         	movff	?_scale+2,__doprnt$1972+2
  5474                           
  5475                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5476  000FD0  C071  F018         	movff	__doprnt@fval,___ftmul@f2
  5477  000FD4  C072  F019         	movff	__doprnt@fval+1,___ftmul@f2+1
  5478  000FD8  C073  F01A         	movff	__doprnt@fval+2,___ftmul@f2+2
  5479  000FDC  C060  F015         	movff	__doprnt$1972,___ftmul@f1
  5480  000FE0  C061  F016         	movff	__doprnt$1972+1,___ftmul@f1+1
  5481  000FE4  C062  F017         	movff	__doprnt$1972+2,___ftmul@f1+2
  5482  000FE8  EC48  F012         	call	___ftmul	;wreg free
  5483  000FEC  C015  F024         	movff	?___ftmul,___fttol@f1
  5484  000FF0  C016  F025         	movff	?___ftmul+1,___fttol@f1+1
  5485  000FF4  C017  F026         	movff	?___ftmul+2,___fttol@f1+2
  5486  000FF8  ECCE  F011         	call	___fttol	;wreg free
  5487  000FFC  C024  F069         	movff	?___fttol,__doprnt@val
  5488  001000  C025  F06A         	movff	?___fttol+1,__doprnt@val+1
  5489  001004  C026  F06B         	movff	?___fttol+2,__doprnt@val+2
  5490  001008  C027  F06C         	movff	?___fttol+3,__doprnt@val+3
  5491                           
  5492                           ;doprnt.c: 1228: while(c--) {
  5493  00100C  D09E               	goto	i2l3572
  5494  00100E                     i2l3560:
  5495                           
  5496                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5497  00100E  C069  F001         	movff	__doprnt@val,___lldiv@dividend
  5498  001012  C06A  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  5499  001016  C06B  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  5500  00101A  C06C  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  5501  00101E  0100               	movlb	0	; () banked
  5502  001020  5176               	movf	__doprnt@c& (0+255),w,b
  5503  001022  0D04               	mullw	4
  5504  001024  0E01               	movlw	low _dpowers
  5505  001026  24F3               	addwf	prodl,w,c
  5506  001028  6EF6               	movwf	tblptrl,c
  5507  00102A  0E06               	movlw	high _dpowers
  5508  00102C  20F4               	addwfc	prodh,w,c
  5509  00102E  6EF7               	movwf	tblptrh,c
  5510  001030                     	if	0	;There are less than 3 active tblptr bytes
  5511  001030                     	endif
  5512  001030  0009               	tblrd		*+
  5513  001032  CFF5 F005          	movff	tablat,___lldiv@divisor
  5514  001036  0009               	tblrd		*+
  5515  001038  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5516  00103C  0009               	tblrd		*+
  5517  00103E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5518  001042  000A               	tblrd		*-
  5519  001044  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5520  001048  EC88  F014         	call	___lldiv	;wreg free
  5521  00104C  C001  F06D         	movff	?___lldiv,__doprnt@tmpval
  5522  001050  C002  F06E         	movff	?___lldiv+1,__doprnt@tmpval+1
  5523  001054  C003  F06F         	movff	?___lldiv+2,__doprnt@tmpval+2
  5524  001058  C004  F070         	movff	?___lldiv+3,__doprnt@tmpval+3
  5525                           
  5526                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5527  00105C  C06D  F00E         	movff	__doprnt@tmpval,___llmod@dividend
  5528  001060  C06E  F00F         	movff	__doprnt@tmpval+1,___llmod@dividend+1
  5529  001064  C06F  F010         	movff	__doprnt@tmpval+2,___llmod@dividend+2
  5530  001068  C070  F011         	movff	__doprnt@tmpval+3,___llmod@dividend+3
  5531  00106C  0E0A               	movlw	10
  5532  00106E  6E12               	movwf	___llmod@divisor,c
  5533  001070  0E00               	movlw	0
  5534  001072  6E13               	movwf	___llmod@divisor+1,c
  5535  001074  0E00               	movlw	0
  5536  001076  6E14               	movwf	___llmod@divisor+2,c
  5537  001078  0E00               	movlw	0
  5538  00107A  6E15               	movwf	___llmod@divisor+3,c
  5539  00107C  EC3D  F015         	call	___llmod	;wreg free
  5540  001080  C00E  F06D         	movff	?___llmod,__doprnt@tmpval
  5541  001084  C00F  F06E         	movff	?___llmod+1,__doprnt@tmpval+1
  5542  001088  C010  F06F         	movff	?___llmod+2,__doprnt@tmpval+2
  5543  00108C  C011  F070         	movff	?___llmod+3,__doprnt@tmpval+3
  5544                           
  5545                           ;doprnt.c: 1231: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmp
      +                          val.vd));
  5546  001090  EE20 F002          	lfsr	2,2
  5547  001094  5040               	movf	__doprnt@pb,w,c
  5548  001096  26D9               	addwf	fsr2l,f,c
  5549  001098  5041               	movf	__doprnt@pb+1,w,c
  5550  00109A  22DA               	addwfc	fsr2h,f,c
  5551  00109C  50DE               	movf	postinc2,w,c
  5552  00109E  10DE               	iorwf	postinc2,w,c
  5553  0010A0  B4D8               	btfsc	status,2,c
  5554  0010A2  D015               	goto	i2l3568
  5555  0010A4  EE20 F002          	lfsr	2,2
  5556  0010A8  5040               	movf	__doprnt@pb,w,c
  5557  0010AA  26D9               	addwf	fsr2l,f,c
  5558  0010AC  5041               	movf	__doprnt@pb+1,w,c
  5559  0010AE  22DA               	addwfc	fsr2h,f,c
  5560  0010B0  D801               	call	i2u371_48
  5561  0010B2  D024               	goto	i2l3570
  5562  0010B4                     i2u371_48:
  5563  0010B4  0005               	push	
  5564  0010B6  6EFA               	movwf	pclath,c
  5565  0010B8  50DE               	movf	postinc2,w,c
  5566  0010BA  6EFD               	movwf	tosl,c
  5567  0010BC  50DE               	movf	postinc2,w,c
  5568  0010BE  6EFE               	movwf	tosh,c
  5569  0010C0  50F8               	movf	tblptru,w,c
  5570  0010C2  6EFF               	movwf	tosu,c
  5571  0010C4  50FA               	movf	pclath,w,c
  5572  0010C6  0100               	movlb	0	; () banked
  5573  0010C8  516D               	movf	__doprnt@tmpval& (0+255),w,b
  5574  0010CA  0F30               	addlw	48
  5575  0010CC  0012               	return		;indir
  5576  0010CE                     i2l3568:
  5577  0010CE  0100               	movlb	0	; () banked
  5578  0010D0  516D               	movf	__doprnt@tmpval& (0+255),w,b
  5579  0010D2  0F30               	addlw	48
  5580  0010D4  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5581  0010D8  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5582  0010DC  CFDE F046          	movff	postinc2,??__doprnt
  5583  0010E0  CFDD F047          	movff	postdec2,??__doprnt+1
  5584  0010E4  C046  FFD9         	movff	??__doprnt,fsr2l
  5585  0010E8  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5586  0010EC  6EDF               	movwf	indf2,c
  5587  0010EE  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5588  0010F2  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5589  0010F6  2ADE               	incf	postinc2,f,c
  5590  0010F8  0E00               	movlw	0
  5591  0010FA  22DD               	addwfc	postdec2,f,c
  5592  0010FC                     i2l3570:
  5593                           
  5594                           ;doprnt.c: 1232: val %= dpowers[c];
  5595  0010FC  C069  F00E         	movff	__doprnt@val,___llmod@dividend
  5596  001100  C06A  F00F         	movff	__doprnt@val+1,___llmod@dividend+1
  5597  001104  C06B  F010         	movff	__doprnt@val+2,___llmod@dividend+2
  5598  001108  C06C  F011         	movff	__doprnt@val+3,___llmod@dividend+3
  5599  00110C  0100               	movlb	0	; () banked
  5600  00110E  5176               	movf	__doprnt@c& (0+255),w,b
  5601  001110  0D04               	mullw	4
  5602  001112  0E01               	movlw	low _dpowers
  5603  001114  24F3               	addwf	prodl,w,c
  5604  001116  6EF6               	movwf	tblptrl,c
  5605  001118  0E06               	movlw	high _dpowers
  5606  00111A  20F4               	addwfc	prodh,w,c
  5607  00111C  6EF7               	movwf	tblptrh,c
  5608  00111E                     	if	0	;There are less than 3 active tblptr bytes
  5609  00111E                     	endif
  5610  00111E  0009               	tblrd		*+
  5611  001120  CFF5 F012          	movff	tablat,___llmod@divisor
  5612  001124  0009               	tblrd		*+
  5613  001126  CFF5 F013          	movff	tablat,___llmod@divisor+1
  5614  00112A  0009               	tblrd		*+
  5615  00112C  CFF5 F014          	movff	tablat,___llmod@divisor+2
  5616  001130  000A               	tblrd		*-
  5617  001132  CFF5 F015          	movff	tablat,___llmod@divisor+3
  5618  001136  EC3D  F015         	call	___llmod
  5619  00113A  C00E  F069         	movff	?___llmod,__doprnt@val
  5620  00113E  C00F  F06A         	movff	?___llmod+1,__doprnt@val+1
  5621  001142  C010  F06B         	movff	?___llmod+2,__doprnt@val+2
  5622  001146  C011  F06C         	movff	?___llmod+3,__doprnt@val+3
  5623  00114A                     i2l3572:
  5624  00114A  0100               	movlb	0	; () banked
  5625  00114C  0776               	decf	__doprnt@c& (0+255),f,b
  5626  00114E  0100               	movlb	0	; () banked
  5627  001150  2976               	incf	__doprnt@c& (0+255),w,b
  5628  001152  B4D8               	btfsc	status,2,c
  5629  001154  D037               	goto	i2l3584
  5630  001156  D75B               	goto	i2l3560
  5631  001158                     i2l3574:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;doprnt.c: 1236: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5635  001158  EE20 F002          	lfsr	2,2
  5636  00115C  5040               	movf	__doprnt@pb,w,c
  5637  00115E  26D9               	addwf	fsr2l,f,c
  5638  001160  5041               	movf	__doprnt@pb+1,w,c
  5639  001162  22DA               	addwfc	fsr2h,f,c
  5640  001164  50DE               	movf	postinc2,w,c
  5641  001166  10DE               	iorwf	postinc2,w,c
  5642  001168  B4D8               	btfsc	status,2,c
  5643  00116A  D013               	goto	i2l3578
  5644                           
  5645                           ; BSR set to: 0
  5646  00116C  EE20 F002          	lfsr	2,2
  5647  001170  5040               	movf	__doprnt@pb,w,c
  5648  001172  26D9               	addwf	fsr2l,f,c
  5649  001174  5041               	movf	__doprnt@pb+1,w,c
  5650  001176  22DA               	addwfc	fsr2h,f,c
  5651  001178  D801               	call	i2u374_48
  5652  00117A  D020               	goto	i2l3582
  5653  00117C                     i2u374_48:
  5654  00117C  0005               	push	
  5655  00117E  6EFA               	movwf	pclath,c
  5656  001180  50DE               	movf	postinc2,w,c
  5657  001182  6EFD               	movwf	tosl,c
  5658  001184  50DE               	movf	postinc2,w,c
  5659  001186  6EFE               	movwf	tosh,c
  5660  001188  50F8               	movf	tblptru,w,c
  5661  00118A  6EFF               	movwf	tosu,c
  5662  00118C  50FA               	movf	pclath,w,c
  5663  00118E  0E30               	movlw	48
  5664  001190  0012               	return		;indir
  5665  001192                     i2l3578:
  5666  001192  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5667  001196  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5668  00119A  CFDE F046          	movff	postinc2,??__doprnt
  5669  00119E  CFDD F047          	movff	postdec2,??__doprnt+1
  5670  0011A2  C046  FFD9         	movff	??__doprnt,fsr2l
  5671  0011A6  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5672  0011AA  0E30               	movlw	48
  5673  0011AC  6EDF               	movwf	indf2,c
  5674  0011AE  C040  FFD9         	movff	__doprnt@pb,fsr2l
  5675  0011B2  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  5676  0011B6  2ADE               	incf	postinc2,f,c
  5677  0011B8  0E00               	movlw	0
  5678  0011BA  22DD               	addwfc	postdec2,f,c
  5679  0011BC                     i2l3582:
  5680                           
  5681                           ;doprnt.c: 1237: prec--;
  5682  0011BC  0100               	movlb	0	; () banked
  5683  0011BE  0774               	decf	__doprnt@prec& (0+255),f,b
  5684  0011C0  A0D8               	btfss	status,0,c
  5685  0011C2  0775               	decf	(__doprnt@prec+1)& (0+255),f,b
  5686  0011C4                     i2l3584:
  5687                           
  5688                           ; BSR set to: 0
  5689  0011C4  0100               	movlb	0	; () banked
  5690  0011C6  5174               	movf	__doprnt@prec& (0+255),w,b
  5691  0011C8  0100               	movlb	0	; () banked
  5692  0011CA  1175               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5693  0011CC  B4D8               	btfsc	status,2,c
  5694  0011CE  D22A               	goto	i2l3684
  5695  0011D0  D7C3               	goto	i2l3574
  5696  0011D2                     i2l502:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;doprnt.c: 1246: }
  5700                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5701  0011D2  0100               	movlb	0	; () banked
  5702  0011D4  BD65               	btfsc	__doprnt@flag& (0+255),6,b
  5703  0011D6  D046               	goto	i2l559
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;doprnt.c: 1253: {
  5707                           ;doprnt.c: 1255: if(flag & 0x10)
  5708  0011D8  0100               	movlb	0	; () banked
  5709  0011DA  A965               	btfss	__doprnt@flag& (0+255),4,b
  5710  0011DC  D019               	goto	i2l3590
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5714  0011DE  C044  FFD9         	movff	__doprnt@ap,fsr2l
  5715  0011E2  C045  FFDA         	movff	__doprnt@ap+1,fsr2h
  5716  0011E6  CFDF F046          	movff	indf2,??__doprnt
  5717  0011EA  0E04               	movlw	4
  5718  0011EC  26DE               	addwf	postinc2,f,c
  5719  0011EE  CFDF F047          	movff	indf2,??__doprnt+1
  5720  0011F2  0E00               	movlw	0
  5721  0011F4  22DD               	addwfc	postdec2,f,c
  5722  0011F6  C046  FFD9         	movff	??__doprnt,fsr2l
  5723  0011FA  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5724  0011FE  CFDE F069          	movff	postinc2,__doprnt@val
  5725  001202  CFDE F06A          	movff	postinc2,__doprnt@val+1
  5726  001206  CFDE F06B          	movff	postinc2,__doprnt@val+2
  5727  00120A  CFDE F06C          	movff	postinc2,__doprnt@val+3
  5728  00120E  D01A               	goto	i2l3592
  5729  001210                     i2l3590:
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;doprnt.c: 1257: else
  5733                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5734  001210  C044  FFD9         	movff	__doprnt@ap,fsr2l
  5735  001214  C045  FFDA         	movff	__doprnt@ap+1,fsr2h
  5736  001218  CFDF F046          	movff	indf2,??__doprnt
  5737  00121C  0E02               	movlw	2
  5738  00121E  26DE               	addwf	postinc2,f,c
  5739  001220  CFDF F047          	movff	indf2,??__doprnt+1
  5740  001224  0E00               	movlw	0
  5741  001226  22DD               	addwfc	postdec2,f,c
  5742  001228  C046  FFD9         	movff	??__doprnt,fsr2l
  5743  00122C  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5744  001230  CFDE F069          	movff	postinc2,__doprnt@val
  5745  001234  CFDD F06A          	movff	postdec2,__doprnt@val+1
  5746  001238  0100               	movlb	0	; () banked
  5747  00123A  0E00               	movlw	0
  5748  00123C  BF6A               	btfsc	(__doprnt@val+1)& (0+255),7,b
  5749  00123E  0EFF               	movlw	-1
  5750  001240  6F6B               	movwf	(__doprnt@val+2)& (0+255),b
  5751  001242  6F6C               	movwf	(__doprnt@val+3)& (0+255),b
  5752  001244                     i2l3592:
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;doprnt.c: 1261: if((long)val < 0) {
  5756  001244  0100               	movlb	0	; () banked
  5757  001246  AF6C               	btfss	(__doprnt@val+3)& (0+255),7,b
  5758  001248  D044               	goto	i2l3602
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;doprnt.c: 1262: flag |= 0x03;
  5762  00124A  0E03               	movlw	3
  5763  00124C  0100               	movlb	0	; () banked
  5764  00124E  1365               	iorwf	__doprnt@flag& (0+255),f,b
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;doprnt.c: 1263: val = -val;
  5768  001250  0100               	movlb	0	; () banked
  5769  001252  1F6C               	comf	(__doprnt@val+3)& (0+255),f,b
  5770  001254  1F6B               	comf	(__doprnt@val+2)& (0+255),f,b
  5771  001256  1F6A               	comf	(__doprnt@val+1)& (0+255),f,b
  5772  001258  6D69               	negf	__doprnt@val& (0+255),b
  5773  00125A  0E00               	movlw	0
  5774  00125C  236A               	addwfc	(__doprnt@val+1)& (0+255),f,b
  5775  00125E  236B               	addwfc	(__doprnt@val+2)& (0+255),f,b
  5776  001260  236C               	addwfc	(__doprnt@val+3)& (0+255),f,b
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;doprnt.c: 1264: }
  5780                           ;doprnt.c: 1266: }
  5781  001262  D037               	goto	i2l3602
  5782  001264                     i2l559:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;doprnt.c: 1268: else
  5786                           ;doprnt.c: 1273: {
  5787                           ;doprnt.c: 1281: if(flag & 0x10)
  5788  001264  0100               	movlb	0	; () banked
  5789  001266  A965               	btfss	__doprnt@flag& (0+255),4,b
  5790  001268  D019               	goto	i2l3600
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5794  00126A  C044  FFD9         	movff	__doprnt@ap,fsr2l
  5795  00126E  C045  FFDA         	movff	__doprnt@ap+1,fsr2h
  5796  001272  CFDF F046          	movff	indf2,??__doprnt
  5797  001276  0E04               	movlw	4
  5798  001278  26DE               	addwf	postinc2,f,c
  5799  00127A  CFDF F047          	movff	indf2,??__doprnt+1
  5800  00127E  0E00               	movlw	0
  5801  001280  22DD               	addwfc	postdec2,f,c
  5802  001282  C046  FFD9         	movff	??__doprnt,fsr2l
  5803  001286  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5804  00128A  CFDE F069          	movff	postinc2,__doprnt@val
  5805  00128E  CFDE F06A          	movff	postinc2,__doprnt@val+1
  5806  001292  CFDE F06B          	movff	postinc2,__doprnt@val+2
  5807  001296  CFDE F06C          	movff	postinc2,__doprnt@val+3
  5808  00129A  D01B               	goto	i2l3602
  5809  00129C                     i2l3600:
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;doprnt.c: 1283: else
  5813                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5814  00129C  C044  FFD9         	movff	__doprnt@ap,fsr2l
  5815  0012A0  C045  FFDA         	movff	__doprnt@ap+1,fsr2h
  5816  0012A4  CFDF F046          	movff	indf2,??__doprnt
  5817  0012A8  0E02               	movlw	2
  5818  0012AA  26DE               	addwf	postinc2,f,c
  5819  0012AC  CFDF F047          	movff	indf2,??__doprnt+1
  5820  0012B0  0E00               	movlw	0
  5821  0012B2  22DD               	addwfc	postdec2,f,c
  5822  0012B4  C046  FFD9         	movff	??__doprnt,fsr2l
  5823  0012B8  C047  FFDA         	movff	??__doprnt+1,fsr2h
  5824  0012BC  CFDE F048          	movff	postinc2,??__doprnt+2
  5825  0012C0  CFDD F049          	movff	postdec2,??__doprnt+3
  5826  0012C4  C048  F069         	movff	??__doprnt+2,__doprnt@val
  5827  0012C8  C049  F06A         	movff	??__doprnt+3,__doprnt@val+1
  5828  0012CC  0100               	movlb	0	; () banked
  5829  0012CE  6B6B               	clrf	(__doprnt@val+2)& (0+255),b
  5830  0012D0  6B6C               	clrf	(__doprnt@val+3)& (0+255),b
  5831  0012D2                     i2l3602:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;doprnt.c: 1287: }
  5835                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5836  0012D2  0100               	movlb	0	; () banked
  5837  0012D4  5174               	movf	__doprnt@prec& (0+255),w,b
  5838  0012D6  0100               	movlb	0	; () banked
  5839  0012D8  1175               	iorwf	(__doprnt@prec+1)& (0+255),w,b
  5840  0012DA  A4D8               	btfss	status,2,c
  5841  0012DC  D00D               	goto	i2l3608
  5842                           
  5843                           ; BSR set to: 0
  5844  0012DE  0100               	movlb	0	; () banked
  5845  0012E0  5169               	movf	__doprnt@val& (0+255),w,b
  5846  0012E2  0100               	movlb	0	; () banked
  5847  0012E4  116A               	iorwf	(__doprnt@val+1)& (0+255),w,b
  5848  0012E6  0100               	movlb	0	; () banked
  5849  0012E8  116B               	iorwf	(__doprnt@val+2)& (0+255),w,b
  5850  0012EA  0100               	movlb	0	; () banked
  5851  0012EC  116C               	iorwf	(__doprnt@val+3)& (0+255),w,b
  5852  0012EE  A4D8               	btfss	status,2,c
  5853  0012F0  D003               	goto	i2l3608
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;doprnt.c: 1291: prec++;
  5857  0012F2  0100               	movlb	0	; () banked
  5858  0012F4  4B74               	infsnz	__doprnt@prec& (0+255),f,b
  5859  0012F6  2B75               	incf	(__doprnt@prec+1)& (0+255),f,b
  5860  0012F8                     i2l3608:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5864  0012F8  0E01               	movlw	1
  5865  0012FA  0100               	movlb	0	; () banked
  5866  0012FC  6F76               	movwf	__doprnt@c& (0+255),b
  5867  0012FE                     i2l3610:
  5868                           
  5869                           ; BSR set to: 0
  5870  0012FE  0E0A               	movlw	10
  5871  001300  0100               	movlb	0	; () banked
  5872  001302  1976               	xorwf	__doprnt@c& (0+255),w,b
  5873  001304  B4D8               	btfsc	status,2,c
  5874  001306  D01E               	goto	i2l3622
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;doprnt.c: 1306: if(val < dpowers[c])
  5878                           
  5879                           ; BSR set to: 0
  5880                           
  5881                           ; BSR set to: 0
  5882  001308  0100               	movlb	0	; () banked
  5883  00130A  5176               	movf	__doprnt@c& (0+255),w,b
  5884  00130C  0D04               	mullw	4
  5885  00130E  0E01               	movlw	low _dpowers
  5886  001310  24F3               	addwf	prodl,w,c
  5887  001312  6EF6               	movwf	tblptrl,c
  5888  001314  0E06               	movlw	high _dpowers
  5889  001316  20F4               	addwfc	prodh,w,c
  5890  001318  6EF7               	movwf	tblptrh,c
  5891  00131A                     	if	0	;There are less than 3 active tblptr bytes
  5892  00131A                     	endif
  5893  00131A  0009               	tblrd		*+
  5894  00131C  50F5               	movf	tablat,w,c
  5895  00131E  0100               	movlb	0	; () banked
  5896  001320  5D69               	subwf	__doprnt@val& (0+255),w,b
  5897  001322  0009               	tblrd		*+
  5898  001324  50F5               	movf	tablat,w,c
  5899  001326  0100               	movlb	0	; () banked
  5900  001328  596A               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5901  00132A  0009               	tblrd		*+
  5902  00132C  50F5               	movf	tablat,w,c
  5903  00132E  0100               	movlb	0	; () banked
  5904  001330  596B               	subwfb	(__doprnt@val+2)& (0+255),w,b
  5905  001332  0009               	tblrd		*+
  5906  001334  50F5               	movf	tablat,w,c
  5907  001336  0100               	movlb	0	; () banked
  5908  001338  596C               	subwfb	(__doprnt@val+3)& (0+255),w,b
  5909  00133A  A0D8               	btfss	status,0,c
  5910  00133C  D003               	goto	i2l3622
  5911                           
  5912                           ; BSR set to: 0
  5913                           
  5914                           ; BSR set to: 0
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;doprnt.c: 1307: break;
  5918  00133E  0100               	movlb	0	; () banked
  5919  001340  2B76               	incf	__doprnt@c& (0+255),f,b
  5920  001342  D7DD               	goto	i2l3610
  5921  001344                     i2l3622:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;doprnt.c: 1339: if(c < prec)
  5925  001344  0E80               	movlw	128
  5926  001346  0100               	movlb	0	; () banked
  5927  001348  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5928  00134A  0E7F               	movlw	127
  5929  00134C  6E46               	movwf	??__doprnt& (0+255),c
  5930  00134E  0100               	movlb	0	; () banked
  5931  001350  5174               	movf	__doprnt@prec& (0+255),w,b
  5932  001352  0100               	movlb	0	; () banked
  5933  001354  5D76               	subwf	__doprnt@c& (0+255),w,b
  5934  001356  0100               	movlb	0	; () banked
  5935  001358  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5936  00135A  0A80               	xorlw	128
  5937  00135C  5846               	subwfb	??__doprnt& (0+255),w,c
  5938  00135E  B0D8               	btfsc	status,0,c
  5939  001360  D003               	goto	i2l3626
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;doprnt.c: 1340: c = prec;
  5943  001362  C074  F076         	movff	__doprnt@prec,__doprnt@c
  5944  001366  D016               	goto	i2l3630
  5945  001368                     i2l3626:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;doprnt.c: 1341: else if(prec < c)
  5949  001368  0100               	movlb	0	; () banked
  5950  00136A  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  5951  00136C  0A80               	xorlw	128
  5952  00136E  6E46               	movwf	??__doprnt& (0+255),c
  5953  001370  0100               	movlb	0	; () banked
  5954  001372  5176               	movf	__doprnt@c& (0+255),w,b
  5955  001374  0100               	movlb	0	; () banked
  5956  001376  5D74               	subwf	__doprnt@prec& (0+255),w,b
  5957  001378  0E80               	movlw	128
  5958  00137A  0100               	movlb	0	; () banked
  5959  00137C  BF76               	btfsc	__doprnt@c& (0+255),7,b
  5960  00137E  0E7F               	movlw	127
  5961  001380  5846               	subwfb	??__doprnt& (0+255),w,c
  5962  001382  B0D8               	btfsc	status,0,c
  5963  001384  D007               	goto	i2l3630
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;doprnt.c: 1342: prec = c;
  5967  001386  0100               	movlb	0	; () banked
  5968  001388  5176               	movf	__doprnt@c& (0+255),w,b
  5969  00138A  0100               	movlb	0	; () banked
  5970  00138C  6F74               	movwf	__doprnt@prec& (0+255),b
  5971  00138E  6B75               	clrf	(__doprnt@prec+1)& (0+255),b
  5972  001390  BF74               	btfsc	__doprnt@prec& (0+255),7,b
  5973  001392  0775               	decf	(__doprnt@prec+1)& (0+255),f,b
  5974  001394                     i2l3630:
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5978  001394  0100               	movlb	0	; () banked
  5979  001396  5163               	movf	__doprnt@width& (0+255),w,b
  5980  001398  0100               	movlb	0	; () banked
  5981  00139A  1164               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5982  00139C  B4D8               	btfsc	status,2,c
  5983  00139E  D010               	goto	i2l3636
  5984                           
  5985                           ; BSR set to: 0
  5986  0013A0  0E03               	movlw	3
  5987  0013A2  0100               	movlb	0	; () banked
  5988  0013A4  1565               	andwf	__doprnt@flag& (0+255),w,b
  5989  0013A6  6E46               	movwf	??__doprnt& (0+255),c
  5990  0013A8  0E00               	movlw	0
  5991  0013AA  0100               	movlb	0	; () banked
  5992  0013AC  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  5993  0013AE  6E47               	movwf	(??__doprnt+1)& (0+255),c
  5994  0013B0  5046               	movf	??__doprnt,w,c
  5995  0013B2  1047               	iorwf	??__doprnt+1,w,c
  5996  0013B4  B4D8               	btfsc	status,2,c
  5997  0013B6  D004               	goto	i2l3636
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;doprnt.c: 1346: width--;
  6001  0013B8  0100               	movlb	0	; () banked
  6002  0013BA  0763               	decf	__doprnt@width& (0+255),f,b
  6003  0013BC  A0D8               	btfss	status,0,c
  6004  0013BE  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  6005  0013C0                     i2l3636:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6009  0013C0  0100               	movlb	0	; () banked
  6010  0013C2  AD66               	btfss	(__doprnt@flag+1)& (0+255),6,b
  6011  0013C4  D01C               	goto	i2l3644
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;doprnt.c: 1349: if(width > prec)
  6015  0013C6  0100               	movlb	0	; () banked
  6016  0013C8  5163               	movf	__doprnt@width& (0+255),w,b
  6017  0013CA  0100               	movlb	0	; () banked
  6018  0013CC  5D74               	subwf	__doprnt@prec& (0+255),w,b
  6019  0013CE  0100               	movlb	0	; () banked
  6020  0013D0  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  6021  0013D2  0A80               	xorlw	128
  6022  0013D4  6E46               	movwf	??__doprnt& (0+255),c
  6023  0013D6  0100               	movlb	0	; () banked
  6024  0013D8  5164               	movf	(__doprnt@width+1)& (0+255),w,b
  6025  0013DA  0A80               	xorlw	128
  6026  0013DC  5846               	subwfb	??__doprnt& (0+255),w,c
  6027  0013DE  B0D8               	btfsc	status,0,c
  6028  0013E0  D009               	goto	i2l3642
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;doprnt.c: 1350: width -= prec;
  6032  0013E2  0100               	movlb	0	; () banked
  6033  0013E4  5174               	movf	__doprnt@prec& (0+255),w,b
  6034  0013E6  0100               	movlb	0	; () banked
  6035  0013E8  5F63               	subwf	__doprnt@width& (0+255),f,b
  6036  0013EA  0100               	movlb	0	; () banked
  6037  0013EC  5175               	movf	(__doprnt@prec+1)& (0+255),w,b
  6038  0013EE  0100               	movlb	0	; () banked
  6039  0013F0  5B64               	subwfb	(__doprnt@width+1)& (0+255),f,b
  6040  0013F2  D005               	goto	i2l3644
  6041  0013F4                     i2l3642:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;doprnt.c: 1351: else
  6045                           ;doprnt.c: 1352: width = 0;
  6046  0013F4  0E00               	movlw	0
  6047  0013F6  0100               	movlb	0	; () banked
  6048  0013F8  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  6049  0013FA  0E00               	movlw	0
  6050  0013FC  6F63               	movwf	__doprnt@width& (0+255),b
  6051  0013FE                     i2l3644:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;doprnt.c: 1353: }
  6055                           ;doprnt.c: 1381: if(width > c)
  6056  0013FE  0E80               	movlw	128
  6057  001400  0100               	movlb	0	; () banked
  6058  001402  BF76               	btfsc	__doprnt@c& (0+255),7,b
  6059  001404  0E7F               	movlw	127
  6060  001406  6E46               	movwf	??__doprnt& (0+255),c
  6061  001408  0100               	movlb	0	; () banked
  6062  00140A  5163               	movf	__doprnt@width& (0+255),w,b
  6063  00140C  0100               	movlb	0	; () banked
  6064  00140E  5D76               	subwf	__doprnt@c& (0+255),w,b
  6065  001410  0100               	movlb	0	; () banked
  6066  001412  5164               	movf	(__doprnt@width+1)& (0+255),w,b
  6067  001414  0A80               	xorlw	128
  6068  001416  5846               	subwfb	??__doprnt& (0+255),w,c
  6069  001418  B0D8               	btfsc	status,0,c
  6070  00141A  D00B               	goto	i2l3648
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;doprnt.c: 1382: width -= c;
  6074  00141C  0100               	movlb	0	; () banked
  6075  00141E  5176               	movf	__doprnt@c& (0+255),w,b
  6076  001420  0100               	movlb	0	; () banked
  6077  001422  5F63               	subwf	__doprnt@width& (0+255),f,b
  6078  001424  0E00               	movlw	0
  6079  001426  0100               	movlb	0	; () banked
  6080  001428  BF76               	btfsc	__doprnt@c& (0+255),7,b
  6081  00142A  0EFF               	movlw	255
  6082  00142C  0100               	movlb	0	; () banked
  6083  00142E  5B64               	subwfb	(__doprnt@width+1)& (0+255),f,b
  6084  001430  D005               	goto	i2l3650
  6085  001432                     i2l3648:
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;doprnt.c: 1383: else
  6089                           ;doprnt.c: 1384: width = 0;
  6090  001432  0E00               	movlw	0
  6091  001434  0100               	movlb	0	; () banked
  6092  001436  6F64               	movwf	(__doprnt@width+1)& (0+255),b
  6093  001438  0E00               	movlw	0
  6094  00143A  6F63               	movwf	__doprnt@width& (0+255),b
  6095  00143C                     i2l3650:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 1422: {
  6099                           ;doprnt.c: 1424: if(width
  6100                           ;doprnt.c: 1428: )
  6101  00143C  0100               	movlb	0	; () banked
  6102  00143E  5163               	movf	__doprnt@width& (0+255),w,b
  6103  001440  0100               	movlb	0	; () banked
  6104  001442  1164               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6105  001444  B4D8               	btfsc	status,2,c
  6106  001446  D03C               	goto	i2l3662
  6107  001448                     i2l3652:
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  6111  001448  EE20 F002          	lfsr	2,2
  6112  00144C  5040               	movf	__doprnt@pb,w,c
  6113  00144E  26D9               	addwf	fsr2l,f,c
  6114  001450  5041               	movf	__doprnt@pb+1,w,c
  6115  001452  22DA               	addwfc	fsr2h,f,c
  6116  001454  50DE               	movf	postinc2,w,c
  6117  001456  10DE               	iorwf	postinc2,w,c
  6118  001458  B4D8               	btfsc	status,2,c
  6119  00145A  D013               	goto	i2l3656
  6120                           
  6121                           ; BSR set to: 0
  6122  00145C  EE20 F002          	lfsr	2,2
  6123  001460  5040               	movf	__doprnt@pb,w,c
  6124  001462  26D9               	addwf	fsr2l,f,c
  6125  001464  5041               	movf	__doprnt@pb+1,w,c
  6126  001466  22DA               	addwfc	fsr2h,f,c
  6127  001468  D801               	call	i2u394_48
  6128  00146A  D020               	goto	i2l3660
  6129  00146C                     i2u394_48:
  6130  00146C  0005               	push	
  6131  00146E  6EFA               	movwf	pclath,c
  6132  001470  50DE               	movf	postinc2,w,c
  6133  001472  6EFD               	movwf	tosl,c
  6134  001474  50DE               	movf	postinc2,w,c
  6135  001476  6EFE               	movwf	tosh,c
  6136  001478  50F8               	movf	tblptru,w,c
  6137  00147A  6EFF               	movwf	tosu,c
  6138  00147C  50FA               	movf	pclath,w,c
  6139  00147E  0E20               	movlw	32
  6140  001480  0012               	return		;indir
  6141  001482                     i2l3656:
  6142  001482  C040  FFD9         	movff	__doprnt@pb,fsr2l
  6143  001486  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  6144  00148A  CFDE F046          	movff	postinc2,??__doprnt
  6145  00148E  CFDD F047          	movff	postdec2,??__doprnt+1
  6146  001492  C046  FFD9         	movff	??__doprnt,fsr2l
  6147  001496  C047  FFDA         	movff	??__doprnt+1,fsr2h
  6148  00149A  0E20               	movlw	32
  6149  00149C  6EDF               	movwf	indf2,c
  6150  00149E  C040  FFD9         	movff	__doprnt@pb,fsr2l
  6151  0014A2  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  6152  0014A6  2ADE               	incf	postinc2,f,c
  6153  0014A8  0E00               	movlw	0
  6154  0014AA  22DD               	addwfc	postdec2,f,c
  6155  0014AC                     i2l3660:
  6156                           
  6157                           ;doprnt.c: 1431: while(--width);
  6158  0014AC  0100               	movlb	0	; () banked
  6159  0014AE  0763               	decf	__doprnt@width& (0+255),f,b
  6160  0014B0  A0D8               	btfss	status,0,c
  6161  0014B2  0764               	decf	(__doprnt@width+1)& (0+255),f,b
  6162  0014B4  0100               	movlb	0	; () banked
  6163  0014B6  5163               	movf	__doprnt@width& (0+255),w,b
  6164  0014B8  0100               	movlb	0	; () banked
  6165  0014BA  1164               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6166  0014BC  A4D8               	btfss	status,2,c
  6167  0014BE  D7C4               	goto	i2l3652
  6168  0014C0                     i2l3662:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;doprnt.c: 1438: if(flag & 0x03)
  6172  0014C0  0E03               	movlw	3
  6173  0014C2  0100               	movlb	0	; () banked
  6174  0014C4  1565               	andwf	__doprnt@flag& (0+255),w,b
  6175  0014C6  6E46               	movwf	??__doprnt& (0+255),c
  6176  0014C8  0E00               	movlw	0
  6177  0014CA  0100               	movlb	0	; () banked
  6178  0014CC  1566               	andwf	(__doprnt@flag+1)& (0+255),w,b
  6179  0014CE  6E47               	movwf	(??__doprnt+1)& (0+255),c
  6180  0014D0  5046               	movf	??__doprnt,w,c
  6181  0014D2  1047               	iorwf	??__doprnt+1,w,c
  6182  0014D4  B4D8               	btfsc	status,2,c
  6183  0014D6  D09B               	goto	i2l3682
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6187  0014D8  EE20 F002          	lfsr	2,2
  6188  0014DC  5040               	movf	__doprnt@pb,w,c
  6189  0014DE  26D9               	addwf	fsr2l,f,c
  6190  0014E0  5041               	movf	__doprnt@pb+1,w,c
  6191  0014E2  22DA               	addwfc	fsr2h,f,c
  6192  0014E4  50DE               	movf	postinc2,w,c
  6193  0014E6  10DE               	iorwf	postinc2,w,c
  6194  0014E8  B4D8               	btfsc	status,2,c
  6195  0014EA  D013               	goto	i2l3668
  6196                           
  6197                           ; BSR set to: 0
  6198  0014EC  EE20 F002          	lfsr	2,2
  6199  0014F0  5040               	movf	__doprnt@pb,w,c
  6200  0014F2  26D9               	addwf	fsr2l,f,c
  6201  0014F4  5041               	movf	__doprnt@pb+1,w,c
  6202  0014F6  22DA               	addwfc	fsr2h,f,c
  6203  0014F8  D801               	call	i2u398_48
  6204  0014FA  D089               	goto	i2l3682
  6205  0014FC                     i2u398_48:
  6206  0014FC  0005               	push	
  6207  0014FE  6EFA               	movwf	pclath,c
  6208  001500  50DE               	movf	postinc2,w,c
  6209  001502  6EFD               	movwf	tosl,c
  6210  001504  50DE               	movf	postinc2,w,c
  6211  001506  6EFE               	movwf	tosh,c
  6212  001508  50F8               	movf	tblptru,w,c
  6213  00150A  6EFF               	movwf	tosu,c
  6214  00150C  50FA               	movf	pclath,w,c
  6215  00150E  0E2D               	movlw	45
  6216  001510  0012               	return		;indir
  6217  001512                     i2l3668:
  6218  001512  C040  FFD9         	movff	__doprnt@pb,fsr2l
  6219  001516  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  6220  00151A  CFDE F046          	movff	postinc2,??__doprnt
  6221  00151E  CFDD F047          	movff	postdec2,??__doprnt+1
  6222  001522  C046  FFD9         	movff	??__doprnt,fsr2l
  6223  001526  C047  FFDA         	movff	??__doprnt+1,fsr2h
  6224  00152A  0E2D               	movlw	45
  6225  00152C  6EDF               	movwf	indf2,c
  6226  00152E  D068               	goto	i2l3680
  6227  001530                     i2l3672:
  6228                           
  6229                           ;doprnt.c: 1478: {
  6230                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6231  001530  C074  F046         	movff	__doprnt@prec,??__doprnt
  6232  001534  C075  F047         	movff	__doprnt@prec+1,??__doprnt+1
  6233  001538  90D8               	bcf	status,0,c
  6234  00153A  3646               	rlcf	??__doprnt,f,c
  6235  00153C  3647               	rlcf	??__doprnt+1,f,c
  6236  00153E  90D8               	bcf	status,0,c
  6237  001540  3646               	rlcf	??__doprnt,f,c
  6238  001542  3647               	rlcf	??__doprnt+1,f,c
  6239  001544  0E01               	movlw	low _dpowers
  6240  001546  2446               	addwf	??__doprnt,w,c
  6241  001548  6EF6               	movwf	tblptrl,c
  6242  00154A  0E06               	movlw	high _dpowers
  6243  00154C  2047               	addwfc	??__doprnt+1,w,c
  6244  00154E  6EF7               	movwf	tblptrh,c
  6245  001550                     	if	0	;There are less than 3 active tblptr bytes
  6246  001550                     	endif
  6247  001550  0009               	tblrd		*+
  6248  001552  CFF5 F005          	movff	tablat,___lldiv@divisor
  6249  001556  0009               	tblrd		*+
  6250  001558  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6251  00155C  0009               	tblrd		*+
  6252  00155E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6253  001562  000A               	tblrd		*-
  6254  001564  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6255  001568  C069  F001         	movff	__doprnt@val,___lldiv@dividend
  6256  00156C  C06A  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  6257  001570  C06B  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  6258  001574  C06C  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  6259  001578  EC88  F014         	call	___lldiv
  6260  00157C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  6261  001580  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  6262  001584  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  6263  001588  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  6264  00158C  0E0A               	movlw	10
  6265  00158E  6E12               	movwf	___llmod@divisor,c
  6266  001590  0E00               	movlw	0
  6267  001592  6E13               	movwf	___llmod@divisor+1,c
  6268  001594  0E00               	movlw	0
  6269  001596  6E14               	movwf	___llmod@divisor+2,c
  6270  001598  0E00               	movlw	0
  6271  00159A  6E15               	movwf	___llmod@divisor+3,c
  6272  00159C  EC3D  F015         	call	___llmod	;wreg free
  6273  0015A0  500E               	movf	?___llmod,w,c
  6274  0015A2  0F30               	addlw	48
  6275  0015A4  0100               	movlb	0	; () banked
  6276  0015A6  6F76               	movwf	__doprnt@c& (0+255),b
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;doprnt.c: 1523: }
  6280                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6281  0015A8  EE20 F002          	lfsr	2,2
  6282  0015AC  5040               	movf	__doprnt@pb,w,c
  6283  0015AE  26D9               	addwf	fsr2l,f,c
  6284  0015B0  5041               	movf	__doprnt@pb+1,w,c
  6285  0015B2  22DA               	addwfc	fsr2h,f,c
  6286  0015B4  50DE               	movf	postinc2,w,c
  6287  0015B6  10DE               	iorwf	postinc2,w,c
  6288  0015B8  B4D8               	btfsc	status,2,c
  6289  0015BA  D014               	goto	i2l3678
  6290                           
  6291                           ; BSR set to: 0
  6292  0015BC  EE20 F002          	lfsr	2,2
  6293  0015C0  5040               	movf	__doprnt@pb,w,c
  6294  0015C2  26D9               	addwf	fsr2l,f,c
  6295  0015C4  5041               	movf	__doprnt@pb+1,w,c
  6296  0015C6  22DA               	addwfc	fsr2h,f,c
  6297  0015C8  D801               	call	i2u400_48
  6298  0015CA  D021               	goto	i2l3682
  6299  0015CC                     i2u400_48:
  6300  0015CC  0005               	push	
  6301  0015CE  6EFA               	movwf	pclath,c
  6302  0015D0  50DE               	movf	postinc2,w,c
  6303  0015D2  6EFD               	movwf	tosl,c
  6304  0015D4  50DE               	movf	postinc2,w,c
  6305  0015D6  6EFE               	movwf	tosh,c
  6306  0015D8  50F8               	movf	tblptru,w,c
  6307  0015DA  6EFF               	movwf	tosu,c
  6308  0015DC  50FA               	movf	pclath,w,c
  6309  0015DE  0100               	movlb	0	; () banked
  6310  0015E0  5176               	movf	__doprnt@c& (0+255),w,b
  6311  0015E2  0012               	return		;indir
  6312  0015E4                     i2l3678:
  6313  0015E4  C040  FFD9         	movff	__doprnt@pb,fsr2l
  6314  0015E8  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  6315  0015EC  CFDE F046          	movff	postinc2,??__doprnt
  6316  0015F0  CFDD F047          	movff	postdec2,??__doprnt+1
  6317  0015F4  C046  FFD9         	movff	??__doprnt,fsr2l
  6318  0015F8  C047  FFDA         	movff	??__doprnt+1,fsr2h
  6319  0015FC  C076  FFDF         	movff	__doprnt@c,indf2
  6320  001600                     i2l3680:
  6321  001600  C040  FFD9         	movff	__doprnt@pb,fsr2l
  6322  001604  C041  FFDA         	movff	__doprnt@pb+1,fsr2h
  6323  001608  2ADE               	incf	postinc2,f,c
  6324  00160A  0E00               	movlw	0
  6325  00160C  22DD               	addwfc	postdec2,f,c
  6326  00160E                     i2l3682:
  6327  00160E  0100               	movlb	0	; () banked
  6328  001610  0774               	decf	__doprnt@prec& (0+255),f,b
  6329  001612  A0D8               	btfss	status,0,c
  6330  001614  0775               	decf	(__doprnt@prec+1)& (0+255),f,b
  6331  001616  0100               	movlb	0	; () banked
  6332  001618  2974               	incf	__doprnt@prec& (0+255),w,b
  6333  00161A  E18A               	bnz	i2l3672
  6334  00161C  0100               	movlb	0	; () banked
  6335  00161E  2975               	incf	(__doprnt@prec+1)& (0+255),w,b
  6336  001620  A4D8               	btfss	status,2,c
  6337  001622  D786               	goto	i2l3672
  6338  001624                     i2l3684:
  6339  001624  C042  FFF6         	movff	__doprnt@f,tblptrl
  6340  001628  C043  FFF7         	movff	__doprnt@f+1,tblptrh
  6341  00162C  4A42               	infsnz	__doprnt@f,f,c
  6342  00162E  2A43               	incf	__doprnt@f+1,f,c
  6343  001630                     	if	0	;tblptru may be non-zero
  6344  001630                     	endif
  6345  001630                     	if	0	;tblptru may be non-zero
  6346  001630                     	endif
  6347  001630  0008               	tblrd		*
  6348  001632  CFF5 F076          	movff	tablat,__doprnt@c
  6349  001636  0100               	movlb	0	; () banked
  6350  001638  5176               	movf	__doprnt@c& (0+255),w,b
  6351  00163A  A4D8               	btfss	status,2,c
  6352  00163C  EF7D  F003         	goto	i2l3350
  6353  001640                     i2l3686:
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;doprnt.c: 1540: return 0;
  6357  001640  0E00               	movlw	0
  6358  001642  6E41               	movwf	?__doprnt+1,c
  6359  001644  0E00               	movlw	0
  6360  001646  6E40               	movwf	?__doprnt,c
  6361  001648  0012               	return	
  6362  00164A                     __end_of__doprnt:
  6363                           	opt stack 0
  6364                           tosu	equ	0xFFF
  6365                           tosh	equ	0xFFE
  6366                           tosl	equ	0xFFD
  6367                           pclatu	equ	0xFFB
  6368                           pclath	equ	0xFFA
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           intcon2	equ	0xFF1
  6377                           intcon3	equ	0xFF0
  6378                           postinc0	equ	0xFEE
  6379                           fsr0h	equ	0xFEA
  6380                           fsr0l	equ	0xFE9
  6381                           wreg	equ	0xFE8
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _scale *****************
  6392 ;; Defined at:
  6393 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  scl             1    wreg     char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  scl             1   41[COMRAM] char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  3   35[COMRAM] char 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6407 ;;      Params:         3       0       0       0       0       0       0
  6408 ;;      Locals:         4       0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0
  6410 ;;      Totals:         7       0       0       0       0       0       0
  6411 ;;Total ram usage:        7 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    2
  6414 ;; This function calls:
  6415 ;;		___awdiv
  6416 ;;		___awmod
  6417 ;;		___ftmul
  6418 ;;		___wmul
  6419 ;; This function is called by:
  6420 ;;		__doprnt
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text32
  6425  00164A                     __ptext32:
  6426                           	opt stack 0
  6427  00164A                     _scale:
  6428                           	opt stack 20
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;incstack = 0
  6432                           ;scale@scl stored from wreg
  6433  00164A  6E2A               	movwf	scale@scl,c
  6434                           
  6435                           ;doprnt.c: 428: if(scl < 0) {
  6436  00164C  AE2A               	btfss	scale@scl,7,c
  6437  00164E  D0FB               	goto	i2l3044
  6438                           
  6439                           ;doprnt.c: 429: scl = -scl;
  6440  001650  6C2A               	negf	scale@scl,c
  6441                           
  6442                           ;doprnt.c: 430: if(scl>=110)
  6443  001652  502A               	movf	scale@scl,w,c
  6444  001654  0A80               	xorlw	128
  6445  001656  0F12               	addlw	-238
  6446  001658  A0D8               	btfss	status,0,c
  6447  00165A  D091               	goto	i2l3034
  6448                           
  6449                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6450  00165C  0E00               	movlw	0
  6451  00165E  6E12               	movwf	___wmul@multiplicand+1,c
  6452  001660  0E03               	movlw	3
  6453  001662  6E11               	movwf	___wmul@multiplicand,c
  6454  001664  0E00               	movlw	0
  6455  001666  6E0A               	movwf	___awdiv@divisor+1,c
  6456  001668  0E0A               	movlw	10
  6457  00166A  6E09               	movwf	___awdiv@divisor,c
  6458  00166C  0E00               	movlw	0
  6459  00166E  6E04               	movwf	___awmod@divisor+1,c
  6460  001670  0E64               	movlw	100
  6461  001672  6E03               	movwf	___awmod@divisor,c
  6462  001674  502A               	movf	scale@scl,w,c
  6463  001676  6E01               	movwf	___awmod@dividend,c
  6464  001678  6A02               	clrf	___awmod@dividend+1,c
  6465  00167A  BE01               	btfsc	___awmod@dividend,7,c
  6466  00167C  0602               	decf	___awmod@dividend+1,f,c
  6467  00167E  EC05  F015         	call	___awmod
  6468  001682  C001  F007         	movff	?___awmod,___awdiv@dividend
  6469  001686  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6470  00168A  EC46  F014         	call	___awdiv	;wreg free
  6471  00168E  0E09               	movlw	9
  6472  001690  2407               	addwf	?___awdiv,w,c
  6473  001692  6E0F               	movwf	___wmul@multiplier,c
  6474  001694  0E00               	movlw	0
  6475  001696  2008               	addwfc	?___awdiv+1,w,c
  6476  001698  6E10               	movwf	___wmul@multiplier+1,c
  6477  00169A  ECAB  F017         	call	___wmul	;wreg free
  6478  00169E  0E29               	movlw	low __npowers_
  6479  0016A0  240F               	addwf	?___wmul,w,c
  6480  0016A2  6EF6               	movwf	tblptrl,c
  6481  0016A4  0E06               	movlw	high __npowers_
  6482  0016A6  2010               	addwfc	?___wmul+1,w,c
  6483  0016A8  6EF7               	movwf	tblptrh,c
  6484  0016AA                     	if	0	;There are less than 3 active tblptr bytes
  6485  0016AA                     	endif
  6486  0016AA  0009               	tblrd		*+
  6487  0016AC  CFF5 F018          	movff	tablat,___ftmul@f2
  6488  0016B0  0009               	tblrd		*+
  6489  0016B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6490  0016B6  000A               	tblrd		*-
  6491  0016B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6492  0016BC  0E00               	movlw	0
  6493  0016BE  6E0A               	movwf	___awdiv@divisor+1,c
  6494  0016C0  0E64               	movlw	100
  6495  0016C2  6E09               	movwf	___awdiv@divisor,c
  6496  0016C4  502A               	movf	scale@scl,w,c
  6497  0016C6  6E07               	movwf	___awdiv@dividend,c
  6498  0016C8  6A08               	clrf	___awdiv@dividend+1,c
  6499  0016CA  BE07               	btfsc	___awdiv@dividend,7,c
  6500  0016CC  0608               	decf	___awdiv@dividend+1,f,c
  6501  0016CE  EC46  F014         	call	___awdiv	;wreg free
  6502  0016D2  0E12               	movlw	18
  6503  0016D4  2407               	addwf	?___awdiv,w,c
  6504  0016D6  6E0F               	movwf	___wmul@multiplier,c
  6505  0016D8  0E00               	movlw	0
  6506  0016DA  2008               	addwfc	?___awdiv+1,w,c
  6507  0016DC  6E10               	movwf	___wmul@multiplier+1,c
  6508  0016DE  0E00               	movlw	0
  6509  0016E0  6E12               	movwf	___wmul@multiplicand+1,c
  6510  0016E2  0E03               	movlw	3
  6511  0016E4  6E11               	movwf	___wmul@multiplicand,c
  6512  0016E6  ECAB  F017         	call	___wmul	;wreg free
  6513  0016EA  0E29               	movlw	low __npowers_
  6514  0016EC  240F               	addwf	?___wmul,w,c
  6515  0016EE  6EF6               	movwf	tblptrl,c
  6516  0016F0  0E06               	movlw	high __npowers_
  6517  0016F2  2010               	addwfc	?___wmul+1,w,c
  6518  0016F4  6EF7               	movwf	tblptrh,c
  6519  0016F6                     	if	0	;There are less than 3 active tblptr bytes
  6520  0016F6                     	endif
  6521  0016F6  0009               	tblrd		*+
  6522  0016F8  CFF5 F015          	movff	tablat,___ftmul@f1
  6523  0016FC  0009               	tblrd		*+
  6524  0016FE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6525  001702  000A               	tblrd		*-
  6526  001704  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6527  001708  EC48  F012         	call	___ftmul	;wreg free
  6528  00170C  C015  F027         	movff	?___ftmul,_scale$1971
  6529  001710  C016  F028         	movff	?___ftmul+1,_scale$1971+1
  6530  001714  C017  F029         	movff	?___ftmul+2,_scale$1971+2
  6531                           
  6532                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6533  001718  C027  F015         	movff	_scale$1971,___ftmul@f1
  6534  00171C  C028  F016         	movff	_scale$1971+1,___ftmul@f1+1
  6535  001720  C029  F017         	movff	_scale$1971+2,___ftmul@f1+2
  6536  001724  0E00               	movlw	0
  6537  001726  6E12               	movwf	___wmul@multiplicand+1,c
  6538  001728  0E03               	movlw	3
  6539  00172A  6E11               	movwf	___wmul@multiplicand,c
  6540  00172C  0E00               	movlw	0
  6541  00172E  6E04               	movwf	___awmod@divisor+1,c
  6542  001730  0E0A               	movlw	10
  6543  001732  6E03               	movwf	___awmod@divisor,c
  6544  001734  502A               	movf	scale@scl,w,c
  6545  001736  6E01               	movwf	___awmod@dividend,c
  6546  001738  6A02               	clrf	___awmod@dividend+1,c
  6547  00173A  BE01               	btfsc	___awmod@dividend,7,c
  6548  00173C  0602               	decf	___awmod@dividend+1,f,c
  6549  00173E  EC05  F015         	call	___awmod	;wreg free
  6550  001742  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6551  001746  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6552  00174A  ECAB  F017         	call	___wmul	;wreg free
  6553  00174E  0E29               	movlw	low __npowers_
  6554  001750  240F               	addwf	?___wmul,w,c
  6555  001752  6EF6               	movwf	tblptrl,c
  6556  001754  0E06               	movlw	high __npowers_
  6557  001756  2010               	addwfc	?___wmul+1,w,c
  6558  001758  6EF7               	movwf	tblptrh,c
  6559  00175A                     	if	0	;There are less than 3 active tblptr bytes
  6560  00175A                     	endif
  6561  00175A  0009               	tblrd		*+
  6562  00175C  CFF5 F018          	movff	tablat,___ftmul@f2
  6563  001760  0009               	tblrd		*+
  6564  001762  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6565  001766  000A               	tblrd		*-
  6566  001768  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6567  00176C  EC48  F012         	call	___ftmul	;wreg free
  6568  001770  C015  F024         	movff	?___ftmul,?_scale
  6569  001774  C016  F025         	movff	?___ftmul+1,?_scale+1
  6570  001778  C017  F026         	movff	?___ftmul+2,?_scale+2
  6571  00177C  0012               	return	
  6572  00177E                     i2l3034:
  6573                           
  6574                           ;doprnt.c: 432: else if(scl > 10)
  6575  00177E  502A               	movf	scale@scl,w,c
  6576  001780  0A80               	xorlw	128
  6577  001782  0F75               	addlw	-139
  6578  001784  A0D8               	btfss	status,0,c
  6579  001786  D04D               	goto	i2l3040
  6580                           
  6581                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6582  001788  0E00               	movlw	0
  6583  00178A  6E0A               	movwf	___awdiv@divisor+1,c
  6584  00178C  0E0A               	movlw	10
  6585  00178E  6E09               	movwf	___awdiv@divisor,c
  6586  001790  502A               	movf	scale@scl,w,c
  6587  001792  6E07               	movwf	___awdiv@dividend,c
  6588  001794  6A08               	clrf	___awdiv@dividend+1,c
  6589  001796  BE07               	btfsc	___awdiv@dividend,7,c
  6590  001798  0608               	decf	___awdiv@dividend+1,f,c
  6591  00179A  EC46  F014         	call	___awdiv	;wreg free
  6592  00179E  0E09               	movlw	9
  6593  0017A0  2407               	addwf	?___awdiv,w,c
  6594  0017A2  6E0F               	movwf	___wmul@multiplier,c
  6595  0017A4  0E00               	movlw	0
  6596  0017A6  2008               	addwfc	?___awdiv+1,w,c
  6597  0017A8  6E10               	movwf	___wmul@multiplier+1,c
  6598  0017AA  0E00               	movlw	0
  6599  0017AC  6E12               	movwf	___wmul@multiplicand+1,c
  6600  0017AE  0E03               	movlw	3
  6601  0017B0  6E11               	movwf	___wmul@multiplicand,c
  6602  0017B2  ECAB  F017         	call	___wmul	;wreg free
  6603  0017B6  0E29               	movlw	low __npowers_
  6604  0017B8  240F               	addwf	?___wmul,w,c
  6605  0017BA  6EF6               	movwf	tblptrl,c
  6606  0017BC  0E06               	movlw	high __npowers_
  6607  0017BE  2010               	addwfc	?___wmul+1,w,c
  6608  0017C0  6EF7               	movwf	tblptrh,c
  6609  0017C2                     	if	0	;There are less than 3 active tblptr bytes
  6610  0017C2                     	endif
  6611  0017C2  0009               	tblrd		*+
  6612  0017C4  CFF5 F015          	movff	tablat,___ftmul@f1
  6613  0017C8  0009               	tblrd		*+
  6614  0017CA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6615  0017CE  000A               	tblrd		*-
  6616  0017D0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6617  0017D4  0E00               	movlw	0
  6618  0017D6  6E12               	movwf	___wmul@multiplicand+1,c
  6619  0017D8  0E03               	movlw	3
  6620  0017DA  6E11               	movwf	___wmul@multiplicand,c
  6621  0017DC  0E00               	movlw	0
  6622  0017DE  6E04               	movwf	___awmod@divisor+1,c
  6623  0017E0  0E0A               	movlw	10
  6624  0017E2  6E03               	movwf	___awmod@divisor,c
  6625  0017E4  502A               	movf	scale@scl,w,c
  6626  0017E6  6E01               	movwf	___awmod@dividend,c
  6627  0017E8  6A02               	clrf	___awmod@dividend+1,c
  6628  0017EA  BE01               	btfsc	___awmod@dividend,7,c
  6629  0017EC  0602               	decf	___awmod@dividend+1,f,c
  6630  0017EE  EC05  F015         	call	___awmod	;wreg free
  6631  0017F2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6632  0017F6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6633  0017FA  ECAB  F017         	call	___wmul	;wreg free
  6634  0017FE  0E29               	movlw	low __npowers_
  6635  001800  240F               	addwf	?___wmul,w,c
  6636  001802  6EF6               	movwf	tblptrl,c
  6637  001804  0E06               	movlw	high __npowers_
  6638  001806  2010               	addwfc	?___wmul+1,w,c
  6639  001808  6EF7               	movwf	tblptrh,c
  6640  00180A                     	if	0	;There are less than 3 active tblptr bytes
  6641  00180A                     	endif
  6642  00180A  0009               	tblrd		*+
  6643  00180C  CFF5 F018          	movff	tablat,___ftmul@f2
  6644  001810  0009               	tblrd		*+
  6645  001812  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6646  001816  000A               	tblrd		*-
  6647  001818  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6648  00181C  EC48  F012         	call	___ftmul	;wreg free
  6649  001820  D7A7               	goto	L3
  6650  001822                     i2l3040:
  6651                           
  6652                           ;doprnt.c: 434: return _npowers_[scl];
  6653  001822  502A               	movf	scale@scl,w,c
  6654  001824  0D03               	mullw	3
  6655  001826  0E29               	movlw	low __npowers_
  6656  001828  24F3               	addwf	prodl,w,c
  6657  00182A  6EF6               	movwf	tblptrl,c
  6658  00182C  0E06               	movlw	high __npowers_
  6659  00182E  20F4               	addwfc	prodh,w,c
  6660  001830  6EF7               	movwf	tblptrh,c
  6661  001832                     	if	0	;There are less than 3 active tblptr bytes
  6662  001832                     	endif
  6663  001832  0009               	tblrd		*+
  6664  001834  CFF5 F024          	movff	tablat,?_scale
  6665  001838  0009               	tblrd		*+
  6666  00183A  CFF5 F025          	movff	tablat,?_scale+1
  6667  00183E  000A               	tblrd		*-
  6668  001840  CFF5 F026          	movff	tablat,?_scale+2
  6669  001844  0012               	return	
  6670  001846                     i2l3044:
  6671                           
  6672                           ;doprnt.c: 435: }
  6673                           ;doprnt.c: 436: if(scl>=110)
  6674  001846  502A               	movf	scale@scl,w,c
  6675  001848  0A80               	xorlw	128
  6676  00184A  0F12               	addlw	-238
  6677  00184C  A0D8               	btfss	status,0,c
  6678  00184E  D091               	goto	i2l3052
  6679                           
  6680                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6681  001850  0E00               	movlw	0
  6682  001852  6E12               	movwf	___wmul@multiplicand+1,c
  6683  001854  0E03               	movlw	3
  6684  001856  6E11               	movwf	___wmul@multiplicand,c
  6685  001858  0E00               	movlw	0
  6686  00185A  6E0A               	movwf	___awdiv@divisor+1,c
  6687  00185C  0E0A               	movlw	10
  6688  00185E  6E09               	movwf	___awdiv@divisor,c
  6689  001860  0E00               	movlw	0
  6690  001862  6E04               	movwf	___awmod@divisor+1,c
  6691  001864  0E64               	movlw	100
  6692  001866  6E03               	movwf	___awmod@divisor,c
  6693  001868  502A               	movf	scale@scl,w,c
  6694  00186A  6E01               	movwf	___awmod@dividend,c
  6695  00186C  6A02               	clrf	___awmod@dividend+1,c
  6696  00186E  BE01               	btfsc	___awmod@dividend,7,c
  6697  001870  0602               	decf	___awmod@dividend+1,f,c
  6698  001872  EC05  F015         	call	___awmod	;wreg free
  6699  001876  C001  F007         	movff	?___awmod,___awdiv@dividend
  6700  00187A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6701  00187E  EC46  F014         	call	___awdiv	;wreg free
  6702  001882  0E09               	movlw	9
  6703  001884  2407               	addwf	?___awdiv,w,c
  6704  001886  6E0F               	movwf	___wmul@multiplier,c
  6705  001888  0E00               	movlw	0
  6706  00188A  2008               	addwfc	?___awdiv+1,w,c
  6707  00188C  6E10               	movwf	___wmul@multiplier+1,c
  6708  00188E  ECAB  F017         	call	___wmul	;wreg free
  6709  001892  0E50               	movlw	low __powers_
  6710  001894  240F               	addwf	?___wmul,w,c
  6711  001896  6EF6               	movwf	tblptrl,c
  6712  001898  0E06               	movlw	high __powers_
  6713  00189A  2010               	addwfc	?___wmul+1,w,c
  6714  00189C  6EF7               	movwf	tblptrh,c
  6715  00189E                     	if	0	;There are less than 3 active tblptr bytes
  6716  00189E                     	endif
  6717  00189E  0009               	tblrd		*+
  6718  0018A0  CFF5 F018          	movff	tablat,___ftmul@f2
  6719  0018A4  0009               	tblrd		*+
  6720  0018A6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6721  0018AA  000A               	tblrd		*-
  6722  0018AC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6723  0018B0  0E00               	movlw	0
  6724  0018B2  6E0A               	movwf	___awdiv@divisor+1,c
  6725  0018B4  0E64               	movlw	100
  6726  0018B6  6E09               	movwf	___awdiv@divisor,c
  6727  0018B8  502A               	movf	scale@scl,w,c
  6728  0018BA  6E07               	movwf	___awdiv@dividend,c
  6729  0018BC  6A08               	clrf	___awdiv@dividend+1,c
  6730  0018BE  BE07               	btfsc	___awdiv@dividend,7,c
  6731  0018C0  0608               	decf	___awdiv@dividend+1,f,c
  6732  0018C2  EC46  F014         	call	___awdiv	;wreg free
  6733  0018C6  0E12               	movlw	18
  6734  0018C8  2407               	addwf	?___awdiv,w,c
  6735  0018CA  6E0F               	movwf	___wmul@multiplier,c
  6736  0018CC  0E00               	movlw	0
  6737  0018CE  2008               	addwfc	?___awdiv+1,w,c
  6738  0018D0  6E10               	movwf	___wmul@multiplier+1,c
  6739  0018D2  0E00               	movlw	0
  6740  0018D4  6E12               	movwf	___wmul@multiplicand+1,c
  6741  0018D6  0E03               	movlw	3
  6742  0018D8  6E11               	movwf	___wmul@multiplicand,c
  6743  0018DA  ECAB  F017         	call	___wmul	;wreg free
  6744  0018DE  0E50               	movlw	low __powers_
  6745  0018E0  240F               	addwf	?___wmul,w,c
  6746  0018E2  6EF6               	movwf	tblptrl,c
  6747  0018E4  0E06               	movlw	high __powers_
  6748  0018E6  2010               	addwfc	?___wmul+1,w,c
  6749  0018E8  6EF7               	movwf	tblptrh,c
  6750  0018EA                     	if	0	;There are less than 3 active tblptr bytes
  6751  0018EA                     	endif
  6752  0018EA  0009               	tblrd		*+
  6753  0018EC  CFF5 F015          	movff	tablat,___ftmul@f1
  6754  0018F0  0009               	tblrd		*+
  6755  0018F2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6756  0018F6  000A               	tblrd		*-
  6757  0018F8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6758  0018FC  EC48  F012         	call	___ftmul	;wreg free
  6759  001900  C015  F027         	movff	?___ftmul,_scale$1971
  6760  001904  C016  F028         	movff	?___ftmul+1,_scale$1971+1
  6761  001908  C017  F029         	movff	?___ftmul+2,_scale$1971+2
  6762                           
  6763                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6764  00190C  C027  F015         	movff	_scale$1971,___ftmul@f1
  6765  001910  C028  F016         	movff	_scale$1971+1,___ftmul@f1+1
  6766  001914  C029  F017         	movff	_scale$1971+2,___ftmul@f1+2
  6767  001918  0E00               	movlw	0
  6768  00191A  6E12               	movwf	___wmul@multiplicand+1,c
  6769  00191C  0E03               	movlw	3
  6770  00191E  6E11               	movwf	___wmul@multiplicand,c
  6771  001920  0E00               	movlw	0
  6772  001922  6E04               	movwf	___awmod@divisor+1,c
  6773  001924  0E0A               	movlw	10
  6774  001926  6E03               	movwf	___awmod@divisor,c
  6775  001928  502A               	movf	scale@scl,w,c
  6776  00192A  6E01               	movwf	___awmod@dividend,c
  6777  00192C  6A02               	clrf	___awmod@dividend+1,c
  6778  00192E  BE01               	btfsc	___awmod@dividend,7,c
  6779  001930  0602               	decf	___awmod@dividend+1,f,c
  6780  001932  EC05  F015         	call	___awmod	;wreg free
  6781  001936  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6782  00193A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6783  00193E  ECAB  F017         	call	___wmul	;wreg free
  6784  001942  0E50               	movlw	low __powers_
  6785  001944  240F               	addwf	?___wmul,w,c
  6786  001946  6EF6               	movwf	tblptrl,c
  6787  001948  0E06               	movlw	high __powers_
  6788  00194A  2010               	addwfc	?___wmul+1,w,c
  6789  00194C  6EF7               	movwf	tblptrh,c
  6790  00194E                     	if	0	;There are less than 3 active tblptr bytes
  6791  00194E                     	endif
  6792  00194E  0009               	tblrd		*+
  6793  001950  CFF5 F018          	movff	tablat,___ftmul@f2
  6794  001954  0009               	tblrd		*+
  6795  001956  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6796  00195A  000A               	tblrd		*-
  6797  00195C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6798  001960  EC48  F012         	call	___ftmul	;wreg free
  6799  001964  C015  F024         	movff	?___ftmul,?_scale
  6800  001968  C016  F025         	movff	?___ftmul+1,?_scale+1
  6801  00196C  C017  F026         	movff	?___ftmul+2,?_scale+2
  6802  001970  0012               	return	
  6803  001972                     i2l3052:
  6804                           
  6805                           ;doprnt.c: 438: else if(scl > 10)
  6806  001972  502A               	movf	scale@scl,w,c
  6807  001974  0A80               	xorlw	128
  6808  001976  0F75               	addlw	-139
  6809  001978  A0D8               	btfss	status,0,c
  6810  00197A  D04D               	goto	i2l3058
  6811                           
  6812                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6813  00197C  0E00               	movlw	0
  6814  00197E  6E0A               	movwf	___awdiv@divisor+1,c
  6815  001980  0E0A               	movlw	10
  6816  001982  6E09               	movwf	___awdiv@divisor,c
  6817  001984  502A               	movf	scale@scl,w,c
  6818  001986  6E07               	movwf	___awdiv@dividend,c
  6819  001988  6A08               	clrf	___awdiv@dividend+1,c
  6820  00198A  BE07               	btfsc	___awdiv@dividend,7,c
  6821  00198C  0608               	decf	___awdiv@dividend+1,f,c
  6822  00198E  EC46  F014         	call	___awdiv	;wreg free
  6823  001992  0E09               	movlw	9
  6824  001994  2407               	addwf	?___awdiv,w,c
  6825  001996  6E0F               	movwf	___wmul@multiplier,c
  6826  001998  0E00               	movlw	0
  6827  00199A  2008               	addwfc	?___awdiv+1,w,c
  6828  00199C  6E10               	movwf	___wmul@multiplier+1,c
  6829  00199E  0E00               	movlw	0
  6830  0019A0  6E12               	movwf	___wmul@multiplicand+1,c
  6831  0019A2  0E03               	movlw	3
  6832  0019A4  6E11               	movwf	___wmul@multiplicand,c
  6833  0019A6  ECAB  F017         	call	___wmul	;wreg free
  6834  0019AA  0E50               	movlw	low __powers_
  6835  0019AC  240F               	addwf	?___wmul,w,c
  6836  0019AE  6EF6               	movwf	tblptrl,c
  6837  0019B0  0E06               	movlw	high __powers_
  6838  0019B2  2010               	addwfc	?___wmul+1,w,c
  6839  0019B4  6EF7               	movwf	tblptrh,c
  6840  0019B6                     	if	0	;There are less than 3 active tblptr bytes
  6841  0019B6                     	endif
  6842  0019B6  0009               	tblrd		*+
  6843  0019B8  CFF5 F015          	movff	tablat,___ftmul@f1
  6844  0019BC  0009               	tblrd		*+
  6845  0019BE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6846  0019C2  000A               	tblrd		*-
  6847  0019C4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6848  0019C8  0E00               	movlw	0
  6849  0019CA  6E12               	movwf	___wmul@multiplicand+1,c
  6850  0019CC  0E03               	movlw	3
  6851  0019CE  6E11               	movwf	___wmul@multiplicand,c
  6852  0019D0  0E00               	movlw	0
  6853  0019D2  6E04               	movwf	___awmod@divisor+1,c
  6854  0019D4  0E0A               	movlw	10
  6855  0019D6  6E03               	movwf	___awmod@divisor,c
  6856  0019D8  502A               	movf	scale@scl,w,c
  6857  0019DA  6E01               	movwf	___awmod@dividend,c
  6858  0019DC  6A02               	clrf	___awmod@dividend+1,c
  6859  0019DE  BE01               	btfsc	___awmod@dividend,7,c
  6860  0019E0  0602               	decf	___awmod@dividend+1,f,c
  6861  0019E2  EC05  F015         	call	___awmod	;wreg free
  6862  0019E6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6863  0019EA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6864  0019EE  ECAB  F017         	call	___wmul	;wreg free
  6865  0019F2  0E50               	movlw	low __powers_
  6866  0019F4  240F               	addwf	?___wmul,w,c
  6867  0019F6  6EF6               	movwf	tblptrl,c
  6868  0019F8  0E06               	movlw	high __powers_
  6869  0019FA  2010               	addwfc	?___wmul+1,w,c
  6870  0019FC  6EF7               	movwf	tblptrh,c
  6871  0019FE                     	if	0	;There are less than 3 active tblptr bytes
  6872  0019FE                     	endif
  6873  0019FE  0009               	tblrd		*+
  6874  001A00  CFF5 F018          	movff	tablat,___ftmul@f2
  6875  001A04  0009               	tblrd		*+
  6876  001A06  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6877  001A0A  000A               	tblrd		*-
  6878  001A0C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6879  001A10  EC48  F012         	call	___ftmul	;wreg free
  6880  001A14  D7A7               	goto	L4
  6881  001A16                     i2l3058:
  6882                           
  6883                           ;doprnt.c: 440: return _powers_[scl];
  6884  001A16  502A               	movf	scale@scl,w,c
  6885  001A18  0D03               	mullw	3
  6886  001A1A  0E50               	movlw	low __powers_
  6887  001A1C  24F3               	addwf	prodl,w,c
  6888  001A1E  6EF6               	movwf	tblptrl,c
  6889  001A20  0E06               	movlw	high __powers_
  6890  001A22  20F4               	addwfc	prodh,w,c
  6891  001A24  6EF7               	movwf	tblptrh,c
  6892  001A26                     	if	0	;There are less than 3 active tblptr bytes
  6893  001A26                     	endif
  6894  001A26  0009               	tblrd		*+
  6895  001A28  CFF5 F024          	movff	tablat,?_scale
  6896  001A2C  0009               	tblrd		*+
  6897  001A2E  CFF5 F025          	movff	tablat,?_scale+1
  6898  001A32  000A               	tblrd		*-
  6899  001A34  CFF5 F026          	movff	tablat,?_scale+2
  6900  001A38  0012               	return	
  6901  001A3A                     __end_of_scale:
  6902                           	opt stack 0
  6903                           tosu	equ	0xFFF
  6904                           tosh	equ	0xFFE
  6905                           tosl	equ	0xFFD
  6906                           pclatu	equ	0xFFB
  6907                           pclath	equ	0xFFA
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           intcon2	equ	0xFF1
  6916                           intcon3	equ	0xFF0
  6917                           postinc0	equ	0xFEE
  6918                           fsr0h	equ	0xFEA
  6919                           fsr0l	equ	0xFE9
  6920                           wreg	equ	0xFE8
  6921                           fsr1h	equ	0xFE2
  6922                           fsr1l	equ	0xFE1
  6923                           indf2	equ	0xFDF
  6924                           postinc2	equ	0xFDE
  6925                           postdec2	equ	0xFDD
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _putch *****************
  6931 ;; Defined at:
  6932 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  txData          1    wreg     unsigned char 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  txData          1    1[COMRAM] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6946 ;;      Params:         0       0       0       0       0       0       0
  6947 ;;      Locals:         1       0       0       0       0       0       0
  6948 ;;      Temps:          0       0       0       0       0       0       0
  6949 ;;      Totals:         1       0       0       0       0       0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    1
  6953 ;; This function calls:
  6954 ;;		_EUSART1_Write
  6955 ;; This function is called by:
  6956 ;;		_printf
  6957 ;;		__doprnt
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text33
  6962  0030B8                     __ptext33:
  6963                           	opt stack 0
  6964  0030B8                     _putch:
  6965                           	opt stack 21
  6966                           
  6967                           ;incstack = 0
  6968                           ;putch@txData stored from wreg
  6969  0030B8  6E02               	movwf	putch@txData,c
  6970                           
  6971                           ;eusart1.c: 113: EUSART1_Write(txData);
  6972  0030BA  5002               	movf	putch@txData,w,c
  6973  0030BC  EC4C  F018         	call	_EUSART1_Write
  6974  0030C0  0012               	return		;funcret
  6975  0030C2                     __end_of_putch:
  6976                           	opt stack 0
  6977                           tosu	equ	0xFFF
  6978                           tosh	equ	0xFFE
  6979                           tosl	equ	0xFFD
  6980                           pclatu	equ	0xFFB
  6981                           pclath	equ	0xFFA
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodh	equ	0xFF4
  6987                           prodl	equ	0xFF3
  6988                           intcon	equ	0xFF2
  6989                           intcon2	equ	0xFF1
  6990                           intcon3	equ	0xFF0
  6991                           postinc0	equ	0xFEE
  6992                           fsr0h	equ	0xFEA
  6993                           fsr0l	equ	0xFE9
  6994                           wreg	equ	0xFE8
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function _EUSART1_Write *****************
  7005 ;; Defined at:
  7006 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  txData          1    wreg     unsigned char 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  txData          1    0[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		wreg
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         0       0       0       0       0       0       0
  7021 ;;      Locals:         1       0       0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0
  7023 ;;      Totals:         1       0       0       0       0       0       0
  7024 ;;Total ram usage:        1 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; This function calls:
  7027 ;;		Nothing
  7028 ;; This function is called by:
  7029 ;;		_putch
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text34
  7034  003098                     __ptext34:
  7035                           	opt stack 0
  7036  003098                     _EUSART1_Write:
  7037                           	opt stack 21
  7038                           
  7039                           ;incstack = 0
  7040                           ;EUSART1_Write@txData stored from wreg
  7041  003098  6E01               	movwf	EUSART1_Write@txData,c
  7042  00309A                     i2l248:
  7043  00309A  A89E               	btfss	3998,4,c	;volatile
  7044  00309C  D7FE               	goto	i2l248
  7045                           
  7046                           ;eusart1.c: 101: }
  7047                           ;eusart1.c: 103: TXREG1 = txData;
  7048  00309E  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  7049  0030A2  0012               	return		;funcret
  7050  0030A4                     __end_of_EUSART1_Write:
  7051                           	opt stack 0
  7052                           tosu	equ	0xFFF
  7053                           tosh	equ	0xFFE
  7054                           tosl	equ	0xFFD
  7055                           pclatu	equ	0xFFB
  7056                           pclath	equ	0xFFA
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           intcon	equ	0xFF2
  7064                           intcon2	equ	0xFF1
  7065                           intcon3	equ	0xFF0
  7066                           postinc0	equ	0xFEE
  7067                           fsr0h	equ	0xFEA
  7068                           fsr0l	equ	0xFE9
  7069                           wreg	equ	0xFE8
  7070                           fsr1h	equ	0xFE2
  7071                           fsr1l	equ	0xFE1
  7072                           indf2	equ	0xFDF
  7073                           postinc2	equ	0xFDE
  7074                           postdec2	equ	0xFDD
  7075                           fsr2h	equ	0xFDA
  7076                           fsr2l	equ	0xFD9
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function _isdigit *****************
  7080 ;; Defined at:
  7081 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  c               1    wreg     unsigned char 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  c               1    2[COMRAM] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;		None               void
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7095 ;;      Params:         0       0       0       0       0       0       0
  7096 ;;      Locals:         2       0       0       0       0       0       0
  7097 ;;      Temps:          1       0       0       0       0       0       0
  7098 ;;      Totals:         3       0       0       0       0       0       0
  7099 ;;Total ram usage:        3 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; This function calls:
  7102 ;;		Nothing
  7103 ;; This function is called by:
  7104 ;;		__doprnt
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text35
  7109  003020                     __ptext35:
  7110                           	opt stack 0
  7111  003020                     _isdigit:
  7112                           	opt stack 22
  7113                           
  7114                           ;incstack = 0
  7115                           ;isdigit@c stored from wreg
  7116  003020  6E03               	movwf	isdigit@c,c
  7117  003022  0E00               	movlw	0
  7118  003024  6E02               	movwf	_isdigit$1499,c
  7119  003026  0E3A               	movlw	58
  7120  003028  6003               	cpfslt	isdigit@c,c
  7121  00302A  D005               	goto	i2l3070
  7122  00302C  0E2F               	movlw	47
  7123  00302E  6403               	cpfsgt	isdigit@c,c
  7124  003030  D002               	goto	i2l3070
  7125  003032  0E01               	movlw	1
  7126  003034  6E02               	movwf	_isdigit$1499,c
  7127  003036                     i2l3070:
  7128  003036  C002  F001         	movff	_isdigit$1499,??_isdigit
  7129  00303A  3001               	rrcf	??_isdigit,w,c
  7130  00303C  0012               	return	
  7131  00303E                     __end_of_isdigit:
  7132                           	opt stack 0
  7133                           tosu	equ	0xFFF
  7134                           tosh	equ	0xFFE
  7135                           tosl	equ	0xFFD
  7136                           pclatu	equ	0xFFB
  7137                           pclath	equ	0xFFA
  7138                           tblptru	equ	0xFF8
  7139                           tblptrh	equ	0xFF7
  7140                           tblptrl	equ	0xFF6
  7141                           tablat	equ	0xFF5
  7142                           prodh	equ	0xFF4
  7143                           prodl	equ	0xFF3
  7144                           intcon	equ	0xFF2
  7145                           intcon2	equ	0xFF1
  7146                           intcon3	equ	0xFF0
  7147                           postinc0	equ	0xFEE
  7148                           fsr0h	equ	0xFEA
  7149                           fsr0l	equ	0xFE9
  7150                           wreg	equ	0xFE8
  7151                           fsr1h	equ	0xFE2
  7152                           fsr1l	equ	0xFE1
  7153                           indf2	equ	0xFDF
  7154                           postinc2	equ	0xFDE
  7155                           postdec2	equ	0xFDD
  7156                           fsr2h	equ	0xFDA
  7157                           fsr2l	equ	0xFD9
  7158                           status	equ	0xFD8
  7159                           
  7160 ;; *************** function _fround *****************
  7161 ;; Defined at:
  7162 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  prec            1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  prec            1   44[COMRAM] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  3   35[COMRAM] unsigned char 
  7169 ;; Registers used:
  7170 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7176 ;;      Params:         3       0       0       0       0       0       0
  7177 ;;      Locals:         7       0       0       0       0       0       0
  7178 ;;      Temps:          0       0       0       0       0       0       0
  7179 ;;      Totals:        10       0       0       0       0       0       0
  7180 ;;Total ram usage:       10 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    2
  7183 ;; This function calls:
  7184 ;;		___awdiv
  7185 ;;		___awmod
  7186 ;;		___ftmul
  7187 ;;		___wmul
  7188 ;; This function is called by:
  7189 ;;		__doprnt
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text36
  7194  001A3A                     __ptext36:
  7195                           	opt stack 0
  7196  001A3A                     _fround:
  7197                           	opt stack 20
  7198                           
  7199                           ;incstack = 0
  7200                           ;fround@prec stored from wreg
  7201  001A3A  6E2D               	movwf	fround@prec,c
  7202                           
  7203                           ;doprnt.c: 413: if(prec>=110)
  7204  001A3C  0E6D               	movlw	109
  7205  001A3E  642D               	cpfsgt	fround@prec,c
  7206  001A40  D09F               	goto	i2l3012
  7207                           
  7208                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7209  001A42  0E00               	movlw	0
  7210  001A44  6E12               	movwf	___wmul@multiplicand+1,c
  7211  001A46  0E03               	movlw	3
  7212  001A48  6E11               	movwf	___wmul@multiplicand,c
  7213  001A4A  0E00               	movlw	0
  7214  001A4C  6E0A               	movwf	___awdiv@divisor+1,c
  7215  001A4E  0E0A               	movlw	10
  7216  001A50  6E09               	movwf	___awdiv@divisor,c
  7217  001A52  0E00               	movlw	0
  7218  001A54  6E04               	movwf	___awmod@divisor+1,c
  7219  001A56  0E64               	movlw	100
  7220  001A58  6E03               	movwf	___awmod@divisor,c
  7221  001A5A  C02D  F001         	movff	fround@prec,___awmod@dividend
  7222  001A5E  6A02               	clrf	___awmod@dividend+1,c
  7223  001A60  EC05  F015         	call	___awmod	;wreg free
  7224  001A64  C001  F007         	movff	?___awmod,___awdiv@dividend
  7225  001A68  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7226  001A6C  EC46  F014         	call	___awdiv	;wreg free
  7227  001A70  0E09               	movlw	9
  7228  001A72  2407               	addwf	?___awdiv,w,c
  7229  001A74  6E0F               	movwf	___wmul@multiplier,c
  7230  001A76  0E00               	movlw	0
  7231  001A78  2008               	addwfc	?___awdiv+1,w,c
  7232  001A7A  6E10               	movwf	___wmul@multiplier+1,c
  7233  001A7C  ECAB  F017         	call	___wmul	;wreg free
  7234  001A80  0E29               	movlw	low __npowers_
  7235  001A82  240F               	addwf	?___wmul,w,c
  7236  001A84  6EF6               	movwf	tblptrl,c
  7237  001A86  0E06               	movlw	high __npowers_
  7238  001A88  2010               	addwfc	?___wmul+1,w,c
  7239  001A8A  6EF7               	movwf	tblptrh,c
  7240  001A8C                     	if	0	;There are less than 3 active tblptr bytes
  7241  001A8C                     	endif
  7242  001A8C  0009               	tblrd		*+
  7243  001A8E  CFF5 F018          	movff	tablat,___ftmul@f2
  7244  001A92  0009               	tblrd		*+
  7245  001A94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7246  001A98  000A               	tblrd		*-
  7247  001A9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7248  001A9E  0E00               	movlw	0
  7249  001AA0  6E0A               	movwf	___awdiv@divisor+1,c
  7250  001AA2  0E64               	movlw	100
  7251  001AA4  6E09               	movwf	___awdiv@divisor,c
  7252  001AA6  C02D  F007         	movff	fround@prec,___awdiv@dividend
  7253  001AAA  6A08               	clrf	___awdiv@dividend+1,c
  7254  001AAC  EC46  F014         	call	___awdiv	;wreg free
  7255  001AB0  0E12               	movlw	18
  7256  001AB2  2407               	addwf	?___awdiv,w,c
  7257  001AB4  6E0F               	movwf	___wmul@multiplier,c
  7258  001AB6  0E00               	movlw	0
  7259  001AB8  2008               	addwfc	?___awdiv+1,w,c
  7260  001ABA  6E10               	movwf	___wmul@multiplier+1,c
  7261  001ABC  0E00               	movlw	0
  7262  001ABE  6E12               	movwf	___wmul@multiplicand+1,c
  7263  001AC0  0E03               	movlw	3
  7264  001AC2  6E11               	movwf	___wmul@multiplicand,c
  7265  001AC4  ECAB  F017         	call	___wmul	;wreg free
  7266  001AC8  0E29               	movlw	low __npowers_
  7267  001ACA  240F               	addwf	?___wmul,w,c
  7268  001ACC  6EF6               	movwf	tblptrl,c
  7269  001ACE  0E06               	movlw	high __npowers_
  7270  001AD0  2010               	addwfc	?___wmul+1,w,c
  7271  001AD2  6EF7               	movwf	tblptrh,c
  7272  001AD4                     	if	0	;There are less than 3 active tblptr bytes
  7273  001AD4                     	endif
  7274  001AD4  0009               	tblrd		*+
  7275  001AD6  CFF5 F015          	movff	tablat,___ftmul@f1
  7276  001ADA  0009               	tblrd		*+
  7277  001ADC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7278  001AE0  000A               	tblrd		*-
  7279  001AE2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7280  001AE6  EC48  F012         	call	___ftmul	;wreg free
  7281  001AEA  C015  F02A         	movff	?___ftmul,_fround$1969
  7282  001AEE  C016  F02B         	movff	?___ftmul+1,_fround$1969+1
  7283  001AF2  C017  F02C         	movff	?___ftmul+2,_fround$1969+2
  7284                           
  7285                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7286  001AF6  0E00               	movlw	0
  7287  001AF8  6E12               	movwf	___wmul@multiplicand+1,c
  7288  001AFA  0E03               	movlw	3
  7289  001AFC  6E11               	movwf	___wmul@multiplicand,c
  7290  001AFE  0E00               	movlw	0
  7291  001B00  6E04               	movwf	___awmod@divisor+1,c
  7292  001B02  0E0A               	movlw	10
  7293  001B04  6E03               	movwf	___awmod@divisor,c
  7294  001B06  C02D  F001         	movff	fround@prec,___awmod@dividend
  7295  001B0A  6A02               	clrf	___awmod@dividend+1,c
  7296  001B0C  EC05  F015         	call	___awmod	;wreg free
  7297  001B10  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7298  001B14  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7299  001B18  ECAB  F017         	call	___wmul	;wreg free
  7300  001B1C  0E29               	movlw	low __npowers_
  7301  001B1E  240F               	addwf	?___wmul,w,c
  7302  001B20  6EF6               	movwf	tblptrl,c
  7303  001B22  0E06               	movlw	high __npowers_
  7304  001B24  2010               	addwfc	?___wmul+1,w,c
  7305  001B26  6EF7               	movwf	tblptrh,c
  7306  001B28                     	if	0	;There are less than 3 active tblptr bytes
  7307  001B28                     	endif
  7308  001B28  0009               	tblrd		*+
  7309  001B2A  CFF5 F018          	movff	tablat,___ftmul@f2
  7310  001B2E  0009               	tblrd		*+
  7311  001B30  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7312  001B34  000A               	tblrd		*-
  7313  001B36  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7314  001B3A  C02A  F015         	movff	_fround$1969,___ftmul@f1
  7315  001B3E  C02B  F016         	movff	_fround$1969+1,___ftmul@f1+1
  7316  001B42  C02C  F017         	movff	_fround$1969+2,___ftmul@f1+2
  7317  001B46  EC48  F012         	call	___ftmul	;wreg free
  7318  001B4A  C015  F027         	movff	?___ftmul,_fround$1970
  7319  001B4E  C016  F028         	movff	?___ftmul+1,_fround$1970+1
  7320  001B52  C017  F029         	movff	?___ftmul+2,_fround$1970+2
  7321                           
  7322                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7323  001B56  C027  F015         	movff	_fround$1970,___ftmul@f1
  7324  001B5A  C028  F016         	movff	_fround$1970+1,___ftmul@f1+1
  7325  001B5E  C029  F017         	movff	_fround$1970+2,___ftmul@f1+2
  7326  001B62  0E00               	movlw	0
  7327  001B64  6E18               	movwf	___ftmul@f2,c
  7328  001B66  0E00               	movlw	0
  7329  001B68  6E19               	movwf	___ftmul@f2+1,c
  7330  001B6A  0E3F               	movlw	63
  7331  001B6C  6E1A               	movwf	___ftmul@f2+2,c
  7332  001B6E  EC48  F012         	call	___ftmul	;wreg free
  7333  001B72  C015  F024         	movff	?___ftmul,?_fround
  7334  001B76  C016  F025         	movff	?___ftmul+1,?_fround+1
  7335  001B7A  C017  F026         	movff	?___ftmul+2,?_fround+2
  7336  001B7E  0012               	return	
  7337  001B80                     i2l3012:
  7338                           
  7339                           ;doprnt.c: 415: else if(prec > 10)
  7340  001B80  0E0A               	movlw	10
  7341  001B82  642D               	cpfsgt	fround@prec,c
  7342  001B84  D05D               	goto	i2l3020
  7343                           
  7344                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7345  001B86  0E00               	movlw	0
  7346  001B88  6E12               	movwf	___wmul@multiplicand+1,c
  7347  001B8A  0E03               	movlw	3
  7348  001B8C  6E11               	movwf	___wmul@multiplicand,c
  7349  001B8E  0E00               	movlw	0
  7350  001B90  6E04               	movwf	___awmod@divisor+1,c
  7351  001B92  0E0A               	movlw	10
  7352  001B94  6E03               	movwf	___awmod@divisor,c
  7353  001B96  C02D  F001         	movff	fround@prec,___awmod@dividend
  7354  001B9A  6A02               	clrf	___awmod@dividend+1,c
  7355  001B9C  EC05  F015         	call	___awmod	;wreg free
  7356  001BA0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7357  001BA4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7358  001BA8  ECAB  F017         	call	___wmul	;wreg free
  7359  001BAC  0E29               	movlw	low __npowers_
  7360  001BAE  240F               	addwf	?___wmul,w,c
  7361  001BB0  6EF6               	movwf	tblptrl,c
  7362  001BB2  0E06               	movlw	high __npowers_
  7363  001BB4  2010               	addwfc	?___wmul+1,w,c
  7364  001BB6  6EF7               	movwf	tblptrh,c
  7365  001BB8                     	if	0	;There are less than 3 active tblptr bytes
  7366  001BB8                     	endif
  7367  001BB8  0009               	tblrd		*+
  7368  001BBA  CFF5 F018          	movff	tablat,___ftmul@f2
  7369  001BBE  0009               	tblrd		*+
  7370  001BC0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7371  001BC4  000A               	tblrd		*-
  7372  001BC6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7373  001BCA  0E00               	movlw	0
  7374  001BCC  6E0A               	movwf	___awdiv@divisor+1,c
  7375  001BCE  0E0A               	movlw	10
  7376  001BD0  6E09               	movwf	___awdiv@divisor,c
  7377  001BD2  C02D  F007         	movff	fround@prec,___awdiv@dividend
  7378  001BD6  6A08               	clrf	___awdiv@dividend+1,c
  7379  001BD8  EC46  F014         	call	___awdiv	;wreg free
  7380  001BDC  0E09               	movlw	9
  7381  001BDE  2407               	addwf	?___awdiv,w,c
  7382  001BE0  6E0F               	movwf	___wmul@multiplier,c
  7383  001BE2  0E00               	movlw	0
  7384  001BE4  2008               	addwfc	?___awdiv+1,w,c
  7385  001BE6  6E10               	movwf	___wmul@multiplier+1,c
  7386  001BE8  0E00               	movlw	0
  7387  001BEA  6E12               	movwf	___wmul@multiplicand+1,c
  7388  001BEC  0E03               	movlw	3
  7389  001BEE  6E11               	movwf	___wmul@multiplicand,c
  7390  001BF0  ECAB  F017         	call	___wmul	;wreg free
  7391  001BF4  0E29               	movlw	low __npowers_
  7392  001BF6  240F               	addwf	?___wmul,w,c
  7393  001BF8  6EF6               	movwf	tblptrl,c
  7394  001BFA  0E06               	movlw	high __npowers_
  7395  001BFC  2010               	addwfc	?___wmul+1,w,c
  7396  001BFE  6EF7               	movwf	tblptrh,c
  7397  001C00                     	if	0	;There are less than 3 active tblptr bytes
  7398  001C00                     	endif
  7399  001C00  0009               	tblrd		*+
  7400  001C02  CFF5 F015          	movff	tablat,___ftmul@f1
  7401  001C06  0009               	tblrd		*+
  7402  001C08  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7403  001C0C  000A               	tblrd		*-
  7404  001C0E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7405  001C12  EC48  F012         	call	___ftmul	;wreg free
  7406  001C16  C015  F02A         	movff	?___ftmul,_fround$1969
  7407  001C1A  C016  F02B         	movff	?___ftmul+1,_fround$1969+1
  7408  001C1E  C017  F02C         	movff	?___ftmul+2,_fround$1969+2
  7409                           
  7410                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7411  001C22  C02A  F015         	movff	_fround$1969,___ftmul@f1
  7412  001C26  C02B  F016         	movff	_fround$1969+1,___ftmul@f1+1
  7413  001C2A  C02C  F017         	movff	_fround$1969+2,___ftmul@f1+2
  7414  001C2E  0E00               	movlw	0
  7415  001C30  6E18               	movwf	___ftmul@f2,c
  7416  001C32  0E00               	movlw	0
  7417  001C34  6E19               	movwf	___ftmul@f2+1,c
  7418  001C36  0E3F               	movlw	63
  7419  001C38  6E1A               	movwf	___ftmul@f2+2,c
  7420  001C3A  EC48  F012         	call	___ftmul	;wreg free
  7421  001C3E  D799               	goto	L5
  7422  001C40                     i2l3020:
  7423                           
  7424                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7425  001C40  502D               	movf	fround@prec,w,c
  7426  001C42  0D03               	mullw	3
  7427  001C44  0E29               	movlw	low __npowers_
  7428  001C46  24F3               	addwf	prodl,w,c
  7429  001C48  6EF6               	movwf	tblptrl,c
  7430  001C4A  0E06               	movlw	high __npowers_
  7431  001C4C  20F4               	addwfc	prodh,w,c
  7432  001C4E  6EF7               	movwf	tblptrh,c
  7433  001C50                     	if	0	;There are less than 3 active tblptr bytes
  7434  001C50                     	endif
  7435  001C50  0009               	tblrd		*+
  7436  001C52  CFF5 F015          	movff	tablat,___ftmul@f1
  7437  001C56  0009               	tblrd		*+
  7438  001C58  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7439  001C5C  000A               	tblrd		*-
  7440  001C5E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7441  001C62  0E00               	movlw	0
  7442  001C64  6E18               	movwf	___ftmul@f2,c
  7443  001C66  0E00               	movlw	0
  7444  001C68  6E19               	movwf	___ftmul@f2+1,c
  7445  001C6A  0E3F               	movlw	63
  7446  001C6C  6E1A               	movwf	___ftmul@f2+2,c
  7447  001C6E  EC48  F012         	call	___ftmul	;wreg free
  7448  001C72  C015  F024         	movff	?___ftmul,?_fround
  7449  001C76  C016  F025         	movff	?___ftmul+1,?_fround+1
  7450  001C7A  C017  F026         	movff	?___ftmul+2,?_fround+2
  7451  001C7E  0012               	return	
  7452  001C80                     __end_of_fround:
  7453                           	opt stack 0
  7454                           tosu	equ	0xFFF
  7455                           tosh	equ	0xFFE
  7456                           tosl	equ	0xFFD
  7457                           pclatu	equ	0xFFB
  7458                           pclath	equ	0xFFA
  7459                           tblptru	equ	0xFF8
  7460                           tblptrh	equ	0xFF7
  7461                           tblptrl	equ	0xFF6
  7462                           tablat	equ	0xFF5
  7463                           prodh	equ	0xFF4
  7464                           prodl	equ	0xFF3
  7465                           intcon	equ	0xFF2
  7466                           intcon2	equ	0xFF1
  7467                           intcon3	equ	0xFF0
  7468                           postinc0	equ	0xFEE
  7469                           fsr0h	equ	0xFEA
  7470                           fsr0l	equ	0xFE9
  7471                           wreg	equ	0xFE8
  7472                           fsr1h	equ	0xFE2
  7473                           fsr1l	equ	0xFE1
  7474                           indf2	equ	0xFDF
  7475                           postinc2	equ	0xFDE
  7476                           postdec2	equ	0xFDD
  7477                           fsr2h	equ	0xFDA
  7478                           fsr2l	equ	0xFD9
  7479                           status	equ	0xFD8
  7480                           
  7481 ;; *************** function ___awmod *****************
  7482 ;; Defined at:
  7483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  dividend        2    0[COMRAM] int 
  7486 ;;  divisor         2    2[COMRAM] int 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  sign            1    5[COMRAM] unsigned char 
  7489 ;;  counter         1    4[COMRAM] unsigned char 
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  2    0[COMRAM] int 
  7492 ;; Registers used:
  7493 ;;		wreg, status,2, status,0
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7499 ;;      Params:         4       0       0       0       0       0       0
  7500 ;;      Locals:         2       0       0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0
  7502 ;;      Totals:         6       0       0       0       0       0       0
  7503 ;;Total ram usage:        6 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; This function calls:
  7506 ;;		Nothing
  7507 ;; This function is called by:
  7508 ;;		_fround
  7509 ;;		_scale
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text37
  7514  002A0A                     __ptext37:
  7515                           	opt stack 0
  7516  002A0A                     ___awmod:
  7517                           	opt stack 21
  7518                           
  7519                           ;incstack = 0
  7520  002A0A  0E00               	movlw	0
  7521  002A0C  6E06               	movwf	___awmod@sign,c
  7522  002A0E  AE02               	btfss	___awmod@dividend+1,7,c
  7523  002A10  D006               	goto	i2l2936
  7524  002A12  6C01               	negf	___awmod@dividend,c
  7525  002A14  1E02               	comf	___awmod@dividend+1,f,c
  7526  002A16  B0D8               	btfsc	status,0,c
  7527  002A18  2A02               	incf	___awmod@dividend+1,f,c
  7528  002A1A  0E01               	movlw	1
  7529  002A1C  6E06               	movwf	___awmod@sign,c
  7530  002A1E                     i2l2936:
  7531  002A1E  AE04               	btfss	___awmod@divisor+1,7,c
  7532  002A20  D004               	goto	i2l2940
  7533  002A22  6C03               	negf	___awmod@divisor,c
  7534  002A24  1E04               	comf	___awmod@divisor+1,f,c
  7535  002A26  B0D8               	btfsc	status,0,c
  7536  002A28  2A04               	incf	___awmod@divisor+1,f,c
  7537  002A2A                     i2l2940:
  7538  002A2A  5003               	movf	___awmod@divisor,w,c
  7539  002A2C  1004               	iorwf	___awmod@divisor+1,w,c
  7540  002A2E  B4D8               	btfsc	status,2,c
  7541  002A30  D018               	goto	i2l2956
  7542  002A32  0E01               	movlw	1
  7543  002A34  6E05               	movwf	___awmod@counter,c
  7544  002A36  D004               	goto	i2l2946
  7545  002A38                     i2l2944:
  7546  002A38  90D8               	bcf	status,0,c
  7547  002A3A  3603               	rlcf	___awmod@divisor,f,c
  7548  002A3C  3604               	rlcf	___awmod@divisor+1,f,c
  7549  002A3E  2A05               	incf	___awmod@counter,f,c
  7550  002A40                     i2l2946:
  7551  002A40  AE04               	btfss	___awmod@divisor+1,7,c
  7552  002A42  D7FA               	goto	i2l2944
  7553  002A44                     i2l2948:
  7554  002A44  5003               	movf	___awmod@divisor,w,c
  7555  002A46  5C01               	subwf	___awmod@dividend,w,c
  7556  002A48  5004               	movf	___awmod@divisor+1,w,c
  7557  002A4A  5802               	subwfb	___awmod@dividend+1,w,c
  7558  002A4C  A0D8               	btfss	status,0,c
  7559  002A4E  D004               	goto	i2l2952
  7560  002A50  5003               	movf	___awmod@divisor,w,c
  7561  002A52  5E01               	subwf	___awmod@dividend,f,c
  7562  002A54  5004               	movf	___awmod@divisor+1,w,c
  7563  002A56  5A02               	subwfb	___awmod@dividend+1,f,c
  7564  002A58                     i2l2952:
  7565  002A58  90D8               	bcf	status,0,c
  7566  002A5A  3204               	rrcf	___awmod@divisor+1,f,c
  7567  002A5C  3203               	rrcf	___awmod@divisor,f,c
  7568  002A5E  2E05               	decfsz	___awmod@counter,f,c
  7569  002A60  D7F1               	goto	i2l2948
  7570  002A62                     i2l2956:
  7571  002A62  5006               	movf	___awmod@sign,w,c
  7572  002A64  B4D8               	btfsc	status,2,c
  7573  002A66  D004               	goto	i2l2960
  7574  002A68  6C01               	negf	___awmod@dividend,c
  7575  002A6A  1E02               	comf	___awmod@dividend+1,f,c
  7576  002A6C  B0D8               	btfsc	status,0,c
  7577  002A6E  2A02               	incf	___awmod@dividend+1,f,c
  7578  002A70                     i2l2960:
  7579  002A70  C001  F001         	movff	___awmod@dividend,?___awmod
  7580  002A74  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7581  002A78  0012               	return	
  7582  002A7A                     __end_of___awmod:
  7583                           	opt stack 0
  7584                           tosu	equ	0xFFF
  7585                           tosh	equ	0xFFE
  7586                           tosl	equ	0xFFD
  7587                           pclatu	equ	0xFFB
  7588                           pclath	equ	0xFFA
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           intcon2	equ	0xFF1
  7597                           intcon3	equ	0xFF0
  7598                           postinc0	equ	0xFEE
  7599                           fsr0h	equ	0xFEA
  7600                           fsr0l	equ	0xFE9
  7601                           wreg	equ	0xFE8
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           fsr2h	equ	0xFDA
  7608                           fsr2l	equ	0xFD9
  7609                           status	equ	0xFD8
  7610                           
  7611 ;; *************** function ___awdiv *****************
  7612 ;; Defined at:
  7613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  dividend        2    6[COMRAM] int 
  7616 ;;  divisor         2    8[COMRAM] int 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  quotient        2   12[COMRAM] int 
  7619 ;;  sign            1   11[COMRAM] unsigned char 
  7620 ;;  counter         1   10[COMRAM] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  2    6[COMRAM] int 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         4       0       0       0       0       0       0
  7631 ;;      Locals:         4       0       0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0
  7633 ;;      Totals:         8       0       0       0       0       0       0
  7634 ;;Total ram usage:        8 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; This function calls:
  7637 ;;		Nothing
  7638 ;; This function is called by:
  7639 ;;		_fround
  7640 ;;		_scale
  7641 ;;		__doprnt
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text38
  7646  00288C                     __ptext38:
  7647                           	opt stack 0
  7648  00288C                     ___awdiv:
  7649                           	opt stack 21
  7650                           
  7651                           ;incstack = 0
  7652  00288C  0E00               	movlw	0
  7653  00288E  6E0C               	movwf	___awdiv@sign,c
  7654  002890  AE0A               	btfss	___awdiv@divisor+1,7,c
  7655  002892  D006               	goto	i2l2892
  7656  002894  6C09               	negf	___awdiv@divisor,c
  7657  002896  1E0A               	comf	___awdiv@divisor+1,f,c
  7658  002898  B0D8               	btfsc	status,0,c
  7659  00289A  2A0A               	incf	___awdiv@divisor+1,f,c
  7660  00289C  0E01               	movlw	1
  7661  00289E  6E0C               	movwf	___awdiv@sign,c
  7662  0028A0                     i2l2892:
  7663  0028A0  AE08               	btfss	___awdiv@dividend+1,7,c
  7664  0028A2  D006               	goto	i2l2898
  7665  0028A4  6C07               	negf	___awdiv@dividend,c
  7666  0028A6  1E08               	comf	___awdiv@dividend+1,f,c
  7667  0028A8  B0D8               	btfsc	status,0,c
  7668  0028AA  2A08               	incf	___awdiv@dividend+1,f,c
  7669  0028AC  0E01               	movlw	1
  7670  0028AE  1A0C               	xorwf	___awdiv@sign,f,c
  7671  0028B0                     i2l2898:
  7672  0028B0  0E00               	movlw	0
  7673  0028B2  6E0E               	movwf	___awdiv@quotient+1,c
  7674  0028B4  0E00               	movlw	0
  7675  0028B6  6E0D               	movwf	___awdiv@quotient,c
  7676  0028B8  5009               	movf	___awdiv@divisor,w,c
  7677  0028BA  100A               	iorwf	___awdiv@divisor+1,w,c
  7678  0028BC  B4D8               	btfsc	status,2,c
  7679  0028BE  D01C               	goto	i2l2920
  7680  0028C0  0E01               	movlw	1
  7681  0028C2  6E0B               	movwf	___awdiv@counter,c
  7682  0028C4  D004               	goto	i2l2906
  7683  0028C6                     i2l2904:
  7684  0028C6  90D8               	bcf	status,0,c
  7685  0028C8  3609               	rlcf	___awdiv@divisor,f,c
  7686  0028CA  360A               	rlcf	___awdiv@divisor+1,f,c
  7687  0028CC  2A0B               	incf	___awdiv@counter,f,c
  7688  0028CE                     i2l2906:
  7689  0028CE  AE0A               	btfss	___awdiv@divisor+1,7,c
  7690  0028D0  D7FA               	goto	i2l2904
  7691  0028D2                     i2l2908:
  7692  0028D2  90D8               	bcf	status,0,c
  7693  0028D4  360D               	rlcf	___awdiv@quotient,f,c
  7694  0028D6  360E               	rlcf	___awdiv@quotient+1,f,c
  7695  0028D8  5009               	movf	___awdiv@divisor,w,c
  7696  0028DA  5C07               	subwf	___awdiv@dividend,w,c
  7697  0028DC  500A               	movf	___awdiv@divisor+1,w,c
  7698  0028DE  5808               	subwfb	___awdiv@dividend+1,w,c
  7699  0028E0  A0D8               	btfss	status,0,c
  7700  0028E2  D005               	goto	i2l2916
  7701  0028E4  5009               	movf	___awdiv@divisor,w,c
  7702  0028E6  5E07               	subwf	___awdiv@dividend,f,c
  7703  0028E8  500A               	movf	___awdiv@divisor+1,w,c
  7704  0028EA  5A08               	subwfb	___awdiv@dividend+1,f,c
  7705  0028EC  800D               	bsf	___awdiv@quotient,0,c
  7706  0028EE                     i2l2916:
  7707  0028EE  90D8               	bcf	status,0,c
  7708  0028F0  320A               	rrcf	___awdiv@divisor+1,f,c
  7709  0028F2  3209               	rrcf	___awdiv@divisor,f,c
  7710  0028F4  2E0B               	decfsz	___awdiv@counter,f,c
  7711  0028F6  D7ED               	goto	i2l2908
  7712  0028F8                     i2l2920:
  7713  0028F8  500C               	movf	___awdiv@sign,w,c
  7714  0028FA  B4D8               	btfsc	status,2,c
  7715  0028FC  D004               	goto	i2l2924
  7716  0028FE  6C0D               	negf	___awdiv@quotient,c
  7717  002900  1E0E               	comf	___awdiv@quotient+1,f,c
  7718  002902  B0D8               	btfsc	status,0,c
  7719  002904  2A0E               	incf	___awdiv@quotient+1,f,c
  7720  002906                     i2l2924:
  7721  002906  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  7722  00290A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  7723  00290E  0012               	return	
  7724  002910                     __end_of___awdiv:
  7725                           	opt stack 0
  7726                           tosu	equ	0xFFF
  7727                           tosh	equ	0xFFE
  7728                           tosl	equ	0xFFD
  7729                           pclatu	equ	0xFFB
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon2	equ	0xFF1
  7739                           intcon3	equ	0xFF0
  7740                           postinc0	equ	0xFEE
  7741                           fsr0h	equ	0xFEA
  7742                           fsr0l	equ	0xFE9
  7743                           wreg	equ	0xFE8
  7744                           fsr1h	equ	0xFE2
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function __tdiv_to_l_ *****************
  7754 ;; Defined at:
  7755 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  f1              3    0[COMRAM] float 
  7758 ;;  f2              3    3[COMRAM] float 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  quot            4    9[COMRAM] unsigned long 
  7761 ;;  exp1            1   14[COMRAM] unsigned char 
  7762 ;;  cntr            1   13[COMRAM] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  4    0[COMRAM] unsigned long 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2, status,0
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7772 ;;      Params:         6       0       0       0       0       0       0
  7773 ;;      Locals:         6       0       0       0       0       0       0
  7774 ;;      Temps:          3       0       0       0       0       0       0
  7775 ;;      Totals:        15       0       0       0       0       0       0
  7776 ;;Total ram usage:       15 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		__doprnt
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text39
  7786  002142                     __ptext39:
  7787                           	opt stack 0
  7788  002142                     __tdiv_to_l_:
  7789                           	opt stack 22
  7790                           
  7791                           ;incstack = 0
  7792  002142  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7793  002146  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7794  002148  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7795  00214A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  7796  00214C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7797  00214E  E301               	bnc	u289_41
  7798  002150  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7799  002152                     u289_41:
  7800  002152  5007               	movf	??__tdiv_to_l_,w,c
  7801  002154  6E0F               	movwf	__tdiv_to_l_@exp1,c
  7802  002156  500F               	movf	__tdiv_to_l_@exp1,w,c
  7803  002158  A4D8               	btfss	status,2,c
  7804  00215A  D009               	goto	i2l3080
  7805  00215C  0E00               	movlw	0
  7806  00215E  6E01               	movwf	?__tdiv_to_l_,c
  7807  002160  0E00               	movlw	0
  7808  002162  6E02               	movwf	?__tdiv_to_l_+1,c
  7809  002164  0E00               	movlw	0
  7810  002166  6E03               	movwf	?__tdiv_to_l_+2,c
  7811  002168  0E00               	movlw	0
  7812  00216A  6E04               	movwf	?__tdiv_to_l_+3,c
  7813  00216C  0012               	return	
  7814  00216E                     i2l3080:
  7815  00216E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7816  002172  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7817  002174  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7818  002176  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  7819  002178  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7820  00217A  E301               	bnc	u291_41
  7821  00217C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7822  00217E                     u291_41:
  7823  00217E  5007               	movf	??__tdiv_to_l_,w,c
  7824  002180  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7825  002182  500E               	movf	__tdiv_to_l_@cntr,w,c
  7826  002184  A4D8               	btfss	status,2,c
  7827  002186  D009               	goto	i2l3086
  7828  002188  0E00               	movlw	0
  7829  00218A  6E01               	movwf	?__tdiv_to_l_,c
  7830  00218C  0E00               	movlw	0
  7831  00218E  6E02               	movwf	?__tdiv_to_l_+1,c
  7832  002190  0E00               	movlw	0
  7833  002192  6E03               	movwf	?__tdiv_to_l_+2,c
  7834  002194  0E00               	movlw	0
  7835  002196  6E04               	movwf	?__tdiv_to_l_+3,c
  7836  002198  0012               	return	
  7837  00219A                     i2l3086:
  7838  00219A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  7839  00219C  0EFF               	movlw	255
  7840  00219E  1601               	andwf	__tdiv_to_l_@f1,f,c
  7841  0021A0  0EFF               	movlw	255
  7842  0021A2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  7843  0021A4  0E00               	movlw	0
  7844  0021A6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  7845  0021A8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  7846  0021AA  0EFF               	movlw	255
  7847  0021AC  1604               	andwf	__tdiv_to_l_@f2,f,c
  7848  0021AE  0EFF               	movlw	255
  7849  0021B0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  7850  0021B2  0E00               	movlw	0
  7851  0021B4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  7852  0021B6  0E00               	movlw	0
  7853  0021B8  6E0A               	movwf	__tdiv_to_l_@quot,c
  7854  0021BA  0E00               	movlw	0
  7855  0021BC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  7856  0021BE  0E00               	movlw	0
  7857  0021C0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  7858  0021C2  0E00               	movlw	0
  7859  0021C4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  7860  0021C6  0E7F               	movlw	127
  7861  0021C8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7862  0021CA  500E               	movf	__tdiv_to_l_@cntr,w,c
  7863  0021CC  0F98               	addlw	152
  7864  0021CE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7865  0021D0  0E18               	movlw	24
  7866  0021D2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7867  0021D4                     i2l900:
  7868  0021D4  90D8               	bcf	status,0,c
  7869  0021D6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7870  0021D8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7871  0021DA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7872  0021DC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7873  0021DE  5004               	movf	__tdiv_to_l_@f2,w,c
  7874  0021E0  5C01               	subwf	__tdiv_to_l_@f1,w,c
  7875  0021E2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7876  0021E4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  7877  0021E6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7878  0021E8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  7879  0021EA  A0D8               	btfss	status,0,c
  7880  0021EC  D007               	goto	i2l901
  7881  0021EE  5004               	movf	__tdiv_to_l_@f2,w,c
  7882  0021F0  5E01               	subwf	__tdiv_to_l_@f1,f,c
  7883  0021F2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7884  0021F4  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  7885  0021F6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7886  0021F8  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  7887  0021FA  800A               	bsf	__tdiv_to_l_@quot,0,c
  7888  0021FC                     i2l901:
  7889  0021FC  90D8               	bcf	status,0,c
  7890  0021FE  3601               	rlcf	__tdiv_to_l_@f1,f,c
  7891  002200  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  7892  002202  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  7893  002204  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  7894  002206  D7E6               	goto	i2l900
  7895  002208  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  7896  00220A  D016               	goto	i2l3120
  7897  00220C  500F               	movf	__tdiv_to_l_@exp1,w,c
  7898  00220E  0A80               	xorlw	128
  7899  002210  0F97               	addlw	151
  7900  002212  B0D8               	btfsc	status,0,c
  7901  002214  D009               	goto	i2l3116
  7902  002216  0E00               	movlw	0
  7903  002218  6E01               	movwf	?__tdiv_to_l_,c
  7904  00221A  0E00               	movlw	0
  7905  00221C  6E02               	movwf	?__tdiv_to_l_+1,c
  7906  00221E  0E00               	movlw	0
  7907  002220  6E03               	movwf	?__tdiv_to_l_+2,c
  7908  002222  0E00               	movlw	0
  7909  002224  6E04               	movwf	?__tdiv_to_l_+3,c
  7910  002226  0012               	return	
  7911  002228                     i2l3116:
  7912  002228  90D8               	bcf	status,0,c
  7913  00222A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7914  00222C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7915  00222E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7916  002230  320A               	rrcf	__tdiv_to_l_@quot,f,c
  7917  002232  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  7918  002234  D7F9               	goto	i2l3116
  7919  002236  D015               	goto	i2l907
  7920  002238                     i2l3120:
  7921  002238  0E17               	movlw	23
  7922  00223A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  7923  00223C  D00F               	goto	i2l3128
  7924  00223E  0E00               	movlw	0
  7925  002240  6E01               	movwf	?__tdiv_to_l_,c
  7926  002242  0E00               	movlw	0
  7927  002244  6E02               	movwf	?__tdiv_to_l_+1,c
  7928  002246  0E00               	movlw	0
  7929  002248  6E03               	movwf	?__tdiv_to_l_+2,c
  7930  00224A  0E00               	movlw	0
  7931  00224C  6E04               	movwf	?__tdiv_to_l_+3,c
  7932  00224E  0012               	return	
  7933  002250                     i2l3126:
  7934  002250  90D8               	bcf	status,0,c
  7935  002252  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7936  002254  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7937  002256  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7938  002258  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7939  00225A  060F               	decf	__tdiv_to_l_@exp1,f,c
  7940  00225C                     i2l3128:
  7941  00225C  500F               	movf	__tdiv_to_l_@exp1,w,c
  7942  00225E  A4D8               	btfss	status,2,c
  7943  002260  D7F7               	goto	i2l3126
  7944  002262                     i2l907:
  7945  002262  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7946  002266  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7947  00226A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7948  00226E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7949  002272  0012               	return		;funcret
  7950  002274                     __end_of__tdiv_to_l_:
  7951                           	opt stack 0
  7952                           tosu	equ	0xFFF
  7953                           tosh	equ	0xFFE
  7954                           tosl	equ	0xFFD
  7955                           pclatu	equ	0xFFB
  7956                           pclath	equ	0xFFA
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon	equ	0xFF2
  7964                           intcon2	equ	0xFF1
  7965                           intcon3	equ	0xFF0
  7966                           postinc0	equ	0xFEE
  7967                           fsr0h	equ	0xFEA
  7968                           fsr0l	equ	0xFE9
  7969                           wreg	equ	0xFE8
  7970                           fsr1h	equ	0xFE2
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function __div_to_l_ *****************
  7980 ;; Defined at:
  7981 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  f1              3    0[COMRAM] unsigned long 
  7984 ;;  f2              3    3[COMRAM] unsigned long 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  quot            4    6[COMRAM] unsigned long 
  7987 ;;  exp1            1   11[COMRAM] unsigned char 
  7988 ;;  cntr            1   10[COMRAM] unsigned char 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  4    0[COMRAM] unsigned long 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2, status,0
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7998 ;;      Params:         6       0       0       0       0       0       0
  7999 ;;      Locals:         6       0       0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0
  8001 ;;      Totals:        12       0       0       0       0       0       0
  8002 ;;Total ram usage:       12 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; This function calls:
  8005 ;;		Nothing
  8006 ;; This function is called by:
  8007 ;;		__doprnt
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text40
  8012  002274                     __ptext40:
  8013                           	opt stack 0
  8014  002274                     __div_to_l_:
  8015                           	opt stack 22
  8016                           
  8017                           ;incstack = 0
  8018  002274  3403               	rlcf	__div_to_l_@f1+2,w,c
  8019  002276  3404               	rlcf	__div_to_l_@f1+3,w,c
  8020  002278  6E0C               	movwf	__div_to_l_@exp1,c
  8021  00227A  500C               	movf	__div_to_l_@exp1,w,c
  8022  00227C  A4D8               	btfss	status,2,c
  8023  00227E  D009               	goto	i2l3136
  8024  002280  0E00               	movlw	0
  8025  002282  6E01               	movwf	?__div_to_l_,c
  8026  002284  0E00               	movlw	0
  8027  002286  6E02               	movwf	?__div_to_l_+1,c
  8028  002288  0E00               	movlw	0
  8029  00228A  6E03               	movwf	?__div_to_l_+2,c
  8030  00228C  0E00               	movlw	0
  8031  00228E  6E04               	movwf	?__div_to_l_+3,c
  8032  002290  0012               	return	
  8033  002292                     i2l3136:
  8034  002292  3406               	rlcf	__div_to_l_@f2+2,w,c
  8035  002294  3407               	rlcf	__div_to_l_@f2+3,w,c
  8036  002296  6E0B               	movwf	__div_to_l_@cntr,c
  8037  002298  500B               	movf	__div_to_l_@cntr,w,c
  8038  00229A  A4D8               	btfss	status,2,c
  8039  00229C  D009               	goto	i2l3142
  8040  00229E  0E00               	movlw	0
  8041  0022A0  6E01               	movwf	?__div_to_l_,c
  8042  0022A2  0E00               	movlw	0
  8043  0022A4  6E02               	movwf	?__div_to_l_+1,c
  8044  0022A6  0E00               	movlw	0
  8045  0022A8  6E03               	movwf	?__div_to_l_+2,c
  8046  0022AA  0E00               	movlw	0
  8047  0022AC  6E04               	movwf	?__div_to_l_+3,c
  8048  0022AE  0012               	return	
  8049  0022B0                     i2l3142:
  8050  0022B0  8E03               	bsf	__div_to_l_@f1+2,7,c
  8051  0022B2  0EFF               	movlw	255
  8052  0022B4  1601               	andwf	__div_to_l_@f1,f,c
  8053  0022B6  0EFF               	movlw	255
  8054  0022B8  1602               	andwf	__div_to_l_@f1+1,f,c
  8055  0022BA  0EFF               	movlw	255
  8056  0022BC  1603               	andwf	__div_to_l_@f1+2,f,c
  8057  0022BE  0E00               	movlw	0
  8058  0022C0  1604               	andwf	__div_to_l_@f1+3,f,c
  8059  0022C2  8E06               	bsf	__div_to_l_@f2+2,7,c
  8060  0022C4  0EFF               	movlw	255
  8061  0022C6  1604               	andwf	__div_to_l_@f2,f,c
  8062  0022C8  0EFF               	movlw	255
  8063  0022CA  1605               	andwf	__div_to_l_@f2+1,f,c
  8064  0022CC  0EFF               	movlw	255
  8065  0022CE  1606               	andwf	__div_to_l_@f2+2,f,c
  8066  0022D0  0E00               	movlw	0
  8067  0022D2  1607               	andwf	__div_to_l_@f2+3,f,c
  8068  0022D4  0E00               	movlw	0
  8069  0022D6  6E07               	movwf	__div_to_l_@quot,c
  8070  0022D8  0E00               	movlw	0
  8071  0022DA  6E08               	movwf	__div_to_l_@quot+1,c
  8072  0022DC  0E00               	movlw	0
  8073  0022DE  6E09               	movwf	__div_to_l_@quot+2,c
  8074  0022E0  0E00               	movlw	0
  8075  0022E2  6E0A               	movwf	__div_to_l_@quot+3,c
  8076  0022E4  0E7F               	movlw	127
  8077  0022E6  5E0C               	subwf	__div_to_l_@exp1,f,c
  8078  0022E8  500B               	movf	__div_to_l_@cntr,w,c
  8079  0022EA  0FA0               	addlw	160
  8080  0022EC  5E0C               	subwf	__div_to_l_@exp1,f,c
  8081  0022EE  0E20               	movlw	32
  8082  0022F0  6E0B               	movwf	__div_to_l_@cntr,c
  8083  0022F2                     i2l3156:
  8084  0022F2  90D8               	bcf	status,0,c
  8085  0022F4  3607               	rlcf	__div_to_l_@quot,f,c
  8086  0022F6  3608               	rlcf	__div_to_l_@quot+1,f,c
  8087  0022F8  3609               	rlcf	__div_to_l_@quot+2,f,c
  8088  0022FA  360A               	rlcf	__div_to_l_@quot+3,f,c
  8089  0022FC  5004               	movf	__div_to_l_@f2,w,c
  8090  0022FE  5C01               	subwf	__div_to_l_@f1,w,c
  8091  002300  5005               	movf	__div_to_l_@f2+1,w,c
  8092  002302  5802               	subwfb	__div_to_l_@f1+1,w,c
  8093  002304  5006               	movf	__div_to_l_@f2+2,w,c
  8094  002306  5803               	subwfb	__div_to_l_@f1+2,w,c
  8095  002308  5007               	movf	__div_to_l_@f2+3,w,c
  8096  00230A  5804               	subwfb	__div_to_l_@f1+3,w,c
  8097  00230C  A0D8               	btfss	status,0,c
  8098  00230E  D009               	goto	i2l3164
  8099  002310  5004               	movf	__div_to_l_@f2,w,c
  8100  002312  5E01               	subwf	__div_to_l_@f1,f,c
  8101  002314  5005               	movf	__div_to_l_@f2+1,w,c
  8102  002316  5A02               	subwfb	__div_to_l_@f1+1,f,c
  8103  002318  5006               	movf	__div_to_l_@f2+2,w,c
  8104  00231A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  8105  00231C  5007               	movf	__div_to_l_@f2+3,w,c
  8106  00231E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  8107  002320  8007               	bsf	__div_to_l_@quot,0,c
  8108  002322                     i2l3164:
  8109  002322  90D8               	bcf	status,0,c
  8110  002324  3601               	rlcf	__div_to_l_@f1,f,c
  8111  002326  3602               	rlcf	__div_to_l_@f1+1,f,c
  8112  002328  3603               	rlcf	__div_to_l_@f1+2,f,c
  8113  00232A  3604               	rlcf	__div_to_l_@f1+3,f,c
  8114  00232C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  8115  00232E  D7E1               	goto	i2l3156
  8116  002330  AE0C               	btfss	__div_to_l_@exp1,7,c
  8117  002332  D016               	goto	i2l3180
  8118  002334  500C               	movf	__div_to_l_@exp1,w,c
  8119  002336  0A80               	xorlw	128
  8120  002338  0F9F               	addlw	159
  8121  00233A  B0D8               	btfsc	status,0,c
  8122  00233C  D009               	goto	i2l3176
  8123  00233E  0E00               	movlw	0
  8124  002340  6E01               	movwf	?__div_to_l_,c
  8125  002342  0E00               	movlw	0
  8126  002344  6E02               	movwf	?__div_to_l_+1,c
  8127  002346  0E00               	movlw	0
  8128  002348  6E03               	movwf	?__div_to_l_+2,c
  8129  00234A  0E00               	movlw	0
  8130  00234C  6E04               	movwf	?__div_to_l_+3,c
  8131  00234E  0012               	return	
  8132  002350                     i2l3176:
  8133  002350  90D8               	bcf	status,0,c
  8134  002352  320A               	rrcf	__div_to_l_@quot+3,f,c
  8135  002354  3209               	rrcf	__div_to_l_@quot+2,f,c
  8136  002356  3208               	rrcf	__div_to_l_@quot+1,f,c
  8137  002358  3207               	rrcf	__div_to_l_@quot,f,c
  8138  00235A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  8139  00235C  D7F9               	goto	i2l3176
  8140  00235E  D015               	goto	i2l803
  8141  002360                     i2l3180:
  8142  002360  0E1F               	movlw	31
  8143  002362  640C               	cpfsgt	__div_to_l_@exp1,c
  8144  002364  D00F               	goto	i2l3188
  8145  002366  0E00               	movlw	0
  8146  002368  6E01               	movwf	?__div_to_l_,c
  8147  00236A  0E00               	movlw	0
  8148  00236C  6E02               	movwf	?__div_to_l_+1,c
  8149  00236E  0E00               	movlw	0
  8150  002370  6E03               	movwf	?__div_to_l_+2,c
  8151  002372  0E00               	movlw	0
  8152  002374  6E04               	movwf	?__div_to_l_+3,c
  8153  002376  0012               	return	
  8154  002378                     i2l3186:
  8155  002378  90D8               	bcf	status,0,c
  8156  00237A  3607               	rlcf	__div_to_l_@quot,f,c
  8157  00237C  3608               	rlcf	__div_to_l_@quot+1,f,c
  8158  00237E  3609               	rlcf	__div_to_l_@quot+2,f,c
  8159  002380  360A               	rlcf	__div_to_l_@quot+3,f,c
  8160  002382  060C               	decf	__div_to_l_@exp1,f,c
  8161  002384                     i2l3188:
  8162  002384  500C               	movf	__div_to_l_@exp1,w,c
  8163  002386  A4D8               	btfss	status,2,c
  8164  002388  D7F7               	goto	i2l3186
  8165  00238A                     i2l803:
  8166  00238A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  8167  00238E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8168  002392  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8169  002396  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8170  00239A  0012               	return		;funcret
  8171  00239C                     __end_of__div_to_l_:
  8172                           	opt stack 0
  8173                           tosu	equ	0xFFF
  8174                           tosh	equ	0xFFE
  8175                           tosl	equ	0xFFD
  8176                           pclatu	equ	0xFFB
  8177                           pclath	equ	0xFFA
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           intcon	equ	0xFF2
  8185                           intcon2	equ	0xFF1
  8186                           intcon3	equ	0xFF0
  8187                           postinc0	equ	0xFEE
  8188                           fsr0h	equ	0xFEA
  8189                           fsr0l	equ	0xFE9
  8190                           wreg	equ	0xFE8
  8191                           fsr1h	equ	0xFE2
  8192                           fsr1l	equ	0xFE1
  8193                           indf2	equ	0xFDF
  8194                           postinc2	equ	0xFDE
  8195                           postdec2	equ	0xFDD
  8196                           fsr2h	equ	0xFDA
  8197                           fsr2l	equ	0xFD9
  8198                           status	equ	0xFD8
  8199                           
  8200 ;; *************** function ___lltoft *****************
  8201 ;; Defined at:
  8202 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;  c               4    8[COMRAM] unsigned long 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  exp             1   16[COMRAM] unsigned char 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  3    8[COMRAM] float 
  8209 ;; Registers used:
  8210 ;;		wreg, status,2, status,0, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8216 ;;      Params:         4       0       0       0       0       0       0
  8217 ;;      Locals:         1       0       0       0       0       0       0
  8218 ;;      Temps:          4       0       0       0       0       0       0
  8219 ;;      Totals:         9       0       0       0       0       0       0
  8220 ;;Total ram usage:        9 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    1
  8223 ;; This function calls:
  8224 ;;		___ftpack
  8225 ;; This function is called by:
  8226 ;;		__doprnt
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text41
  8231  002AE0                     __ptext41:
  8232                           	opt stack 0
  8233  002AE0                     ___lltoft:
  8234                           	opt stack 21
  8235                           
  8236                           ;incstack = 0
  8237  002AE0  0E8E               	movlw	142
  8238  002AE2  6E11               	movwf	___lltoft@exp,c
  8239  002AE4  D006               	goto	i2l3308
  8240  002AE6                     i2l3306:
  8241  002AE6  90D8               	bcf	status,0,c
  8242  002AE8  320C               	rrcf	___lltoft@c+3,f,c
  8243  002AEA  320B               	rrcf	___lltoft@c+2,f,c
  8244  002AEC  320A               	rrcf	___lltoft@c+1,f,c
  8245  002AEE  3209               	rrcf	___lltoft@c,f,c
  8246  002AF0  2A11               	incf	___lltoft@exp,f,c
  8247  002AF2                     i2l3308:
  8248  002AF2  0E00               	movlw	0
  8249  002AF4  1409               	andwf	___lltoft@c,w,c
  8250  002AF6  6E0D               	movwf	??___lltoft& (0+255),c
  8251  002AF8  0E00               	movlw	0
  8252  002AFA  140A               	andwf	___lltoft@c+1,w,c
  8253  002AFC  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  8254  002AFE  0E00               	movlw	0
  8255  002B00  140B               	andwf	___lltoft@c+2,w,c
  8256  002B02  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  8257  002B04  0EFF               	movlw	255
  8258  002B06  140C               	andwf	___lltoft@c+3,w,c
  8259  002B08  6E10               	movwf	(??___lltoft+3)& (0+255),c
  8260  002B0A  500D               	movf	??___lltoft,w,c
  8261  002B0C  100E               	iorwf	??___lltoft+1,w,c
  8262  002B0E  100F               	iorwf	??___lltoft+2,w,c
  8263  002B10  1010               	iorwf	??___lltoft+3,w,c
  8264  002B12  A4D8               	btfss	status,2,c
  8265  002B14  D7E8               	goto	i2l3306
  8266  002B16  C009  F001         	movff	___lltoft@c,___ftpack@arg
  8267  002B1A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  8268  002B1E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  8269  002B22  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  8270  002B26  0E00               	movlw	0
  8271  002B28  6E05               	movwf	___ftpack@sign,c
  8272  002B2A  ECA7  F013         	call	___ftpack	;wreg free
  8273  002B2E  C001  F009         	movff	?___ftpack,?___lltoft
  8274  002B32  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  8275  002B36  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  8276  002B3A  0012               	return	
  8277  002B3C                     __end_of___lltoft:
  8278                           	opt stack 0
  8279                           tosu	equ	0xFFF
  8280                           tosh	equ	0xFFE
  8281                           tosl	equ	0xFFD
  8282                           pclatu	equ	0xFFB
  8283                           pclath	equ	0xFFA
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           intcon2	equ	0xFF1
  8292                           intcon3	equ	0xFF0
  8293                           postinc0	equ	0xFEE
  8294                           fsr0h	equ	0xFEA
  8295                           fsr0l	equ	0xFE9
  8296                           wreg	equ	0xFE8
  8297                           fsr1h	equ	0xFE2
  8298                           fsr1l	equ	0xFE1
  8299                           indf2	equ	0xFDF
  8300                           postinc2	equ	0xFDE
  8301                           postdec2	equ	0xFDD
  8302                           fsr2h	equ	0xFDA
  8303                           fsr2l	equ	0xFD9
  8304                           status	equ	0xFD8
  8305                           
  8306 ;; *************** function ___llmod *****************
  8307 ;; Defined at:
  8308 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  dividend        4   13[COMRAM] unsigned long 
  8311 ;;  divisor         4   17[COMRAM] unsigned long 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  counter         1   21[COMRAM] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  4   13[COMRAM] unsigned long 
  8316 ;; Registers used:
  8317 ;;		wreg, status,2, status,0
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8323 ;;      Params:         8       0       0       0       0       0       0
  8324 ;;      Locals:         1       0       0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0
  8326 ;;      Totals:         9       0       0       0       0       0       0
  8327 ;;Total ram usage:        9 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		__doprnt
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text42
  8337  002A7A                     __ptext42:
  8338                           	opt stack 0
  8339  002A7A                     ___llmod:
  8340                           	opt stack 22
  8341                           
  8342                           ;incstack = 0
  8343  002A7A  5012               	movf	___llmod@divisor,w,c
  8344  002A7C  1013               	iorwf	___llmod@divisor+1,w,c
  8345  002A7E  1014               	iorwf	___llmod@divisor+2,w,c
  8346  002A80  1015               	iorwf	___llmod@divisor+3,w,c
  8347  002A82  B4D8               	btfsc	status,2,c
  8348  002A84  D024               	goto	i2l1014
  8349  002A86  0E01               	movlw	1
  8350  002A88  6E16               	movwf	___llmod@counter,c
  8351  002A8A  D006               	goto	i2l3294
  8352  002A8C                     i2l3292:
  8353  002A8C  90D8               	bcf	status,0,c
  8354  002A8E  3612               	rlcf	___llmod@divisor,f,c
  8355  002A90  3613               	rlcf	___llmod@divisor+1,f,c
  8356  002A92  3614               	rlcf	___llmod@divisor+2,f,c
  8357  002A94  3615               	rlcf	___llmod@divisor+3,f,c
  8358  002A96  2A16               	incf	___llmod@counter,f,c
  8359  002A98                     i2l3294:
  8360  002A98  AE15               	btfss	___llmod@divisor+3,7,c
  8361  002A9A  D7F8               	goto	i2l3292
  8362  002A9C                     i2l3296:
  8363  002A9C  5012               	movf	___llmod@divisor,w,c
  8364  002A9E  5C0E               	subwf	___llmod@dividend,w,c
  8365  002AA0  5013               	movf	___llmod@divisor+1,w,c
  8366  002AA2  580F               	subwfb	___llmod@dividend+1,w,c
  8367  002AA4  5014               	movf	___llmod@divisor+2,w,c
  8368  002AA6  5810               	subwfb	___llmod@dividend+2,w,c
  8369  002AA8  5015               	movf	___llmod@divisor+3,w,c
  8370  002AAA  5811               	subwfb	___llmod@dividend+3,w,c
  8371  002AAC  A0D8               	btfss	status,0,c
  8372  002AAE  D008               	goto	i2l3300
  8373  002AB0  5012               	movf	___llmod@divisor,w,c
  8374  002AB2  5E0E               	subwf	___llmod@dividend,f,c
  8375  002AB4  5013               	movf	___llmod@divisor+1,w,c
  8376  002AB6  5A0F               	subwfb	___llmod@dividend+1,f,c
  8377  002AB8  5014               	movf	___llmod@divisor+2,w,c
  8378  002ABA  5A10               	subwfb	___llmod@dividend+2,f,c
  8379  002ABC  5015               	movf	___llmod@divisor+3,w,c
  8380  002ABE  5A11               	subwfb	___llmod@dividend+3,f,c
  8381  002AC0                     i2l3300:
  8382  002AC0  90D8               	bcf	status,0,c
  8383  002AC2  3215               	rrcf	___llmod@divisor+3,f,c
  8384  002AC4  3214               	rrcf	___llmod@divisor+2,f,c
  8385  002AC6  3213               	rrcf	___llmod@divisor+1,f,c
  8386  002AC8  3212               	rrcf	___llmod@divisor,f,c
  8387  002ACA  2E16               	decfsz	___llmod@counter,f,c
  8388  002ACC  D7E7               	goto	i2l3296
  8389  002ACE                     i2l1014:
  8390  002ACE  C00E  F00E         	movff	___llmod@dividend,?___llmod
  8391  002AD2  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  8392  002AD6  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  8393  002ADA  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  8394  002ADE  0012               	return		;funcret
  8395  002AE0                     __end_of___llmod:
  8396                           	opt stack 0
  8397                           tosu	equ	0xFFF
  8398                           tosh	equ	0xFFE
  8399                           tosl	equ	0xFFD
  8400                           pclatu	equ	0xFFB
  8401                           pclath	equ	0xFFA
  8402                           tblptru	equ	0xFF8
  8403                           tblptrh	equ	0xFF7
  8404                           tblptrl	equ	0xFF6
  8405                           tablat	equ	0xFF5
  8406                           prodh	equ	0xFF4
  8407                           prodl	equ	0xFF3
  8408                           intcon	equ	0xFF2
  8409                           intcon2	equ	0xFF1
  8410                           intcon3	equ	0xFF0
  8411                           postinc0	equ	0xFEE
  8412                           fsr0h	equ	0xFEA
  8413                           fsr0l	equ	0xFE9
  8414                           wreg	equ	0xFE8
  8415                           fsr1h	equ	0xFE2
  8416                           fsr1l	equ	0xFE1
  8417                           indf2	equ	0xFDF
  8418                           postinc2	equ	0xFDE
  8419                           postdec2	equ	0xFDD
  8420                           fsr2h	equ	0xFDA
  8421                           fsr2l	equ	0xFD9
  8422                           status	equ	0xFD8
  8423                           
  8424 ;; *************** function ___lldiv *****************
  8425 ;; Defined at:
  8426 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;  dividend        4    0[COMRAM] unsigned long 
  8429 ;;  divisor         4    4[COMRAM] unsigned long 
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;  quotient        4    8[COMRAM] unsigned long 
  8432 ;;  counter         1   12[COMRAM] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  4    0[COMRAM] unsigned long 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8442 ;;      Params:         8       0       0       0       0       0       0
  8443 ;;      Locals:         5       0       0       0       0       0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0
  8445 ;;      Totals:        13       0       0       0       0       0       0
  8446 ;;Total ram usage:       13 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; This function calls:
  8449 ;;		Nothing
  8450 ;; This function is called by:
  8451 ;;		__doprnt
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text43
  8456  002910                     __ptext43:
  8457                           	opt stack 0
  8458  002910                     ___lldiv:
  8459                           	opt stack 22
  8460                           
  8461                           ;incstack = 0
  8462  002910  0E00               	movlw	0
  8463  002912  6E09               	movwf	___lldiv@quotient,c
  8464  002914  0E00               	movlw	0
  8465  002916  6E0A               	movwf	___lldiv@quotient+1,c
  8466  002918  0E00               	movlw	0
  8467  00291A  6E0B               	movwf	___lldiv@quotient+2,c
  8468  00291C  0E00               	movlw	0
  8469  00291E  6E0C               	movwf	___lldiv@quotient+3,c
  8470  002920  5005               	movf	___lldiv@divisor,w,c
  8471  002922  1006               	iorwf	___lldiv@divisor+1,w,c
  8472  002924  1007               	iorwf	___lldiv@divisor+2,w,c
  8473  002926  1008               	iorwf	___lldiv@divisor+3,w,c
  8474  002928  B4D8               	btfsc	status,2,c
  8475  00292A  D02A               	goto	i2l1004
  8476  00292C  0E01               	movlw	1
  8477  00292E  6E0D               	movwf	___lldiv@counter,c
  8478  002930  D006               	goto	i2l3274
  8479  002932                     i2l3272:
  8480  002932  90D8               	bcf	status,0,c
  8481  002934  3605               	rlcf	___lldiv@divisor,f,c
  8482  002936  3606               	rlcf	___lldiv@divisor+1,f,c
  8483  002938  3607               	rlcf	___lldiv@divisor+2,f,c
  8484  00293A  3608               	rlcf	___lldiv@divisor+3,f,c
  8485  00293C  2A0D               	incf	___lldiv@counter,f,c
  8486  00293E                     i2l3274:
  8487  00293E  AE08               	btfss	___lldiv@divisor+3,7,c
  8488  002940  D7F8               	goto	i2l3272
  8489  002942                     i2l3276:
  8490  002942  90D8               	bcf	status,0,c
  8491  002944  3609               	rlcf	___lldiv@quotient,f,c
  8492  002946  360A               	rlcf	___lldiv@quotient+1,f,c
  8493  002948  360B               	rlcf	___lldiv@quotient+2,f,c
  8494  00294A  360C               	rlcf	___lldiv@quotient+3,f,c
  8495  00294C  5005               	movf	___lldiv@divisor,w,c
  8496  00294E  5C01               	subwf	___lldiv@dividend,w,c
  8497  002950  5006               	movf	___lldiv@divisor+1,w,c
  8498  002952  5802               	subwfb	___lldiv@dividend+1,w,c
  8499  002954  5007               	movf	___lldiv@divisor+2,w,c
  8500  002956  5803               	subwfb	___lldiv@dividend+2,w,c
  8501  002958  5008               	movf	___lldiv@divisor+3,w,c
  8502  00295A  5804               	subwfb	___lldiv@dividend+3,w,c
  8503  00295C  A0D8               	btfss	status,0,c
  8504  00295E  D009               	goto	i2l3284
  8505  002960  5005               	movf	___lldiv@divisor,w,c
  8506  002962  5E01               	subwf	___lldiv@dividend,f,c
  8507  002964  5006               	movf	___lldiv@divisor+1,w,c
  8508  002966  5A02               	subwfb	___lldiv@dividend+1,f,c
  8509  002968  5007               	movf	___lldiv@divisor+2,w,c
  8510  00296A  5A03               	subwfb	___lldiv@dividend+2,f,c
  8511  00296C  5008               	movf	___lldiv@divisor+3,w,c
  8512  00296E  5A04               	subwfb	___lldiv@dividend+3,f,c
  8513  002970  8009               	bsf	___lldiv@quotient,0,c
  8514  002972                     i2l3284:
  8515  002972  90D8               	bcf	status,0,c
  8516  002974  3208               	rrcf	___lldiv@divisor+3,f,c
  8517  002976  3207               	rrcf	___lldiv@divisor+2,f,c
  8518  002978  3206               	rrcf	___lldiv@divisor+1,f,c
  8519  00297A  3205               	rrcf	___lldiv@divisor,f,c
  8520  00297C  2E0D               	decfsz	___lldiv@counter,f,c
  8521  00297E  D7E1               	goto	i2l3276
  8522  002980                     i2l1004:
  8523  002980  C009  F001         	movff	___lldiv@quotient,?___lldiv
  8524  002984  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  8525  002988  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  8526  00298C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  8527  002990  0012               	return		;funcret
  8528  002992                     __end_of___lldiv:
  8529                           	opt stack 0
  8530                           tosu	equ	0xFFF
  8531                           tosh	equ	0xFFE
  8532                           tosl	equ	0xFFD
  8533                           pclatu	equ	0xFFB
  8534                           pclath	equ	0xFFA
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           intcon2	equ	0xFF1
  8543                           intcon3	equ	0xFF0
  8544                           postinc0	equ	0xFEE
  8545                           fsr0h	equ	0xFEA
  8546                           fsr0l	equ	0xFE9
  8547                           wreg	equ	0xFE8
  8548                           fsr1h	equ	0xFE2
  8549                           fsr1l	equ	0xFE1
  8550                           indf2	equ	0xFDF
  8551                           postinc2	equ	0xFDE
  8552                           postdec2	equ	0xFDD
  8553                           fsr2h	equ	0xFDA
  8554                           fsr2l	equ	0xFD9
  8555                           status	equ	0xFD8
  8556                           
  8557 ;; *************** function ___fttol *****************
  8558 ;; Defined at:
  8559 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  f1              3   35[COMRAM] float 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  lval            4   45[COMRAM] unsigned long 
  8564 ;;  exp1            1   49[COMRAM] unsigned char 
  8565 ;;  sign1           1   44[COMRAM] unsigned char 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  4   35[COMRAM] long 
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8575 ;;      Params:         4       0       0       0       0       0       0
  8576 ;;      Locals:         6       0       0       0       0       0       0
  8577 ;;      Temps:          5       0       0       0       0       0       0
  8578 ;;      Totals:        15       0       0       0       0       0       0
  8579 ;;Total ram usage:       15 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; This function calls:
  8582 ;;		Nothing
  8583 ;; This function is called by:
  8584 ;;		__doprnt
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text44
  8589  00239C                     __ptext44:
  8590                           	opt stack 0
  8591  00239C                     ___fttol:
  8592                           	opt stack 22
  8593                           
  8594                           ;incstack = 0
  8595  00239C  C026  F028         	movff	___fttol@f1+2,??___fttol
  8596  0023A0  6A29               	clrf	(??___fttol+1)& (0+255),c
  8597  0023A2  6A2A               	clrf	(??___fttol+2)& (0+255),c
  8598  0023A4  3425               	rlcf	___fttol@f1+1,w,c
  8599  0023A6  3628               	rlcf	??___fttol& (0+255),f,c
  8600  0023A8  E301               	bnc	u310_41
  8601  0023AA  8029               	bsf	(??___fttol+1)& (0+255),0,c
  8602  0023AC                     u310_41:
  8603  0023AC  5028               	movf	??___fttol,w,c
  8604  0023AE  6E32               	movwf	___fttol@exp1,c
  8605  0023B0  5032               	movf	___fttol@exp1,w,c
  8606  0023B2  A4D8               	btfss	status,2,c
  8607  0023B4  D009               	goto	i2l3226
  8608  0023B6  0E00               	movlw	0
  8609  0023B8  6E24               	movwf	?___fttol,c
  8610  0023BA  0E00               	movlw	0
  8611  0023BC  6E25               	movwf	?___fttol+1,c
  8612  0023BE  0E00               	movlw	0
  8613  0023C0  6E26               	movwf	?___fttol+2,c
  8614  0023C2  0E00               	movlw	0
  8615  0023C4  6E27               	movwf	?___fttol+3,c
  8616  0023C6  0012               	return	
  8617  0023C8                     i2l3226:
  8618  0023C8  0E17               	movlw	23
  8619  0023CA  6E28               	movwf	??___fttol& (0+255),c
  8620  0023CC  C024  F029         	movff	___fttol@f1,??___fttol+1
  8621  0023D0  C025  F02A         	movff	___fttol@f1+1,??___fttol+2
  8622  0023D4  C026  F02B         	movff	___fttol@f1+2,??___fttol+3
  8623  0023D8  2828               	incf	??___fttol,w,c
  8624  0023DA  6E2C               	movwf	(??___fttol+4)& (0+255),c
  8625  0023DC  D004               	goto	i2u312_40
  8626  0023DE                     i2u312_45:
  8627  0023DE  90D8               	bcf	status,0,c
  8628  0023E0  322B               	rrcf	??___fttol+3,f,c
  8629  0023E2  322A               	rrcf	??___fttol+2,f,c
  8630  0023E4  3229               	rrcf	??___fttol+1,f,c
  8631  0023E6                     i2u312_40:
  8632  0023E6  2E2C               	decfsz	(??___fttol+4)& (0+255),f,c
  8633  0023E8  D7FA               	goto	i2u312_45
  8634  0023EA  5029               	movf	??___fttol+1,w,c
  8635  0023EC  6E2D               	movwf	___fttol@sign1,c
  8636  0023EE  8E25               	bsf	___fttol@f1+1,7,c
  8637  0023F0  0EFF               	movlw	255
  8638  0023F2  1624               	andwf	___fttol@f1,f,c
  8639  0023F4  0EFF               	movlw	255
  8640  0023F6  1625               	andwf	___fttol@f1+1,f,c
  8641  0023F8  0E00               	movlw	0
  8642  0023FA  1626               	andwf	___fttol@f1+2,f,c
  8643  0023FC  5024               	movf	___fttol@f1,w,c
  8644  0023FE  6E2E               	movwf	___fttol@lval,c
  8645  002400  5025               	movf	___fttol@f1+1,w,c
  8646  002402  6E2F               	movwf	___fttol@lval+1,c
  8647  002404  5026               	movf	___fttol@f1+2,w,c
  8648  002406  6E30               	movwf	___fttol@lval+2,c
  8649  002408  6A31               	clrf	___fttol@lval+3,c
  8650  00240A  0E8E               	movlw	142
  8651  00240C  5E32               	subwf	___fttol@exp1,f,c
  8652  00240E  AE32               	btfss	___fttol@exp1,7,c
  8653  002410  D016               	goto	i2l3248
  8654  002412  5032               	movf	___fttol@exp1,w,c
  8655  002414  0A80               	xorlw	128
  8656  002416  0F8F               	addlw	143
  8657  002418  B0D8               	btfsc	status,0,c
  8658  00241A  D009               	goto	i2l3244
  8659  00241C  0E00               	movlw	0
  8660  00241E  6E24               	movwf	?___fttol,c
  8661  002420  0E00               	movlw	0
  8662  002422  6E25               	movwf	?___fttol+1,c
  8663  002424  0E00               	movlw	0
  8664  002426  6E26               	movwf	?___fttol+2,c
  8665  002428  0E00               	movlw	0
  8666  00242A  6E27               	movwf	?___fttol+3,c
  8667  00242C  0012               	return	
  8668  00242E                     i2l3244:
  8669  00242E  90D8               	bcf	status,0,c
  8670  002430  3231               	rrcf	___fttol@lval+3,f,c
  8671  002432  3230               	rrcf	___fttol@lval+2,f,c
  8672  002434  322F               	rrcf	___fttol@lval+1,f,c
  8673  002436  322E               	rrcf	___fttol@lval,f,c
  8674  002438  3E32               	incfsz	___fttol@exp1,f,c
  8675  00243A  D7F9               	goto	i2l3244
  8676  00243C  D015               	goto	i2l3258
  8677  00243E                     i2l3248:
  8678  00243E  0E17               	movlw	23
  8679  002440  6432               	cpfsgt	___fttol@exp1,c
  8680  002442  D00F               	goto	i2l3256
  8681  002444  0E00               	movlw	0
  8682  002446  6E24               	movwf	?___fttol,c
  8683  002448  0E00               	movlw	0
  8684  00244A  6E25               	movwf	?___fttol+1,c
  8685  00244C  0E00               	movlw	0
  8686  00244E  6E26               	movwf	?___fttol+2,c
  8687  002450  0E00               	movlw	0
  8688  002452  6E27               	movwf	?___fttol+3,c
  8689  002454  0012               	return	
  8690  002456                     i2l3254:
  8691  002456  90D8               	bcf	status,0,c
  8692  002458  362E               	rlcf	___fttol@lval,f,c
  8693  00245A  362F               	rlcf	___fttol@lval+1,f,c
  8694  00245C  3630               	rlcf	___fttol@lval+2,f,c
  8695  00245E  3631               	rlcf	___fttol@lval+3,f,c
  8696  002460  0632               	decf	___fttol@exp1,f,c
  8697  002462                     i2l3256:
  8698  002462  5032               	movf	___fttol@exp1,w,c
  8699  002464  A4D8               	btfss	status,2,c
  8700  002466  D7F7               	goto	i2l3254
  8701  002468                     i2l3258:
  8702  002468  502D               	movf	___fttol@sign1,w,c
  8703  00246A  B4D8               	btfsc	status,2,c
  8704  00246C  D008               	goto	i2l3262
  8705  00246E  1E31               	comf	___fttol@lval+3,f,c
  8706  002470  1E30               	comf	___fttol@lval+2,f,c
  8707  002472  1E2F               	comf	___fttol@lval+1,f,c
  8708  002474  6C2E               	negf	___fttol@lval,c
  8709  002476  0E00               	movlw	0
  8710  002478  222F               	addwfc	___fttol@lval+1,f,c
  8711  00247A  2230               	addwfc	___fttol@lval+2,f,c
  8712  00247C  2231               	addwfc	___fttol@lval+3,f,c
  8713  00247E                     i2l3262:
  8714  00247E  C02E  F024         	movff	___fttol@lval,?___fttol
  8715  002482  C02F  F025         	movff	___fttol@lval+1,?___fttol+1
  8716  002486  C030  F026         	movff	___fttol@lval+2,?___fttol+2
  8717  00248A  C031  F027         	movff	___fttol@lval+3,?___fttol+3
  8718  00248E  0012               	return	
  8719  002490                     __end_of___fttol:
  8720                           	opt stack 0
  8721                           tosu	equ	0xFFF
  8722                           tosh	equ	0xFFE
  8723                           tosl	equ	0xFFD
  8724                           pclatu	equ	0xFFB
  8725                           pclath	equ	0xFFA
  8726                           tblptru	equ	0xFF8
  8727                           tblptrh	equ	0xFF7
  8728                           tblptrl	equ	0xFF6
  8729                           tablat	equ	0xFF5
  8730                           prodh	equ	0xFF4
  8731                           prodl	equ	0xFF3
  8732                           intcon	equ	0xFF2
  8733                           intcon2	equ	0xFF1
  8734                           intcon3	equ	0xFF0
  8735                           postinc0	equ	0xFEE
  8736                           fsr0h	equ	0xFEA
  8737                           fsr0l	equ	0xFE9
  8738                           wreg	equ	0xFE8
  8739                           fsr1h	equ	0xFE2
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           postdec2	equ	0xFDD
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function ___ftsub *****************
  8749 ;; Defined at:
  8750 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  f1              3   57[COMRAM] float 
  8753 ;;  f2              3   60[COMRAM] float 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;		None
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  3   57[COMRAM] float 
  8758 ;; Registers used:
  8759 ;;		wreg, status,2, status,0, cstack
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8765 ;;      Params:         6       0       0       0       0       0       0
  8766 ;;      Locals:         0       0       0       0       0       0       0
  8767 ;;      Temps:          0       0       0       0       0       0       0
  8768 ;;      Totals:         6       0       0       0       0       0       0
  8769 ;;Total ram usage:        6 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; Hardware stack levels required when called:    2
  8772 ;; This function calls:
  8773 ;;		___ftadd
  8774 ;; This function is called by:
  8775 ;;		__doprnt
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           	psect	text45
  8780  002CEC                     __ptext45:
  8781                           	opt stack 0
  8782  002CEC                     ___ftsub:
  8783                           	opt stack 20
  8784                           
  8785                           ;incstack = 0
  8786  002CEC  503D               	movf	___ftsub@f2,w,c
  8787  002CEE  103E               	iorwf	___ftsub@f2+1,w,c
  8788  002CF0  103F               	iorwf	___ftsub@f2+2,w,c
  8789  002CF2  B4D8               	btfsc	status,2,c
  8790  002CF4  D006               	goto	i2l3194
  8791  002CF6  0E00               	movlw	0
  8792  002CF8  1A3D               	xorwf	___ftsub@f2,f,c
  8793  002CFA  0E00               	movlw	0
  8794  002CFC  1A3E               	xorwf	___ftsub@f2+1,f,c
  8795  002CFE  0E80               	movlw	128
  8796  002D00  1A3F               	xorwf	___ftsub@f2+2,f,c
  8797  002D02                     i2l3194:
  8798  002D02  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  8799  002D06  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  8800  002D0A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  8801  002D0E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  8802  002D12  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  8803  002D16  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  8804  002D1A  EC40  F00E         	call	___ftadd	;wreg free
  8805  002D1E  C02E  F03A         	movff	?___ftadd,?___ftsub
  8806  002D22  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  8807  002D26  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  8808  002D2A  0012               	return	
  8809  002D2C                     __end_of___ftsub:
  8810                           	opt stack 0
  8811                           tosu	equ	0xFFF
  8812                           tosh	equ	0xFFE
  8813                           tosl	equ	0xFFD
  8814                           pclatu	equ	0xFFB
  8815                           pclath	equ	0xFFA
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           intcon	equ	0xFF2
  8823                           intcon2	equ	0xFF1
  8824                           intcon3	equ	0xFF0
  8825                           postinc0	equ	0xFEE
  8826                           fsr0h	equ	0xFEA
  8827                           fsr0l	equ	0xFE9
  8828                           wreg	equ	0xFE8
  8829                           fsr1h	equ	0xFE2
  8830                           fsr1l	equ	0xFE1
  8831                           indf2	equ	0xFDF
  8832                           postinc2	equ	0xFDE
  8833                           postdec2	equ	0xFDD
  8834                           fsr2h	equ	0xFDA
  8835                           fsr2l	equ	0xFD9
  8836                           status	equ	0xFD8
  8837                           
  8838 ;; *************** function ___ftneg *****************
  8839 ;; Defined at:
  8840 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  f1              3    0[COMRAM] float 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;		None
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  3    0[COMRAM] float 
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8854 ;;      Params:         3       0       0       0       0       0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0
  8857 ;;      Totals:         3       0       0       0       0       0       0
  8858 ;;Total ram usage:        3 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; This function calls:
  8861 ;;		Nothing
  8862 ;; This function is called by:
  8863 ;;		__doprnt
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text46
  8868  002F7C                     __ptext46:
  8869                           	opt stack 0
  8870  002F7C                     ___ftneg:
  8871                           	opt stack 22
  8872                           
  8873                           ;incstack = 0
  8874  002F7C  5001               	movf	___ftneg@f1,w,c
  8875  002F7E  1002               	iorwf	___ftneg@f1+1,w,c
  8876  002F80  1003               	iorwf	___ftneg@f1+2,w,c
  8877  002F82  B4D8               	btfsc	status,2,c
  8878  002F84  D006               	goto	i2l932
  8879  002F86  0E00               	movlw	0
  8880  002F88  1A01               	xorwf	___ftneg@f1,f,c
  8881  002F8A  0E00               	movlw	0
  8882  002F8C  1A02               	xorwf	___ftneg@f1+1,f,c
  8883  002F8E  0E80               	movlw	128
  8884  002F90  1A03               	xorwf	___ftneg@f1+2,f,c
  8885  002F92                     i2l932:
  8886  002F92  C001  F001         	movff	___ftneg@f1,?___ftneg
  8887  002F96  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8888  002F9A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8889  002F9E  0012               	return		;funcret
  8890  002FA0                     __end_of___ftneg:
  8891                           	opt stack 0
  8892                           tosu	equ	0xFFF
  8893                           tosh	equ	0xFFE
  8894                           tosl	equ	0xFFD
  8895                           pclatu	equ	0xFFB
  8896                           pclath	equ	0xFFA
  8897                           tblptru	equ	0xFF8
  8898                           tblptrh	equ	0xFF7
  8899                           tblptrl	equ	0xFF6
  8900                           tablat	equ	0xFF5
  8901                           prodh	equ	0xFF4
  8902                           prodl	equ	0xFF3
  8903                           intcon	equ	0xFF2
  8904                           intcon2	equ	0xFF1
  8905                           intcon3	equ	0xFF0
  8906                           postinc0	equ	0xFEE
  8907                           fsr0h	equ	0xFEA
  8908                           fsr0l	equ	0xFE9
  8909                           wreg	equ	0xFE8
  8910                           fsr1h	equ	0xFE2
  8911                           fsr1l	equ	0xFE1
  8912                           indf2	equ	0xFDF
  8913                           postinc2	equ	0xFDE
  8914                           postdec2	equ	0xFDD
  8915                           fsr2h	equ	0xFDA
  8916                           fsr2l	equ	0xFD9
  8917                           status	equ	0xFD8
  8918                           
  8919 ;; *************** function ___ftge *****************
  8920 ;; Defined at:
  8921 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;  ff1             3    0[COMRAM] float 
  8924 ;;  ff2             3    3[COMRAM] float 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;		None
  8927 ;; Return value:  Size  Location     Type
  8928 ;;		None               void
  8929 ;; Registers used:
  8930 ;;		wreg, status,2, status,0
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8936 ;;      Params:         6       0       0       0       0       0       0
  8937 ;;      Locals:         0       0       0       0       0       0       0
  8938 ;;      Temps:          3       0       0       0       0       0       0
  8939 ;;      Totals:         9       0       0       0       0       0       0
  8940 ;;Total ram usage:        9 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; This function calls:
  8943 ;;		Nothing
  8944 ;; This function is called by:
  8945 ;;		_TMR1_DefaultInterruptHandler
  8946 ;;		__doprnt
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           	psect	text47
  8951  0027FC                     __ptext47:
  8952                           	opt stack 0
  8953  0027FC                     ___ftge:
  8954                           	opt stack 22
  8955                           
  8956                           ;incstack = 0
  8957  0027FC  AE03               	btfss	___ftge@ff1+2,7,c
  8958  0027FE  D016               	goto	i2l3202
  8959  002800  C001  F007         	movff	___ftge@ff1,??___ftge
  8960  002804  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8961  002808  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8962  00280C  1E07               	comf	??___ftge,f,c
  8963  00280E  1E08               	comf	??___ftge+1,f,c
  8964  002810  1E09               	comf	??___ftge+2,f,c
  8965  002812  2A07               	incf	??___ftge,f,c
  8966  002814  0E00               	movlw	0
  8967  002816  2208               	addwfc	??___ftge+1,f,c
  8968  002818  2209               	addwfc	??___ftge+2,f,c
  8969  00281A  0E00               	movlw	0
  8970  00281C  2407               	addwf	??___ftge,w,c
  8971  00281E  6E01               	movwf	___ftge@ff1,c
  8972  002820  0E00               	movlw	0
  8973  002822  2008               	addwfc	??___ftge+1,w,c
  8974  002824  6E02               	movwf	___ftge@ff1+1,c
  8975  002826  0E80               	movlw	128
  8976  002828  2009               	addwfc	??___ftge+2,w,c
  8977  00282A  6E03               	movwf	___ftge@ff1+2,c
  8978  00282C                     i2l3202:
  8979  00282C  AE06               	btfss	___ftge@ff2+2,7,c
  8980  00282E  D016               	goto	i2l3206
  8981  002830  C004  F007         	movff	___ftge@ff2,??___ftge
  8982  002834  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8983  002838  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8984  00283C  1E07               	comf	??___ftge,f,c
  8985  00283E  1E08               	comf	??___ftge+1,f,c
  8986  002840  1E09               	comf	??___ftge+2,f,c
  8987  002842  2A07               	incf	??___ftge,f,c
  8988  002844  0E00               	movlw	0
  8989  002846  2208               	addwfc	??___ftge+1,f,c
  8990  002848  2209               	addwfc	??___ftge+2,f,c
  8991  00284A  0E00               	movlw	0
  8992  00284C  2407               	addwf	??___ftge,w,c
  8993  00284E  6E04               	movwf	___ftge@ff2,c
  8994  002850  0E00               	movlw	0
  8995  002852  2008               	addwfc	??___ftge+1,w,c
  8996  002854  6E05               	movwf	___ftge@ff2+1,c
  8997  002856  0E80               	movlw	128
  8998  002858  2009               	addwfc	??___ftge+2,w,c
  8999  00285A  6E06               	movwf	___ftge@ff2+2,c
  9000  00285C                     i2l3206:
  9001  00285C  0E00               	movlw	0
  9002  00285E  1A01               	xorwf	___ftge@ff1,f,c
  9003  002860  0E00               	movlw	0
  9004  002862  1A02               	xorwf	___ftge@ff1+1,f,c
  9005  002864  0E80               	movlw	128
  9006  002866  1A03               	xorwf	___ftge@ff1+2,f,c
  9007  002868  0E00               	movlw	0
  9008  00286A  1A04               	xorwf	___ftge@ff2,f,c
  9009  00286C  0E00               	movlw	0
  9010  00286E  1A05               	xorwf	___ftge@ff2+1,f,c
  9011  002870  0E80               	movlw	128
  9012  002872  1A06               	xorwf	___ftge@ff2+2,f,c
  9013  002874  5004               	movf	___ftge@ff2,w,c
  9014  002876  5C01               	subwf	___ftge@ff1,w,c
  9015  002878  5005               	movf	___ftge@ff2+1,w,c
  9016  00287A  5802               	subwfb	___ftge@ff1+1,w,c
  9017  00287C  5006               	movf	___ftge@ff2+2,w,c
  9018  00287E  5803               	subwfb	___ftge@ff1+2,w,c
  9019  002880  B0D8               	btfsc	status,0,c
  9020  002882  D002               	goto	i2l3212
  9021  002884  90D8               	bcf	status,0,c
  9022  002886  0012               	return	
  9023  002888                     i2l3212:
  9024  002888  80D8               	bsf	status,0,c
  9025  00288A  0012               	return	
  9026  00288C                     __end_of___ftge:
  9027                           	opt stack 0
  9028                           tosu	equ	0xFFF
  9029                           tosh	equ	0xFFE
  9030                           tosl	equ	0xFFD
  9031                           pclatu	equ	0xFFB
  9032                           pclath	equ	0xFFA
  9033                           tblptru	equ	0xFF8
  9034                           tblptrh	equ	0xFF7
  9035                           tblptrl	equ	0xFF6
  9036                           tablat	equ	0xFF5
  9037                           prodh	equ	0xFF4
  9038                           prodl	equ	0xFF3
  9039                           intcon	equ	0xFF2
  9040                           intcon2	equ	0xFF1
  9041                           intcon3	equ	0xFF0
  9042                           postinc0	equ	0xFEE
  9043                           fsr0h	equ	0xFEA
  9044                           fsr0l	equ	0xFE9
  9045                           wreg	equ	0xFE8
  9046                           fsr1h	equ	0xFE2
  9047                           fsr1l	equ	0xFE1
  9048                           indf2	equ	0xFDF
  9049                           postinc2	equ	0xFDE
  9050                           postdec2	equ	0xFDD
  9051                           fsr2h	equ	0xFDA
  9052                           fsr2l	equ	0xFD9
  9053                           status	equ	0xFD8
  9054                           
  9055 ;; *************** function _INT0_ISR *****************
  9056 ;; Defined at:
  9057 ;;		line 98 in file "mcc_generated_files/ext_int.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;		None
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;		None
  9062 ;; Return value:  Size  Location     Type
  9063 ;;                  1    wreg      void 
  9064 ;; Registers used:
  9065 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9066 ;; Tracked objects:
  9067 ;;		On entry : 0/0
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9071 ;;      Params:         0       0       0       0       0       0       0
  9072 ;;      Locals:         0       0       0       0       0       0       0
  9073 ;;      Temps:          0       0       0       0       0       0       0
  9074 ;;      Totals:         0       0       0       0       0       0       0
  9075 ;;Total ram usage:        0 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    2
  9078 ;; This function calls:
  9079 ;;		_SetRange
  9080 ;;		_TMR0_ReadTimer
  9081 ;;		_TMR0_Reload
  9082 ;;		_TMR0_StopTimer
  9083 ;;		___ftadd
  9084 ;;		___ftdiv
  9085 ;;		___ftmul
  9086 ;;		___lwtoft
  9087 ;;		___wmul
  9088 ;;		i2_TMR0_StartTimer
  9089 ;; This function is called by:
  9090 ;;		_INTERRUPT_InterruptManager
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text48
  9095  00266A                     __ptext48:
  9096                           	opt stack 0
  9097  00266A                     _INT0_ISR:
  9098                           	opt stack 24
  9099                           
  9100                           ;ext_int.c: 101: if (cal_mode == 1)
  9101                           
  9102                           ;incstack = 0
  9103  00266A  045E               	decf	_cal_mode,w,c
  9104  00266C  A4D8               	btfss	status,2,c
  9105  00266E  D002               	goto	i2l3920
  9106                           
  9107                           ;ext_int.c: 102: {
  9108                           ;ext_int.c: 103: do { LATCbits.LATC7 = 0; } while(0);
  9109  002670  9E8B               	bcf	3979,7,c	;volatile
  9110                           
  9111                           ;ext_int.c: 104: return;
  9112  002672  0012               	return	
  9113  002674                     i2l3920:
  9114                           
  9115                           ;ext_int.c: 105: }
  9116                           ;ext_int.c: 108: TMR0_StopTimer();
  9117  002674  EC6E  F018         	call	_TMR0_StopTimer	;wreg free
  9118                           
  9119                           ;ext_int.c: 109: reading = TMR0_ReadTimer();
  9120  002678  EC55  F016         	call	_TMR0_ReadTimer	;wreg free
  9121  00267C  C001  F0A8         	movff	?_TMR0_ReadTimer,_reading
  9122  002680  C002  F0A9         	movff	?_TMR0_ReadTimer+1,_reading+1
  9123                           
  9124                           ;ext_int.c: 112: do { LATCbits.LATC7 = 1; } while(0);
  9125  002684  8E8B               	bsf	3979,7,c	;volatile
  9126                           
  9127                           ;ext_int.c: 116: result = cal_current[range - 1] * ((float)reading - 27) / 3.01004;
  9128  002686  0E00               	movlw	0
  9129  002688  6E12               	movwf	___wmul@multiplicand+1,c
  9130  00268A  0E03               	movlw	3
  9131  00268C  6E11               	movwf	___wmul@multiplicand,c
  9132  00268E  0EFF               	movlw	255
  9133  002690  245D               	addwf	_range,w,c
  9134  002692  6E0F               	movwf	___wmul@multiplier,c
  9135  002694  6A10               	clrf	___wmul@multiplier+1,c
  9136  002696  0EFF               	movlw	255
  9137  002698  2210               	addwfc	___wmul@multiplier+1,f,c
  9138  00269A  ECAB  F017         	call	___wmul	;wreg free
  9139  00269E  0E77               	movlw	low _cal_current
  9140  0026A0  240F               	addwf	?___wmul,w,c
  9141  0026A2  6EF6               	movwf	tblptrl,c
  9142  0026A4  0E06               	movlw	high _cal_current
  9143  0026A6  2010               	addwfc	?___wmul+1,w,c
  9144  0026A8  6EF7               	movwf	tblptrh,c
  9145  0026AA                     	if	0	;There are less than 3 active tblptr bytes
  9146  0026AA                     	endif
  9147  0026AA  0009               	tblrd		*+
  9148  0026AC  CFF5 F018          	movff	tablat,___ftmul@f2
  9149  0026B0  0009               	tblrd		*+
  9150  0026B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9151  0026B6  000A               	tblrd		*-
  9152  0026B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9153  0026BC  0E00               	movlw	0
  9154  0026BE  6E31               	movwf	___ftadd@f2,c
  9155  0026C0  0ED8               	movlw	216
  9156  0026C2  6E32               	movwf	___ftadd@f2+1,c
  9157  0026C4  0EC1               	movlw	193
  9158  0026C6  6E33               	movwf	___ftadd@f2+2,c
  9159  0026C8  C0A8  F009         	movff	_reading,___lwtoft@c
  9160  0026CC  C0A9  F00A         	movff	_reading+1,___lwtoft@c+1
  9161  0026D0  ECD0  F017         	call	___lwtoft	;wreg free
  9162  0026D4  C009  F02E         	movff	?___lwtoft,___ftadd@f1
  9163  0026D8  C00A  F02F         	movff	?___lwtoft+1,___ftadd@f1+1
  9164  0026DC  C00B  F030         	movff	?___lwtoft+2,___ftadd@f1+2
  9165  0026E0  EC40  F00E         	call	___ftadd	;wreg free
  9166  0026E4  C02E  F015         	movff	?___ftadd,___ftmul@f1
  9167  0026E8  C02F  F016         	movff	?___ftadd+1,___ftmul@f1+1
  9168  0026EC  C030  F017         	movff	?___ftadd+2,___ftmul@f1+2
  9169  0026F0  EC48  F012         	call	___ftmul	;wreg free
  9170  0026F4  C015  F03A         	movff	?___ftmul,___ftdiv@f1
  9171  0026F8  C016  F03B         	movff	?___ftmul+1,___ftdiv@f1+1
  9172  0026FC  C017  F03C         	movff	?___ftmul+2,___ftdiv@f1+2
  9173  002700  0EA4               	movlw	164
  9174  002702  6E3D               	movwf	___ftdiv@f2,c
  9175  002704  0E40               	movlw	64
  9176  002706  6E3E               	movwf	___ftdiv@f2+1,c
  9177  002708  0E40               	movlw	64
  9178  00270A  6E3F               	movwf	___ftdiv@f2+2,c
  9179  00270C  ECC2  F012         	call	___ftdiv	;wreg free
  9180  002710  C03A  F0A5         	movff	?___ftdiv,_result
  9181  002714  C03B  F0A6         	movff	?___ftdiv+1,_result+1
  9182  002718  C03C  F0A7         	movff	?___ftdiv+2,_result+2
  9183                           
  9184                           ;ext_int.c: 122: if (auto_range == 1)
  9185  00271C  045C               	decf	_auto_range,w,c
  9186  00271E  A4D8               	btfss	status,2,c
  9187  002720  D00F               	goto	i2l3938
  9188                           
  9189                           ;ext_int.c: 123: {
  9190                           ;ext_int.c: 124: if (reading < 1000 && range > 2)
  9191  002722  0EE8               	movlw	232
  9192  002724  0100               	movlb	0	; () banked
  9193  002726  5DA8               	subwf	_reading& (0+255),w,b
  9194  002728  0E03               	movlw	3
  9195  00272A  0100               	movlb	0	; () banked
  9196  00272C  59A9               	subwfb	(_reading+1)& (0+255),w,b
  9197  00272E  B0D8               	btfsc	status,0,c
  9198  002730  D007               	goto	i2l3938
  9199                           
  9200                           ; BSR set to: 0
  9201  002732  0E02               	movlw	2
  9202  002734  645D               	cpfsgt	_range,c
  9203  002736  D004               	goto	i2l3938
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;ext_int.c: 125: {
  9207                           ;ext_int.c: 126: range -= 1;
  9208  002738  065D               	decf	_range,f,c
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;ext_int.c: 127: SetRange(range);
  9212  00273A  505D               	movf	_range,w,c
  9213  00273C  EC16  F00F         	call	_SetRange
  9214  002740                     i2l3938:
  9215                           
  9216                           ;ext_int.c: 128: }
  9217                           ;ext_int.c: 129: }
  9218                           ;ext_int.c: 132: TMR0_Reload();
  9219  002740  EC61  F018         	call	_TMR0_Reload	;wreg free
  9220                           
  9221                           ;ext_int.c: 135: do { LATCbits.LATC7 = 0; } while(0);
  9222  002744  9E8B               	bcf	3979,7,c	;volatile
  9223                           
  9224                           ;ext_int.c: 136: TMR0_StartTimer();
  9225  002746  EC6C  F018         	call	i2_TMR0_StartTimer	;wreg free
  9226                           
  9227                           ;ext_int.c: 139: (INTCONbits.INT0IF = 0);
  9228  00274A  92F2               	bcf	intcon,1,c	;volatile
  9229  00274C  0012               	return		;funcret
  9230  00274E                     __end_of_INT0_ISR:
  9231                           	opt stack 0
  9232                           tosu	equ	0xFFF
  9233                           tosh	equ	0xFFE
  9234                           tosl	equ	0xFFD
  9235                           pclatu	equ	0xFFB
  9236                           pclath	equ	0xFFA
  9237                           tblptru	equ	0xFF8
  9238                           tblptrh	equ	0xFF7
  9239                           tblptrl	equ	0xFF6
  9240                           tablat	equ	0xFF5
  9241                           prodh	equ	0xFF4
  9242                           prodl	equ	0xFF3
  9243                           intcon	equ	0xFF2
  9244                           intcon2	equ	0xFF1
  9245                           intcon3	equ	0xFF0
  9246                           postinc0	equ	0xFEE
  9247                           fsr0h	equ	0xFEA
  9248                           fsr0l	equ	0xFE9
  9249                           wreg	equ	0xFE8
  9250                           fsr1h	equ	0xFE2
  9251                           fsr1l	equ	0xFE1
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function i2_TMR0_StartTimer *****************
  9260 ;; Defined at:
  9261 ;;		line 51 in file "mcc_generated_files/tmr0.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  1    wreg      void 
  9268 ;; Registers used:
  9269 ;;		None
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9275 ;;      Params:         0       0       0       0       0       0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0
  9278 ;;      Totals:         0       0       0       0       0       0       0
  9279 ;;Total ram usage:        0 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; This function calls:
  9282 ;;		Nothing
  9283 ;; This function is called by:
  9284 ;;		_INT0_ISR
  9285 ;;		_TMR1_DefaultInterruptHandler
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           	psect	text49
  9290  0030D8                     __ptext49:
  9291                           	opt stack 0
  9292  0030D8                     i2_TMR0_StartTimer:
  9293                           	opt stack 24
  9294                           
  9295                           ;tmr0.c: 54: T0CONbits.TMR0ON = 1;
  9296                           
  9297                           ;incstack = 0
  9298  0030D8  8ED5               	bsf	4053,7,c	;volatile
  9299  0030DA  0012               	return		;funcret
  9300  0030DC                     __end_ofi2_TMR0_StartTimer:
  9301                           	opt stack 0
  9302                           tosu	equ	0xFFF
  9303                           tosh	equ	0xFFE
  9304                           tosl	equ	0xFFD
  9305                           pclatu	equ	0xFFB
  9306                           pclath	equ	0xFFA
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon2	equ	0xFF1
  9315                           intcon3	equ	0xFF0
  9316                           postinc0	equ	0xFEE
  9317                           fsr0h	equ	0xFEA
  9318                           fsr0l	equ	0xFE9
  9319                           wreg	equ	0xFE8
  9320                           fsr1h	equ	0xFE2
  9321                           fsr1l	equ	0xFE1
  9322                           indf2	equ	0xFDF
  9323                           postinc2	equ	0xFDE
  9324                           postdec2	equ	0xFDD
  9325                           fsr2h	equ	0xFDA
  9326                           fsr2l	equ	0xFD9
  9327                           status	equ	0xFD8
  9328                           
  9329 ;; *************** function ___wmul *****************
  9330 ;; Defined at:
  9331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;  multiplier      2   14[COMRAM] unsigned int 
  9334 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  product         2   18[COMRAM] unsigned int 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  2   14[COMRAM] unsigned int 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0, prodl, prodh
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9346 ;;      Params:         4       0       0       0       0       0       0
  9347 ;;      Locals:         2       0       0       0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0
  9349 ;;      Totals:         6       0       0       0       0       0       0
  9350 ;;Total ram usage:        6 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_INT0_ISR
  9356 ;;		_fround
  9357 ;;		_scale
  9358 ;;		__doprnt
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text50
  9363  002F56                     __ptext50:
  9364                           	opt stack 0
  9365  002F56                     ___wmul:
  9366                           	opt stack 21
  9367                           
  9368                           ;incstack = 0
  9369  002F56  500F               	movf	___wmul@multiplier,w,c
  9370  002F58  0211               	mulwf	___wmul@multiplicand,c
  9371  002F5A  CFF3 F013          	movff	prodl,___wmul@product
  9372  002F5E  CFF4 F014          	movff	prodh,___wmul@product+1
  9373  002F62  500F               	movf	___wmul@multiplier,w,c
  9374  002F64  0212               	mulwf	___wmul@multiplicand+1,c
  9375  002F66  50F3               	movf	prodl,w,c
  9376  002F68  2614               	addwf	___wmul@product+1,f,c
  9377  002F6A  5010               	movf	___wmul@multiplier+1,w,c
  9378  002F6C  0211               	mulwf	___wmul@multiplicand,c
  9379  002F6E  50F3               	movf	prodl,w,c
  9380  002F70  2614               	addwf	___wmul@product+1,f,c
  9381  002F72  C013  F00F         	movff	___wmul@product,?___wmul
  9382  002F76  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9383  002F7A  0012               	return	
  9384  002F7C                     __end_of___wmul:
  9385                           	opt stack 0
  9386                           tosu	equ	0xFFF
  9387                           tosh	equ	0xFFE
  9388                           tosl	equ	0xFFD
  9389                           pclatu	equ	0xFFB
  9390                           pclath	equ	0xFFA
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           prodh	equ	0xFF4
  9396                           prodl	equ	0xFF3
  9397                           intcon	equ	0xFF2
  9398                           intcon2	equ	0xFF1
  9399                           intcon3	equ	0xFF0
  9400                           postinc0	equ	0xFEE
  9401                           fsr0h	equ	0xFEA
  9402                           fsr0l	equ	0xFE9
  9403                           wreg	equ	0xFE8
  9404                           fsr1h	equ	0xFE2
  9405                           fsr1l	equ	0xFE1
  9406                           indf2	equ	0xFDF
  9407                           postinc2	equ	0xFDE
  9408                           postdec2	equ	0xFDD
  9409                           fsr2h	equ	0xFDA
  9410                           fsr2l	equ	0xFD9
  9411                           status	equ	0xFD8
  9412                           
  9413 ;; *************** function ___lwtoft *****************
  9414 ;; Defined at:
  9415 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwtoft.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;  c               2    8[COMRAM] unsigned int 
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;		None
  9420 ;; Return value:  Size  Location     Type
  9421 ;;                  3    8[COMRAM] float 
  9422 ;; Registers used:
  9423 ;;		wreg, status,2, status,0, cstack
  9424 ;; Tracked objects:
  9425 ;;		On entry : 0/0
  9426 ;;		On exit  : 0/0
  9427 ;;		Unchanged: 0/0
  9428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9429 ;;      Params:         3       0       0       0       0       0       0
  9430 ;;      Locals:         0       0       0       0       0       0       0
  9431 ;;      Temps:          0       0       0       0       0       0       0
  9432 ;;      Totals:         3       0       0       0       0       0       0
  9433 ;;Total ram usage:        3 bytes
  9434 ;; Hardware stack levels used:    1
  9435 ;; Hardware stack levels required when called:    1
  9436 ;; This function calls:
  9437 ;;		___ftpack
  9438 ;; This function is called by:
  9439 ;;		_INT0_ISR
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text51
  9444  002FA0                     __ptext51:
  9445                           	opt stack 0
  9446  002FA0                     ___lwtoft:
  9447                           	opt stack 24
  9448                           
  9449                           ;incstack = 0
  9450  002FA0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  9451  002FA4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  9452  002FA8  6A03               	clrf	___ftpack@arg+2,c
  9453  002FAA  0E8E               	movlw	142
  9454  002FAC  6E04               	movwf	___ftpack@exp,c
  9455  002FAE  0E00               	movlw	0
  9456  002FB0  6E05               	movwf	___ftpack@sign,c
  9457  002FB2  ECA7  F013         	call	___ftpack	;wreg free
  9458  002FB6  C001  F009         	movff	?___ftpack,?___lwtoft
  9459  002FBA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  9460  002FBE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  9461  002FC2  0012               	return	
  9462  002FC4                     __end_of___lwtoft:
  9463                           	opt stack 0
  9464                           tosu	equ	0xFFF
  9465                           tosh	equ	0xFFE
  9466                           tosl	equ	0xFFD
  9467                           pclatu	equ	0xFFB
  9468                           pclath	equ	0xFFA
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           intcon2	equ	0xFF1
  9477                           intcon3	equ	0xFF0
  9478                           postinc0	equ	0xFEE
  9479                           fsr0h	equ	0xFEA
  9480                           fsr0l	equ	0xFE9
  9481                           wreg	equ	0xFE8
  9482                           fsr1h	equ	0xFE2
  9483                           fsr1l	equ	0xFE1
  9484                           indf2	equ	0xFDF
  9485                           postinc2	equ	0xFDE
  9486                           postdec2	equ	0xFDD
  9487                           fsr2h	equ	0xFDA
  9488                           fsr2l	equ	0xFD9
  9489                           status	equ	0xFD8
  9490                           
  9491 ;; *************** function ___ftmul *****************
  9492 ;; Defined at:
  9493 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;  f1              3   20[COMRAM] float 
  9496 ;;  f2              3   23[COMRAM] float 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  9499 ;;  sign            1   34[COMRAM] unsigned char 
  9500 ;;  cntr            1   33[COMRAM] unsigned char 
  9501 ;;  exp             1   29[COMRAM] unsigned char 
  9502 ;; Return value:  Size  Location     Type
  9503 ;;                  3   20[COMRAM] float 
  9504 ;; Registers used:
  9505 ;;		wreg, status,2, status,0, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9511 ;;      Params:         6       0       0       0       0       0       0
  9512 ;;      Locals:         6       0       0       0       0       0       0
  9513 ;;      Temps:          3       0       0       0       0       0       0
  9514 ;;      Totals:        15       0       0       0       0       0       0
  9515 ;;Total ram usage:       15 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    1
  9518 ;; This function calls:
  9519 ;;		___ftpack
  9520 ;; This function is called by:
  9521 ;;		_INT0_ISR
  9522 ;;		_fround
  9523 ;;		_scale
  9524 ;;		__doprnt
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text52
  9529  002490                     __ptext52:
  9530                           	opt stack 0
  9531  002490                     ___ftmul:
  9532                           	opt stack 20
  9533                           
  9534                           ;incstack = 0
  9535  002490  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  9536  002494  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9537  002496  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9538  002498  3416               	rlcf	___ftmul@f1+1,w,c
  9539  00249A  361B               	rlcf	??___ftmul& (0+255),f,c
  9540  00249C  E301               	bnc	u258_41
  9541  00249E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9542  0024A0                     u258_41:
  9543  0024A0  501B               	movf	??___ftmul,w,c
  9544  0024A2  6E1E               	movwf	___ftmul@exp,c
  9545  0024A4  501E               	movf	___ftmul@exp,w,c
  9546  0024A6  A4D8               	btfss	status,2,c
  9547  0024A8  D007               	goto	i2l2842
  9548  0024AA  0E00               	movlw	0
  9549  0024AC  6E15               	movwf	?___ftmul,c
  9550  0024AE  0E00               	movlw	0
  9551  0024B0  6E16               	movwf	?___ftmul+1,c
  9552  0024B2  0E00               	movlw	0
  9553  0024B4  6E17               	movwf	?___ftmul+2,c
  9554  0024B6  0012               	return	
  9555  0024B8                     i2l2842:
  9556  0024B8  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  9557  0024BC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9558  0024BE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9559  0024C0  3419               	rlcf	___ftmul@f2+1,w,c
  9560  0024C2  361B               	rlcf	??___ftmul& (0+255),f,c
  9561  0024C4  E301               	bnc	u260_41
  9562  0024C6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9563  0024C8                     u260_41:
  9564  0024C8  501B               	movf	??___ftmul,w,c
  9565  0024CA  6E23               	movwf	___ftmul@sign,c
  9566  0024CC  5023               	movf	___ftmul@sign,w,c
  9567  0024CE  A4D8               	btfss	status,2,c
  9568  0024D0  D007               	goto	i2l2848
  9569  0024D2  0E00               	movlw	0
  9570  0024D4  6E15               	movwf	?___ftmul,c
  9571  0024D6  0E00               	movlw	0
  9572  0024D8  6E16               	movwf	?___ftmul+1,c
  9573  0024DA  0E00               	movlw	0
  9574  0024DC  6E17               	movwf	?___ftmul+2,c
  9575  0024DE  0012               	return	
  9576  0024E0                     i2l2848:
  9577  0024E0  5023               	movf	___ftmul@sign,w,c
  9578  0024E2  0F7B               	addlw	123
  9579  0024E4  261E               	addwf	___ftmul@exp,f,c
  9580  0024E6  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  9581  0024EA  501A               	movf	___ftmul@f2+2,w,c
  9582  0024EC  1A23               	xorwf	___ftmul@sign,f,c
  9583  0024EE  0E80               	movlw	128
  9584  0024F0  1623               	andwf	___ftmul@sign,f,c
  9585  0024F2  8E16               	bsf	___ftmul@f1+1,7,c
  9586  0024F4  8E19               	bsf	___ftmul@f2+1,7,c
  9587  0024F6  0EFF               	movlw	255
  9588  0024F8  1618               	andwf	___ftmul@f2,f,c
  9589  0024FA  0EFF               	movlw	255
  9590  0024FC  1619               	andwf	___ftmul@f2+1,f,c
  9591  0024FE  0E00               	movlw	0
  9592  002500  161A               	andwf	___ftmul@f2+2,f,c
  9593  002502  0E00               	movlw	0
  9594  002504  6E1F               	movwf	___ftmul@f3_as_product,c
  9595  002506  0E00               	movlw	0
  9596  002508  6E20               	movwf	___ftmul@f3_as_product+1,c
  9597  00250A  0E00               	movlw	0
  9598  00250C  6E21               	movwf	___ftmul@f3_as_product+2,c
  9599  00250E  0E07               	movlw	7
  9600  002510  6E22               	movwf	___ftmul@cntr,c
  9601  002512                     i2l2862:
  9602  002512  A015               	btfss	___ftmul@f1,0,c
  9603  002514  D006               	goto	i2l2866
  9604  002516  5018               	movf	___ftmul@f2,w,c
  9605  002518  261F               	addwf	___ftmul@f3_as_product,f,c
  9606  00251A  5019               	movf	___ftmul@f2+1,w,c
  9607  00251C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9608  00251E  501A               	movf	___ftmul@f2+2,w,c
  9609  002520  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9610  002522                     i2l2866:
  9611  002522  90D8               	bcf	status,0,c
  9612  002524  3217               	rrcf	___ftmul@f1+2,f,c
  9613  002526  3216               	rrcf	___ftmul@f1+1,f,c
  9614  002528  3215               	rrcf	___ftmul@f1,f,c
  9615  00252A  90D8               	bcf	status,0,c
  9616  00252C  3618               	rlcf	___ftmul@f2,f,c
  9617  00252E  3619               	rlcf	___ftmul@f2+1,f,c
  9618  002530  361A               	rlcf	___ftmul@f2+2,f,c
  9619  002532  2E22               	decfsz	___ftmul@cntr,f,c
  9620  002534  D7EE               	goto	i2l2862
  9621  002536  0E09               	movlw	9
  9622  002538  6E22               	movwf	___ftmul@cntr,c
  9623  00253A                     i2l2872:
  9624  00253A  A015               	btfss	___ftmul@f1,0,c
  9625  00253C  D006               	goto	i2l2876
  9626  00253E  5018               	movf	___ftmul@f2,w,c
  9627  002540  261F               	addwf	___ftmul@f3_as_product,f,c
  9628  002542  5019               	movf	___ftmul@f2+1,w,c
  9629  002544  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9630  002546  501A               	movf	___ftmul@f2+2,w,c
  9631  002548  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9632  00254A                     i2l2876:
  9633  00254A  90D8               	bcf	status,0,c
  9634  00254C  3217               	rrcf	___ftmul@f1+2,f,c
  9635  00254E  3216               	rrcf	___ftmul@f1+1,f,c
  9636  002550  3215               	rrcf	___ftmul@f1,f,c
  9637  002552  90D8               	bcf	status,0,c
  9638  002554  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  9639  002556  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  9640  002558  321F               	rrcf	___ftmul@f3_as_product,f,c
  9641  00255A  2E22               	decfsz	___ftmul@cntr,f,c
  9642  00255C  D7EE               	goto	i2l2872
  9643  00255E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9644  002562  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9645  002566  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9646  00256A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  9647  00256E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  9648  002572  ECA7  F013         	call	___ftpack	;wreg free
  9649  002576  C001  F015         	movff	?___ftpack,?___ftmul
  9650  00257A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  9651  00257E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  9652  002582  0012               	return	
  9653  002584                     __end_of___ftmul:
  9654                           	opt stack 0
  9655                           tosu	equ	0xFFF
  9656                           tosh	equ	0xFFE
  9657                           tosl	equ	0xFFD
  9658                           pclatu	equ	0xFFB
  9659                           pclath	equ	0xFFA
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           prodh	equ	0xFF4
  9665                           prodl	equ	0xFF3
  9666                           intcon	equ	0xFF2
  9667                           intcon2	equ	0xFF1
  9668                           intcon3	equ	0xFF0
  9669                           postinc0	equ	0xFEE
  9670                           fsr0h	equ	0xFEA
  9671                           fsr0l	equ	0xFE9
  9672                           wreg	equ	0xFE8
  9673                           fsr1h	equ	0xFE2
  9674                           fsr1l	equ	0xFE1
  9675                           indf2	equ	0xFDF
  9676                           postinc2	equ	0xFDE
  9677                           postdec2	equ	0xFDD
  9678                           fsr2h	equ	0xFDA
  9679                           fsr2l	equ	0xFD9
  9680                           status	equ	0xFD8
  9681                           
  9682 ;; *************** function ___ftdiv *****************
  9683 ;; Defined at:
  9684 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  f1              3   57[COMRAM] float 
  9687 ;;  f2              3   60[COMRAM] float 
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  f3              3   67[COMRAM] float 
  9690 ;;  sign            1   71[COMRAM] unsigned char 
  9691 ;;  exp             1   70[COMRAM] unsigned char 
  9692 ;;  cntr            1   66[COMRAM] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  3   57[COMRAM] float 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2, status,0, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9702 ;;      Params:         6       0       0       0       0       0       0
  9703 ;;      Locals:         6       0       0       0       0       0       0
  9704 ;;      Temps:          3       0       0       0       0       0       0
  9705 ;;      Totals:        15       0       0       0       0       0       0
  9706 ;;Total ram usage:       15 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    1
  9709 ;; This function calls:
  9710 ;;		___ftpack
  9711 ;; This function is called by:
  9712 ;;		_INT0_ISR
  9713 ;;		_TMR1_DefaultInterruptHandler
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text53
  9718  002584                     __ptext53:
  9719                           	opt stack 0
  9720  002584                     ___ftdiv:
  9721                           	opt stack 23
  9722                           
  9723                           ;incstack = 0
  9724  002584  C03C  F040         	movff	___ftdiv@f1+2,??___ftdiv
  9725  002588  6A41               	clrf	(??___ftdiv+1)& (0+255),c
  9726  00258A  6A42               	clrf	(??___ftdiv+2)& (0+255),c
  9727  00258C  343B               	rlcf	___ftdiv@f1+1,w,c
  9728  00258E  3640               	rlcf	??___ftdiv& (0+255),f,c
  9729  002590  E301               	bnc	u418_41
  9730  002592  8041               	bsf	(??___ftdiv+1)& (0+255),0,c
  9731  002594                     u418_41:
  9732  002594  5040               	movf	??___ftdiv,w,c
  9733  002596  6E47               	movwf	___ftdiv@exp,c
  9734  002598  5047               	movf	___ftdiv@exp,w,c
  9735  00259A  A4D8               	btfss	status,2,c
  9736  00259C  D007               	goto	i2l3740
  9737  00259E  0E00               	movlw	0
  9738  0025A0  6E3A               	movwf	?___ftdiv,c
  9739  0025A2  0E00               	movlw	0
  9740  0025A4  6E3B               	movwf	?___ftdiv+1,c
  9741  0025A6  0E00               	movlw	0
  9742  0025A8  6E3C               	movwf	?___ftdiv+2,c
  9743  0025AA  0012               	return	
  9744  0025AC                     i2l3740:
  9745  0025AC  C03F  F040         	movff	___ftdiv@f2+2,??___ftdiv
  9746  0025B0  6A41               	clrf	(??___ftdiv+1)& (0+255),c
  9747  0025B2  6A42               	clrf	(??___ftdiv+2)& (0+255),c
  9748  0025B4  343E               	rlcf	___ftdiv@f2+1,w,c
  9749  0025B6  3640               	rlcf	??___ftdiv& (0+255),f,c
  9750  0025B8  E301               	bnc	u420_41
  9751  0025BA  8041               	bsf	(??___ftdiv+1)& (0+255),0,c
  9752  0025BC                     u420_41:
  9753  0025BC  5040               	movf	??___ftdiv,w,c
  9754  0025BE  6E48               	movwf	___ftdiv@sign,c
  9755  0025C0  5048               	movf	___ftdiv@sign,w,c
  9756  0025C2  A4D8               	btfss	status,2,c
  9757  0025C4  D007               	goto	i2l3746
  9758  0025C6  0E00               	movlw	0
  9759  0025C8  6E3A               	movwf	?___ftdiv,c
  9760  0025CA  0E00               	movlw	0
  9761  0025CC  6E3B               	movwf	?___ftdiv+1,c
  9762  0025CE  0E00               	movlw	0
  9763  0025D0  6E3C               	movwf	?___ftdiv+2,c
  9764  0025D2  0012               	return	
  9765  0025D4                     i2l3746:
  9766  0025D4  0E00               	movlw	0
  9767  0025D6  6E44               	movwf	___ftdiv@f3,c
  9768  0025D8  0E00               	movlw	0
  9769  0025DA  6E45               	movwf	___ftdiv@f3+1,c
  9770  0025DC  0E00               	movlw	0
  9771  0025DE  6E46               	movwf	___ftdiv@f3+2,c
  9772  0025E0  5048               	movf	___ftdiv@sign,w,c
  9773  0025E2  0F89               	addlw	137
  9774  0025E4  5E47               	subwf	___ftdiv@exp,f,c
  9775  0025E6  C03C  F048         	movff	___ftdiv@f1+2,___ftdiv@sign
  9776  0025EA  503F               	movf	___ftdiv@f2+2,w,c
  9777  0025EC  1A48               	xorwf	___ftdiv@sign,f,c
  9778  0025EE  0E80               	movlw	128
  9779  0025F0  1648               	andwf	___ftdiv@sign,f,c
  9780  0025F2  8E3B               	bsf	___ftdiv@f1+1,7,c
  9781  0025F4  0EFF               	movlw	255
  9782  0025F6  163A               	andwf	___ftdiv@f1,f,c
  9783  0025F8  0EFF               	movlw	255
  9784  0025FA  163B               	andwf	___ftdiv@f1+1,f,c
  9785  0025FC  0E00               	movlw	0
  9786  0025FE  163C               	andwf	___ftdiv@f1+2,f,c
  9787  002600  8E3E               	bsf	___ftdiv@f2+1,7,c
  9788  002602  0EFF               	movlw	255
  9789  002604  163D               	andwf	___ftdiv@f2,f,c
  9790  002606  0EFF               	movlw	255
  9791  002608  163E               	andwf	___ftdiv@f2+1,f,c
  9792  00260A  0E00               	movlw	0
  9793  00260C  163F               	andwf	___ftdiv@f2+2,f,c
  9794  00260E  0E18               	movlw	24
  9795  002610  6E43               	movwf	___ftdiv@cntr,c
  9796  002612                     i2l3766:
  9797  002612  90D8               	bcf	status,0,c
  9798  002614  3644               	rlcf	___ftdiv@f3,f,c
  9799  002616  3645               	rlcf	___ftdiv@f3+1,f,c
  9800  002618  3646               	rlcf	___ftdiv@f3+2,f,c
  9801  00261A  503D               	movf	___ftdiv@f2,w,c
  9802  00261C  5C3A               	subwf	___ftdiv@f1,w,c
  9803  00261E  503E               	movf	___ftdiv@f2+1,w,c
  9804  002620  583B               	subwfb	___ftdiv@f1+1,w,c
  9805  002622  503F               	movf	___ftdiv@f2+2,w,c
  9806  002624  583C               	subwfb	___ftdiv@f1+2,w,c
  9807  002626  A0D8               	btfss	status,0,c
  9808  002628  D007               	goto	i2l893
  9809  00262A  503D               	movf	___ftdiv@f2,w,c
  9810  00262C  5E3A               	subwf	___ftdiv@f1,f,c
  9811  00262E  503E               	movf	___ftdiv@f2+1,w,c
  9812  002630  5A3B               	subwfb	___ftdiv@f1+1,f,c
  9813  002632  503F               	movf	___ftdiv@f2+2,w,c
  9814  002634  5A3C               	subwfb	___ftdiv@f1+2,f,c
  9815  002636  8044               	bsf	___ftdiv@f3,0,c
  9816  002638                     i2l893:
  9817  002638  90D8               	bcf	status,0,c
  9818  00263A  363A               	rlcf	___ftdiv@f1,f,c
  9819  00263C  363B               	rlcf	___ftdiv@f1+1,f,c
  9820  00263E  363C               	rlcf	___ftdiv@f1+2,f,c
  9821  002640  2E43               	decfsz	___ftdiv@cntr,f,c
  9822  002642  D7E7               	goto	i2l3766
  9823  002644  C044  F001         	movff	___ftdiv@f3,___ftpack@arg
  9824  002648  C045  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9825  00264C  C046  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9826  002650  C047  F004         	movff	___ftdiv@exp,___ftpack@exp
  9827  002654  C048  F005         	movff	___ftdiv@sign,___ftpack@sign
  9828  002658  ECA7  F013         	call	___ftpack	;wreg free
  9829  00265C  C001  F03A         	movff	?___ftpack,?___ftdiv
  9830  002660  C002  F03B         	movff	?___ftpack+1,?___ftdiv+1
  9831  002664  C003  F03C         	movff	?___ftpack+2,?___ftdiv+2
  9832  002668  0012               	return	
  9833  00266A                     __end_of___ftdiv:
  9834                           	opt stack 0
  9835                           tosu	equ	0xFFF
  9836                           tosh	equ	0xFFE
  9837                           tosl	equ	0xFFD
  9838                           pclatu	equ	0xFFB
  9839                           pclath	equ	0xFFA
  9840                           tblptru	equ	0xFF8
  9841                           tblptrh	equ	0xFF7
  9842                           tblptrl	equ	0xFF6
  9843                           tablat	equ	0xFF5
  9844                           prodh	equ	0xFF4
  9845                           prodl	equ	0xFF3
  9846                           intcon	equ	0xFF2
  9847                           intcon2	equ	0xFF1
  9848                           intcon3	equ	0xFF0
  9849                           postinc0	equ	0xFEE
  9850                           fsr0h	equ	0xFEA
  9851                           fsr0l	equ	0xFE9
  9852                           wreg	equ	0xFE8
  9853                           fsr1h	equ	0xFE2
  9854                           fsr1l	equ	0xFE1
  9855                           indf2	equ	0xFDF
  9856                           postinc2	equ	0xFDE
  9857                           postdec2	equ	0xFDD
  9858                           fsr2h	equ	0xFDA
  9859                           fsr2l	equ	0xFD9
  9860                           status	equ	0xFD8
  9861                           
  9862 ;; *************** function ___ftadd *****************
  9863 ;; Defined at:
  9864 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;  f1              3   45[COMRAM] float 
  9867 ;;  f2              3   48[COMRAM] float 
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;  exp1            1   56[COMRAM] unsigned char 
  9870 ;;  exp2            1   55[COMRAM] unsigned char 
  9871 ;;  sign            1   54[COMRAM] unsigned char 
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  3   45[COMRAM] float 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9881 ;;      Params:         6       0       0       0       0       0       0
  9882 ;;      Locals:         3       0       0       0       0       0       0
  9883 ;;      Temps:          3       0       0       0       0       0       0
  9884 ;;      Totals:        12       0       0       0       0       0       0
  9885 ;;Total ram usage:       12 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    1
  9888 ;; This function calls:
  9889 ;;		___ftpack
  9890 ;; This function is called by:
  9891 ;;		_INT0_ISR
  9892 ;;		__doprnt
  9893 ;;		___ftsub
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           	psect	text54
  9898  001C80                     __ptext54:
  9899                           	opt stack 0
  9900  001C80                     ___ftadd:
  9901                           	opt stack 20
  9902                           
  9903                           ;incstack = 0
  9904  001C80  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  9905  001C84  6A35               	clrf	(??___ftadd+1)& (0+255),c
  9906  001C86  6A36               	clrf	(??___ftadd+2)& (0+255),c
  9907  001C88  342F               	rlcf	___ftadd@f1+1,w,c
  9908  001C8A  3634               	rlcf	??___ftadd& (0+255),f,c
  9909  001C8C  E301               	bnc	u237_41
  9910  001C8E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  9911  001C90                     u237_41:
  9912  001C90  5034               	movf	??___ftadd,w,c
  9913  001C92  6E39               	movwf	___ftadd@exp1,c
  9914  001C94  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  9915  001C98  6A35               	clrf	(??___ftadd+1)& (0+255),c
  9916  001C9A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  9917  001C9C  3432               	rlcf	___ftadd@f2+1,w,c
  9918  001C9E  3634               	rlcf	??___ftadd& (0+255),f,c
  9919  001CA0  E301               	bnc	u238_41
  9920  001CA2  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  9921  001CA4                     u238_41:
  9922  001CA4  5034               	movf	??___ftadd,w,c
  9923  001CA6  6E38               	movwf	___ftadd@exp2,c
  9924  001CA8  5039               	movf	___ftadd@exp1,w,c
  9925  001CAA  B4D8               	btfsc	status,2,c
  9926  001CAC  D00B               	goto	i2l858
  9927  001CAE  5038               	movf	___ftadd@exp2,w,c
  9928  001CB0  5C39               	subwf	___ftadd@exp1,w,c
  9929  001CB2  B0D8               	btfsc	status,0,c
  9930  001CB4  D00E               	goto	i2l2774
  9931  001CB6  5039               	movf	___ftadd@exp1,w,c
  9932  001CB8  0800               	sublw	0
  9933  001CBA  2438               	addwf	___ftadd@exp2,w,c
  9934  001CBC  6E34               	movwf	??___ftadd& (0+255),c
  9935  001CBE  0E18               	movlw	24
  9936  001CC0  6434               	cpfsgt	??___ftadd,c
  9937  001CC2  D007               	goto	i2l2774
  9938  001CC4                     i2l858:
  9939  001CC4  C031  F02E         	movff	___ftadd@f2,?___ftadd
  9940  001CC8  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  9941  001CCC  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  9942  001CD0  0012               	return	
  9943  001CD2                     i2l2774:
  9944  001CD2  5038               	movf	___ftadd@exp2,w,c
  9945  001CD4  B4D8               	btfsc	status,2,c
  9946  001CD6  D00B               	goto	i2l862
  9947  001CD8  5039               	movf	___ftadd@exp1,w,c
  9948  001CDA  5C38               	subwf	___ftadd@exp2,w,c
  9949  001CDC  B0D8               	btfsc	status,0,c
  9950  001CDE  D00E               	goto	i2l2780
  9951  001CE0  5038               	movf	___ftadd@exp2,w,c
  9952  001CE2  0800               	sublw	0
  9953  001CE4  2439               	addwf	___ftadd@exp1,w,c
  9954  001CE6  6E34               	movwf	??___ftadd& (0+255),c
  9955  001CE8  0E18               	movlw	24
  9956  001CEA  6434               	cpfsgt	??___ftadd,c
  9957  001CEC  D007               	goto	i2l2780
  9958  001CEE                     i2l862:
  9959  001CEE  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  9960  001CF2  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  9961  001CF6  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  9962  001CFA  0012               	return	
  9963  001CFC                     i2l2780:
  9964  001CFC  0E06               	movlw	6
  9965  001CFE  6E37               	movwf	___ftadd@sign,c
  9966  001D00  BE30               	btfsc	___ftadd@f1+2,7,c
  9967  001D02  8E37               	bsf	___ftadd@sign,7,c
  9968  001D04  BE33               	btfsc	___ftadd@f2+2,7,c
  9969  001D06  8C37               	bsf	___ftadd@sign,6,c
  9970  001D08  8E2F               	bsf	___ftadd@f1+1,7,c
  9971  001D0A  0EFF               	movlw	255
  9972  001D0C  162E               	andwf	___ftadd@f1,f,c
  9973  001D0E  0EFF               	movlw	255
  9974  001D10  162F               	andwf	___ftadd@f1+1,f,c
  9975  001D12  0E00               	movlw	0
  9976  001D14  1630               	andwf	___ftadd@f1+2,f,c
  9977  001D16  8E32               	bsf	___ftadd@f2+1,7,c
  9978  001D18  0EFF               	movlw	255
  9979  001D1A  1631               	andwf	___ftadd@f2,f,c
  9980  001D1C  0EFF               	movlw	255
  9981  001D1E  1632               	andwf	___ftadd@f2+1,f,c
  9982  001D20  0E00               	movlw	0
  9983  001D22  1633               	andwf	___ftadd@f2+2,f,c
  9984  001D24  5038               	movf	___ftadd@exp2,w,c
  9985  001D26  5C39               	subwf	___ftadd@exp1,w,c
  9986  001D28  B0D8               	btfsc	status,0,c
  9987  001D2A  D01B               	goto	i2l2806
  9988  001D2C                     i2l2796:
  9989  001D2C  90D8               	bcf	status,0,c
  9990  001D2E  3631               	rlcf	___ftadd@f2,f,c
  9991  001D30  3632               	rlcf	___ftadd@f2+1,f,c
  9992  001D32  3633               	rlcf	___ftadd@f2+2,f,c
  9993  001D34  0638               	decf	___ftadd@exp2,f,c
  9994  001D36  5039               	movf	___ftadd@exp1,w,c
  9995  001D38  1838               	xorwf	___ftadd@exp2,w,c
  9996  001D3A  B4D8               	btfsc	status,2,c
  9997  001D3C  D00D               	goto	i2l2804
  9998  001D3E  0637               	decf	___ftadd@sign,f,c
  9999  001D40  C037  F034         	movff	___ftadd@sign,??___ftadd
 10000  001D44  0E07               	movlw	7
 10001  001D46  1634               	andwf	??___ftadd,f,c
 10002  001D48  B4D8               	btfsc	status,2,c
 10003  001D4A  D006               	goto	i2l2804
 10004  001D4C  D7EF               	goto	i2l2796
 10005  001D4E                     i2l2802:
 10006  001D4E  90D8               	bcf	status,0,c
 10007  001D50  3230               	rrcf	___ftadd@f1+2,f,c
 10008  001D52  322F               	rrcf	___ftadd@f1+1,f,c
 10009  001D54  322E               	rrcf	___ftadd@f1,f,c
 10010  001D56  2A39               	incf	___ftadd@exp1,f,c
 10011  001D58                     i2l2804:
 10012  001D58  5038               	movf	___ftadd@exp2,w,c
 10013  001D5A  1839               	xorwf	___ftadd@exp1,w,c
 10014  001D5C  B4D8               	btfsc	status,2,c
 10015  001D5E  D01F               	goto	i2l873
 10016  001D60  D7F6               	goto	i2l2802
 10017  001D62                     i2l2806:
 10018  001D62  5039               	movf	___ftadd@exp1,w,c
 10019  001D64  5C38               	subwf	___ftadd@exp2,w,c
 10020  001D66  B0D8               	btfsc	status,0,c
 10021  001D68  D01A               	goto	i2l873
 10022  001D6A                     i2l2808:
 10023  001D6A  90D8               	bcf	status,0,c
 10024  001D6C  362E               	rlcf	___ftadd@f1,f,c
 10025  001D6E  362F               	rlcf	___ftadd@f1+1,f,c
 10026  001D70  3630               	rlcf	___ftadd@f1+2,f,c
 10027  001D72  0639               	decf	___ftadd@exp1,f,c
 10028  001D74  5039               	movf	___ftadd@exp1,w,c
 10029  001D76  1838               	xorwf	___ftadd@exp2,w,c
 10030  001D78  B4D8               	btfsc	status,2,c
 10031  001D7A  D00D               	goto	i2l2816
 10032  001D7C  0637               	decf	___ftadd@sign,f,c
 10033  001D7E  C037  F034         	movff	___ftadd@sign,??___ftadd
 10034  001D82  0E07               	movlw	7
 10035  001D84  1634               	andwf	??___ftadd,f,c
 10036  001D86  B4D8               	btfsc	status,2,c
 10037  001D88  D006               	goto	i2l2816
 10038  001D8A  D7EF               	goto	i2l2808
 10039  001D8C                     i2l2814:
 10040  001D8C  90D8               	bcf	status,0,c
 10041  001D8E  3233               	rrcf	___ftadd@f2+2,f,c
 10042  001D90  3232               	rrcf	___ftadd@f2+1,f,c
 10043  001D92  3231               	rrcf	___ftadd@f2,f,c
 10044  001D94  2A38               	incf	___ftadd@exp2,f,c
 10045  001D96                     i2l2816:
 10046  001D96  5038               	movf	___ftadd@exp2,w,c
 10047  001D98  1839               	xorwf	___ftadd@exp1,w,c
 10048  001D9A  A4D8               	btfss	status,2,c
 10049  001D9C  D7F7               	goto	i2l2814
 10050  001D9E                     i2l873:
 10051  001D9E  AE37               	btfss	___ftadd@sign,7,c
 10052  001DA0  D00C               	goto	i2l882
 10053  001DA2  0EFF               	movlw	255
 10054  001DA4  1A2E               	xorwf	___ftadd@f1,f,c
 10055  001DA6  0EFF               	movlw	255
 10056  001DA8  1A2F               	xorwf	___ftadd@f1+1,f,c
 10057  001DAA  0EFF               	movlw	255
 10058  001DAC  1A30               	xorwf	___ftadd@f1+2,f,c
 10059  001DAE  0E01               	movlw	1
 10060  001DB0  262E               	addwf	___ftadd@f1,f,c
 10061  001DB2  0E00               	movlw	0
 10062  001DB4  222F               	addwfc	___ftadd@f1+1,f,c
 10063  001DB6  0E00               	movlw	0
 10064  001DB8  2230               	addwfc	___ftadd@f1+2,f,c
 10065  001DBA                     i2l882:
 10066  001DBA  AC37               	btfss	___ftadd@sign,6,c
 10067  001DBC  D00C               	goto	i2l2822
 10068  001DBE  0EFF               	movlw	255
 10069  001DC0  1A31               	xorwf	___ftadd@f2,f,c
 10070  001DC2  0EFF               	movlw	255
 10071  001DC4  1A32               	xorwf	___ftadd@f2+1,f,c
 10072  001DC6  0EFF               	movlw	255
 10073  001DC8  1A33               	xorwf	___ftadd@f2+2,f,c
 10074  001DCA  0E01               	movlw	1
 10075  001DCC  2631               	addwf	___ftadd@f2,f,c
 10076  001DCE  0E00               	movlw	0
 10077  001DD0  2232               	addwfc	___ftadd@f2+1,f,c
 10078  001DD2  0E00               	movlw	0
 10079  001DD4  2233               	addwfc	___ftadd@f2+2,f,c
 10080  001DD6                     i2l2822:
 10081  001DD6  0E00               	movlw	0
 10082  001DD8  6E37               	movwf	___ftadd@sign,c
 10083  001DDA  502E               	movf	___ftadd@f1,w,c
 10084  001DDC  2631               	addwf	___ftadd@f2,f,c
 10085  001DDE  502F               	movf	___ftadd@f1+1,w,c
 10086  001DE0  2232               	addwfc	___ftadd@f2+1,f,c
 10087  001DE2  5030               	movf	___ftadd@f1+2,w,c
 10088  001DE4  2233               	addwfc	___ftadd@f2+2,f,c
 10089  001DE6  AE33               	btfss	___ftadd@f2+2,7,c
 10090  001DE8  D00E               	goto	i2l2832
 10091  001DEA  0EFF               	movlw	255
 10092  001DEC  1A31               	xorwf	___ftadd@f2,f,c
 10093  001DEE  0EFF               	movlw	255
 10094  001DF0  1A32               	xorwf	___ftadd@f2+1,f,c
 10095  001DF2  0EFF               	movlw	255
 10096  001DF4  1A33               	xorwf	___ftadd@f2+2,f,c
 10097  001DF6  0E01               	movlw	1
 10098  001DF8  2631               	addwf	___ftadd@f2,f,c
 10099  001DFA  0E00               	movlw	0
 10100  001DFC  2232               	addwfc	___ftadd@f2+1,f,c
 10101  001DFE  0E00               	movlw	0
 10102  001E00  2233               	addwfc	___ftadd@f2+2,f,c
 10103  001E02  0E01               	movlw	1
 10104  001E04  6E37               	movwf	___ftadd@sign,c
 10105  001E06                     i2l2832:
 10106  001E06  C031  F001         	movff	___ftadd@f2,___ftpack@arg
 10107  001E0A  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10108  001E0E  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10109  001E12  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
 10110  001E16  C037  F005         	movff	___ftadd@sign,___ftpack@sign
 10111  001E1A  ECA7  F013         	call	___ftpack	;wreg free
 10112  001E1E  C001  F02E         	movff	?___ftpack,?___ftadd
 10113  001E22  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
 10114  001E26  C003  F030         	movff	?___ftpack+2,?___ftadd+2
 10115  001E2A  0012               	return	
 10116  001E2C                     __end_of___ftadd:
 10117                           	opt stack 0
 10118                           tosu	equ	0xFFF
 10119                           tosh	equ	0xFFE
 10120                           tosl	equ	0xFFD
 10121                           pclatu	equ	0xFFB
 10122                           pclath	equ	0xFFA
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           intcon2	equ	0xFF1
 10131                           intcon3	equ	0xFF0
 10132                           postinc0	equ	0xFEE
 10133                           fsr0h	equ	0xFEA
 10134                           fsr0l	equ	0xFE9
 10135                           wreg	equ	0xFE8
 10136                           fsr1h	equ	0xFE2
 10137                           fsr1l	equ	0xFE1
 10138                           indf2	equ	0xFDF
 10139                           postinc2	equ	0xFDE
 10140                           postdec2	equ	0xFDD
 10141                           fsr2h	equ	0xFDA
 10142                           fsr2l	equ	0xFD9
 10143                           status	equ	0xFD8
 10144                           
 10145 ;; *************** function ___ftpack *****************
 10146 ;; Defined at:
 10147 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;  arg             3    0[COMRAM] unsigned um
 10150 ;;  exp             1    3[COMRAM] unsigned char 
 10151 ;;  sign            1    4[COMRAM] unsigned char 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;		None
 10154 ;; Return value:  Size  Location     Type
 10155 ;;                  3    0[COMRAM] float 
 10156 ;; Registers used:
 10157 ;;		wreg, status,2, status,0
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10163 ;;      Params:         5       0       0       0       0       0       0
 10164 ;;      Locals:         0       0       0       0       0       0       0
 10165 ;;      Temps:          3       0       0       0       0       0       0
 10166 ;;      Totals:         8       0       0       0       0       0       0
 10167 ;;Total ram usage:        8 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; This function calls:
 10170 ;;		Nothing
 10171 ;; This function is called by:
 10172 ;;		___ftadd
 10173 ;;		___ftdiv
 10174 ;;		___ftmul
 10175 ;;		___lltoft
 10176 ;;		___lwtoft
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           	psect	text55
 10181  00274E                     __ptext55:
 10182                           	opt stack 0
 10183  00274E                     ___ftpack:
 10184                           	opt stack 20
 10185                           
 10186                           ;incstack = 0
 10187  00274E  5004               	movf	___ftpack@exp,w,c
 10188  002750  B4D8               	btfsc	status,2,c
 10189  002752  D005               	goto	i2l2724
 10190  002754  5001               	movf	___ftpack@arg,w,c
 10191  002756  1002               	iorwf	___ftpack@arg+1,w,c
 10192  002758  1003               	iorwf	___ftpack@arg+2,w,c
 10193  00275A  A4D8               	btfss	status,2,c
 10194  00275C  D00C               	goto	i2l2730
 10195  00275E                     i2l2724:
 10196  00275E  0E00               	movlw	0
 10197  002760  6E01               	movwf	?___ftpack,c
 10198  002762  0E00               	movlw	0
 10199  002764  6E02               	movwf	?___ftpack+1,c
 10200  002766  0E00               	movlw	0
 10201  002768  6E03               	movwf	?___ftpack+2,c
 10202  00276A  0012               	return	
 10203  00276C                     i2l2728:
 10204  00276C  2A04               	incf	___ftpack@exp,f,c
 10205  00276E  90D8               	bcf	status,0,c
 10206  002770  3203               	rrcf	___ftpack@arg+2,f,c
 10207  002772  3202               	rrcf	___ftpack@arg+1,f,c
 10208  002774  3201               	rrcf	___ftpack@arg,f,c
 10209  002776                     i2l2730:
 10210  002776  0E00               	movlw	0
 10211  002778  1401               	andwf	___ftpack@arg,w,c
 10212  00277A  6E06               	movwf	??___ftpack& (0+255),c
 10213  00277C  0E00               	movlw	0
 10214  00277E  1402               	andwf	___ftpack@arg+1,w,c
 10215  002780  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10216  002782  0EFE               	movlw	254
 10217  002784  1403               	andwf	___ftpack@arg+2,w,c
 10218  002786  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10219  002788  5006               	movf	??___ftpack,w,c
 10220  00278A  1007               	iorwf	??___ftpack+1,w,c
 10221  00278C  1008               	iorwf	??___ftpack+2,w,c
 10222  00278E  B4D8               	btfsc	status,2,c
 10223  002790  D00C               	goto	i2l2736
 10224  002792  D7EC               	goto	i2l2728
 10225  002794                     i2l2732:
 10226  002794  2A04               	incf	___ftpack@exp,f,c
 10227  002796  0E01               	movlw	1
 10228  002798  2601               	addwf	___ftpack@arg,f,c
 10229  00279A  0E00               	movlw	0
 10230  00279C  2202               	addwfc	___ftpack@arg+1,f,c
 10231  00279E  0E00               	movlw	0
 10232  0027A0  2203               	addwfc	___ftpack@arg+2,f,c
 10233  0027A2  90D8               	bcf	status,0,c
 10234  0027A4  3203               	rrcf	___ftpack@arg+2,f,c
 10235  0027A6  3202               	rrcf	___ftpack@arg+1,f,c
 10236  0027A8  3201               	rrcf	___ftpack@arg,f,c
 10237  0027AA                     i2l2736:
 10238  0027AA  0E00               	movlw	0
 10239  0027AC  1401               	andwf	___ftpack@arg,w,c
 10240  0027AE  6E06               	movwf	??___ftpack& (0+255),c
 10241  0027B0  0E00               	movlw	0
 10242  0027B2  1402               	andwf	___ftpack@arg+1,w,c
 10243  0027B4  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10244  0027B6  0EFF               	movlw	255
 10245  0027B8  1403               	andwf	___ftpack@arg+2,w,c
 10246  0027BA  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10247  0027BC  5006               	movf	??___ftpack,w,c
 10248  0027BE  1007               	iorwf	??___ftpack+1,w,c
 10249  0027C0  1008               	iorwf	??___ftpack+2,w,c
 10250  0027C2  B4D8               	btfsc	status,2,c
 10251  0027C4  D006               	goto	i2l2740
 10252  0027C6  D7E6               	goto	i2l2732
 10253  0027C8                     i2l2738:
 10254  0027C8  0604               	decf	___ftpack@exp,f,c
 10255  0027CA  90D8               	bcf	status,0,c
 10256  0027CC  3601               	rlcf	___ftpack@arg,f,c
 10257  0027CE  3602               	rlcf	___ftpack@arg+1,f,c
 10258  0027D0  3603               	rlcf	___ftpack@arg+2,f,c
 10259  0027D2                     i2l2740:
 10260  0027D2  BE02               	btfsc	___ftpack@arg+1,7,c
 10261  0027D4  D003               	goto	i2l835
 10262  0027D6  0E02               	movlw	2
 10263  0027D8  6004               	cpfslt	___ftpack@exp,c
 10264  0027DA  D7F6               	goto	i2l2738
 10265  0027DC                     i2l835:
 10266  0027DC  A004               	btfss	___ftpack@exp,0,c
 10267  0027DE  9E02               	bcf	___ftpack@arg+1,7,c
 10268  0027E0  90D8               	bcf	status,0,c
 10269  0027E2  3204               	rrcf	___ftpack@exp,f,c
 10270  0027E4  5004               	movf	___ftpack@exp,w,c
 10271  0027E6  1203               	iorwf	___ftpack@arg+2,f,c
 10272  0027E8  5005               	movf	___ftpack@sign,w,c
 10273  0027EA  A4D8               	btfss	status,2,c
 10274  0027EC  8E03               	bsf	___ftpack@arg+2,7,c
 10275  0027EE  C001  F001         	movff	___ftpack@arg,?___ftpack
 10276  0027F2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10277  0027F6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10278  0027FA  0012               	return	
 10279  0027FC                     __end_of___ftpack:
 10280                           	opt stack 0
 10281                           tosu	equ	0xFFF
 10282                           tosh	equ	0xFFE
 10283                           tosl	equ	0xFFD
 10284                           pclatu	equ	0xFFB
 10285                           pclath	equ	0xFFA
 10286                           tblptru	equ	0xFF8
 10287                           tblptrh	equ	0xFF7
 10288                           tblptrl	equ	0xFF6
 10289                           tablat	equ	0xFF5
 10290                           prodh	equ	0xFF4
 10291                           prodl	equ	0xFF3
 10292                           intcon	equ	0xFF2
 10293                           intcon2	equ	0xFF1
 10294                           intcon3	equ	0xFF0
 10295                           postinc0	equ	0xFEE
 10296                           fsr0h	equ	0xFEA
 10297                           fsr0l	equ	0xFE9
 10298                           wreg	equ	0xFE8
 10299                           fsr1h	equ	0xFE2
 10300                           fsr1l	equ	0xFE1
 10301                           indf2	equ	0xFDF
 10302                           postinc2	equ	0xFDE
 10303                           postdec2	equ	0xFDD
 10304                           fsr2h	equ	0xFDA
 10305                           fsr2l	equ	0xFD9
 10306                           status	equ	0xFD8
 10307                           
 10308 ;; *************** function _TMR0_StopTimer *****************
 10309 ;; Defined at:
 10310 ;;		line 57 in file "mcc_generated_files/tmr0.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;		None
 10313 ;; Auto vars:     Size  Location     Type
 10314 ;;		None
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  1    wreg      void 
 10317 ;; Registers used:
 10318 ;;		None
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10324 ;;      Params:         0       0       0       0       0       0       0
 10325 ;;      Locals:         0       0       0       0       0       0       0
 10326 ;;      Temps:          0       0       0       0       0       0       0
 10327 ;;      Totals:         0       0       0       0       0       0       0
 10328 ;;Total ram usage:        0 bytes
 10329 ;; Hardware stack levels used:    1
 10330 ;; This function calls:
 10331 ;;		Nothing
 10332 ;; This function is called by:
 10333 ;;		_INT0_ISR
 10334 ;;		_TMR1_DefaultInterruptHandler
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           	psect	text56
 10339  0030DC                     __ptext56:
 10340                           	opt stack 0
 10341  0030DC                     _TMR0_StopTimer:
 10342                           	opt stack 24
 10343                           
 10344                           ;tmr0.c: 60: T0CONbits.TMR0ON = 0;
 10345                           
 10346                           ;incstack = 0
 10347  0030DC  9ED5               	bcf	4053,7,c	;volatile
 10348  0030DE  0012               	return		;funcret
 10349  0030E0                     __end_of_TMR0_StopTimer:
 10350                           	opt stack 0
 10351                           tosu	equ	0xFFF
 10352                           tosh	equ	0xFFE
 10353                           tosl	equ	0xFFD
 10354                           pclatu	equ	0xFFB
 10355                           pclath	equ	0xFFA
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           intcon2	equ	0xFF1
 10364                           intcon3	equ	0xFF0
 10365                           postinc0	equ	0xFEE
 10366                           fsr0h	equ	0xFEA
 10367                           fsr0l	equ	0xFE9
 10368                           wreg	equ	0xFE8
 10369                           fsr1h	equ	0xFE2
 10370                           fsr1l	equ	0xFE1
 10371                           indf2	equ	0xFDF
 10372                           postinc2	equ	0xFDE
 10373                           postdec2	equ	0xFDD
 10374                           fsr2h	equ	0xFDA
 10375                           fsr2l	equ	0xFD9
 10376                           status	equ	0xFD8
 10377                           
 10378 ;; *************** function _TMR0_Reload *****************
 10379 ;; Defined at:
 10380 ;;		line 85 in file "mcc_generated_files/tmr0.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, status,2
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10394 ;;      Params:         0       0       0       0       0       0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0
 10397 ;;      Totals:         0       0       0       0       0       0       0
 10398 ;;Total ram usage:        0 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; This function calls:
 10401 ;;		Nothing
 10402 ;; This function is called by:
 10403 ;;		_INT0_ISR
 10404 ;;		_TMR1_DefaultInterruptHandler
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           	psect	text57
 10409  0030C2                     __ptext57:
 10410                           	opt stack 0
 10411  0030C2                     _TMR0_Reload:
 10412                           	opt stack 24
 10413                           
 10414                           ;tmr0.c: 88: TMR0H = timer0ReloadVal >> 8;
 10415                           
 10416                           ;incstack = 0
 10417  0030C2  505B               	movf	_timer0ReloadVal+1,w,c	;volatile
 10418  0030C4  6ED7               	movwf	4055,c	;volatile
 10419                           
 10420                           ;tmr0.c: 89: TMR0L = (uint8_t) timer0ReloadVal;
 10421  0030C6  C05A  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 10422  0030CA  0012               	return		;funcret
 10423  0030CC                     __end_of_TMR0_Reload:
 10424                           	opt stack 0
 10425                           tosu	equ	0xFFF
 10426                           tosh	equ	0xFFE
 10427                           tosl	equ	0xFFD
 10428                           pclatu	equ	0xFFB
 10429                           pclath	equ	0xFFA
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           intcon2	equ	0xFF1
 10438                           intcon3	equ	0xFF0
 10439                           postinc0	equ	0xFEE
 10440                           fsr0h	equ	0xFEA
 10441                           fsr0l	equ	0xFE9
 10442                           wreg	equ	0xFE8
 10443                           fsr1h	equ	0xFE2
 10444                           fsr1l	equ	0xFE1
 10445                           indf2	equ	0xFDF
 10446                           postinc2	equ	0xFDE
 10447                           postdec2	equ	0xFDD
 10448                           fsr2h	equ	0xFDA
 10449                           fsr2l	equ	0xFD9
 10450                           status	equ	0xFD8
 10451                           
 10452 ;; *************** function _TMR0_ReadTimer *****************
 10453 ;; Defined at:
 10454 ;;		line 63 in file "mcc_generated_files/tmr0.c"
 10455 ;; Parameters:    Size  Location     Type
 10456 ;;		None
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;  readVal         2    6[COMRAM] unsigned int 
 10459 ;;  readValHigh     1    9[COMRAM] unsigned char 
 10460 ;;  readValLow      1    8[COMRAM] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  2    0[COMRAM] unsigned int 
 10463 ;; Registers used:
 10464 ;;		wreg, status,2, status,0
 10465 ;; Tracked objects:
 10466 ;;		On entry : 0/0
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10470 ;;      Params:         2       0       0       0       0       0       0
 10471 ;;      Locals:         4       0       0       0       0       0       0
 10472 ;;      Temps:          4       0       0       0       0       0       0
 10473 ;;      Totals:        10       0       0       0       0       0       0
 10474 ;;Total ram usage:       10 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_INT0_ISR
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           	psect	text58
 10484  002CAA                     __ptext58:
 10485                           	opt stack 0
 10486  002CAA                     _TMR0_ReadTimer:
 10487                           	opt stack 25
 10488                           
 10489                           ;tmr0.c: 65: uint16_t readVal;
 10490                           ;tmr0.c: 66: uint8_t readValLow;
 10491                           ;tmr0.c: 67: uint8_t readValHigh;
 10492                           ;tmr0.c: 69: readValLow = TMR0L;
 10493                           
 10494                           ;incstack = 0
 10495  002CAA  CFD6 F009          	movff	4054,TMR0_ReadTimer@readValLow	;volatile
 10496                           
 10497                           ;tmr0.c: 70: readValHigh = TMR0H;
 10498  002CAE  CFD7 F00A          	movff	4055,TMR0_ReadTimer@readValHigh	;volatile
 10499                           
 10500                           ;tmr0.c: 73: readVal = ((uint16_t)readValHigh << 8) + readValLow - (timer0ReloadVal);
 10501  002CB2  C05A  F003         	movff	_timer0ReloadVal,??_TMR0_ReadTimer	;volatile
 10502  002CB6  C05B  F004         	movff	_timer0ReloadVal+1,??_TMR0_ReadTimer+1	;volatile
 10503  002CBA  1E03               	comf	??_TMR0_ReadTimer,f,c
 10504  002CBC  1E04               	comf	??_TMR0_ReadTimer+1,f,c
 10505  002CBE  4A03               	infsnz	??_TMR0_ReadTimer,f,c
 10506  002CC0  2A04               	incf	??_TMR0_ReadTimer+1,f,c
 10507  002CC2  5009               	movf	TMR0_ReadTimer@readValLow,w,c
 10508  002CC4  C00A  F005         	movff	TMR0_ReadTimer@readValHigh,??_TMR0_ReadTimer+2
 10509  002CC8  6A06               	clrf	(??_TMR0_ReadTimer+3)& (0+255),c
 10510  002CCA  C005  F006         	movff	??_TMR0_ReadTimer+2,??_TMR0_ReadTimer+3
 10511  002CCE  6A05               	clrf	??_TMR0_ReadTimer+2,c
 10512  002CD0  2605               	addwf	??_TMR0_ReadTimer+2,f,c
 10513  002CD2  0E00               	movlw	0
 10514  002CD4  2206               	addwfc	??_TMR0_ReadTimer+3,f,c
 10515  002CD6  5003               	movf	??_TMR0_ReadTimer,w,c
 10516  002CD8  2405               	addwf	??_TMR0_ReadTimer+2,w,c
 10517  002CDA  6E07               	movwf	TMR0_ReadTimer@readVal,c
 10518  002CDC  5004               	movf	??_TMR0_ReadTimer+1,w,c
 10519  002CDE  2006               	addwfc	??_TMR0_ReadTimer+3,w,c
 10520  002CE0  6E08               	movwf	TMR0_ReadTimer@readVal+1,c
 10521                           
 10522                           ;tmr0.c: 75: return readVal;
 10523  002CE2  C007  F001         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
 10524  002CE6  C008  F002         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
 10525  002CEA  0012               	return	
 10526  002CEC                     __end_of_TMR0_ReadTimer:
 10527                           	opt stack 0
 10528                           tosu	equ	0xFFF
 10529                           tosh	equ	0xFFE
 10530                           tosl	equ	0xFFD
 10531                           pclatu	equ	0xFFB
 10532                           pclath	equ	0xFFA
 10533                           tblptru	equ	0xFF8
 10534                           tblptrh	equ	0xFF7
 10535                           tblptrl	equ	0xFF6
 10536                           tablat	equ	0xFF5
 10537                           prodh	equ	0xFF4
 10538                           prodl	equ	0xFF3
 10539                           intcon	equ	0xFF2
 10540                           intcon2	equ	0xFF1
 10541                           intcon3	equ	0xFF0
 10542                           postinc0	equ	0xFEE
 10543                           fsr0h	equ	0xFEA
 10544                           fsr0l	equ	0xFE9
 10545                           wreg	equ	0xFE8
 10546                           fsr1h	equ	0xFE2
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function _SetRange *****************
 10556 ;; Defined at:
 10557 ;;		line 42 in file "mcc_generated_files/ext_int.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  new_range       1    wreg     unsigned char 
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;  new_range       1   10[COMRAM] unsigned char 
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10571 ;;      Params:         0       0       0       0       0       0       0
 10572 ;;      Locals:         1       0       0       0       0       0       0
 10573 ;;      Temps:         10       0       0       0       0       0       0
 10574 ;;      Totals:        11       0       0       0       0       0       0
 10575 ;;Total ram usage:       11 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_INT1_ISR
 10581 ;;		_INT0_ISR
 10582 ;;		_TMR0_DefaultInterruptHandler
 10583 ;; This function uses a non-reentrant model
 10584 ;;
 10585                           
 10586                           	psect	text59
 10587  001E2C                     __ptext59:
 10588                           	opt stack 0
 10589  001E2C                     _SetRange:
 10590                           	opt stack 24
 10591                           
 10592                           ;incstack = 0
 10593                           ;SetRange@new_range stored from wreg
 10594  001E2C  6E0B               	movwf	SetRange@new_range,c
 10595                           
 10596                           ;ext_int.c: 45: LATC |= (1 << R1_BIT[0]) | (1 << R1_BIT[1]) | (1 << R1_BIT[2]) | (1 << R
      +                          1_BIT[3]) | (1 << R1_BIT[4]);
 10597  001E2E  0E8A               	movlw	low (_R1_BIT+4)
 10598  001E30  6EF6               	movwf	tblptrl,c
 10599  001E32  0E06               	movlw	high (_R1_BIT+4)
 10600  001E34  6EF7               	movwf	tblptrh,c
 10601  001E36                     	if	0	;tblptru may be non-zero
 10602  001E36                     	endif
 10603  001E36                     	if	0	;tblptru may be non-zero
 10604  001E36                     	endif
 10605  001E36  0008               	tblrd		*
 10606  001E38  CFF5 F001          	movff	tablat,??_SetRange
 10607  001E3C  0E01               	movlw	1
 10608  001E3E  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10609  001E40  2A01               	incf	??_SetRange,f,c
 10610  001E42  D002               	goto	i2u403_44
 10611  001E44                     i2u403_45:
 10612  001E44  90D8               	bcf	status,0,c
 10613  001E46  3602               	rlcf	??_SetRange+1,f,c
 10614  001E48                     i2u403_44:
 10615  001E48  2E01               	decfsz	??_SetRange,f,c
 10616  001E4A  D7FC               	goto	i2u403_45
 10617  001E4C  0E89               	movlw	low (_R1_BIT+3)
 10618  001E4E  6EF6               	movwf	tblptrl,c
 10619  001E50  0E06               	movlw	high (_R1_BIT+3)
 10620  001E52  6EF7               	movwf	tblptrh,c
 10621  001E54                     	if	0	;tblptru may be non-zero
 10622  001E54                     	endif
 10623  001E54                     	if	0	;tblptru may be non-zero
 10624  001E54                     	endif
 10625  001E54  0008               	tblrd		*
 10626  001E56  CFF5 F003          	movff	tablat,??_SetRange+2
 10627  001E5A  0E01               	movlw	1
 10628  001E5C  6E04               	movwf	(??_SetRange+3)& (0+255),c
 10629  001E5E  2A03               	incf	??_SetRange+2,f,c
 10630  001E60  D002               	goto	i2u404_44
 10631  001E62                     i2u404_45:
 10632  001E62  90D8               	bcf	status,0,c
 10633  001E64  3604               	rlcf	??_SetRange+3,f,c
 10634  001E66                     i2u404_44:
 10635  001E66  2E03               	decfsz	??_SetRange+2,f,c
 10636  001E68  D7FC               	goto	i2u404_45
 10637  001E6A  0E88               	movlw	low (_R1_BIT+2)
 10638  001E6C  6EF6               	movwf	tblptrl,c
 10639  001E6E  0E06               	movlw	high (_R1_BIT+2)
 10640  001E70  6EF7               	movwf	tblptrh,c
 10641  001E72                     	if	0	;tblptru may be non-zero
 10642  001E72                     	endif
 10643  001E72                     	if	0	;tblptru may be non-zero
 10644  001E72                     	endif
 10645  001E72  0008               	tblrd		*
 10646  001E74  CFF5 F005          	movff	tablat,??_SetRange+4
 10647  001E78  0E01               	movlw	1
 10648  001E7A  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10649  001E7C  2A05               	incf	??_SetRange+4,f,c
 10650  001E7E  D002               	goto	i2u405_44
 10651  001E80                     i2u405_45:
 10652  001E80  90D8               	bcf	status,0,c
 10653  001E82  3606               	rlcf	??_SetRange+5,f,c
 10654  001E84                     i2u405_44:
 10655  001E84  2E05               	decfsz	??_SetRange+4,f,c
 10656  001E86  D7FC               	goto	i2u405_45
 10657  001E88  0E87               	movlw	low (_R1_BIT+1)
 10658  001E8A  6EF6               	movwf	tblptrl,c
 10659  001E8C  0E06               	movlw	high (_R1_BIT+1)
 10660  001E8E  6EF7               	movwf	tblptrh,c
 10661  001E90                     	if	0	;tblptru may be non-zero
 10662  001E90                     	endif
 10663  001E90                     	if	0	;tblptru may be non-zero
 10664  001E90                     	endif
 10665  001E90  0008               	tblrd		*
 10666  001E92  CFF5 F007          	movff	tablat,??_SetRange+6
 10667  001E96  0E01               	movlw	1
 10668  001E98  6E08               	movwf	(??_SetRange+7)& (0+255),c
 10669  001E9A  2A07               	incf	??_SetRange+6,f,c
 10670  001E9C  D002               	goto	i2u406_44
 10671  001E9E                     i2u406_45:
 10672  001E9E  90D8               	bcf	status,0,c
 10673  001EA0  3608               	rlcf	??_SetRange+7,f,c
 10674  001EA2                     i2u406_44:
 10675  001EA2  2E07               	decfsz	??_SetRange+6,f,c
 10676  001EA4  D7FC               	goto	i2u406_45
 10677  001EA6  0E86               	movlw	low _R1_BIT
 10678  001EA8  6EF6               	movwf	tblptrl,c
 10679  001EAA                     	if	1	;There is more than 1 active tblptr byte
 10680  001EAA  0E06               	movlw	high _R1_BIT
 10681  001EAC  6EF7               	movwf	tblptrh,c
 10682  001EAE                     	endif
 10683  001EAE                     	if	0	;There are less than 3 active tblptr bytes
 10684  001EAE                     	endif
 10685  001EAE  0008               	tblrd		*
 10686  001EB0  CFF5 F009          	movff	tablat,??_SetRange+8
 10687  001EB4  0E01               	movlw	1
 10688  001EB6  6E0A               	movwf	(??_SetRange+9)& (0+255),c
 10689  001EB8  2A09               	incf	??_SetRange+8,f,c
 10690  001EBA  D002               	goto	i2u407_44
 10691  001EBC                     i2u407_45:
 10692  001EBC  90D8               	bcf	status,0,c
 10693  001EBE  360A               	rlcf	??_SetRange+9,f,c
 10694  001EC0                     i2u407_44:
 10695  001EC0  2E09               	decfsz	??_SetRange+8,f,c
 10696  001EC2  D7FC               	goto	i2u407_45
 10697  001EC4  500A               	movf	??_SetRange+9,w,c
 10698  001EC6  1008               	iorwf	??_SetRange+7,w,c
 10699  001EC8  1006               	iorwf	??_SetRange+5,w,c
 10700  001ECA  1004               	iorwf	??_SetRange+3,w,c
 10701  001ECC  1002               	iorwf	??_SetRange+1,w,c
 10702  001ECE  128B               	iorwf	3979,f,c	;volatile
 10703                           
 10704                           ;ext_int.c: 46: LATB |= (1 << RSET_BIT[0]) | (1 << RSET_BIT[1]) | (1 << RSET_BIT[3]) | (
      +                          1 << RSET_BIT[4]);
 10705  001ED0  0E8F               	movlw	low (_RSET_BIT+4)
 10706  001ED2  6EF6               	movwf	tblptrl,c
 10707  001ED4  0E06               	movlw	high (_RSET_BIT+4)
 10708  001ED6  6EF7               	movwf	tblptrh,c
 10709  001ED8                     	if	0	;tblptru may be non-zero
 10710  001ED8                     	endif
 10711  001ED8                     	if	0	;tblptru may be non-zero
 10712  001ED8                     	endif
 10713  001ED8  0008               	tblrd		*
 10714  001EDA  CFF5 F001          	movff	tablat,??_SetRange
 10715  001EDE  0E01               	movlw	1
 10716  001EE0  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10717  001EE2  2A01               	incf	??_SetRange,f,c
 10718  001EE4  D002               	goto	i2u408_44
 10719  001EE6                     i2u408_45:
 10720  001EE6  90D8               	bcf	status,0,c
 10721  001EE8  3602               	rlcf	??_SetRange+1,f,c
 10722  001EEA                     i2u408_44:
 10723  001EEA  2E01               	decfsz	??_SetRange,f,c
 10724  001EEC  D7FC               	goto	i2u408_45
 10725  001EEE  0E8E               	movlw	low (_RSET_BIT+3)
 10726  001EF0  6EF6               	movwf	tblptrl,c
 10727  001EF2  0E06               	movlw	high (_RSET_BIT+3)
 10728  001EF4  6EF7               	movwf	tblptrh,c
 10729  001EF6                     	if	0	;tblptru may be non-zero
 10730  001EF6                     	endif
 10731  001EF6                     	if	0	;tblptru may be non-zero
 10732  001EF6                     	endif
 10733  001EF6  0008               	tblrd		*
 10734  001EF8  CFF5 F003          	movff	tablat,??_SetRange+2
 10735  001EFC  0E01               	movlw	1
 10736  001EFE  6E04               	movwf	(??_SetRange+3)& (0+255),c
 10737  001F00  2A03               	incf	??_SetRange+2,f,c
 10738  001F02  D002               	goto	i2u409_44
 10739  001F04                     i2u409_45:
 10740  001F04  90D8               	bcf	status,0,c
 10741  001F06  3604               	rlcf	??_SetRange+3,f,c
 10742  001F08                     i2u409_44:
 10743  001F08  2E03               	decfsz	??_SetRange+2,f,c
 10744  001F0A  D7FC               	goto	i2u409_45
 10745  001F0C  0E8C               	movlw	low (_RSET_BIT+1)
 10746  001F0E  6EF6               	movwf	tblptrl,c
 10747  001F10  0E06               	movlw	high (_RSET_BIT+1)
 10748  001F12  6EF7               	movwf	tblptrh,c
 10749  001F14                     	if	0	;tblptru may be non-zero
 10750  001F14                     	endif
 10751  001F14                     	if	0	;tblptru may be non-zero
 10752  001F14                     	endif
 10753  001F14  0008               	tblrd		*
 10754  001F16  CFF5 F005          	movff	tablat,??_SetRange+4
 10755  001F1A  0E01               	movlw	1
 10756  001F1C  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10757  001F1E  2A05               	incf	??_SetRange+4,f,c
 10758  001F20  D002               	goto	i2u410_44
 10759  001F22                     i2u410_45:
 10760  001F22  90D8               	bcf	status,0,c
 10761  001F24  3606               	rlcf	??_SetRange+5,f,c
 10762  001F26                     i2u410_44:
 10763  001F26  2E05               	decfsz	??_SetRange+4,f,c
 10764  001F28  D7FC               	goto	i2u410_45
 10765  001F2A  0E8B               	movlw	low _RSET_BIT
 10766  001F2C  6EF6               	movwf	tblptrl,c
 10767  001F2E                     	if	1	;There is more than 1 active tblptr byte
 10768  001F2E  0E06               	movlw	high _RSET_BIT
 10769  001F30  6EF7               	movwf	tblptrh,c
 10770  001F32                     	endif
 10771  001F32                     	if	0	;There are less than 3 active tblptr bytes
 10772  001F32                     	endif
 10773  001F32  0008               	tblrd		*
 10774  001F34  CFF5 F007          	movff	tablat,??_SetRange+6
 10775  001F38  0E01               	movlw	1
 10776  001F3A  6E08               	movwf	(??_SetRange+7)& (0+255),c
 10777  001F3C  2A07               	incf	??_SetRange+6,f,c
 10778  001F3E  D002               	goto	i2u411_44
 10779  001F40                     i2u411_45:
 10780  001F40  90D8               	bcf	status,0,c
 10781  001F42  3608               	rlcf	??_SetRange+7,f,c
 10782  001F44                     i2u411_44:
 10783  001F44  2E07               	decfsz	??_SetRange+6,f,c
 10784  001F46  D7FC               	goto	i2u411_45
 10785  001F48  5008               	movf	??_SetRange+7,w,c
 10786  001F4A  1006               	iorwf	??_SetRange+5,w,c
 10787  001F4C  1004               	iorwf	??_SetRange+3,w,c
 10788  001F4E  1002               	iorwf	??_SetRange+1,w,c
 10789  001F50  128A               	iorwf	3978,f,c	;volatile
 10790                           
 10791                           ;ext_int.c: 48: LATC &= ~(1 << R1_BIT[new_range - 1]);
 10792  001F52  0EFF               	movlw	255
 10793  001F54  6E01               	movwf	??_SetRange& (0+255),c
 10794  001F56  0EFF               	movlw	255
 10795  001F58  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10796  001F5A  500B               	movf	SetRange@new_range,w,c
 10797  001F5C  6E03               	movwf	(??_SetRange+2)& (0+255),c
 10798  001F5E  6A04               	clrf	(??_SetRange+3)& (0+255),c
 10799  001F60  5001               	movf	??_SetRange,w,c
 10800  001F62  2603               	addwf	??_SetRange+2,f,c
 10801  001F64  5002               	movf	??_SetRange+1,w,c
 10802  001F66  2204               	addwfc	??_SetRange+3,f,c
 10803  001F68  0E86               	movlw	low _R1_BIT
 10804  001F6A  2403               	addwf	??_SetRange+2,w,c
 10805  001F6C  6EF6               	movwf	tblptrl,c
 10806  001F6E  0E06               	movlw	high _R1_BIT
 10807  001F70  2004               	addwfc	??_SetRange+3,w,c
 10808  001F72  6EF7               	movwf	tblptrh,c
 10809  001F74                     	if	0	;There are less than 3 active tblptr bytes
 10810  001F74                     	endif
 10811  001F74  0008               	tblrd		*
 10812  001F76  CFF5 F005          	movff	tablat,??_SetRange+4
 10813  001F7A  0E01               	movlw	1
 10814  001F7C  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10815  001F7E  2A05               	incf	??_SetRange+4,f,c
 10816  001F80  D002               	goto	i2u412_44
 10817  001F82                     i2u412_45:
 10818  001F82  90D8               	bcf	status,0,c
 10819  001F84  3606               	rlcf	??_SetRange+5,f,c
 10820  001F86                     i2u412_44:
 10821  001F86  2E05               	decfsz	??_SetRange+4,f,c
 10822  001F88  D7FC               	goto	i2u412_45
 10823  001F8A  5006               	movf	??_SetRange+5,w,c
 10824  001F8C  0AFF               	xorlw	255
 10825  001F8E  168B               	andwf	3979,f,c	;volatile
 10826                           
 10827                           ;ext_int.c: 49: LATB &= ~(1 << RSET_BIT[new_range - 1]);
 10828  001F90  0EFF               	movlw	255
 10829  001F92  6E01               	movwf	??_SetRange& (0+255),c
 10830  001F94  0EFF               	movlw	255
 10831  001F96  6E02               	movwf	(??_SetRange+1)& (0+255),c
 10832  001F98  500B               	movf	SetRange@new_range,w,c
 10833  001F9A  6E03               	movwf	(??_SetRange+2)& (0+255),c
 10834  001F9C  6A04               	clrf	(??_SetRange+3)& (0+255),c
 10835  001F9E  5001               	movf	??_SetRange,w,c
 10836  001FA0  2603               	addwf	??_SetRange+2,f,c
 10837  001FA2  5002               	movf	??_SetRange+1,w,c
 10838  001FA4  2204               	addwfc	??_SetRange+3,f,c
 10839  001FA6  0E8B               	movlw	low _RSET_BIT
 10840  001FA8  2403               	addwf	??_SetRange+2,w,c
 10841  001FAA  6EF6               	movwf	tblptrl,c
 10842  001FAC  0E06               	movlw	high _RSET_BIT
 10843  001FAE  2004               	addwfc	??_SetRange+3,w,c
 10844  001FB0  6EF7               	movwf	tblptrh,c
 10845  001FB2                     	if	0	;There are less than 3 active tblptr bytes
 10846  001FB2                     	endif
 10847  001FB2  0008               	tblrd		*
 10848  001FB4  CFF5 F005          	movff	tablat,??_SetRange+4
 10849  001FB8  0E01               	movlw	1
 10850  001FBA  6E06               	movwf	(??_SetRange+5)& (0+255),c
 10851  001FBC  2A05               	incf	??_SetRange+4,f,c
 10852  001FBE  D002               	goto	i2u413_44
 10853  001FC0                     i2u413_45:
 10854  001FC0  90D8               	bcf	status,0,c
 10855  001FC2  3606               	rlcf	??_SetRange+5,f,c
 10856  001FC4                     i2u413_44:
 10857  001FC4  2E05               	decfsz	??_SetRange+4,f,c
 10858  001FC6  D7FC               	goto	i2u413_45
 10859  001FC8  5006               	movf	??_SetRange+5,w,c
 10860  001FCA  0AFF               	xorlw	255
 10861  001FCC  168A               	andwf	3978,f,c	;volatile
 10862  001FCE  0012               	return		;funcret
 10863  001FD0                     __end_of_SetRange:
 10864                           	opt stack 0
 10865                           tosu	equ	0xFFF
 10866                           tosh	equ	0xFFE
 10867                           tosl	equ	0xFFD
 10868                           pclatu	equ	0xFFB
 10869                           pclath	equ	0xFFA
 10870                           tblptru	equ	0xFF8
 10871                           tblptrh	equ	0xFF7
 10872                           tblptrl	equ	0xFF6
 10873                           tablat	equ	0xFF5
 10874                           prodh	equ	0xFF4
 10875                           prodl	equ	0xFF3
 10876                           intcon	equ	0xFF2
 10877                           intcon2	equ	0xFF1
 10878                           intcon3	equ	0xFF0
 10879                           postinc0	equ	0xFEE
 10880                           fsr0h	equ	0xFEA
 10881                           fsr0l	equ	0xFE9
 10882                           wreg	equ	0xFE8
 10883                           fsr1h	equ	0xFE2
 10884                           fsr1l	equ	0xFE1
 10885                           indf2	equ	0xFDF
 10886                           postinc2	equ	0xFDE
 10887                           postdec2	equ	0xFDD
 10888                           fsr2h	equ	0xFDA
 10889                           fsr2l	equ	0xFD9
 10890                           status	equ	0xFD8
 10891                           tosu	equ	0xFFF
 10892                           tosh	equ	0xFFE
 10893                           tosl	equ	0xFFD
 10894                           pclatu	equ	0xFFB
 10895                           pclath	equ	0xFFA
 10896                           tblptru	equ	0xFF8
 10897                           tblptrh	equ	0xFF7
 10898                           tblptrl	equ	0xFF6
 10899                           tablat	equ	0xFF5
 10900                           prodh	equ	0xFF4
 10901                           prodl	equ	0xFF3
 10902                           intcon	equ	0xFF2
 10903                           intcon2	equ	0xFF1
 10904                           intcon3	equ	0xFF0
 10905                           postinc0	equ	0xFEE
 10906                           fsr0h	equ	0xFEA
 10907                           fsr0l	equ	0xFE9
 10908                           wreg	equ	0xFE8
 10909                           fsr1h	equ	0xFE2
 10910                           fsr1l	equ	0xFE1
 10911                           indf2	equ	0xFDF
 10912                           postinc2	equ	0xFDE
 10913                           postdec2	equ	0xFDD
 10914                           fsr2h	equ	0xFDA
 10915                           fsr2l	equ	0xFD9
 10916                           status	equ	0xFD8
 10917                           
 10918                           	psect	text60
 10919  000000                     __ptext60:
 10920                           	opt stack 0
 10921                           tosu	equ	0xFFF
 10922                           tosh	equ	0xFFE
 10923                           tosl	equ	0xFFD
 10924                           pclatu	equ	0xFFB
 10925                           pclath	equ	0xFFA
 10926                           tblptru	equ	0xFF8
 10927                           tblptrh	equ	0xFF7
 10928                           tblptrl	equ	0xFF6
 10929                           tablat	equ	0xFF5
 10930                           prodh	equ	0xFF4
 10931                           prodl	equ	0xFF3
 10932                           intcon	equ	0xFF2
 10933                           intcon2	equ	0xFF1
 10934                           intcon3	equ	0xFF0
 10935                           postinc0	equ	0xFEE
 10936                           fsr0h	equ	0xFEA
 10937                           fsr0l	equ	0xFE9
 10938                           wreg	equ	0xFE8
 10939                           fsr1h	equ	0xFE2
 10940                           fsr1l	equ	0xFE1
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           postdec2	equ	0xFDD
 10944                           fsr2h	equ	0xFDA
 10945                           fsr2l	equ	0xFD9
 10946                           status	equ	0xFD8
 10947                           
 10948                           	psect	rparam
 10949  0000                     tosu	equ	0xFFF
 10950                           tosh	equ	0xFFE
 10951                           tosl	equ	0xFFD
 10952                           pclatu	equ	0xFFB
 10953                           pclath	equ	0xFFA
 10954                           tblptru	equ	0xFF8
 10955                           tblptrh	equ	0xFF7
 10956                           tblptrl	equ	0xFF6
 10957                           tablat	equ	0xFF5
 10958                           prodh	equ	0xFF4
 10959                           prodl	equ	0xFF3
 10960                           intcon	equ	0xFF2
 10961                           intcon2	equ	0xFF1
 10962                           intcon3	equ	0xFF0
 10963                           postinc0	equ	0xFEE
 10964                           fsr0h	equ	0xFEA
 10965                           fsr0l	equ	0xFE9
 10966                           wreg	equ	0xFE8
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976                           	psect	temp
 10977  00005F                     btemp:
 10978                           	opt stack 0
 10979  00005F                     	ds	1
 10980  0000                     int$flags	set	btemp
 10981                           tosu	equ	0xFFF
 10982                           tosh	equ	0xFFE
 10983                           tosl	equ	0xFFD
 10984                           pclatu	equ	0xFFB
 10985                           pclath	equ	0xFFA
 10986                           tblptru	equ	0xFF8
 10987                           tblptrh	equ	0xFF7
 10988                           tblptrl	equ	0xFF6
 10989                           tablat	equ	0xFF5
 10990                           prodh	equ	0xFF4
 10991                           prodl	equ	0xFF3
 10992                           intcon	equ	0xFF2
 10993                           intcon2	equ	0xFF1
 10994                           intcon3	equ	0xFF0
 10995                           postinc0	equ	0xFEE
 10996                           fsr0h	equ	0xFEA
 10997                           fsr0l	equ	0xFE9
 10998                           wreg	equ	0xFE8
 10999                           fsr1h	equ	0xFE2
 11000                           fsr1l	equ	0xFE1
 11001                           indf2	equ	0xFDF
 11002                           postinc2	equ	0xFDE
 11003                           postdec2	equ	0xFDD
 11004                           fsr2h	equ	0xFDA
 11005                           fsr2l	equ	0xFD9
 11006                           status	equ	0xFD8


Data Sizes:
    Strings     101
    Constant    143
    Data        4
    BSS         24
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      94
    BANK0           160     69     100
    BANK1           256      4       4
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[11]), STR_6(CODE[17]), STR_5(CODE[11]), STR_4(CODE[17]), 
		 -> STR_3(CODE[11]), STR_2(CODE[11]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_7(CODE[11]), STR_6(CODE[17]), STR_5(CODE[11]), STR_4(CODE[17]), 
		 -> STR_3(CODE[11]), STR_2(CODE[11]), STR_1(CODE[23]), 

    S1207__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S1207__prbuf$ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendUInt@displayString(COMRAM[10]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    lcd_sendStringToPos@charString	PTR const unsigned char  size(2) Largest target is 16
		 -> TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), 

    lcd_sendString@a	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), TMR1_DefaultInterruptHandler@range_string(BANK0[16]), TMR1_DefaultInterruptHandler@cap_string(BANK0[16]), lcd_sendUInt@displayString(COMRAM[10]), 
		 -> lcd_sendInt@displayString(COMRAM[10]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_DefaultInterruptHandler->_sprintf
    _sprintf->__doprnt
    _lcd_sendStringToPos->_lcd_sendString
    _lcd_sendStringToPos->_lcd_setPosition
    _lcd_setPosition->i2_lcd_sendCommand
    i2_lcd_sendCommand->i2__lcd_Port
    _lcd_sendString->_lcd_sendChar
    _lcd_sendChar->i2__lcd_Port
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->_SetRange
    _INT1_ISR->_printf
    _printf->__doprnt
    __doprnt->___ftsub
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _INT0_ISR->___ftdiv
    ___wmul->___awdiv
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR1_ISR->_TMR1_DefaultInterruptHandler
    _sprintf->__doprnt
    _printf->__doprnt

Critical Paths under _main in BANK1

    _main->_lcd_init
    _lcd_init->_lcd_sendCommand
    _lcd_clear->_lcd_sendCommand
    _lcd_sendCommand->__lcd_Port
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     650
                  _SYSTEM_Initialize
                          _lcd_clear
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     279
                                              3 BANK1      1     1      0
                          __lcd_Port
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     155
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (2) _lcd_sendCommand                                      2     2      0     155
                                              1 BANK1      2     2      0
                          __lcd_Port
 ---------------------------------------------------------------------------------
 (3) __lcd_Port                                            1     1      0     124
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     216
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     108
                                              2 BANK1      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0  117819
                                             55 BANK0     14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0   54082
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR1_DefaultInterruptHandler                        32    32      0   54082
                                             23 BANK0     32    32      0
                        _TMR0_Reload
                     _TMR0_StopTimer
                            ___ftdiv
                             ___ftge
                _lcd_sendStringToPos
                            _sprintf
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             14     6      8   48615
                                             75 COMRAM    14     6      8
                            ___ftdiv (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (7) _lcd_sendStringToPos                                  4     1      3    1482
                                              8 COMRAM     4     1      3
                     _lcd_sendString
                    _lcd_setPosition
 ---------------------------------------------------------------------------------
 (8) _lcd_setPosition                                      5     4      1     636
                                              3 COMRAM     5     4      1
                  i2_lcd_sendCommand
 ---------------------------------------------------------------------------------
 (9) i2_lcd_sendCommand                                    2     2      0     110
                                              1 COMRAM     2     2      0
                        i2__lcd_Port
 ---------------------------------------------------------------------------------
 (8) _lcd_sendString                                       4     2      2     524
                                              4 COMRAM     4     2      2
                       _lcd_sendChar
 ---------------------------------------------------------------------------------
 (9) _lcd_sendChar                                         3     3      0     178
                                              1 COMRAM     3     3      0
                        i2__lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2__lcd_Port                                         1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0      44
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         1     1      0      44
                                             11 COMRAM     1     1      0
                           _SetRange
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0   47925
                           _SetRange
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              10     6      4   47881
                                             75 COMRAM    10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (8) __doprnt                                             41    35      6   47660
                                             63 COMRAM    12     6      6
                                              0 BANK0     23    23      0
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (9) _scale                                               10     7      3   10667
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Write                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _fround                                              13    10      3   10469
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             9     5      4    2293
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___llmod                                              9     1      8     773
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___lldiv                                             13     5      8     750
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     546
                                             35 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3834
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     160
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     904
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0   15768
                           _SetRange
                     _TMR0_ReadTimer
                        _TMR0_Reload
                     _TMR0_StopTimer
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (7) i2_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    4559
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    2875
                                             57 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3435
                                             45 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ReadTimer                                      10     8      2      69
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (7) _SetRange                                            11    11      0      44
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _lcd_clear
     _lcd_sendCommand
       __lcd_Port
   _lcd_init
     __lcd_Port
     _lcd_sendCommand
       __lcd_Port

 _INTERRUPT_InterruptManager (ROOT)
   _INT0_ISR
     _SetRange
     _TMR0_ReadTimer
     _TMR0_Reload
     _TMR0_StopTimer
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     i2_TMR0_StartTimer
   _INT1_ISR
     _SetRange
     _printf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
         ___ftsub *
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
           _EUSART1_Write
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _SetRange
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _TMR0_Reload
       _TMR0_StopTimer
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       _lcd_sendStringToPos
         _lcd_sendString
           _lcd_sendChar
             i2__lcd_Port
         _lcd_setPosition
           i2_lcd_sendCommand
             i2__lcd_Port
       _sprintf
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge *
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
           ___ftsub *
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
             _EUSART1_Write
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       i2_TMR0_StartTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      4       4       6        1.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      64       4       62.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5E       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C6       9        0.0%
DATA                 0      0      C6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Jan 23 22:07:40 2017

                           ?_lcd_sendChar 0001                              ___awdiv@sign 000C  
                     ___wmul@multiplicand 0011                           _timer0ReloadVal 005A  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0039                              ___ftadd@exp2 0038  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 0037  
                         ?_lcd_sendString 0005                          ?_lcd_sendCommand 0001  
                                     l341 2DAE                                       l343 2DBA  
                                     l272 3000                                       l345 2DC6  
                                     l347 2DD2                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                           _timer1ReloadVal 00C0  
                            ___awmod@sign 0006                                       tosl 000FFD  
                                     wreg 000FE8                              ___ftdiv@cntr 0043  
                            ___ftdiv@sign 0048                                      l4090 2DBC  
                                    l4094 2DC8                                      l4086 2DB0  
                             i2__lcd_Port 2F04                                      STR_1 0690  
                                    STR_2 06EA                                      STR_3 06D4  
                                    STR_4 06A7                                      STR_5 06DF  
                                    STR_6 06B8                                      STR_7 06C9  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      u4567 29A0  
                                    u4577 29B8                                      u4587 29D0  
                                    u4597 2F48                                      _TMR1 000FCE  
                                    _WPUB 000F61                             _EUSART1_Write 3098  
                                    _main 2FE4                              ___ftpack@arg 0001  
                        ?_lcd_setPosition 0004                              ___ftpack@exp 0004  
                         _TMR0_StartTimer 30D0                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 005F                             __CFG_BORV$190 000000  
             __end_of_lcd_sendStringToPos 3058                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00B0  
                           __CFG_IESO$OFF 000000                            ??_lcd_sendChar 0002  
              ??_TMR1_SetInterruptHandler 0102                              ___ftmul@cntr 0022  
                            ___param_bank 000000                              ___ftmul@sign 0023  
                            ___fttol@exp1 0032                              ___fttol@lval 002E  
                 __end_of_TMR0_Initialize 2C68                          __end_of_INT0_ISR 274E  
                        __end_of_INT1_ISR 2C24            ??_TMR0_DefaultInterruptHandler 000C  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 308A  
                                   ?_main 0001                           __end_of___awdiv 2910  
                         __end_of___ftadd 1E2C                           __end_of___awmod 2A7A  
               TMR0_ReadTimer@readValHigh 000A                           __end_of___ftdiv 266A  
                         _TMR1_StartTimer 30CC                           __end_of___ftneg 2FA0  
                         __end_of___lldiv 2992                           __end_of___ftmul 2584  
                                   _T0CON 000FD5                           ___awdiv@divisor 0009  
                                   _T1CON 000FCD                           __end_of___llmod 2AE0  
                         __end_of___ftsub 2D2C                           __end_of___fttol 2490  
                          __CFG_DEBUG$OFF 000000                                     i2l123 0074  
                                   i2l115 0052                                     i2l117 005E  
                                   i2l119 006A                                     i2l341 2F0E  
                                   i2l502 11D2                                     i2l343 2F18  
                                   i2l248 309A                                     i2l185 2D50  
                                   i2l345 2F22                                     i2l347 2F2C  
                                   i2l438 20F4                                     i2l544 0F36  
                                   i2l803 238A                                     i2l900 21D4  
                                   i2l901 21FC                                     i2l559 1264  
                                   i2l835 27DC                                     i2l907 2262  
                                   i2l932 2F92                                     i2l862 1CEE  
                                   i2l873 1D9E                                     i2l882 1DBA  
                                   i2l858 1CC4                           ___awdiv@counter 000B  
                                   i2l893 2638                                     _TMR0H 000FD7  
                                   _TMR1H 000FCF                                     _TMR0L 000FD6  
                                   _TMR1L 000FCE                           __end_of__doprnt 164A  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                 ?_TMR0_SetInterruptHandler 0100  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0011  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 2F04  
                        __end_of_TMR1_ISR 2EA4                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                          __end_of_RSET_BIT 0690  
                         __end_of_dpowers 0629                                     _scale 164A  
                                   _range 005D                           __end_of_isdigit 303E  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   _putch 30B8                                     _units 00C2  
                          ?_EUSART1_Write 0001                   __end_of_TMR1_Initialize 2E72  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                           __end_of_sprintf 2CAA  
                          __CFG_HFOFST$ON 000000                            __CFG_FOSC$HSMP 000000  
                          __CFG_PBADEN$ON 000000                           __initialization 2B8C  
              __end_of_EUSART1_Initialize 306E                              __end_of_main 3002  
                            _stored_range 00AA                      lcd_sendStringToPos@x 000C  
                    lcd_sendStringToPos@y 0009               ?_INTERRUPT_InterruptManager 0001  
                           lcd_sendChar@a 0004                             lcd_sendChar@y 0003  
                                  ??_main 0104                             ___fttol@sign1 002D  
                        __end_of_SetRange 1FD0                             __activetblptr 000002  
                    __size_of__tdiv_to_l_ 0132                   __end_of_TMR0_StartTimer 30D4  
                        ___llmod@dividend 000E                                    ?_scale 0024  
                           i2__lcd_Port@a 0001                          ___awdiv@dividend 0007  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                        __end_of___ftpack 27FC                                    _T1GCON 000FCC  
                        __end_of___lltoft 2B3C                                    _R1_BIT 0686  
                                  i2l1004 2980                                    i2l1014 2ACE  
                                  i2l3020 1C40                                    i2l3012 1B80  
                                  i2l3120 2238                                    i2l3040 1822  
                                  i2l3202 282C                                    i2l3034 177E  
                                  i2l3212 2888                                    i2l3300 2AC0  
                                  i2l3116 2228                                    i2l3052 1972  
                                  i2l3044 1846                                    i2l3206 285C  
                                  i2l3142 22B0                                    i2l3126 2250  
                                  i2l3070 3036                                    i2l3136 2292  
                                  i2l3128 225C                                    i2l3080 216E  
                                  i2l3400 08DA                                    i2l3226 23C8  
                                  i2l3306 2AE6                                    i2l3058 1A16  
                                  i2l3244 242E                                    i2l3308 2AF2  
                                  i2l3180 2360                                    i2l3164 2322  
                                  i2l3156 22F2                                    i2l3332 2B64  
                                  i2l3262 247E                                    i2l3254 2456  
                                  i2l3086 219A                                    i2l3502 0D0E  
                                  i2l3430 09EC                                    i2l3414 094A  
                                  i2l3406 08F6                                    i2l3350 06FA  
                                  i2l3342 2E16                            __CFG_WDTEN$OFF 000000  
                                  i2l3256 2462                                    i2l3248 243E  
                                  i2l3272 2932                                    i2l3176 2350  
                                  i2l3600 129C                                    i2l3512 0D7C  
                                  i2l3504 0D16                                    i2l3360 0770  
                                  i2l2730 2776                                    i2l2802 1D4E  
                                  i2l3194 2D02                                    i2l3258 2468  
                                  i2l3274 293E                                    i2l3186 2378  
                                  i2l3610 12FE                                    i2l3602 12D2  
                                  i2l3514 0D98                                    i2l3506 0D2A  
                                  i2l3442 0A7A                                    i2l3346 2E2C  
                                  i2l2740 27D2                                    i2l2732 2794  
                                  i2l2724 275E                                    i2l2804 1D58  
                                  i2l3284 2972                                    i2l3276 2942  
                                  i2l3292 2A8C                                    i2l3188 2384  
                                  i2l3540 0F18                                    i2l3532 0ED2  
                                  i2l3524 0E68                                    i2l3516 0DA8  
                                  i2l3444 0A90                                    i2l3380 0828  
                                  i2l3356 0742                                    u310_41 23AC  
                                  i2l2822 1DD6                                    i2l2814 1D8C  
                                  i2l2806 1D62                                    i2l3294 2A98  
                                  i2l3630 1394                                    i2l3622 1344  
                                  i2l3526 0E8A                                    i2l3454 0B18  
                                  i2l3446 0AC0                                    i2l3438 0A54  
                                  i2l3390 0888                                    i2l3366 07A2  
                                  i2l3374 0802                                    i2l2736 27AA  
                                  i2l2728 276C                                    i2l2832 1E06  
                                  i2l2816 1D96                                    i2l2808 1D6A  
                                  i2l3296 2A9C                                    i2l2904 28C6  
                                  i2l2920 28F8                                    i2l3608 12F8  
                                  i2l3560 100E                                    i2l3552 0F92  
                                  i2l3544 0F3A                                    i2l3536 0EFC  
                                  i2l3528 0E98                                    i2l3472 0C02  
                                  i2l3448 0AD6                                    i2l3392 088E  
                                  i2l3384 0862                                    i2l2738 27C8  
                                  i2l2842 24B8                                    i2l2906 28CE  
                                  i2l3650 143C                                    i2l3642 13F4  
                                  i2l3626 1368                                    i2l3570 10FC  
                                  i2l3538 0F04                                    i2l3490 0C90  
                                  i2l3474 0C08                                    i2l3458 0B3E  
                                  i2l3394 0894                                    i2l3386 0878  
                                  i2l2780 1CFC                                    i2l3740 25AC  
                                  i2l2924 2906                                    i2l2916 28EE  
                                  i2l2908 28D2                                    i2l2940 2A2A  
                                  i2l3660 14AC                                    i2l3652 1448  
                                  i2l3644 13FE                                    i2l3636 13C0  
                                  i2l3572 114A                                    i2l3556 0FBC  
                                  i2l3468 0B9C                                    i2l3900 2BE6  
                                  i2l2774 1CD2                                    i2l2862 2512  
                                  i2l3662 14C0                                    i2l3590 1210  
                                  i2l3582 11BC                                    i2l3574 1158  
                                  i2l3494 0CAA                                    i2l3486 0C4E  
                                  i2l3398 089A                                    i2l2872 253A  
                                  i2l2848 24E0                                    i2l3920 2674  
                                  i2l2960 2A70                                    i2l2952 2A58  
                                  i2l2944 2A38                                    i2l2936 2A1E  
                                  i2l3680 1600                                    i2l3672 1530  
                                  i2l3656 1482                                    i2l3648 1432  
                                  i2l3592 1244                                    i2l3584 11C4  
                                  i2l3568 10CE                                    i2l3912 2C08  
                                  i2l3904 2BF0                                    i2l3746 25D4  
                                  i2l2866 2522                                    i2l2946 2A40  
                                  i2l3682 160E                                    i2l3578 1192  
                                  i2l3498 0CE4                                    i2l3906 2BF4  
                                  i2l2796 1D2C                                    i2l2876 254A  
                                  i2l2892 28A0                                    i2l2948 2A44  
                                  i2l2956 2A62                                    i2l3668 1512  
                                  i2l3684 1624                                    i2l2972 2F1A  
                                  i2l3766 2612                                    i2l3678 15E4  
                                  i2l3686 1640                                    i2l3838 2D52  
                                  i2l2976 2F24                                    i2l2968 2F10  
                                  i2l3938 2740                                    i2l2898 28B0  
                                  i2l3874 20B8                                    i2l3868 203A  
                                  i2l3878 20D4                                    u420_41 25BC  
                                  u260_41 24C8                                    u237_41 1C90  
                                  u238_41 1CA4                                    _RCREG1 000FAE  
                        __end_of___lwtoft 2FC4                                    u418_41 2594  
                                  u258_41 24A0                                    u291_41 217E  
                                  _RCSTA1 000FAB                                    u289_41 2152  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                          __CFG_XINST$OFF 000000                              __doprnt$1972 0060  
                        __end_of__powers_ 0677      __end_of_TMR1_DefaultInterruptHandler 2142  
   __size_of_TMR1_DefaultInterruptHandler 0172              _TMR1_DefaultInterruptHandler 1FD0  
                        __end_of_lcd_init 2A0A                              ?_TMR0_Reload 0001  
                                  ___ftge 27FC                   __end_of_TMR1_StartTimer 30D0  
                        lcd_sendChar@temp 0002                                    ___wmul 2F56  
                               ??___awdiv 000B                                 ??___ftadd 0034  
                          __CFG_STVREN$ON 000000                                 ??___awmod 0005  
                               ??___ftdiv 0040                                 ??___ftneg 0004  
                               ??___lldiv 0009                                 ??___ftmul 001B  
                               ??___llmod 0016                                 ??___ftsub 0040  
                               ??___fttol 0028                                 ??__doprnt 0046  
                        ?_TMR0_Initialize 0001                                    _fround 1A3A  
                                  clear_0 2BC2                          ___awdiv@quotient 000D  
                         ___awmod@divisor 0003                                    _result 00A5  
                            __doprnt@flag 0065                           ___awmod@counter 0005  
                                  _printf 2DD6                              __doprnt@fval 0071  
                            __doprnt@prec 0074                     ___ftmul@f3_as_product 001F  
                            __pdataCOMRAM 005C                                 ??_isdigit 0001  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                    __end_of_lcd_sendChar 2DA0                          lcd_sendCommand@a 0102  
                         ??_EUSART1_Write 0001  TMR1_SetInterruptHandler@InterruptHandler 0100  
TMR0_SetInterruptHandler@InterruptHandler 0100                                 ??_sprintf 0054  
           __size_of_INTERRUPT_Initialize 0004                          ?_TMR1_Initialize 0001  
                       _SYSTEM_Initialize 3002                                __accesstop 0060  
                 __end_of__initialization 2BCA                                 ?_INT0_ISR 0001  
                               ?_INT1_ISR 0001                                ___ftadd@f1 002E  
                              ___ftadd@f2 0031                                ___ftge@ff1 0001  
                              ___ftge@ff2 0004                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001                                ___ftdiv@f1 003A  
                              ___ftdiv@f2 003D                                ___ftdiv@f3 0044  
                              ___ftneg@f1 0001                        __size_of__lcd_Port 0036  
                              ___ftmul@f1 0015                                ___ftmul@f2 0018  
                              ___ftsub@f1 003A                                ___ftsub@f2 003D  
                              ___fttol@f1 0024                            __pcstackCOMRAM 0001  
                            __pidataBANK0 30E2                       ??_SYSTEM_Initialize 0104  
                        ??_lcd_sendString 0007                                 ?_TMR0_ISR 0001  
                               ?_TMR1_ISR 0001                                ___lltoft@c 0009  
           ?_TMR1_DefaultInterruptHandler 0001  TMR1_DefaultInterruptHandler@range_string 0077  
                           __end_of_scale 1A3A                             __end_of_putch 30C2  
                 __size_of_TMR0_ReadTimer 0042                                ___lwtoft@c 0009  
             __size_of_EXT_INT_Initialize 000E                                __div_to_l_ 2274  
                      __size_of_lcd_clear 000E                                __doprnt@ap 0044  
                              __doprnt@pb 0040                           __div_to_l_@exp1 000C  
                        ?_TMR0_StartTimer 0001                           __div_to_l_@cntr 000B  
                                 ??_scale 0027                 __end_of_SYSTEM_Initialize 3020  
                         __div_to_l_@quot 0007                              ?i2__lcd_Port 0001  
                                 ??_putch 0002                                __pbssBANK0 00A5  
                         __CFG_PLLCFG$OFF 000000                                ??_INT0_ISR 0049  
                              ??_INT1_ISR 0056                                __pnvCOMRAM 005A  
                           __div_to_l_@f1 0001                             __div_to_l_@f2 0004  
                               ?_SetRange 0001                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0001          __end_of_TMR0_SetInterruptHandler 30B8  
                 __size_of_TMR0_StopTimer 0004                                   ?___wmul 000F  
                        ?_TMR1_StartTimer 0001                                ??_TMR0_ISR 000D  
                              ??_TMR1_ISR 005A                        __CFG_CCP3MX$PORTB5 000000  
                                 ?_fround 0024                                 ?___ftpack 0001  
                                 ?_printf 004C                                 ?___lltoft 0009  
                               ?___lwtoft 0009                         __end_of__lcd_Port 2DD6  
                                 _OSCCON2 000FD2                          lcd_setPosition@i 0006  
                        lcd_setPosition@j 0007                          lcd_setPosition@x 0005  
                        lcd_setPosition@y 0004                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                  __size_of_lcd_sendCommand 0026  
                               ?_lcd_init 0001                                ??_SetRange 0001  
                              _auto_range 005C                           __CFG_PWRTEN$OFF 000000  
                       __end_of__npowers_ 0650                                   __Hparam 0000  
                              _scale$1971 0027                                   __Lparam 0000  
                       __end_of_lcd_clear 307C                           __size_of___ftge 0090  
                                 ___awdiv 288C                  __size_of_lcd_setPosition 0050  
                                 ___ftadd 1C80                                   ___awmod 2A0A  
                                 ___ftdiv 2584                                   ___ftneg 2F7C  
                                 ___lldiv 2910                           __size_of___wmul 0026  
                                 ___ftmul 2490                                   ___llmod 2A7A  
                                 ___ftsub 2CEC                                   ___fttol 239C  
            __size_of_lcd_sendStringToPos 001A                              __psmallconst 0600  
                    __size_of_TMR0_Reload 000A                                   __doprnt 06F6  
                                 __pcinit 2B8C                                ??___ftpack 0006  
                         __size_of_fround 0246                                   __ramtop 0600  
                              ??___lltoft 000D                                   __ptext0 2FE4  
                                 __ptext1 2992                                   __ptext2 306E  
                                 __ptext3 2F30                                   __ptext4 2DA0  
                                 __ptext5 3002                                   __ptext6 2E40  
                                 __ptext7 30CC                                   __ptext8 30A4  
                                 __ptext9 2C24                           __size_of_printf 0036  
                   __size_of_lcd_sendChar 0038                                ??___lwtoft 000C  
                               _T0CONbits 000FD5            ??_TMR1_DefaultInterruptHandler 005A  
                               _T1CONbits 000FCD                               ?__div_to_l_ 0001  
                                 _dpowers 0601                     _OSCILLATOR_Initialize 307C  
                                 _isdigit 3020                                   _reading 00A8  
                        ___awmod@dividend 0001         __size_of_TMR1_SetInterruptHandler 000A  
                      _EUSART1_Initialize 3058                  ??_PIN_MANAGER_Initialize 0100  
               ?_TMR1_SetInterruptHandler 0100                __size_of_SYSTEM_Initialize 001E  
                                 _sprintf 2C68                             __doprnt@width 0063  
                              ??_lcd_init 0103                      end_of_initialization 2BCA  
                       i2_lcd_sendCommand 2FC4                                   ftoa@buf 00AB  
                     ?_EUSART1_Initialize 0001    TMR1_DefaultInterruptHandler@cap_string 0087  
                      ?i2_lcd_sendCommand 0001                             __Lmediumconst 0000  
                         ___lldiv@divisor 0005                           ___lldiv@counter 000D  
                     ??i2_lcd_sendCommand 0002                     TMR0_ReadTimer@readVal 0007  
                                 printf@f 004C                              _lcd_sendChar 2D68  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                            __tdiv_to_l_@f1 0001  
                          __tdiv_to_l_@f2 0004                            _TMR0_ReadTimer 2CAA  
                    ??_EUSART1_Initialize 0100                       __end_of_cal_current 0686  
                           ??__tdiv_to_l_ 0007                  _TMR0_SetInterruptHandler 30AE  
               __end_ofi2_lcd_sendCommand 2FE4                       EUSART1_Write@txData 0001  
                    __size_ofi2__lcd_Port 002C                            __end_of_R1_BIT 068B  
                             ___ftdiv@exp 0047                         ??_lcd_sendCommand 0101  
                       __size_of_INT0_ISR 00E4                       __size_of__div_to_l_ 0128  
                       __size_of_INT1_ISR 004C                               ___ftmul@exp 001E  
                          _TMR0_StopTimer 30DC                    __end_of_TMR0_ReadTimer 2CEC  
                       SetRange@new_range 000B              __end_of_INTERRUPT_Initialize 30D8  
                          __end_of___ftge 288C                            __end_of___wmul 2F7C  
                           __pidataCOMRAM 30E0                         __size_of_TMR0_ISR 0030  
                       __size_of_TMR1_ISR 0032                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_fround 1C80                         ??_lcd_setPosition 0005  
                          __end_of_printf 2E0C                       start_initialization 2B8C  
                __size_of_TMR0_Initialize 0044           __size_of_PIN_MANAGER_Initialize 0030  
                     __end_of__tdiv_to_l_ 2274                               __lcd_Port@a 0100  
                             putch@txData 0002                     __end_of_EUSART1_Write 30A4  
           lcd_sendStringToPos@charString 000A                        i2lcd_sendCommand@a 0003  
                         ___llmod@divisor 0012                           ___llmod@counter 0016  
                  __end_of_TMR0_StopTimer 30E0                               _cal_current 0677  
                __size_of_TMR1_Initialize 0032                                  ??___ftge 0007  
                       __size_of_SetRange 01A4                           ?_TMR0_ReadTimer 0001  
                                ??___wmul 0013                               __doprnt@exp 0067  
                             __doprnt@val 0069                               __pdataBANK0 00C2  
                                ??_fround 0027                __end_of_EXT_INT_Initialize 3098  
                                ??_printf 0050                                fround@prec 002D  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 005E                         __size_of___lwtoft 0024  
                           __pcstackBANK0 0060                             __pcstackBANK1 0100  
              __size_ofi2_lcd_sendCommand 0020                              _isdigit$1499 0002  
                               __lcd_Port 2DA0                       _lcd_sendStringToPos 303E  
                       __size_of_lcd_init 0078                                 __doprnt@c 0076  
                               __doprnt@f 0042                     _TMR0_InterruptHandler 00BC  
                               __pnvBANK0 00BC                  __size_of_TMR0_StartTimer 0004  
                         lcd_sendString@a 0005                           lcd_sendString@i 0007  
                         ?_TMR0_StopTimer 0001                    _PIN_MANAGER_Initialize 2EA4  
                               __pintcode 0008          __end_of_TMR1_SetInterruptHandler 30AE  
                                ?___awdiv 0007                                  ?___ftadd 002E  
                                ?___awmod 0001                                  ?___ftdiv 003A  
                                ?___ftneg 0001                                  ?___lldiv 0001  
                    ?_lcd_sendStringToPos 0009                                  ?___ftmul 0015  
                                ?___llmod 000E                                  ?___ftsub 003A  
                               __npowers_ 0629                                  ?___fttol 0024  
                                ?__doprnt 0040                                 _lcd_clear 306E  
            ??_INTERRUPT_InterruptManager 0097                          __CFG_PRICLKEN$ON 000000  
                             __tdiv_to_l_ 2142                              ??__div_to_l_ 0007  
                             __smallconst 0600                                  _BAUDCON1 000FB8  
                __size_of_TMR1_StartTimer 0004                                  ?_isdigit 0001  
                 __size_of_lcd_sendString 0034                                  ?_sprintf 004C  
                          __size_of_scale 03F0                                ?__lcd_Port 0001  
                          __size_of_putch 000A                      _INTERRUPT_Initialize 30D4  
                       ??_TMR0_Initialize 0102                                  _INT0_ISR 266A  
                                _INT1_ISR 2BD8                            ___wmul@product 0013  
                                _LATAbits 000F89                                  _LATCbits 000F8B  
                                _PIE1bits 000F9D                         i2_TMR0_StartTimer 30D8  
     __size_of_INTERRUPT_InterruptManager 00A8                                  i2u312_40 23E6  
                                i2u312_45 23DE                                  i2u400_48 15CC  
                                i2u410_44 1F26                                  i2u410_45 1F22  
                                i2u330_48 072A                                  i2u411_44 1F44  
                                i2u403_44 1E48                                  i2u411_45 1F40  
                                i2u403_45 1E44                                  i2u412_44 1F86  
                                i2u404_44 1E66                                  i2u412_45 1F82  
                                i2u404_45 1E62                ??_TMR0_SetInterruptHandler 0102  
                                i2u413_44 1FC4                                  i2u405_44 1E84  
                                i2u413_45 1FC0                                  i2u405_45 1E80  
                                i2u406_44 1EA2                                  i2u406_45 1E9E  
                                i2u407_44 1EC0                                  i2u407_45 1EBC  
                                i2u424_40 2D3A                                  i2u408_44 1EEA  
                                i2u408_45 1EE6                                  i2u424_46 2D3C  
                                i2u440_48 2E8E                                  _PIR1bits 000F9E  
                                i2u409_44 1F08                                  i2u409_45 1F04  
                      __end_of__div_to_l_ 239C                                  i2u361_48 0E4E  
                                i2u339_40 098A                                  i2u442_48 2EEE  
                                i2u339_45 0980                                  i2u371_48 10B4  
                                i2u355_48 0CCE                                  i2u460_47 2FD6  
                                i2u364_48 0EBC                                  i2u461_47 2D84  
                                i2u366_40 0F2E                                  i2u462_47 2D96  
                                i2u374_48 117C                                  i2u359_48 0D66  
                                i2u369_48 0F7C                                  i2u394_48 146C  
                                i2u398_48 14FC                             ??_TMR0_Reload 0001  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                      ?i2_TMR0_StartTimer 0001                     ??_lcd_sendStringToPos 000C  
                                _TMR0_ISR 2ED4                                  _TMR1_ISR 2E72  
                                _RSET_BIT 068B                                ?_lcd_clear 0001  
                TMR0_ReadTimer@readValLow 0009                         ??_TMR1_Initialize 0102  
                     ??i2_TMR0_StartTimer 0001                         ___wmul@multiplier 000F  
                         _lcd_sendCommand 2F30                               _INTCON2bits 000FF1  
                             _INTCON3bits 000FF0                     ?_INTERRUPT_Initialize 0001  
               __end_ofi2_TMR0_StartTimer 30DC                                  _SetRange 1E2C  
                                __Hrparam 0000                                  __Lrparam 0000  
                         _lcd_setPosition 2B3C                        __CFG_BOREN$SBORDIS 000000  
                       __CFG_P2BMX$PORTB5 000000                   ??_OSCILLATOR_Initialize 0100  
                       ??_TMR0_StartTimer 0100                          __size_of___awdiv 0084  
                        __size_of___ftadd 01AC                          __size_of___awmod 0070  
                        __size_of___ftdiv 00E6                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                          __size_of___ftmul 00F4  
                        __size_of___llmod 0066                          __size_of___ftsub 0040  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 0016  
                                ___ftpack 274E                          __size_of__doprnt 0F54  
                             _fround$1970 0027                               _fround$1969 002A  
                                ___lltoft 2AE0                  _TMR1_SetInterruptHandler 30A4  
                     __end_of_TMR0_Reload 30CC                                  ___lwtoft 2FA0  
                   _TMR1_InterruptHandler 00BE                                  _cal_mode 005E  
                        __size_of_isdigit 001E                                  __ptext10 30D0  
                                __ptext11 30AE                                  __ptext20 2C68  
                                __ptext12 2EA4                                  __ptext21 303E  
                                __ptext13 307C                                _T1GCONbits 000FCC  
                                __ptext30 2DD6                                  __ptext22 2B3C  
                                __ptext14 30D4                                  __ptext31 06F6  
                                __ptext23 2FC4                                  __ptext15 308A  
                                __ptext40 2274                                  __ptext32 164A  
                                __ptext24 2E0C                                  __ptext16 3058  
                                __ptext41 2AE0                                  __ptext33 30B8  
                                __ptext25 2D68                                  __ptext50 2F56  
                                __ptext42 2A7A                                  __ptext34 3098  
                                __ptext26 2F04                                  __ptext18 2E72  
                                __ptext51 2FA0                                  __ptext43 2910  
                                __ptext35 3020                                  __ptext27 2ED4  
                                __ptext19 1FD0                                  __ptext60 0000  
                                __ptext52 2490                                  __ptext44 239C  
                                __ptext36 1A3A                                  __ptext28 2D2C  
                                __ptext53 2584                                  __ptext45 2CEC  
                                __ptext37 2A0A                                  __ptext29 2BD8  
                                __ptext54 1C80                                  __ptext46 2F7C  
                                __ptext38 288C                                  __ptext55 274E  
                                __ptext47 27FC                                  __ptext39 2142  
                                __ptext56 30DC                                  __ptext48 266A  
                                __ptext57 30C2                                  __ptext49 30D8  
                                __ptext58 2CAA                                  __ptext59 1E2C  
                                __powers_ 0650                             ??i2__lcd_Port 0001  
                                _lcd_init 2992                               ??__lcd_Port 0100  
                       ??_TMR1_StartTimer 0100                          __size_of_sprintf 0042  
                           __size_of_main 001E                          ??_TMR0_ReadTimer 0003  
    __end_of_TMR0_DefaultInterruptHandler 2D68     __size_of_TMR0_DefaultInterruptHandler 003C  
            _TMR0_DefaultInterruptHandler 2D2C                                  int$flags 005F  
      __end_of_INTERRUPT_InterruptManager 00B0                _INTERRUPT_InterruptManager 0008  
                             ??_lcd_clear 0103                            __doprnt@tmpval 006D  
                 __end_of_lcd_sendCommand 2F56                                _INTCONbits 000FF2  
                          _lcd_sendString 2E0C                                  isdigit@c 0003  
                  ??_INTERRUPT_Initialize 0100                                  scale@scl 002A  
                      _EXT_INT_Initialize 308A                                  intlevel2 0000  
                               sprintf@ap 0054                                 sprintf@pb 0056  
                        ??_TMR0_StopTimer 0001                          __tdiv_to_l_@exp1 000F  
                               sprintf@wh 004C                          __tdiv_to_l_@cntr 000E  
                        __tdiv_to_l_@quot 000A                   __end_of_lcd_setPosition 2B8C  
                        ___lldiv@dividend 0001                   ?_PIN_MANAGER_Initialize 0001  
              __size_ofi2_TMR0_StartTimer 0004                       ?_EXT_INT_Initialize 0001  
                              _RCSTA1bits 000FAB                       __end_ofi2__lcd_Port 2F30  
           ?_TMR0_DefaultInterruptHandler 0001                       lcd_setPosition@temp 0008  
                             _TMR0_Reload 30C2                                  printf@ap 0050  
                                printf@pb 0052                    __size_of_EUSART1_Write 000C  
                            ?__tdiv_to_l_ 0001                    __end_of_lcd_sendString 2E40  
                    ??_EXT_INT_Initialize 0100                                  sprintf@f 004E  
                        ___lldiv@quotient 0009                           _TMR0_Initialize 2C24  
                       __CFG_T3CMX$PORTC0 000000            __end_of_PIN_MANAGER_Initialize 2ED4  
                         _TMR1_Initialize 2E40  
